
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004444  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800465c  0800465c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  080046d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080046d4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9bf  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002081  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019504  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b2a  00000000  00000000  0004ab74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910b0  00000000  00000000  0005b69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043e0  00000000  00000000  000ec7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004538 	.word	0x08004538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004538 	.word	0x08004538

0800014c <home_pos_drive>:
static ADC_HandleTypeDef hadc1;

volatile uint16_t adc_result[3];
uint8_t adc_conv_complete_flag = 0;

int home_pos_drive(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//TODO Homing the Position drive
	return EXIT_SUCCESS;
 8000150:	2300      	movs	r3, #0
}
 8000152:	4618      	mov	r0, r3
 8000154:	46bd      	mov	sp, r7
 8000156:	bc80      	pop	{r7}
 8000158:	4770      	bx	lr
	...

0800015c <pgm_stop>:

void pgm_stop(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	htim1.Instance = TIM1;
 8000160:	4b06      	ldr	r3, [pc, #24]	; (800017c <pgm_stop+0x20>)
 8000162:	4a07      	ldr	r2, [pc, #28]	; (8000180 <pgm_stop+0x24>)
 8000164:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000166:	2100      	movs	r1, #0
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <pgm_stop+0x20>)
 800016a:	f002 fc67 	bl	8002a3c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800016e:	2104      	movs	r1, #4
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <pgm_stop+0x20>)
 8000172:	f002 fc63 	bl	8002a3c <HAL_TIM_PWM_Stop>

	return;
 8000176:	bf00      	nop
}
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c
 8000180:	40012c00 	.word	0x40012c00

08000184 <pgm_manual>:

void pgm_manual(void){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0

	hadc1.Instance = ADC1;
 800018a:	4b23      	ldr	r3, [pc, #140]	; (8000218 <pgm_manual+0x94>)
 800018c:	4a23      	ldr	r2, [pc, #140]	; (800021c <pgm_manual+0x98>)
 800018e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000190:	2300      	movs	r3, #0
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	e015      	b.n	80001c2 <pgm_manual+0x3e>
		printf("Start\n");
 8000196:	4822      	ldr	r0, [pc, #136]	; (8000220 <pgm_manual+0x9c>)
 8000198:	f003 fa4a 	bl	8003630 <puts>
		HAL_ADC_Start(&hadc1);
 800019c:	481e      	ldr	r0, [pc, #120]	; (8000218 <pgm_manual+0x94>)
 800019e:	f000 fe57 	bl	8000e50 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 80001a2:	2101      	movs	r1, #1
 80001a4:	481c      	ldr	r0, [pc, #112]	; (8000218 <pgm_manual+0x94>)
 80001a6:	f000 ff01 	bl	8000fac <HAL_ADC_PollForConversion>
		adc_result[i] = HAL_ADC_GetValue(&hadc1);
 80001aa:	481b      	ldr	r0, [pc, #108]	; (8000218 <pgm_manual+0x94>)
 80001ac:	f001 f804 	bl	80011b8 <HAL_ADC_GetValue>
 80001b0:	4603      	mov	r3, r0
 80001b2:	b299      	uxth	r1, r3
 80001b4:	4a1b      	ldr	r2, [pc, #108]	; (8000224 <pgm_manual+0xa0>)
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 3; i++){
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	3301      	adds	r3, #1
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	dde6      	ble.n	8000196 <pgm_manual+0x12>
	}

	uint16_t speed = adc_result[0];
 80001c8:	4b16      	ldr	r3, [pc, #88]	; (8000224 <pgm_manual+0xa0>)
 80001ca:	881b      	ldrh	r3, [r3, #0]
 80001cc:	817b      	strh	r3, [r7, #10]
	uint16_t spin = adc_result[1];
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <pgm_manual+0xa0>)
 80001d0:	885b      	ldrh	r3, [r3, #2]
 80001d2:	813b      	strh	r3, [r7, #8]
	uint16_t angle = adc_result[2];
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <pgm_manual+0xa0>)
 80001d6:	889b      	ldrh	r3, [r3, #4]
 80001d8:	80fb      	strh	r3, [r7, #6]

	printf("speed: %d \n", speed);
 80001da:	897b      	ldrh	r3, [r7, #10]
 80001dc:	4619      	mov	r1, r3
 80001de:	4812      	ldr	r0, [pc, #72]	; (8000228 <pgm_manual+0xa4>)
 80001e0:	f003 f9a0 	bl	8003524 <iprintf>
	printf("spin: %d \n", spin);
 80001e4:	893b      	ldrh	r3, [r7, #8]
 80001e6:	4619      	mov	r1, r3
 80001e8:	4810      	ldr	r0, [pc, #64]	; (800022c <pgm_manual+0xa8>)
 80001ea:	f003 f99b 	bl	8003524 <iprintf>
	printf("angle: %d \n", angle);
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	4619      	mov	r1, r3
 80001f2:	480f      	ldr	r0, [pc, #60]	; (8000230 <pgm_manual+0xac>)
 80001f4:	f003 f996 	bl	8003524 <iprintf>

	htim1.Instance = TIM1;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <pgm_manual+0xb0>)
 80001fa:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <pgm_manual+0xb4>)
 80001fc:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001fe:	2100      	movs	r1, #0
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <pgm_manual+0xb0>)
 8000202:	f002 fb79 	bl	80028f8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000206:	2104      	movs	r1, #4
 8000208:	480a      	ldr	r0, [pc, #40]	; (8000234 <pgm_manual+0xb0>)
 800020a:	f002 fb75 	bl	80028f8 <HAL_TIM_PWM_Start>

	return;
 800020e:	bf00      	nop
}
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	200000d4 	.word	0x200000d4
 800021c:	40012400 	.word	0x40012400
 8000220:	08004550 	.word	0x08004550
 8000224:	20000104 	.word	0x20000104
 8000228:	08004558 	.word	0x08004558
 800022c:	08004564 	.word	0x08004564
 8000230:	08004570 	.word	0x08004570
 8000234:	2000008c 	.word	0x2000008c
 8000238:	40012c00 	.word	0x40012c00

0800023c <pgm_auto_speed>:

void pgm_auto_speed(void){
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	//TODO: generate random values for speed, set outputs

	return;
 8000240:	bf00      	nop
}
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <pgm_auto>:

void pgm_auto(void){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	//TODO: generate random values for all, set outputs

	return;
 800024c:	bf00      	nop
}
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800025c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000260:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d013      	beq.n	8000294 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800026c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000270:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000274:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00b      	beq.n	8000294 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800027c:	e000      	b.n	8000280 <ITM_SendChar+0x2c>
    {
      __NOP();
 800027e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000280:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800028a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 fc99 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f865 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f9ed 	bl	800068c <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b2:	f000 f8b1 	bl	8000418 <MX_ADC1_Init>
  MX_I2C2_Init();
 80002b6:	f000 f90d 	bl	80004d4 <MX_I2C2_Init>
  MX_TIM1_Init();
 80002ba:	f000 f939 	bl	8000530 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  bool homing_complete = false;
 80002be:	2300      	movs	r3, #0
 80002c0:	71fb      	strb	r3, [r7, #7]
  uint8_t pgm_state = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(!homing_complete){
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f083 0301 	eor.w	r3, r3, #1
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <main+0x3a>
		home_pos_drive();
 80002d2:	f7ff ff3b 	bl	800014c <home_pos_drive>
		homing_complete = true;
 80002d6:	2301      	movs	r3, #1
 80002d8:	71fb      	strb	r3, [r7, #7]
	}

	pgm_state = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	71bb      	strb	r3, [r7, #6]

	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 80002de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e2:	4823      	ldr	r0, [pc, #140]	; (8000370 <main+0xd0>)
 80002e4:	f001 fb70 	bl	80019c8 <HAL_GPIO_ReadPin>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	bf0c      	ite	eq
 80002ee:	2301      	moveq	r3, #1
 80002f0:	2300      	movne	r3, #0
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 80002f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fa:	481d      	ldr	r0, [pc, #116]	; (8000370 <main+0xd0>)
 80002fc:	f001 fb64 	bl	80019c8 <HAL_GPIO_ReadPin>
 8000300:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <main+0x6a>
 8000306:	2302      	movs	r3, #2
 8000308:	e000      	b.n	800030c <main+0x6c>
 800030a:	2300      	movs	r3, #0
 800030c:	4323      	orrs	r3, r4
 800030e:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 8000310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000314:	4816      	ldr	r0, [pc, #88]	; (8000370 <main+0xd0>)
 8000316:	f001 fb57 	bl	80019c8 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 800031c:	2b00      	cmp	r3, #0
 800031e:	d101      	bne.n	8000324 <main+0x84>
 8000320:	2304      	movs	r3, #4
 8000322:	e000      	b.n	8000326 <main+0x86>
 8000324:	2300      	movs	r3, #0
 8000326:	4323      	orrs	r3, r4
 8000328:	b25b      	sxtb	r3, r3
	pgm_state =
 800032a:	71bb      	strb	r3, [r7, #6]

	printf("TEST\n");
 800032c:	4811      	ldr	r0, [pc, #68]	; (8000374 <main+0xd4>)
 800032e:	f003 f97f 	bl	8003630 <puts>

	switch(pgm_state){
 8000332:	79bb      	ldrb	r3, [r7, #6]
 8000334:	2b04      	cmp	r3, #4
 8000336:	d8c6      	bhi.n	80002c6 <main+0x26>
 8000338:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <main+0xa0>)
 800033a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033e:	bf00      	nop
 8000340:	08000355 	.word	0x08000355
 8000344:	0800035b 	.word	0x0800035b
 8000348:	08000361 	.word	0x08000361
 800034c:	080002c7 	.word	0x080002c7
 8000350:	08000367 	.word	0x08000367
	case 0:
		pgm_stop();
 8000354:	f7ff ff02 	bl	800015c <pgm_stop>
		break;
 8000358:	e008      	b.n	800036c <main+0xcc>
	case 1:
		pgm_manual();
 800035a:	f7ff ff13 	bl	8000184 <pgm_manual>
		break;
 800035e:	e005      	b.n	800036c <main+0xcc>
	case 2:
		pgm_auto_speed();
 8000360:	f7ff ff6c 	bl	800023c <pgm_auto_speed>
		break;
 8000364:	e002      	b.n	800036c <main+0xcc>
	case 4:
		pgm_auto();
 8000366:	f7ff ff6f 	bl	8000248 <pgm_auto>
		break;
 800036a:	bf00      	nop
	if(!homing_complete){
 800036c:	e7ab      	b.n	80002c6 <main+0x26>
 800036e:	bf00      	nop
 8000370:	40011000 	.word	0x40011000
 8000374:	0800457c 	.word	0x0800457c

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b094      	sub	sp, #80	; 0x50
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 f8c4 	bl	8003514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2310      	movs	r3, #16
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 fc77 	bl	8001cb0 <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003c8:	f000 fa2c 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003cc:	230f      	movs	r3, #15
 80003ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fee4 	bl	80021b4 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003f2:	f000 fa17 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003f6:	2302      	movs	r3, #2
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f002 f865 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800040c:	f000 fa0a 	bl	8000824 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3750      	adds	r7, #80	; 0x50
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_ADC1_Init+0xb4>)
 800042a:	4a29      	ldr	r2, [pc, #164]	; (80004d0 <MX_ADC1_Init+0xb8>)
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <MX_ADC1_Init+0xb4>)
 8000430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000434:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_ADC1_Init+0xb4>)
 8000438:	2200      	movs	r2, #0
 800043a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_ADC1_Init+0xb4>)
 800043e:	2201      	movs	r2, #1
 8000440:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_ADC1_Init+0xb4>)
 8000444:	2201      	movs	r2, #1
 8000446:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <MX_ADC1_Init+0xb4>)
 800044a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800044e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <MX_ADC1_Init+0xb4>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000456:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_ADC1_Init+0xb4>)
 8000458:	2203      	movs	r2, #3
 800045a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800045c:	481b      	ldr	r0, [pc, #108]	; (80004cc <MX_ADC1_Init+0xb4>)
 800045e:	f000 fc1f 	bl	8000ca0 <HAL_ADC_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000468:	f000 f9dc 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800046c:	230a      	movs	r3, #10
 800046e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000470:	2301      	movs	r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000474:	2300      	movs	r3, #0
 8000476:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	4619      	mov	r1, r3
 800047c:	4813      	ldr	r0, [pc, #76]	; (80004cc <MX_ADC1_Init+0xb4>)
 800047e:	f000 fea7 	bl	80011d0 <HAL_ADC_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000488:	f000 f9cc 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800048c:	230b      	movs	r3, #11
 800048e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000490:	2302      	movs	r3, #2
 8000492:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_ADC1_Init+0xb4>)
 800049a:	f000 fe99 	bl	80011d0 <HAL_ADC_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80004a4:	f000 f9be 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80004a8:	230c      	movs	r3, #12
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80004ac:	2303      	movs	r3, #3
 80004ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_ADC1_Init+0xb4>)
 80004b6:	f000 fe8b 	bl	80011d0 <HAL_ADC_ConfigChannel>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80004c0:	f000 f9b0 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000010c 	.word	0x2000010c
 80004d0:	40012400 	.word	0x40012400

080004d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MX_I2C2_Init+0x50>)
 80004da:	4a13      	ldr	r2, [pc, #76]	; (8000528 <MX_I2C2_Init+0x54>)
 80004dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <MX_I2C2_Init+0x50>)
 80004e0:	4a12      	ldr	r2, [pc, #72]	; (800052c <MX_I2C2_Init+0x58>)
 80004e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MX_I2C2_Init+0x50>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <MX_I2C2_Init+0x50>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_I2C2_Init+0x50>)
 80004f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <MX_I2C2_Init+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_I2C2_Init+0x50>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <MX_I2C2_Init+0x50>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_I2C2_Init+0x50>)
 800050c:	2200      	movs	r2, #0
 800050e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_I2C2_Init+0x50>)
 8000512:	f001 fa89 	bl	8001a28 <HAL_I2C_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800051c:	f000 f982 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2000013c 	.word	0x2000013c
 8000528:	40005800 	.word	0x40005800
 800052c:	000186a0 	.word	0x000186a0

08000530 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000536:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000544:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800054e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
 800055e:	615a      	str	r2, [r3, #20]
 8000560:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2220      	movs	r2, #32
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f002 ffd3 	bl	8003514 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800056e:	4b45      	ldr	r3, [pc, #276]	; (8000684 <MX_TIM1_Init+0x154>)
 8000570:	4a45      	ldr	r2, [pc, #276]	; (8000688 <MX_TIM1_Init+0x158>)
 8000572:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8000574:	4b43      	ldr	r3, [pc, #268]	; (8000684 <MX_TIM1_Init+0x154>)
 8000576:	2264      	movs	r2, #100	; 0x64
 8000578:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057a:	4b42      	ldr	r3, [pc, #264]	; (8000684 <MX_TIM1_Init+0x154>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000580:	4b40      	ldr	r3, [pc, #256]	; (8000684 <MX_TIM1_Init+0x154>)
 8000582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000586:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000588:	4b3e      	ldr	r3, [pc, #248]	; (8000684 <MX_TIM1_Init+0x154>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800058e:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <MX_TIM1_Init+0x154>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000594:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <MX_TIM1_Init+0x154>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800059a:	483a      	ldr	r0, [pc, #232]	; (8000684 <MX_TIM1_Init+0x154>)
 800059c:	f002 f904 	bl	80027a8 <HAL_TIM_Base_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80005a6:	f000 f93d 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005b4:	4619      	mov	r1, r3
 80005b6:	4833      	ldr	r0, [pc, #204]	; (8000684 <MX_TIM1_Init+0x154>)
 80005b8:	f002 fb66 	bl	8002c88 <HAL_TIM_ConfigClockSource>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005c2:	f000 f92f 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005c6:	482f      	ldr	r0, [pc, #188]	; (8000684 <MX_TIM1_Init+0x154>)
 80005c8:	f002 f93d 	bl	8002846 <HAL_TIM_PWM_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80005d2:	f000 f927 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005d6:	2300      	movs	r3, #0
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e2:	4619      	mov	r1, r3
 80005e4:	4827      	ldr	r0, [pc, #156]	; (8000684 <MX_TIM1_Init+0x154>)
 80005e6:	f002 febb 	bl	8003360 <HAL_TIMEx_MasterConfigSynchronization>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f918 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 32768;
 80005f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005fe:	2300      	movs	r3, #0
 8000600:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000602:	2300      	movs	r3, #0
 8000604:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800060a:	2300      	movs	r3, #0
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	2200      	movs	r2, #0
 8000618:	4619      	mov	r1, r3
 800061a:	481a      	ldr	r0, [pc, #104]	; (8000684 <MX_TIM1_Init+0x154>)
 800061c:	f002 fa72 	bl	8002b04 <HAL_TIM_PWM_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000626:	f000 f8fd 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	2204      	movs	r2, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_TIM1_Init+0x154>)
 8000634:	f002 fa66 	bl	8002b04 <HAL_TIM_PWM_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800063e:	f000 f8f1 	bl	8000824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <MX_TIM1_Init+0x154>)
 8000666:	f002 fed9 	bl	800341c <HAL_TIMEx_ConfigBreakDeadTime>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000670:	f000 f8d8 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <MX_TIM1_Init+0x154>)
 8000676:	f000 f9a7 	bl	80009c8 <HAL_TIM_MspPostInit>

}
 800067a:	bf00      	nop
 800067c:	3758      	adds	r7, #88	; 0x58
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000190 	.word	0x20000190
 8000688:	40012c00 	.word	0x40012c00

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a4c      	ldr	r2, [pc, #304]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b47      	ldr	r3, [pc, #284]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a46      	ldr	r2, [pc, #280]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a40      	ldr	r2, [pc, #256]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <MX_GPIO_Init+0x14c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POS_PULSE_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f641 0182 	movw	r1, #6274	; 0x1882
 80006ee:	483b      	ldr	r0, [pc, #236]	; (80007dc <MX_GPIO_Init+0x150>)
 80006f0:	f001 f981 	bl	80019f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	4839      	ldr	r0, [pc, #228]	; (80007e0 <MX_GPIO_Init+0x154>)
 80006fc:	f001 f97b 	bl	80019f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POS_DIR_Pin|TDRV_DIR_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000706:	4837      	ldr	r0, [pc, #220]	; (80007e4 <MX_GPIO_Init+0x158>)
 8000708:	f001 f975 	bl	80019f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : POS_PULSE_Pin */
  GPIO_InitStruct.Pin = POS_PULSE_Pin;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000710:	2301      	movs	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POS_PULSE_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	482e      	ldr	r0, [pc, #184]	; (80007dc <MX_GPIO_Init+0x150>)
 8000724:	f000 ffcc 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8000728:	2310      	movs	r3, #16
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4828      	ldr	r0, [pc, #160]	; (80007dc <MX_GPIO_Init+0x150>)
 800073c:	f000 ffc0 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8000740:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2302      	movs	r3, #2
 8000750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <MX_GPIO_Init+0x150>)
 800075a:	f000 ffb1 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 800075e:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 8000762:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	481b      	ldr	r0, [pc, #108]	; (80007e0 <MX_GPIO_Init+0x154>)
 8000774:	f000 ffa4 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_2_Pin Input_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin|Input_2_Pin;
 8000778:	f240 2301 	movw	r3, #513	; 0x201
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <MX_GPIO_Init+0x158>)
 800078e:	f000 ff97 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 8000792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2302      	movs	r3, #2
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_GPIO_Init+0x154>)
 80007ac:	f000 ff88 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POS_DIR_Pin TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = POS_DIR_Pin|TDRV_DIR_Pin;
 80007b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2302      	movs	r3, #2
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	4806      	ldr	r0, [pc, #24]	; (80007e4 <MX_GPIO_Init+0x158>)
 80007ca:	f000 ff79 	bl	80016c0 <HAL_GPIO_Init>

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	40011000 	.word	0x40011000
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here. This is
     used by puts and printf for example */
  int i=0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	e009      	b.n	8000812 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	60ba      	str	r2, [r7, #8]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fd24 	bl	8000254 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	dbf1      	blt.n	80007fe <_write+0x16>
  return len;
 800081a:	687b      	ldr	r3, [r7, #4]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x5c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x60>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_MspInit+0x60>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_ADC_MspInit+0x6c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d121      	bne.n	80008f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 80008e4:	2307      	movs	r3, #7
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_ADC_MspInit+0x74>)
 80008f4:	f000 fee4 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40012400 	.word	0x40012400
 8000904:	40021000 	.word	0x40021000
 8000908:	40011000 	.word	0x40011000

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <HAL_I2C_MspInit+0x74>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d124      	bne.n	8000976 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_I2C_MspInit+0x78>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_I2C_MspInit+0x78>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_I2C_MspInit+0x78>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000944:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	2312      	movs	r3, #18
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4619      	mov	r1, r3
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <HAL_I2C_MspInit+0x7c>)
 800095a:	f000 feb1 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_I2C_MspInit+0x78>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_I2C_MspInit+0x78>)
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_I2C_MspInit+0x78>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40005800 	.word	0x40005800
 8000984:	40021000 	.word	0x40021000
 8000988:	40010c00 	.word	0x40010c00

0800098c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_TIM_Base_MspInit+0x34>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d10b      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_Base_MspInit+0x38>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_TIM_Base_MspInit+0x38>)
 80009a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_TIM_Base_MspInit+0x38>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_TIM_MspPostInit+0x5c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d118      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_TIM_MspPostInit+0x60>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 8000a00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_TIM_MspPostInit+0x64>)
 8000a16:	f000 fe53 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f8f7 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e00a      	b.n	8000aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a90:	f3af 8000 	nop.w
 8000a94:	4601      	mov	r1, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf0      	blt.n	8000a90 <_read+0x12>
  }

  return len;
 8000aae:	687b      	ldr	r3, [r7, #4]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr

08000ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ade:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <_isatty>:

int _isatty(int file)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f002 fcba 	bl	80034c0 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20005000 	.word	0x20005000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	200001f0 	.word	0x200001f0

08000b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff fff8 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b96:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bac:	4c09      	ldr	r4, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 fc87 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fb6f 	bl	80002a0 <main>
  bx lr
 8000bc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	08004664 	.word	0x08004664
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	200001f0 	.word	0x200001f0

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 fd33 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe1a 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fd3d 	bl	80016a6 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 fd13 	bl	800166e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x20>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200001dc 	.word	0x200001dc

08000c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_GetTick+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	200001dc 	.word	0x200001dc

08000ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0be      	b.n	8000e40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fdd8 	bl	8000894 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fbc5 	bl	8001474 <ADC_ConversionStop_Disable>
 8000cea:	4603      	mov	r3, r0
 8000cec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8099 	bne.w	8000e2e <HAL_ADC_Init+0x18e>
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8095 	bne.w	8000e2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d0c:	f023 0302 	bic.w	r3, r3, #2
 8000d10:	f043 0202 	orr.w	r2, r3, #2
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b1b      	ldrb	r3, [r3, #12]
 8000d26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d38:	d003      	beq.n	8000d42 <HAL_ADC_Init+0xa2>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_ADC_Init+0xa8>
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	e000      	b.n	8000d4a <HAL_ADC_Init+0xaa>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7d1b      	ldrb	r3, [r3, #20]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d119      	bne.n	8000d8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7b1b      	ldrb	r3, [r3, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	035a      	lsls	r2, r3, #13
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e00b      	b.n	8000d8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f043 0220 	orr.w	r2, r3, #32
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_ADC_Init+0x1a8>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dbc:	d003      	beq.n	8000dc6 <HAL_ADC_Init+0x126>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d104      	bne.n	8000dd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	051b      	lsls	r3, r3, #20
 8000dce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_ADC_Init+0x1ac>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d10b      	bne.n	8000e0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0a:	e018      	b.n	8000e3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f023 0312 	bic.w	r3, r3, #18
 8000e14:	f043 0210 	orr.w	r2, r3, #16
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e2c:	e007      	b.n	8000e3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f043 0210 	orr.w	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	ffe1f7fd 	.word	0xffe1f7fd
 8000e4c:	ff1f0efe 	.word	0xff1f0efe

08000e50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_ADC_Start+0x1a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e098      	b.n	8000f9c <HAL_ADC_Start+0x14c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 faa4 	bl	80013c0 <ADC_Enable>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8087 	bne.w	8000f92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d105      	bne.n	8000eae <HAL_ADC_Start+0x5e>
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d115      	bne.n	8000eda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d026      	beq.n	8000f16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed8:	e01d      	b.n	8000f16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d004      	beq.n	8000efa <HAL_ADC_Start+0xaa>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10d      	bne.n	8000f16 <HAL_ADC_Start+0xc6>
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	f023 0206 	bic.w	r2, r3, #6
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2e:	e002      	b.n	8000f36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f06f 0202 	mvn.w	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f56:	d113      	bne.n	8000f80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d105      	bne.n	8000f6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d108      	bne.n	8000f80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	e00c      	b.n	8000f9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	e003      	b.n	8000f9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40012800 	.word	0x40012800
 8000fa8:	40012400 	.word	0x40012400

08000fac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fc2:	f7ff fe63 	bl	8000c8c <HAL_GetTick>
 8000fc6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fda:	f043 0220 	orr.w	r2, r3, #32
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0d3      	b.n	8001196 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d131      	bne.n	8001060 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d12a      	bne.n	8001060 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800100a:	e021      	b.n	8001050 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001012:	d01d      	beq.n	8001050 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d007      	beq.n	800102a <HAL_ADC_PollForConversion+0x7e>
 800101a:	f7ff fe37 	bl	8000c8c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d212      	bcs.n	8001050 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10b      	bne.n	8001050 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f043 0204 	orr.w	r2, r3, #4
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e0a2      	b.n	8001196 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0d6      	beq.n	800100c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800105e:	e070      	b.n	8001142 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001060:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <HAL_ADC_PollForConversion+0x1f4>)
 8001062:	681c      	ldr	r4, [r3, #0]
 8001064:	2002      	movs	r0, #2
 8001066:	f001 fae9 	bl	800263c <HAL_RCCEx_GetPeriphCLKFreq>
 800106a:	4603      	mov	r3, r0
 800106c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6919      	ldr	r1, [r3, #16]
 8001076:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_ADC_PollForConversion+0x1f8>)
 8001078:	400b      	ands	r3, r1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d118      	bne.n	80010b0 <HAL_ADC_PollForConversion+0x104>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68d9      	ldr	r1, [r3, #12]
 8001084:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <HAL_ADC_PollForConversion+0x1fc>)
 8001086:	400b      	ands	r3, r1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d111      	bne.n	80010b0 <HAL_ADC_PollForConversion+0x104>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6919      	ldr	r1, [r3, #16]
 8001092:	4b46      	ldr	r3, [pc, #280]	; (80011ac <HAL_ADC_PollForConversion+0x200>)
 8001094:	400b      	ands	r3, r1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d108      	bne.n	80010ac <HAL_ADC_PollForConversion+0x100>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68d9      	ldr	r1, [r3, #12]
 80010a0:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <HAL_ADC_PollForConversion+0x204>)
 80010a2:	400b      	ands	r3, r1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_PollForConversion+0x100>
 80010a8:	2314      	movs	r3, #20
 80010aa:	e020      	b.n	80010ee <HAL_ADC_PollForConversion+0x142>
 80010ac:	2329      	movs	r3, #41	; 0x29
 80010ae:	e01e      	b.n	80010ee <HAL_ADC_PollForConversion+0x142>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6919      	ldr	r1, [r3, #16]
 80010b6:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <HAL_ADC_PollForConversion+0x200>)
 80010b8:	400b      	ands	r3, r1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <HAL_ADC_PollForConversion+0x120>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68d9      	ldr	r1, [r3, #12]
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_ADC_PollForConversion+0x204>)
 80010c6:	400b      	ands	r3, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00d      	beq.n	80010e8 <HAL_ADC_PollForConversion+0x13c>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6919      	ldr	r1, [r3, #16]
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <HAL_ADC_PollForConversion+0x208>)
 80010d4:	400b      	ands	r3, r1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d108      	bne.n	80010ec <HAL_ADC_PollForConversion+0x140>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68d9      	ldr	r1, [r3, #12]
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_ADC_PollForConversion+0x208>)
 80010e2:	400b      	ands	r3, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_ADC_PollForConversion+0x140>
 80010e8:	2354      	movs	r3, #84	; 0x54
 80010ea:	e000      	b.n	80010ee <HAL_ADC_PollForConversion+0x142>
 80010ec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f4:	e021      	b.n	800113a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d01a      	beq.n	8001134 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_ADC_PollForConversion+0x168>
 8001104:	f7ff fdc2 	bl	8000c8c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d20f      	bcs.n	8001134 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d90b      	bls.n	8001134 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f043 0204 	orr.w	r2, r3, #4
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e030      	b.n	8001196 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	429a      	cmp	r2, r3
 8001140:	d8d9      	bhi.n	80010f6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f06f 0212 	mvn.w	r2, #18
 800114a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001162:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001166:	d115      	bne.n	8001194 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800116c:	2b00      	cmp	r3, #0
 800116e:	d111      	bne.n	8001194 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000000 	.word	0x20000000
 80011a4:	24924924 	.word	0x24924924
 80011a8:	00924924 	.word	0x00924924
 80011ac:	12492492 	.word	0x12492492
 80011b0:	00492492 	.word	0x00492492
 80011b4:	00249249 	.word	0x00249249

080011b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_ADC_ConfigChannel+0x20>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e0dc      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1da>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d81c      	bhi.n	800123a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	3b05      	subs	r3, #5
 8001212:	221f      	movs	r2, #31
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	4019      	ands	r1, r3
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	fa00 f203 	lsl.w	r2, r0, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
 8001238:	e03c      	b.n	80012b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d81c      	bhi.n	800127c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b23      	subs	r3, #35	; 0x23
 8001254:	221f      	movs	r2, #31
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	4019      	ands	r1, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	3b23      	subs	r3, #35	; 0x23
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	631a      	str	r2, [r3, #48]	; 0x30
 800127a:	e01b      	b.n	80012b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b41      	subs	r3, #65	; 0x41
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b41      	subs	r3, #65	; 0x41
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d91c      	bls.n	80012f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68d9      	ldr	r1, [r3, #12]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	3b1e      	subs	r3, #30
 80012ce:	2207      	movs	r2, #7
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4019      	ands	r1, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6898      	ldr	r0, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	3b1e      	subs	r3, #30
 80012e8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	e019      	b.n	800132a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6919      	ldr	r1, [r3, #16]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6898      	ldr	r0, [r3, #8]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	fa00 f203 	lsl.w	r2, r0, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d003      	beq.n	800133a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001336:	2b11      	cmp	r3, #17
 8001338:	d132      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d125      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d126      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001360:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b10      	cmp	r3, #16
 8001368:	d11a      	bne.n	80013a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9a      	lsrs	r2, r3, #18
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001380:	e002      	b.n	8001388 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3b01      	subs	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x1b2>
 800138e:	e007      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f043 0220 	orr.w	r2, r3, #32
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40012400 	.word	0x40012400
 80013b8:	20000000 	.word	0x20000000
 80013bc:	431bde83 	.word	0x431bde83

080013c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d040      	beq.n	8001460 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <ADC_Enable+0xac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <ADC_Enable+0xb0>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013fc:	e002      	b.n	8001404 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800140a:	f7ff fc3f 	bl	8000c8c <HAL_GetTick>
 800140e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001410:	e01f      	b.n	8001452 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001412:	f7ff fc3b 	bl	8000c8c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d918      	bls.n	8001452 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b01      	cmp	r3, #1
 800142c:	d011      	beq.n	8001452 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	f043 0210 	orr.w	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e007      	b.n	8001462 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d1d8      	bne.n	8001412 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b01      	cmp	r3, #1
 800148c:	d12e      	bne.n	80014ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800149e:	f7ff fbf5 	bl	8000c8c <HAL_GetTick>
 80014a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014a4:	e01b      	b.n	80014de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014a6:	f7ff fbf1 	bl	8000c8c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d914      	bls.n	80014de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10d      	bne.n	80014de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e007      	b.n	80014ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d0dc      	beq.n	80014a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <__NVIC_SetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <__NVIC_SetPriorityGrouping+0x44>)
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	60d3      	str	r3, [r2, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_GetPriorityGrouping>:
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_SetPriority>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db0a      	blt.n	8001586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	490c      	ldr	r1, [pc, #48]	; (80015a8 <__NVIC_SetPriority+0x4c>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	0112      	lsls	r2, r2, #4
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	440b      	add	r3, r1
 8001580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001584:	e00a      	b.n	800159c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4908      	ldr	r1, [pc, #32]	; (80015ac <__NVIC_SetPriority+0x50>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	3b04      	subs	r3, #4
 8001594:	0112      	lsls	r2, r2, #4
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	440b      	add	r3, r1
 800159a:	761a      	strb	r2, [r3, #24]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <NVIC_EncodePriority>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b089      	sub	sp, #36	; 0x24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f1c3 0307 	rsb	r3, r3, #7
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	bf28      	it	cs
 80015ce:	2304      	movcs	r3, #4
 80015d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3304      	adds	r3, #4
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d902      	bls.n	80015e0 <NVIC_EncodePriority+0x30>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3b03      	subs	r3, #3
 80015de:	e000      	b.n	80015e2 <NVIC_EncodePriority+0x32>
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	f04f 32ff 	mov.w	r2, #4294967295
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43da      	mvns	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	401a      	ands	r2, r3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001602:	43d9      	mvns	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	4313      	orrs	r3, r2
}
 800160a:	4618      	mov	r0, r3
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Config>:
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff90 	bl	800155c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff49 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff5e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff90 	bl	80015b0 <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5f 	bl	800155c <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffb0 	bl	8001614 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e169      	b.n	80019a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8158 	bne.w	80019a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a9a      	ldr	r2, [pc, #616]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4a98      	ldr	r2, [pc, #608]	; (8001960 <HAL_GPIO_Init+0x2a0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4a98      	ldr	r2, [pc, #608]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a96      	ldr	r2, [pc, #600]	; (8001964 <HAL_GPIO_Init+0x2a4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a96      	ldr	r2, [pc, #600]	; (8001968 <HAL_GPIO_Init+0x2a8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a94      	ldr	r2, [pc, #592]	; (8001968 <HAL_GPIO_Init+0x2a8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a94      	ldr	r2, [pc, #592]	; (800196c <HAL_GPIO_Init+0x2ac>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a92      	ldr	r2, [pc, #584]	; (800196c <HAL_GPIO_Init+0x2ac>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a92      	ldr	r2, [pc, #584]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a90      	ldr	r2, [pc, #576]	; (8001970 <HAL_GPIO_Init+0x2b0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a79      	ldr	r2, [pc, #484]	; (8001974 <HAL_GPIO_Init+0x2b4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80b1 	beq.w	80019a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b4a      	ldr	r3, [pc, #296]	; (8001978 <HAL_GPIO_Init+0x2b8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2bc>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a40      	ldr	r2, [pc, #256]	; (8001980 <HAL_GPIO_Init+0x2c0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3f      	ldr	r2, [pc, #252]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3e      	ldr	r2, [pc, #248]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e0>
 800189c:	2303      	movs	r3, #3
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018be:	492f      	ldr	r1, [pc, #188]	; (800197c <HAL_GPIO_Init+0x2bc>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	492c      	ldr	r1, [pc, #176]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4928      	ldr	r1, [pc, #160]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491e      	ldr	r1, [pc, #120]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4918      	ldr	r1, [pc, #96]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4914      	ldr	r1, [pc, #80]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001940:	4013      	ands	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d021      	beq.n	8001994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e021      	b.n	80019a2 <HAL_GPIO_Init+0x2e2>
 800195e:	bf00      	nop
 8001960:	10320000 	.word	0x10320000
 8001964:	10310000 	.word	0x10310000
 8001968:	10220000 	.word	0x10220000
 800196c:	10210000 	.word	0x10210000
 8001970:	10120000 	.word	0x10120000
 8001974:	10110000 	.word	0x10110000
 8001978:	40021000 	.word	0x40021000
 800197c:	40010000 	.word	0x40010000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40011000 	.word	0x40011000
 800198c:	40011400 	.word	0x40011400
 8001990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_GPIO_Init+0x304>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	43db      	mvns	r3, r3
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <HAL_GPIO_Init+0x304>)
 800199e:	4013      	ands	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3301      	adds	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae8e 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	372c      	adds	r7, #44	; 0x2c
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]
 8001a02:	4613      	mov	r3, r2
 8001a04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a06:	787b      	ldrb	r3, [r7, #1]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0c:	887a      	ldrh	r2, [r7, #2]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a12:	e003      	b.n	8001a1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	611a      	str	r2, [r3, #16]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e12b      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe ff5c 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2224      	movs	r2, #36	; 0x24
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a8c:	f000 fcda 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8001a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a81      	ldr	r2, [pc, #516]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d807      	bhi.n	8001aac <HAL_I2C_Init+0x84>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a80      	ldr	r2, [pc, #512]	; (8001ca0 <HAL_I2C_Init+0x278>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	e006      	b.n	8001aba <HAL_I2C_Init+0x92>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a7d      	ldr	r2, [pc, #500]	; (8001ca4 <HAL_I2C_Init+0x27c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	bf94      	ite	ls
 8001ab4:	2301      	movls	r3, #1
 8001ab6:	2300      	movhi	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0e7      	b.n	8001c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4a78      	ldr	r2, [pc, #480]	; (8001ca8 <HAL_I2C_Init+0x280>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a6a      	ldr	r2, [pc, #424]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d802      	bhi.n	8001afc <HAL_I2C_Init+0xd4>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	e009      	b.n	8001b10 <HAL_I2C_Init+0xe8>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a69      	ldr	r2, [pc, #420]	; (8001cac <HAL_I2C_Init+0x284>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	3301      	adds	r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	495c      	ldr	r1, [pc, #368]	; (8001c9c <HAL_I2C_Init+0x274>)
 8001b2c:	428b      	cmp	r3, r1
 8001b2e:	d819      	bhi.n	8001b64 <HAL_I2C_Init+0x13c>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e59      	subs	r1, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b44:	400b      	ands	r3, r1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <HAL_I2C_Init+0x138>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e59      	subs	r1, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	e051      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e04f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <HAL_I2C_Init+0x168>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	e012      	b.n	8001bb6 <HAL_I2C_Init+0x18e>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Init+0x196>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e022      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10e      	bne.n	8001be4 <HAL_I2C_Init+0x1bc>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1e58      	subs	r0, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	440b      	add	r3, r1
 8001bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Init+0x1dc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	0099      	lsls	r1, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	6809      	ldr	r1, [r1, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6911      	ldr	r1, [r2, #16]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	000186a0 	.word	0x000186a0
 8001ca0:	001e847f 	.word	0x001e847f
 8001ca4:	003d08ff 	.word	0x003d08ff
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e272      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8087 	beq.w	8001dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d00c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cdc:	4b8f      	ldr	r3, [pc, #572]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d112      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf4:	d10b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d06c      	beq.n	8001ddc <HAL_RCC_OscConfig+0x12c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d168      	bne.n	8001ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e24c      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x76>
 8001d18:	4b80      	ldr	r3, [pc, #512]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7f      	ldr	r2, [pc, #508]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a77      	ldr	r2, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e01d      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCC_OscConfig+0xbc>
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a71      	ldr	r2, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e00b      	b.n	8001d84 <HAL_RCC_OscConfig+0xd4>
 8001d6c:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d013      	beq.n	8001db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ff7e 	bl	8000c8c <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7fe ff7a 	bl	8000c8c <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e200      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe4>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7fe ff6a 	bl	8000c8c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ff66 	bl	8000c8c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e1ec      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dce:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x10c>
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d063      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dea:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00b      	beq.n	8001e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df6:	4b49      	ldr	r3, [pc, #292]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
 8001e02:	4b46      	ldr	r3, [pc, #280]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d001      	beq.n	8001e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e1c0      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e03a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ff1f 	bl	8000c8c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e52:	f7fe ff1b 	bl	8000c8c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1a1      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x270>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fefe 	bl	8000c8c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7fe fefa 	bl	8000c8c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e180      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d03a      	beq.n	8001f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d019      	beq.n	8001efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fede 	bl	8000c8c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe feda 	bl	8000c8c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e160      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 face 	bl	8002494 <RCC_Delay>
 8001ef8:	e01c      	b.n	8001f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_OscConfig+0x274>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f00:	f7fe fec4 	bl	8000c8c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f06:	e00f      	b.n	8001f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f08:	f7fe fec0 	bl	8000c8c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d908      	bls.n	8001f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e146      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	42420000 	.word	0x42420000
 8001f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b92      	ldr	r3, [pc, #584]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1e9      	bne.n	8001f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80a6 	beq.w	800208e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	4b88      	ldr	r3, [pc, #544]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	61d3      	str	r3, [r2, #28]
 8001f5e:	4b85      	ldr	r3, [pc, #532]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b82      	ldr	r3, [pc, #520]	; (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b7f      	ldr	r3, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7e      	ldr	r2, [pc, #504]	; (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fe81 	bl	8000c8c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7fe fe7d 	bl	8000c8c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e103      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x4c8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x312>
 8001fb4:	4b6f      	ldr	r3, [pc, #444]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a6e      	ldr	r2, [pc, #440]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02d      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8001fca:	4b6a      	ldr	r3, [pc, #424]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a69      	ldr	r2, [pc, #420]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	4b67      	ldr	r3, [pc, #412]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4a66      	ldr	r2, [pc, #408]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	6213      	str	r3, [r2, #32]
 8001fe2:	e01c      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x356>
 8001fec:	4b61      	ldr	r3, [pc, #388]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a60      	ldr	r2, [pc, #384]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e00b      	b.n	800201e <HAL_RCC_OscConfig+0x36e>
 8002006:	4b5b      	ldr	r3, [pc, #364]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a5a      	ldr	r2, [pc, #360]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	4b58      	ldr	r3, [pc, #352]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	4a57      	ldr	r2, [pc, #348]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe fe31 	bl	8000c8c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fe2d 	bl	8000c8c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0b1      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ee      	beq.n	800202e <HAL_RCC_OscConfig+0x37e>
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe fe1b 	bl	8000c8c <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fe17 	bl	8000c8c <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e09b      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ee      	bne.n	800205a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a3b      	ldr	r2, [pc, #236]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002098:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d061      	beq.n	8002168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d146      	bne.n	800213a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe fdeb 	bl	8000c8c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fde7 	bl	8000c8c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e06d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e0:	d108      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	4921      	ldr	r1, [pc, #132]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	430b      	orrs	r3, r1
 8002106:	491b      	ldr	r1, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_RCC_OscConfig+0x4cc>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fdbb 	bl	8000c8c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fdb7 	bl	8000c8c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e03d      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x46a>
 8002138:	e035      	b.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x4cc>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fda4 	bl	8000c8c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fda0 	bl	8000c8c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e026      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x498>
 8002166:	e01e      	b.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e019      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
 8002174:	40021000 	.word	0x40021000
 8002178:	40007000 	.word	0x40007000
 800217c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_OscConfig+0x500>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	429a      	cmp	r2, r3
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d0      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d910      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4965      	ldr	r1, [pc, #404]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b8      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d040      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e073      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06b      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4936      	ldr	r1, [pc, #216]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fcf2 	bl	8000c8c <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fcee 	bl	8000c8c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e053      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d210      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e032      	b.n	800236a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4916      	ldr	r1, [pc, #88]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002342:	f000 f821 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002346:	4602      	mov	r2, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	490a      	ldr	r1, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1c8>)
 8002354:	5ccb      	ldrb	r3, [r1, r3]
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1cc>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1d0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fc50 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40022000 	.word	0x40022000
 8002378:	40021000 	.word	0x40021000
 800237c:	08004584 	.word	0x08004584
 8002380:	20000000 	.word	0x20000000
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <HAL_RCC_GetSysClockFreq+0x94>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x30>
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x36>
 80023b6:	e027      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ba:	613b      	str	r3, [r7, #16]
      break;
 80023bc:	e027      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
 80023ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	0c5b      	lsrs	r3, r3, #17
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e004      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	613b      	str	r3, [r7, #16]
      break;
 8002406:	e002      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetSysClockFreq+0x98>)
 800240a:	613b      	str	r3, [r7, #16]
      break;
 800240c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240e:	693b      	ldr	r3, [r7, #16]
}
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	0800459c 	.word	0x0800459c
 8002428:	080045ac 	.word	0x080045ac
 800242c:	003d0900 	.word	0x003d0900

08002430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b02      	ldr	r3, [pc, #8]	; (8002440 <HAL_RCC_GetHCLKFreq+0x10>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000000 	.word	0x20000000

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff2 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4903      	ldr	r1, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	08004594 	.word	0x08004594

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffde 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0adb      	lsrs	r3, r3, #11
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08004594 	.word	0x08004594

08002494 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800249c:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <RCC_Delay+0x34>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <RCC_Delay+0x38>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0a5b      	lsrs	r3, r3, #9
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b0:	bf00      	nop
  }
  while (Delay --);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f9      	bne.n	80024b0 <RCC_Delay+0x1c>
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	20000000 	.word	0x20000000
 80024cc:	10624dd3 	.word	0x10624dd3

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d07d      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
 8002508:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d118      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002530:	f7fe fbac 	bl	8000c8c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	e008      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fba8 	bl	8000c8c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e06d      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02e      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d027      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800257e:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fb77 	bl	8000c8c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fb73 	bl	8000c8c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e036      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c4:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4a13      	ldr	r2, [pc, #76]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	490b      	ldr	r1, [pc, #44]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	42420440 	.word	0x42420440

0800263c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b10      	cmp	r3, #16
 8002662:	f200 808a 	bhi.w	800277a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d045      	beq.n	80026f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d075      	beq.n	800275e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002672:	e082      	b.n	800277a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07b      	beq.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0c9b      	lsrs	r3, r3, #18
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	4a41      	ldr	r2, [pc, #260]	; (8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269e:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0c5b      	lsrs	r3, r3, #17
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026b8:	4a38      	ldr	r2, [pc, #224]	; (800279c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	e004      	b.n	80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026d4:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e0:	d102      	bne.n	80026e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	61bb      	str	r3, [r7, #24]
      break;
 80026e6:	e04a      	b.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
      break;
 80026f6:	e042      	b.n	800277e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002708:	d108      	bne.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	e01f      	b.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002726:	d109      	bne.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002728:	4b19      	ldr	r3, [pc, #100]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002734:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	e00f      	b.n	800275c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002746:	d11c      	bne.n	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002754:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002758:	61bb      	str	r3, [r7, #24]
      break;
 800275a:	e012      	b.n	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800275c:	e011      	b.n	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800275e:	f7ff fe85 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	0b9b      	lsrs	r3, r3, #14
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	3301      	adds	r3, #1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	61bb      	str	r3, [r7, #24]
      break;
 8002778:	e004      	b.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800277a:	bf00      	nop
 800277c:	e002      	b.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800277e:	bf00      	nop
 8002780:	e000      	b.n	8002784 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002782:	bf00      	nop
    }
  }
  return (frequency);
 8002784:	69bb      	ldr	r3, [r7, #24]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	080045b0 	.word	0x080045b0
 8002798:	080045c0 	.word	0x080045c0
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	003d0900 	.word	0x003d0900
 80027a4:	aaaaaaab 	.word	0xaaaaaaab

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f8dc 	bl	800098c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fb16 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e041      	b.n	80028dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f839 	bl	80028e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2202      	movs	r2, #2
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 fac7 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_TIM_PWM_Start+0x24>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e022      	b.n	8002962 <HAL_TIM_PWM_Start+0x6a>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d109      	bne.n	8002936 <HAL_TIM_PWM_Start+0x3e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e015      	b.n	8002962 <HAL_TIM_PWM_Start+0x6a>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start+0x58>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e008      	b.n	8002962 <HAL_TIM_PWM_Start+0x6a>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e05e      	b.n	8002a28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <HAL_TIM_PWM_Start+0x82>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	e013      	b.n	80029a2 <HAL_TIM_PWM_Start+0xaa>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d104      	bne.n	800298a <HAL_TIM_PWM_Start+0x92>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002988:	e00b      	b.n	80029a2 <HAL_TIM_PWM_Start+0xaa>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d104      	bne.n	800299a <HAL_TIM_PWM_Start+0xa2>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	e003      	b.n	80029a2 <HAL_TIM_PWM_Start+0xaa>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2201      	movs	r2, #1
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fcb4 	bl	8003318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_PWM_Start+0x138>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d107      	bne.n	80029ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_TIM_PWM_Start+0x138>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIM_PWM_Start+0xfa>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d009      	beq.n	80029f2 <HAL_TIM_PWM_Start+0xfa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_TIM_PWM_Start+0x13c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_PWM_Start+0xfa>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <HAL_TIM_PWM_Start+0x140>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d010      	beq.n	8002a26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e007      	b.n	8002a26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800

08002a3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc62 	bl	8003318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_TIM_PWM_Stop+0xc4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d117      	bne.n	8002a8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_TIM_PWM_Stop+0x52>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	f240 4344 	movw	r3, #1092	; 0x444
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d107      	bne.n	8002a8e <HAL_TIM_PWM_Stop+0x52>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	f241 1311 	movw	r3, #4369	; 0x1111
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_TIM_PWM_Stop+0x82>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	f240 4344 	movw	r3, #1092	; 0x444
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_PWM_Stop+0x82>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0201 	bic.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Stop+0x92>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002acc:	e013      	b.n	8002af6 <HAL_TIM_PWM_Stop+0xba>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Stop+0xa2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_PWM_Stop+0xba>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Stop+0xb2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	e003      	b.n	8002af6 <HAL_TIM_PWM_Stop+0xba>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012c00 	.word	0x40012c00

08002b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0ae      	b.n	8002c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	f200 809f 	bhi.w	8002c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b32:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002c71 	.word	0x08002c71
 8002b40:	08002c71 	.word	0x08002c71
 8002b44:	08002c71 	.word	0x08002c71
 8002b48:	08002bad 	.word	0x08002bad
 8002b4c:	08002c71 	.word	0x08002c71
 8002b50:	08002c71 	.word	0x08002c71
 8002b54:	08002c71 	.word	0x08002c71
 8002b58:	08002bef 	.word	0x08002bef
 8002b5c:	08002c71 	.word	0x08002c71
 8002b60:	08002c71 	.word	0x08002c71
 8002b64:	08002c71 	.word	0x08002c71
 8002b68:	08002c2f 	.word	0x08002c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f9b2 	bl	8002edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0208 	orr.w	r2, r2, #8
 8002b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0204 	bic.w	r2, r2, #4
 8002b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6999      	ldr	r1, [r3, #24]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	619a      	str	r2, [r3, #24]
      break;
 8002baa:	e064      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f9f8 	bl	8002fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	021a      	lsls	r2, r3, #8
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]
      break;
 8002bec:	e043      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fa41 	bl	800307c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0208 	orr.w	r2, r2, #8
 8002c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0204 	bic.w	r2, r2, #4
 8002c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	61da      	str	r2, [r3, #28]
      break;
 8002c2c:	e023      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa8b 	bl	8003150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69d9      	ldr	r1, [r3, #28]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	021a      	lsls	r2, r3, #8
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	61da      	str	r2, [r3, #28]
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
      break;
 8002c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0b4      	b.n	8002e0e <HAL_TIM_ConfigClockSource+0x186>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cdc:	d03e      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0xd4>
 8002cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce2:	f200 8087 	bhi.w	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	f000 8086 	beq.w	8002dfa <HAL_TIM_ConfigClockSource+0x172>
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf2:	d87f      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b70      	cmp	r3, #112	; 0x70
 8002cf6:	d01a      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xa6>
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d87b      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	d050      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d877      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b50      	cmp	r3, #80	; 0x50
 8002d06:	d03c      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0xfa>
 8002d08:	2b50      	cmp	r3, #80	; 0x50
 8002d0a:	d873      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d058      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d86f      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b30      	cmp	r3, #48	; 0x30
 8002d16:	d064      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d86b      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d060      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d867      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05c      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d05a      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	e062      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 facc 	bl	80032da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	609a      	str	r2, [r3, #8]
      break;
 8002d5a:	e04f      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f000 fab5 	bl	80032da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7e:	609a      	str	r2, [r3, #8]
      break;
 8002d80:	e03c      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 fa2c 	bl	80031ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2150      	movs	r1, #80	; 0x50
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa83 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002da0:	e02c      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f000 fa4a 	bl	8003248 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2160      	movs	r1, #96	; 0x60
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fa73 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e01c      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 fa0c 	bl	80031ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2140      	movs	r1, #64	; 0x40
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa63 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002de0:	e00c      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 fa5a 	bl	80032a6 <TIM_ITRx_SetConfig>
      break;
 8002df2:	e003      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <TIM_Base_SetConfig+0xbc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x30>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <TIM_Base_SetConfig+0xc0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d108      	bne.n	8002e5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d007      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <TIM_Base_SetConfig+0xbc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_Base_SetConfig+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <TIM_Base_SetConfig+0xc0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d108      	bne.n	8002e8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <TIM_Base_SetConfig+0xb8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800

08002edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f023 0201 	bic.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 0302 	bic.w	r3, r3, #2
 8002f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <TIM_OC1_SetConfig+0xc8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10c      	bne.n	8002f52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f023 0308 	bic.w	r3, r3, #8
 8002f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <TIM_OC1_SetConfig+0xc8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d111      	bne.n	8002f7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00

08002fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f023 0210 	bic.w	r2, r3, #16
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0320 	bic.w	r3, r3, #32
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <TIM_OC2_SetConfig+0xd0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003022:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <TIM_OC2_SetConfig+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d113      	bne.n	8003054 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800303a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	40012c00 	.word	0x40012c00

0800307c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1d      	ldr	r2, [pc, #116]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a14      	ldr	r2, [pc, #80]	; (800314c <TIM_OC3_SetConfig+0xd0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d113      	bne.n	8003126 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	621a      	str	r2, [r3, #32]
}
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40012c00 	.word	0x40012c00

08003150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800317e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800319a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	031b      	lsls	r3, r3, #12
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <TIM_OC4_SetConfig+0x98>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00

080031ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0201 	bic.w	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 030a 	bic.w	r3, r3, #10
 8003228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f023 0210 	bic.w	r2, r3, #16
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	031b      	lsls	r3, r3, #12
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003284:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f043 0307 	orr.w	r3, r3, #7
 80032c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	609a      	str	r2, [r3, #8]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2201      	movs	r2, #1
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e046      	b.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c4:	d009      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800

0800341c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003434:	2302      	movs	r3, #2
 8003436:	e03d      	b.n	80034b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
	...

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	2000000c 	.word	0x2000000c

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f001 f82c 	bl	8004538 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	0800465c 	.word	0x0800465c
 8003508:	0800465c 	.word	0x0800465c
 800350c:	0800465c 	.word	0x0800465c
 8003510:	08004660 	.word	0x08004660

08003514 <memset>:
 8003514:	4603      	mov	r3, r0
 8003516:	4402      	add	r2, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	d100      	bne.n	800351e <memset+0xa>
 800351c:	4770      	bx	lr
 800351e:	f803 1b01 	strb.w	r1, [r3], #1
 8003522:	e7f9      	b.n	8003518 <memset+0x4>

08003524 <iprintf>:
 8003524:	b40f      	push	{r0, r1, r2, r3}
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <iprintf+0x2c>)
 8003528:	b513      	push	{r0, r1, r4, lr}
 800352a:	681c      	ldr	r4, [r3, #0]
 800352c:	b124      	cbz	r4, 8003538 <iprintf+0x14>
 800352e:	69a3      	ldr	r3, [r4, #24]
 8003530:	b913      	cbnz	r3, 8003538 <iprintf+0x14>
 8003532:	4620      	mov	r0, r4
 8003534:	f000 fa5a 	bl	80039ec <__sinit>
 8003538:	ab05      	add	r3, sp, #20
 800353a:	4620      	mov	r0, r4
 800353c:	9a04      	ldr	r2, [sp, #16]
 800353e:	68a1      	ldr	r1, [r4, #8]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	f000 fc5d 	bl	8003e00 <_vfiprintf_r>
 8003546:	b002      	add	sp, #8
 8003548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800354c:	b004      	add	sp, #16
 800354e:	4770      	bx	lr
 8003550:	2000000c 	.word	0x2000000c

08003554 <_puts_r>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	460e      	mov	r6, r1
 8003558:	4605      	mov	r5, r0
 800355a:	b118      	cbz	r0, 8003564 <_puts_r+0x10>
 800355c:	6983      	ldr	r3, [r0, #24]
 800355e:	b90b      	cbnz	r3, 8003564 <_puts_r+0x10>
 8003560:	f000 fa44 	bl	80039ec <__sinit>
 8003564:	69ab      	ldr	r3, [r5, #24]
 8003566:	68ac      	ldr	r4, [r5, #8]
 8003568:	b913      	cbnz	r3, 8003570 <_puts_r+0x1c>
 800356a:	4628      	mov	r0, r5
 800356c:	f000 fa3e 	bl	80039ec <__sinit>
 8003570:	4b2c      	ldr	r3, [pc, #176]	; (8003624 <_puts_r+0xd0>)
 8003572:	429c      	cmp	r4, r3
 8003574:	d120      	bne.n	80035b8 <_puts_r+0x64>
 8003576:	686c      	ldr	r4, [r5, #4]
 8003578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357a:	07db      	lsls	r3, r3, #31
 800357c:	d405      	bmi.n	800358a <_puts_r+0x36>
 800357e:	89a3      	ldrh	r3, [r4, #12]
 8003580:	0598      	lsls	r0, r3, #22
 8003582:	d402      	bmi.n	800358a <_puts_r+0x36>
 8003584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003586:	f000 facf 	bl	8003b28 <__retarget_lock_acquire_recursive>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	0719      	lsls	r1, r3, #28
 800358e:	d51d      	bpl.n	80035cc <_puts_r+0x78>
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	b1db      	cbz	r3, 80035cc <_puts_r+0x78>
 8003594:	3e01      	subs	r6, #1
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800359c:	3b01      	subs	r3, #1
 800359e:	60a3      	str	r3, [r4, #8]
 80035a0:	bb39      	cbnz	r1, 80035f2 <_puts_r+0x9e>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	da38      	bge.n	8003618 <_puts_r+0xc4>
 80035a6:	4622      	mov	r2, r4
 80035a8:	210a      	movs	r1, #10
 80035aa:	4628      	mov	r0, r5
 80035ac:	f000 f848 	bl	8003640 <__swbuf_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d011      	beq.n	80035d8 <_puts_r+0x84>
 80035b4:	250a      	movs	r5, #10
 80035b6:	e011      	b.n	80035dc <_puts_r+0x88>
 80035b8:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <_puts_r+0xd4>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d101      	bne.n	80035c2 <_puts_r+0x6e>
 80035be:	68ac      	ldr	r4, [r5, #8]
 80035c0:	e7da      	b.n	8003578 <_puts_r+0x24>
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <_puts_r+0xd8>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	bf08      	it	eq
 80035c8:	68ec      	ldreq	r4, [r5, #12]
 80035ca:	e7d5      	b.n	8003578 <_puts_r+0x24>
 80035cc:	4621      	mov	r1, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 f888 	bl	80036e4 <__swsetup_r>
 80035d4:	2800      	cmp	r0, #0
 80035d6:	d0dd      	beq.n	8003594 <_puts_r+0x40>
 80035d8:	f04f 35ff 	mov.w	r5, #4294967295
 80035dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035de:	07da      	lsls	r2, r3, #31
 80035e0:	d405      	bmi.n	80035ee <_puts_r+0x9a>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	059b      	lsls	r3, r3, #22
 80035e6:	d402      	bmi.n	80035ee <_puts_r+0x9a>
 80035e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ea:	f000 fa9e 	bl	8003b2a <__retarget_lock_release_recursive>
 80035ee:	4628      	mov	r0, r5
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da04      	bge.n	8003600 <_puts_r+0xac>
 80035f6:	69a2      	ldr	r2, [r4, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dc06      	bgt.n	800360a <_puts_r+0xb6>
 80035fc:	290a      	cmp	r1, #10
 80035fe:	d004      	beq.n	800360a <_puts_r+0xb6>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	7019      	strb	r1, [r3, #0]
 8003608:	e7c5      	b.n	8003596 <_puts_r+0x42>
 800360a:	4622      	mov	r2, r4
 800360c:	4628      	mov	r0, r5
 800360e:	f000 f817 	bl	8003640 <__swbuf_r>
 8003612:	3001      	adds	r0, #1
 8003614:	d1bf      	bne.n	8003596 <_puts_r+0x42>
 8003616:	e7df      	b.n	80035d8 <_puts_r+0x84>
 8003618:	250a      	movs	r5, #10
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	6022      	str	r2, [r4, #0]
 8003620:	701d      	strb	r5, [r3, #0]
 8003622:	e7db      	b.n	80035dc <_puts_r+0x88>
 8003624:	080045e8 	.word	0x080045e8
 8003628:	08004608 	.word	0x08004608
 800362c:	080045c8 	.word	0x080045c8

08003630 <puts>:
 8003630:	4b02      	ldr	r3, [pc, #8]	; (800363c <puts+0xc>)
 8003632:	4601      	mov	r1, r0
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	f7ff bf8d 	b.w	8003554 <_puts_r>
 800363a:	bf00      	nop
 800363c:	2000000c 	.word	0x2000000c

08003640 <__swbuf_r>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	460e      	mov	r6, r1
 8003644:	4614      	mov	r4, r2
 8003646:	4605      	mov	r5, r0
 8003648:	b118      	cbz	r0, 8003652 <__swbuf_r+0x12>
 800364a:	6983      	ldr	r3, [r0, #24]
 800364c:	b90b      	cbnz	r3, 8003652 <__swbuf_r+0x12>
 800364e:	f000 f9cd 	bl	80039ec <__sinit>
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <__swbuf_r+0x98>)
 8003654:	429c      	cmp	r4, r3
 8003656:	d12b      	bne.n	80036b0 <__swbuf_r+0x70>
 8003658:	686c      	ldr	r4, [r5, #4]
 800365a:	69a3      	ldr	r3, [r4, #24]
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	071a      	lsls	r2, r3, #28
 8003662:	d52f      	bpl.n	80036c4 <__swbuf_r+0x84>
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	b36b      	cbz	r3, 80036c4 <__swbuf_r+0x84>
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	b2f6      	uxtb	r6, r6
 800366e:	1ac0      	subs	r0, r0, r3
 8003670:	6963      	ldr	r3, [r4, #20]
 8003672:	4637      	mov	r7, r6
 8003674:	4283      	cmp	r3, r0
 8003676:	dc04      	bgt.n	8003682 <__swbuf_r+0x42>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 f922 	bl	80038c4 <_fflush_r>
 8003680:	bb30      	cbnz	r0, 80036d0 <__swbuf_r+0x90>
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	3001      	adds	r0, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	6022      	str	r2, [r4, #0]
 8003690:	701e      	strb	r6, [r3, #0]
 8003692:	6963      	ldr	r3, [r4, #20]
 8003694:	4283      	cmp	r3, r0
 8003696:	d004      	beq.n	80036a2 <__swbuf_r+0x62>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	07db      	lsls	r3, r3, #31
 800369c:	d506      	bpl.n	80036ac <__swbuf_r+0x6c>
 800369e:	2e0a      	cmp	r6, #10
 80036a0:	d104      	bne.n	80036ac <__swbuf_r+0x6c>
 80036a2:	4621      	mov	r1, r4
 80036a4:	4628      	mov	r0, r5
 80036a6:	f000 f90d 	bl	80038c4 <_fflush_r>
 80036aa:	b988      	cbnz	r0, 80036d0 <__swbuf_r+0x90>
 80036ac:	4638      	mov	r0, r7
 80036ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <__swbuf_r+0x9c>)
 80036b2:	429c      	cmp	r4, r3
 80036b4:	d101      	bne.n	80036ba <__swbuf_r+0x7a>
 80036b6:	68ac      	ldr	r4, [r5, #8]
 80036b8:	e7cf      	b.n	800365a <__swbuf_r+0x1a>
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <__swbuf_r+0xa0>)
 80036bc:	429c      	cmp	r4, r3
 80036be:	bf08      	it	eq
 80036c0:	68ec      	ldreq	r4, [r5, #12]
 80036c2:	e7ca      	b.n	800365a <__swbuf_r+0x1a>
 80036c4:	4621      	mov	r1, r4
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 f80c 	bl	80036e4 <__swsetup_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d0cb      	beq.n	8003668 <__swbuf_r+0x28>
 80036d0:	f04f 37ff 	mov.w	r7, #4294967295
 80036d4:	e7ea      	b.n	80036ac <__swbuf_r+0x6c>
 80036d6:	bf00      	nop
 80036d8:	080045e8 	.word	0x080045e8
 80036dc:	08004608 	.word	0x08004608
 80036e0:	080045c8 	.word	0x080045c8

080036e4 <__swsetup_r>:
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <__swsetup_r+0xcc>)
 80036e6:	b570      	push	{r4, r5, r6, lr}
 80036e8:	681d      	ldr	r5, [r3, #0]
 80036ea:	4606      	mov	r6, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	b125      	cbz	r5, 80036fa <__swsetup_r+0x16>
 80036f0:	69ab      	ldr	r3, [r5, #24]
 80036f2:	b913      	cbnz	r3, 80036fa <__swsetup_r+0x16>
 80036f4:	4628      	mov	r0, r5
 80036f6:	f000 f979 	bl	80039ec <__sinit>
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <__swsetup_r+0xd0>)
 80036fc:	429c      	cmp	r4, r3
 80036fe:	d10f      	bne.n	8003720 <__swsetup_r+0x3c>
 8003700:	686c      	ldr	r4, [r5, #4]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003708:	0719      	lsls	r1, r3, #28
 800370a:	d42c      	bmi.n	8003766 <__swsetup_r+0x82>
 800370c:	06dd      	lsls	r5, r3, #27
 800370e:	d411      	bmi.n	8003734 <__swsetup_r+0x50>
 8003710:	2309      	movs	r3, #9
 8003712:	6033      	str	r3, [r6, #0]
 8003714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	e03e      	b.n	800379e <__swsetup_r+0xba>
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <__swsetup_r+0xd4>)
 8003722:	429c      	cmp	r4, r3
 8003724:	d101      	bne.n	800372a <__swsetup_r+0x46>
 8003726:	68ac      	ldr	r4, [r5, #8]
 8003728:	e7eb      	b.n	8003702 <__swsetup_r+0x1e>
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <__swsetup_r+0xd8>)
 800372c:	429c      	cmp	r4, r3
 800372e:	bf08      	it	eq
 8003730:	68ec      	ldreq	r4, [r5, #12]
 8003732:	e7e6      	b.n	8003702 <__swsetup_r+0x1e>
 8003734:	0758      	lsls	r0, r3, #29
 8003736:	d512      	bpl.n	800375e <__swsetup_r+0x7a>
 8003738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800373a:	b141      	cbz	r1, 800374e <__swsetup_r+0x6a>
 800373c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003740:	4299      	cmp	r1, r3
 8003742:	d002      	beq.n	800374a <__swsetup_r+0x66>
 8003744:	4630      	mov	r0, r6
 8003746:	f000 fa57 	bl	8003bf8 <_free_r>
 800374a:	2300      	movs	r3, #0
 800374c:	6363      	str	r3, [r4, #52]	; 0x34
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	2300      	movs	r3, #0
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f043 0308 	orr.w	r3, r3, #8
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	b94b      	cbnz	r3, 800377e <__swsetup_r+0x9a>
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003774:	d003      	beq.n	800377e <__swsetup_r+0x9a>
 8003776:	4621      	mov	r1, r4
 8003778:	4630      	mov	r0, r6
 800377a:	f000 f9fd 	bl	8003b78 <__smakebuf_r>
 800377e:	89a0      	ldrh	r0, [r4, #12]
 8003780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003784:	f010 0301 	ands.w	r3, r0, #1
 8003788:	d00a      	beq.n	80037a0 <__swsetup_r+0xbc>
 800378a:	2300      	movs	r3, #0
 800378c:	60a3      	str	r3, [r4, #8]
 800378e:	6963      	ldr	r3, [r4, #20]
 8003790:	425b      	negs	r3, r3
 8003792:	61a3      	str	r3, [r4, #24]
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	b943      	cbnz	r3, 80037aa <__swsetup_r+0xc6>
 8003798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800379c:	d1ba      	bne.n	8003714 <__swsetup_r+0x30>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	0781      	lsls	r1, r0, #30
 80037a2:	bf58      	it	pl
 80037a4:	6963      	ldrpl	r3, [r4, #20]
 80037a6:	60a3      	str	r3, [r4, #8]
 80037a8:	e7f4      	b.n	8003794 <__swsetup_r+0xb0>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e7f7      	b.n	800379e <__swsetup_r+0xba>
 80037ae:	bf00      	nop
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	080045e8 	.word	0x080045e8
 80037b8:	08004608 	.word	0x08004608
 80037bc:	080045c8 	.word	0x080045c8

080037c0 <__sflush_r>:
 80037c0:	898a      	ldrh	r2, [r1, #12]
 80037c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c4:	4605      	mov	r5, r0
 80037c6:	0710      	lsls	r0, r2, #28
 80037c8:	460c      	mov	r4, r1
 80037ca:	d457      	bmi.n	800387c <__sflush_r+0xbc>
 80037cc:	684b      	ldr	r3, [r1, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dc04      	bgt.n	80037dc <__sflush_r+0x1c>
 80037d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	dc01      	bgt.n	80037dc <__sflush_r+0x1c>
 80037d8:	2000      	movs	r0, #0
 80037da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037de:	2e00      	cmp	r6, #0
 80037e0:	d0fa      	beq.n	80037d8 <__sflush_r+0x18>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037e8:	682f      	ldr	r7, [r5, #0]
 80037ea:	602b      	str	r3, [r5, #0]
 80037ec:	d032      	beq.n	8003854 <__sflush_r+0x94>
 80037ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	075a      	lsls	r2, r3, #29
 80037f4:	d505      	bpl.n	8003802 <__sflush_r+0x42>
 80037f6:	6863      	ldr	r3, [r4, #4]
 80037f8:	1ac0      	subs	r0, r0, r3
 80037fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037fc:	b10b      	cbz	r3, 8003802 <__sflush_r+0x42>
 80037fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003800:	1ac0      	subs	r0, r0, r3
 8003802:	2300      	movs	r3, #0
 8003804:	4602      	mov	r2, r0
 8003806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003808:	4628      	mov	r0, r5
 800380a:	6a21      	ldr	r1, [r4, #32]
 800380c:	47b0      	blx	r6
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	d106      	bne.n	8003822 <__sflush_r+0x62>
 8003814:	6829      	ldr	r1, [r5, #0]
 8003816:	291d      	cmp	r1, #29
 8003818:	d82c      	bhi.n	8003874 <__sflush_r+0xb4>
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <__sflush_r+0x100>)
 800381c:	40ca      	lsrs	r2, r1
 800381e:	07d6      	lsls	r6, r2, #31
 8003820:	d528      	bpl.n	8003874 <__sflush_r+0xb4>
 8003822:	2200      	movs	r2, #0
 8003824:	6062      	str	r2, [r4, #4]
 8003826:	6922      	ldr	r2, [r4, #16]
 8003828:	04d9      	lsls	r1, r3, #19
 800382a:	6022      	str	r2, [r4, #0]
 800382c:	d504      	bpl.n	8003838 <__sflush_r+0x78>
 800382e:	1c42      	adds	r2, r0, #1
 8003830:	d101      	bne.n	8003836 <__sflush_r+0x76>
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	b903      	cbnz	r3, 8003838 <__sflush_r+0x78>
 8003836:	6560      	str	r0, [r4, #84]	; 0x54
 8003838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800383a:	602f      	str	r7, [r5, #0]
 800383c:	2900      	cmp	r1, #0
 800383e:	d0cb      	beq.n	80037d8 <__sflush_r+0x18>
 8003840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003844:	4299      	cmp	r1, r3
 8003846:	d002      	beq.n	800384e <__sflush_r+0x8e>
 8003848:	4628      	mov	r0, r5
 800384a:	f000 f9d5 	bl	8003bf8 <_free_r>
 800384e:	2000      	movs	r0, #0
 8003850:	6360      	str	r0, [r4, #52]	; 0x34
 8003852:	e7c2      	b.n	80037da <__sflush_r+0x1a>
 8003854:	6a21      	ldr	r1, [r4, #32]
 8003856:	2301      	movs	r3, #1
 8003858:	4628      	mov	r0, r5
 800385a:	47b0      	blx	r6
 800385c:	1c41      	adds	r1, r0, #1
 800385e:	d1c7      	bne.n	80037f0 <__sflush_r+0x30>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0c4      	beq.n	80037f0 <__sflush_r+0x30>
 8003866:	2b1d      	cmp	r3, #29
 8003868:	d001      	beq.n	800386e <__sflush_r+0xae>
 800386a:	2b16      	cmp	r3, #22
 800386c:	d101      	bne.n	8003872 <__sflush_r+0xb2>
 800386e:	602f      	str	r7, [r5, #0]
 8003870:	e7b2      	b.n	80037d8 <__sflush_r+0x18>
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003878:	81a3      	strh	r3, [r4, #12]
 800387a:	e7ae      	b.n	80037da <__sflush_r+0x1a>
 800387c:	690f      	ldr	r7, [r1, #16]
 800387e:	2f00      	cmp	r7, #0
 8003880:	d0aa      	beq.n	80037d8 <__sflush_r+0x18>
 8003882:	0793      	lsls	r3, r2, #30
 8003884:	bf18      	it	ne
 8003886:	2300      	movne	r3, #0
 8003888:	680e      	ldr	r6, [r1, #0]
 800388a:	bf08      	it	eq
 800388c:	694b      	ldreq	r3, [r1, #20]
 800388e:	1bf6      	subs	r6, r6, r7
 8003890:	600f      	str	r7, [r1, #0]
 8003892:	608b      	str	r3, [r1, #8]
 8003894:	2e00      	cmp	r6, #0
 8003896:	dd9f      	ble.n	80037d8 <__sflush_r+0x18>
 8003898:	4633      	mov	r3, r6
 800389a:	463a      	mov	r2, r7
 800389c:	4628      	mov	r0, r5
 800389e:	6a21      	ldr	r1, [r4, #32]
 80038a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80038a4:	47e0      	blx	ip
 80038a6:	2800      	cmp	r0, #0
 80038a8:	dc06      	bgt.n	80038b8 <__sflush_r+0xf8>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	e790      	b.n	80037da <__sflush_r+0x1a>
 80038b8:	4407      	add	r7, r0
 80038ba:	1a36      	subs	r6, r6, r0
 80038bc:	e7ea      	b.n	8003894 <__sflush_r+0xd4>
 80038be:	bf00      	nop
 80038c0:	20400001 	.word	0x20400001

080038c4 <_fflush_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	690b      	ldr	r3, [r1, #16]
 80038c8:	4605      	mov	r5, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	b913      	cbnz	r3, 80038d4 <_fflush_r+0x10>
 80038ce:	2500      	movs	r5, #0
 80038d0:	4628      	mov	r0, r5
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	b118      	cbz	r0, 80038de <_fflush_r+0x1a>
 80038d6:	6983      	ldr	r3, [r0, #24]
 80038d8:	b90b      	cbnz	r3, 80038de <_fflush_r+0x1a>
 80038da:	f000 f887 	bl	80039ec <__sinit>
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <_fflush_r+0x6c>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	d11b      	bne.n	800391c <_fflush_r+0x58>
 80038e4:	686c      	ldr	r4, [r5, #4]
 80038e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ef      	beq.n	80038ce <_fflush_r+0xa>
 80038ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038f0:	07d0      	lsls	r0, r2, #31
 80038f2:	d404      	bmi.n	80038fe <_fflush_r+0x3a>
 80038f4:	0599      	lsls	r1, r3, #22
 80038f6:	d402      	bmi.n	80038fe <_fflush_r+0x3a>
 80038f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fa:	f000 f915 	bl	8003b28 <__retarget_lock_acquire_recursive>
 80038fe:	4628      	mov	r0, r5
 8003900:	4621      	mov	r1, r4
 8003902:	f7ff ff5d 	bl	80037c0 <__sflush_r>
 8003906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003908:	4605      	mov	r5, r0
 800390a:	07da      	lsls	r2, r3, #31
 800390c:	d4e0      	bmi.n	80038d0 <_fflush_r+0xc>
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	059b      	lsls	r3, r3, #22
 8003912:	d4dd      	bmi.n	80038d0 <_fflush_r+0xc>
 8003914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003916:	f000 f908 	bl	8003b2a <__retarget_lock_release_recursive>
 800391a:	e7d9      	b.n	80038d0 <_fflush_r+0xc>
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <_fflush_r+0x70>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d101      	bne.n	8003926 <_fflush_r+0x62>
 8003922:	68ac      	ldr	r4, [r5, #8]
 8003924:	e7df      	b.n	80038e6 <_fflush_r+0x22>
 8003926:	4b04      	ldr	r3, [pc, #16]	; (8003938 <_fflush_r+0x74>)
 8003928:	429c      	cmp	r4, r3
 800392a:	bf08      	it	eq
 800392c:	68ec      	ldreq	r4, [r5, #12]
 800392e:	e7da      	b.n	80038e6 <_fflush_r+0x22>
 8003930:	080045e8 	.word	0x080045e8
 8003934:	08004608 	.word	0x08004608
 8003938:	080045c8 	.word	0x080045c8

0800393c <std>:
 800393c:	2300      	movs	r3, #0
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
 8003942:	e9c0 3300 	strd	r3, r3, [r0]
 8003946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800394a:	6083      	str	r3, [r0, #8]
 800394c:	8181      	strh	r1, [r0, #12]
 800394e:	6643      	str	r3, [r0, #100]	; 0x64
 8003950:	81c2      	strh	r2, [r0, #14]
 8003952:	6183      	str	r3, [r0, #24]
 8003954:	4619      	mov	r1, r3
 8003956:	2208      	movs	r2, #8
 8003958:	305c      	adds	r0, #92	; 0x5c
 800395a:	f7ff fddb 	bl	8003514 <memset>
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <std+0x38>)
 8003960:	6224      	str	r4, [r4, #32]
 8003962:	6263      	str	r3, [r4, #36]	; 0x24
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <std+0x3c>)
 8003966:	62a3      	str	r3, [r4, #40]	; 0x28
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <std+0x40>)
 800396a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <std+0x44>)
 800396e:	6323      	str	r3, [r4, #48]	; 0x30
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	080043ad 	.word	0x080043ad
 8003978:	080043cf 	.word	0x080043cf
 800397c:	08004407 	.word	0x08004407
 8003980:	0800442b 	.word	0x0800442b

08003984 <_cleanup_r>:
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <_cleanup_r+0x8>)
 8003986:	f000 b8af 	b.w	8003ae8 <_fwalk_reent>
 800398a:	bf00      	nop
 800398c:	080038c5 	.word	0x080038c5

08003990 <__sfmoreglue>:
 8003990:	2268      	movs	r2, #104	; 0x68
 8003992:	b570      	push	{r4, r5, r6, lr}
 8003994:	1e4d      	subs	r5, r1, #1
 8003996:	4355      	muls	r5, r2
 8003998:	460e      	mov	r6, r1
 800399a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800399e:	f000 f993 	bl	8003cc8 <_malloc_r>
 80039a2:	4604      	mov	r4, r0
 80039a4:	b140      	cbz	r0, 80039b8 <__sfmoreglue+0x28>
 80039a6:	2100      	movs	r1, #0
 80039a8:	e9c0 1600 	strd	r1, r6, [r0]
 80039ac:	300c      	adds	r0, #12
 80039ae:	60a0      	str	r0, [r4, #8]
 80039b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039b4:	f7ff fdae 	bl	8003514 <memset>
 80039b8:	4620      	mov	r0, r4
 80039ba:	bd70      	pop	{r4, r5, r6, pc}

080039bc <__sfp_lock_acquire>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__sfp_lock_acquire+0x8>)
 80039be:	f000 b8b3 	b.w	8003b28 <__retarget_lock_acquire_recursive>
 80039c2:	bf00      	nop
 80039c4:	200001e1 	.word	0x200001e1

080039c8 <__sfp_lock_release>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__sfp_lock_release+0x8>)
 80039ca:	f000 b8ae 	b.w	8003b2a <__retarget_lock_release_recursive>
 80039ce:	bf00      	nop
 80039d0:	200001e1 	.word	0x200001e1

080039d4 <__sinit_lock_acquire>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__sinit_lock_acquire+0x8>)
 80039d6:	f000 b8a7 	b.w	8003b28 <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	200001e2 	.word	0x200001e2

080039e0 <__sinit_lock_release>:
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <__sinit_lock_release+0x8>)
 80039e2:	f000 b8a2 	b.w	8003b2a <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	200001e2 	.word	0x200001e2

080039ec <__sinit>:
 80039ec:	b510      	push	{r4, lr}
 80039ee:	4604      	mov	r4, r0
 80039f0:	f7ff fff0 	bl	80039d4 <__sinit_lock_acquire>
 80039f4:	69a3      	ldr	r3, [r4, #24]
 80039f6:	b11b      	cbz	r3, 8003a00 <__sinit+0x14>
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039fc:	f7ff bff0 	b.w	80039e0 <__sinit_lock_release>
 8003a00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a04:	6523      	str	r3, [r4, #80]	; 0x50
 8003a06:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <__sinit+0x68>)
 8003a08:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <__sinit+0x6c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	bf08      	it	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	4620      	mov	r0, r4
 8003a16:	bf08      	it	eq
 8003a18:	61a3      	streq	r3, [r4, #24]
 8003a1a:	f000 f81f 	bl	8003a5c <__sfp>
 8003a1e:	6060      	str	r0, [r4, #4]
 8003a20:	4620      	mov	r0, r4
 8003a22:	f000 f81b 	bl	8003a5c <__sfp>
 8003a26:	60a0      	str	r0, [r4, #8]
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 f817 	bl	8003a5c <__sfp>
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2104      	movs	r1, #4
 8003a32:	60e0      	str	r0, [r4, #12]
 8003a34:	6860      	ldr	r0, [r4, #4]
 8003a36:	f7ff ff81 	bl	800393c <std>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	2109      	movs	r1, #9
 8003a3e:	68a0      	ldr	r0, [r4, #8]
 8003a40:	f7ff ff7c 	bl	800393c <std>
 8003a44:	2202      	movs	r2, #2
 8003a46:	2112      	movs	r1, #18
 8003a48:	68e0      	ldr	r0, [r4, #12]
 8003a4a:	f7ff ff77 	bl	800393c <std>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61a3      	str	r3, [r4, #24]
 8003a52:	e7d1      	b.n	80039f8 <__sinit+0xc>
 8003a54:	080045c4 	.word	0x080045c4
 8003a58:	08003985 	.word	0x08003985

08003a5c <__sfp>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	4607      	mov	r7, r0
 8003a60:	f7ff ffac 	bl	80039bc <__sfp_lock_acquire>
 8003a64:	4b1e      	ldr	r3, [pc, #120]	; (8003ae0 <__sfp+0x84>)
 8003a66:	681e      	ldr	r6, [r3, #0]
 8003a68:	69b3      	ldr	r3, [r6, #24]
 8003a6a:	b913      	cbnz	r3, 8003a72 <__sfp+0x16>
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f7ff ffbd 	bl	80039ec <__sinit>
 8003a72:	3648      	adds	r6, #72	; 0x48
 8003a74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	d503      	bpl.n	8003a84 <__sfp+0x28>
 8003a7c:	6833      	ldr	r3, [r6, #0]
 8003a7e:	b30b      	cbz	r3, 8003ac4 <__sfp+0x68>
 8003a80:	6836      	ldr	r6, [r6, #0]
 8003a82:	e7f7      	b.n	8003a74 <__sfp+0x18>
 8003a84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a88:	b9d5      	cbnz	r5, 8003ac0 <__sfp+0x64>
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <__sfp+0x88>)
 8003a8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a90:	60e3      	str	r3, [r4, #12]
 8003a92:	6665      	str	r5, [r4, #100]	; 0x64
 8003a94:	f000 f847 	bl	8003b26 <__retarget_lock_init_recursive>
 8003a98:	f7ff ff96 	bl	80039c8 <__sfp_lock_release>
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003aa8:	6025      	str	r5, [r4, #0]
 8003aaa:	61a5      	str	r5, [r4, #24]
 8003aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ab0:	f7ff fd30 	bl	8003514 <memset>
 8003ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003abc:	4620      	mov	r0, r4
 8003abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac0:	3468      	adds	r4, #104	; 0x68
 8003ac2:	e7d9      	b.n	8003a78 <__sfp+0x1c>
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	f7ff ff62 	bl	8003990 <__sfmoreglue>
 8003acc:	4604      	mov	r4, r0
 8003ace:	6030      	str	r0, [r6, #0]
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d1d5      	bne.n	8003a80 <__sfp+0x24>
 8003ad4:	f7ff ff78 	bl	80039c8 <__sfp_lock_release>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	e7ee      	b.n	8003abc <__sfp+0x60>
 8003ade:	bf00      	nop
 8003ae0:	080045c4 	.word	0x080045c4
 8003ae4:	ffff0001 	.word	0xffff0001

08003ae8 <_fwalk_reent>:
 8003ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003aec:	4606      	mov	r6, r0
 8003aee:	4688      	mov	r8, r1
 8003af0:	2700      	movs	r7, #0
 8003af2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003af6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003afa:	f1b9 0901 	subs.w	r9, r9, #1
 8003afe:	d505      	bpl.n	8003b0c <_fwalk_reent+0x24>
 8003b00:	6824      	ldr	r4, [r4, #0]
 8003b02:	2c00      	cmp	r4, #0
 8003b04:	d1f7      	bne.n	8003af6 <_fwalk_reent+0xe>
 8003b06:	4638      	mov	r0, r7
 8003b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b0c:	89ab      	ldrh	r3, [r5, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d907      	bls.n	8003b22 <_fwalk_reent+0x3a>
 8003b12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b16:	3301      	adds	r3, #1
 8003b18:	d003      	beq.n	8003b22 <_fwalk_reent+0x3a>
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	47c0      	blx	r8
 8003b20:	4307      	orrs	r7, r0
 8003b22:	3568      	adds	r5, #104	; 0x68
 8003b24:	e7e9      	b.n	8003afa <_fwalk_reent+0x12>

08003b26 <__retarget_lock_init_recursive>:
 8003b26:	4770      	bx	lr

08003b28 <__retarget_lock_acquire_recursive>:
 8003b28:	4770      	bx	lr

08003b2a <__retarget_lock_release_recursive>:
 8003b2a:	4770      	bx	lr

08003b2c <__swhatbuf_r>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	460e      	mov	r6, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	4614      	mov	r4, r2
 8003b36:	2900      	cmp	r1, #0
 8003b38:	461d      	mov	r5, r3
 8003b3a:	b096      	sub	sp, #88	; 0x58
 8003b3c:	da08      	bge.n	8003b50 <__swhatbuf_r+0x24>
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b44:	602a      	str	r2, [r5, #0]
 8003b46:	061a      	lsls	r2, r3, #24
 8003b48:	d410      	bmi.n	8003b6c <__swhatbuf_r+0x40>
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	e00e      	b.n	8003b6e <__swhatbuf_r+0x42>
 8003b50:	466a      	mov	r2, sp
 8003b52:	f000 fc91 	bl	8004478 <_fstat_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	dbf1      	blt.n	8003b3e <__swhatbuf_r+0x12>
 8003b5a:	9a01      	ldr	r2, [sp, #4]
 8003b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b64:	425a      	negs	r2, r3
 8003b66:	415a      	adcs	r2, r3
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	e7ee      	b.n	8003b4a <__swhatbuf_r+0x1e>
 8003b6c:	2340      	movs	r3, #64	; 0x40
 8003b6e:	2000      	movs	r0, #0
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	b016      	add	sp, #88	; 0x58
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b78 <__smakebuf_r>:
 8003b78:	898b      	ldrh	r3, [r1, #12]
 8003b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b7c:	079d      	lsls	r5, r3, #30
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	d507      	bpl.n	8003b94 <__smakebuf_r+0x1c>
 8003b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	6123      	str	r3, [r4, #16]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	6163      	str	r3, [r4, #20]
 8003b90:	b002      	add	sp, #8
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	466a      	mov	r2, sp
 8003b96:	ab01      	add	r3, sp, #4
 8003b98:	f7ff ffc8 	bl	8003b2c <__swhatbuf_r>
 8003b9c:	9900      	ldr	r1, [sp, #0]
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f891 	bl	8003cc8 <_malloc_r>
 8003ba6:	b948      	cbnz	r0, 8003bbc <__smakebuf_r+0x44>
 8003ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bac:	059a      	lsls	r2, r3, #22
 8003bae:	d4ef      	bmi.n	8003b90 <__smakebuf_r+0x18>
 8003bb0:	f023 0303 	bic.w	r3, r3, #3
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	e7e3      	b.n	8003b84 <__smakebuf_r+0xc>
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <__smakebuf_r+0x7c>)
 8003bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	6020      	str	r0, [r4, #0]
 8003bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	9b00      	ldr	r3, [sp, #0]
 8003bcc:	6120      	str	r0, [r4, #16]
 8003bce:	6163      	str	r3, [r4, #20]
 8003bd0:	9b01      	ldr	r3, [sp, #4]
 8003bd2:	b15b      	cbz	r3, 8003bec <__smakebuf_r+0x74>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bda:	f000 fc5f 	bl	800449c <_isatty_r>
 8003bde:	b128      	cbz	r0, 8003bec <__smakebuf_r+0x74>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f023 0303 	bic.w	r3, r3, #3
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	89a0      	ldrh	r0, [r4, #12]
 8003bee:	4305      	orrs	r5, r0
 8003bf0:	81a5      	strh	r5, [r4, #12]
 8003bf2:	e7cd      	b.n	8003b90 <__smakebuf_r+0x18>
 8003bf4:	08003985 	.word	0x08003985

08003bf8 <_free_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4605      	mov	r5, r0
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	d040      	beq.n	8003c82 <_free_r+0x8a>
 8003c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c04:	1f0c      	subs	r4, r1, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bfb8      	it	lt
 8003c0a:	18e4      	addlt	r4, r4, r3
 8003c0c:	f000 fc76 	bl	80044fc <__malloc_lock>
 8003c10:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <_free_r+0x8c>)
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	b933      	cbnz	r3, 8003c24 <_free_r+0x2c>
 8003c16:	6063      	str	r3, [r4, #4]
 8003c18:	6014      	str	r4, [r2, #0]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c20:	f000 bc72 	b.w	8004508 <__malloc_unlock>
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d908      	bls.n	8003c3a <_free_r+0x42>
 8003c28:	6820      	ldr	r0, [r4, #0]
 8003c2a:	1821      	adds	r1, r4, r0
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	bf01      	itttt	eq
 8003c30:	6819      	ldreq	r1, [r3, #0]
 8003c32:	685b      	ldreq	r3, [r3, #4]
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	e7ed      	b.n	8003c16 <_free_r+0x1e>
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b10b      	cbz	r3, 8003c44 <_free_r+0x4c>
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	d9fa      	bls.n	8003c3a <_free_r+0x42>
 8003c44:	6811      	ldr	r1, [r2, #0]
 8003c46:	1850      	adds	r0, r2, r1
 8003c48:	42a0      	cmp	r0, r4
 8003c4a:	d10b      	bne.n	8003c64 <_free_r+0x6c>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	4401      	add	r1, r0
 8003c50:	1850      	adds	r0, r2, r1
 8003c52:	4283      	cmp	r3, r0
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	d1e0      	bne.n	8003c1a <_free_r+0x22>
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4401      	add	r1, r0
 8003c5e:	6011      	str	r1, [r2, #0]
 8003c60:	6053      	str	r3, [r2, #4]
 8003c62:	e7da      	b.n	8003c1a <_free_r+0x22>
 8003c64:	d902      	bls.n	8003c6c <_free_r+0x74>
 8003c66:	230c      	movs	r3, #12
 8003c68:	602b      	str	r3, [r5, #0]
 8003c6a:	e7d6      	b.n	8003c1a <_free_r+0x22>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	1821      	adds	r1, r4, r0
 8003c70:	428b      	cmp	r3, r1
 8003c72:	bf01      	itttt	eq
 8003c74:	6819      	ldreq	r1, [r3, #0]
 8003c76:	685b      	ldreq	r3, [r3, #4]
 8003c78:	1809      	addeq	r1, r1, r0
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	6054      	str	r4, [r2, #4]
 8003c80:	e7cb      	b.n	8003c1a <_free_r+0x22>
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
 8003c84:	200001e4 	.word	0x200001e4

08003c88 <sbrk_aligned>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4e0e      	ldr	r6, [pc, #56]	; (8003cc4 <sbrk_aligned+0x3c>)
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	6831      	ldr	r1, [r6, #0]
 8003c90:	4605      	mov	r5, r0
 8003c92:	b911      	cbnz	r1, 8003c9a <sbrk_aligned+0x12>
 8003c94:	f000 fb7a 	bl	800438c <_sbrk_r>
 8003c98:	6030      	str	r0, [r6, #0]
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 fb75 	bl	800438c <_sbrk_r>
 8003ca2:	1c43      	adds	r3, r0, #1
 8003ca4:	d00a      	beq.n	8003cbc <sbrk_aligned+0x34>
 8003ca6:	1cc4      	adds	r4, r0, #3
 8003ca8:	f024 0403 	bic.w	r4, r4, #3
 8003cac:	42a0      	cmp	r0, r4
 8003cae:	d007      	beq.n	8003cc0 <sbrk_aligned+0x38>
 8003cb0:	1a21      	subs	r1, r4, r0
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 fb6a 	bl	800438c <_sbrk_r>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d101      	bne.n	8003cc0 <sbrk_aligned+0x38>
 8003cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	200001e8 	.word	0x200001e8

08003cc8 <_malloc_r>:
 8003cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ccc:	1ccd      	adds	r5, r1, #3
 8003cce:	f025 0503 	bic.w	r5, r5, #3
 8003cd2:	3508      	adds	r5, #8
 8003cd4:	2d0c      	cmp	r5, #12
 8003cd6:	bf38      	it	cc
 8003cd8:	250c      	movcc	r5, #12
 8003cda:	2d00      	cmp	r5, #0
 8003cdc:	4607      	mov	r7, r0
 8003cde:	db01      	blt.n	8003ce4 <_malloc_r+0x1c>
 8003ce0:	42a9      	cmp	r1, r5
 8003ce2:	d905      	bls.n	8003cf0 <_malloc_r+0x28>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	2600      	movs	r6, #0
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	4630      	mov	r0, r6
 8003cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf0:	4e2e      	ldr	r6, [pc, #184]	; (8003dac <_malloc_r+0xe4>)
 8003cf2:	f000 fc03 	bl	80044fc <__malloc_lock>
 8003cf6:	6833      	ldr	r3, [r6, #0]
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	bb34      	cbnz	r4, 8003d4a <_malloc_r+0x82>
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	4638      	mov	r0, r7
 8003d00:	f7ff ffc2 	bl	8003c88 <sbrk_aligned>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	4604      	mov	r4, r0
 8003d08:	d14d      	bne.n	8003da6 <_malloc_r+0xde>
 8003d0a:	6834      	ldr	r4, [r6, #0]
 8003d0c:	4626      	mov	r6, r4
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d140      	bne.n	8003d94 <_malloc_r+0xcc>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4631      	mov	r1, r6
 8003d16:	4638      	mov	r0, r7
 8003d18:	eb04 0803 	add.w	r8, r4, r3
 8003d1c:	f000 fb36 	bl	800438c <_sbrk_r>
 8003d20:	4580      	cmp	r8, r0
 8003d22:	d13a      	bne.n	8003d9a <_malloc_r+0xd2>
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	3503      	adds	r5, #3
 8003d28:	1a6d      	subs	r5, r5, r1
 8003d2a:	f025 0503 	bic.w	r5, r5, #3
 8003d2e:	3508      	adds	r5, #8
 8003d30:	2d0c      	cmp	r5, #12
 8003d32:	bf38      	it	cc
 8003d34:	250c      	movcc	r5, #12
 8003d36:	4638      	mov	r0, r7
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7ff ffa5 	bl	8003c88 <sbrk_aligned>
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d02b      	beq.n	8003d9a <_malloc_r+0xd2>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	442b      	add	r3, r5
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	e00e      	b.n	8003d68 <_malloc_r+0xa0>
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	1b52      	subs	r2, r2, r5
 8003d4e:	d41e      	bmi.n	8003d8e <_malloc_r+0xc6>
 8003d50:	2a0b      	cmp	r2, #11
 8003d52:	d916      	bls.n	8003d82 <_malloc_r+0xba>
 8003d54:	1961      	adds	r1, r4, r5
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	6025      	str	r5, [r4, #0]
 8003d5a:	bf18      	it	ne
 8003d5c:	6059      	strne	r1, [r3, #4]
 8003d5e:	6863      	ldr	r3, [r4, #4]
 8003d60:	bf08      	it	eq
 8003d62:	6031      	streq	r1, [r6, #0]
 8003d64:	5162      	str	r2, [r4, r5]
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f104 060b 	add.w	r6, r4, #11
 8003d6e:	f000 fbcb 	bl	8004508 <__malloc_unlock>
 8003d72:	f026 0607 	bic.w	r6, r6, #7
 8003d76:	1d23      	adds	r3, r4, #4
 8003d78:	1af2      	subs	r2, r6, r3
 8003d7a:	d0b6      	beq.n	8003cea <_malloc_r+0x22>
 8003d7c:	1b9b      	subs	r3, r3, r6
 8003d7e:	50a3      	str	r3, [r4, r2]
 8003d80:	e7b3      	b.n	8003cea <_malloc_r+0x22>
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	bf0c      	ite	eq
 8003d88:	6032      	streq	r2, [r6, #0]
 8003d8a:	605a      	strne	r2, [r3, #4]
 8003d8c:	e7ec      	b.n	8003d68 <_malloc_r+0xa0>
 8003d8e:	4623      	mov	r3, r4
 8003d90:	6864      	ldr	r4, [r4, #4]
 8003d92:	e7b2      	b.n	8003cfa <_malloc_r+0x32>
 8003d94:	4634      	mov	r4, r6
 8003d96:	6876      	ldr	r6, [r6, #4]
 8003d98:	e7b9      	b.n	8003d0e <_malloc_r+0x46>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	f000 fbb2 	bl	8004508 <__malloc_unlock>
 8003da4:	e7a1      	b.n	8003cea <_malloc_r+0x22>
 8003da6:	6025      	str	r5, [r4, #0]
 8003da8:	e7de      	b.n	8003d68 <_malloc_r+0xa0>
 8003daa:	bf00      	nop
 8003dac:	200001e4 	.word	0x200001e4

08003db0 <__sfputc_r>:
 8003db0:	6893      	ldr	r3, [r2, #8]
 8003db2:	b410      	push	{r4}
 8003db4:	3b01      	subs	r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	6093      	str	r3, [r2, #8]
 8003dba:	da07      	bge.n	8003dcc <__sfputc_r+0x1c>
 8003dbc:	6994      	ldr	r4, [r2, #24]
 8003dbe:	42a3      	cmp	r3, r4
 8003dc0:	db01      	blt.n	8003dc6 <__sfputc_r+0x16>
 8003dc2:	290a      	cmp	r1, #10
 8003dc4:	d102      	bne.n	8003dcc <__sfputc_r+0x1c>
 8003dc6:	bc10      	pop	{r4}
 8003dc8:	f7ff bc3a 	b.w	8003640 <__swbuf_r>
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	1c58      	adds	r0, r3, #1
 8003dd0:	6010      	str	r0, [r2, #0]
 8003dd2:	7019      	strb	r1, [r3, #0]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	bc10      	pop	{r4}
 8003dd8:	4770      	bx	lr

08003dda <__sfputs_r>:
 8003dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ddc:	4606      	mov	r6, r0
 8003dde:	460f      	mov	r7, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	18d5      	adds	r5, r2, r3
 8003de4:	42ac      	cmp	r4, r5
 8003de6:	d101      	bne.n	8003dec <__sfputs_r+0x12>
 8003de8:	2000      	movs	r0, #0
 8003dea:	e007      	b.n	8003dfc <__sfputs_r+0x22>
 8003dec:	463a      	mov	r2, r7
 8003dee:	4630      	mov	r0, r6
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	f7ff ffdc 	bl	8003db0 <__sfputc_r>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d1f3      	bne.n	8003de4 <__sfputs_r+0xa>
 8003dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e00 <_vfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	460d      	mov	r5, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	4698      	mov	r8, r3
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	b09d      	sub	sp, #116	; 0x74
 8003e0e:	b118      	cbz	r0, 8003e18 <_vfiprintf_r+0x18>
 8003e10:	6983      	ldr	r3, [r0, #24]
 8003e12:	b90b      	cbnz	r3, 8003e18 <_vfiprintf_r+0x18>
 8003e14:	f7ff fdea 	bl	80039ec <__sinit>
 8003e18:	4b89      	ldr	r3, [pc, #548]	; (8004040 <_vfiprintf_r+0x240>)
 8003e1a:	429d      	cmp	r5, r3
 8003e1c:	d11b      	bne.n	8003e56 <_vfiprintf_r+0x56>
 8003e1e:	6875      	ldr	r5, [r6, #4]
 8003e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e22:	07d9      	lsls	r1, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e26:	89ab      	ldrh	r3, [r5, #12]
 8003e28:	059a      	lsls	r2, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_vfiprintf_r+0x32>
 8003e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e2e:	f7ff fe7b 	bl	8003b28 <__retarget_lock_acquire_recursive>
 8003e32:	89ab      	ldrh	r3, [r5, #12]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	d501      	bpl.n	8003e3c <_vfiprintf_r+0x3c>
 8003e38:	692b      	ldr	r3, [r5, #16]
 8003e3a:	b9eb      	cbnz	r3, 8003e78 <_vfiprintf_r+0x78>
 8003e3c:	4629      	mov	r1, r5
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff fc50 	bl	80036e4 <__swsetup_r>
 8003e44:	b1c0      	cbz	r0, 8003e78 <_vfiprintf_r+0x78>
 8003e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e48:	07dc      	lsls	r4, r3, #31
 8003e4a:	d50e      	bpl.n	8003e6a <_vfiprintf_r+0x6a>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b01d      	add	sp, #116	; 0x74
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <_vfiprintf_r+0x244>)
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	d101      	bne.n	8003e60 <_vfiprintf_r+0x60>
 8003e5c:	68b5      	ldr	r5, [r6, #8]
 8003e5e:	e7df      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <_vfiprintf_r+0x248>)
 8003e62:	429d      	cmp	r5, r3
 8003e64:	bf08      	it	eq
 8003e66:	68f5      	ldreq	r5, [r6, #12]
 8003e68:	e7da      	b.n	8003e20 <_vfiprintf_r+0x20>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	0598      	lsls	r0, r3, #22
 8003e6e:	d4ed      	bmi.n	8003e4c <_vfiprintf_r+0x4c>
 8003e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e72:	f7ff fe5a 	bl	8003b2a <__retarget_lock_release_recursive>
 8003e76:	e7e9      	b.n	8003e4c <_vfiprintf_r+0x4c>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e82:	2330      	movs	r3, #48	; 0x30
 8003e84:	f04f 0901 	mov.w	r9, #1
 8003e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800404c <_vfiprintf_r+0x24c>
 8003e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e94:	4623      	mov	r3, r4
 8003e96:	469a      	mov	sl, r3
 8003e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9c:	b10a      	cbz	r2, 8003ea2 <_vfiprintf_r+0xa2>
 8003e9e:	2a25      	cmp	r2, #37	; 0x25
 8003ea0:	d1f9      	bne.n	8003e96 <_vfiprintf_r+0x96>
 8003ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea6:	d00b      	beq.n	8003ec0 <_vfiprintf_r+0xc0>
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff ff93 	bl	8003dda <__sfputs_r>
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f000 80aa 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ebc:	445a      	add	r2, fp
 8003ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a2 	beq.w	800400e <_vfiprintf_r+0x20e>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed4:	f10a 0a01 	add.w	sl, sl, #1
 8003ed8:	9304      	str	r3, [sp, #16]
 8003eda:	9307      	str	r3, [sp, #28]
 8003edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee2:	4654      	mov	r4, sl
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eea:	4858      	ldr	r0, [pc, #352]	; (800404c <_vfiprintf_r+0x24c>)
 8003eec:	f000 faf8 	bl	80044e0 <memchr>
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	b9d8      	cbnz	r0, 8003f2c <_vfiprintf_r+0x12c>
 8003ef4:	06d1      	lsls	r1, r2, #27
 8003ef6:	bf44      	itt	mi
 8003ef8:	2320      	movmi	r3, #32
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	0713      	lsls	r3, r2, #28
 8003f00:	bf44      	itt	mi
 8003f02:	232b      	movmi	r3, #43	; 0x2b
 8003f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f08:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d015      	beq.n	8003f3c <_vfiprintf_r+0x13c>
 8003f10:	4654      	mov	r4, sl
 8003f12:	2000      	movs	r0, #0
 8003f14:	f04f 0c0a 	mov.w	ip, #10
 8003f18:	9a07      	ldr	r2, [sp, #28]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f20:	3b30      	subs	r3, #48	; 0x30
 8003f22:	2b09      	cmp	r3, #9
 8003f24:	d94e      	bls.n	8003fc4 <_vfiprintf_r+0x1c4>
 8003f26:	b1b0      	cbz	r0, 8003f56 <_vfiprintf_r+0x156>
 8003f28:	9207      	str	r2, [sp, #28]
 8003f2a:	e014      	b.n	8003f56 <_vfiprintf_r+0x156>
 8003f2c:	eba0 0308 	sub.w	r3, r0, r8
 8003f30:	fa09 f303 	lsl.w	r3, r9, r3
 8003f34:	4313      	orrs	r3, r2
 8003f36:	46a2      	mov	sl, r4
 8003f38:	9304      	str	r3, [sp, #16]
 8003f3a:	e7d2      	b.n	8003ee2 <_vfiprintf_r+0xe2>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d19      	adds	r1, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9103      	str	r1, [sp, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bfbb      	ittet	lt
 8003f48:	425b      	neglt	r3, r3
 8003f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4e:	9307      	strge	r3, [sp, #28]
 8003f50:	9307      	strlt	r3, [sp, #28]
 8003f52:	bfb8      	it	lt
 8003f54:	9204      	strlt	r2, [sp, #16]
 8003f56:	7823      	ldrb	r3, [r4, #0]
 8003f58:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5a:	d10c      	bne.n	8003f76 <_vfiprintf_r+0x176>
 8003f5c:	7863      	ldrb	r3, [r4, #1]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d135      	bne.n	8003fce <_vfiprintf_r+0x1ce>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	3402      	adds	r4, #2
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	9203      	str	r2, [sp, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bfb8      	it	lt
 8003f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f74:	9305      	str	r3, [sp, #20]
 8003f76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004050 <_vfiprintf_r+0x250>
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	7821      	ldrb	r1, [r4, #0]
 8003f80:	f000 faae 	bl	80044e0 <memchr>
 8003f84:	b140      	cbz	r0, 8003f98 <_vfiprintf_r+0x198>
 8003f86:	2340      	movs	r3, #64	; 0x40
 8003f88:	eba0 000a 	sub.w	r0, r0, sl
 8003f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f90:	9b04      	ldr	r3, [sp, #16]
 8003f92:	3401      	adds	r4, #1
 8003f94:	4303      	orrs	r3, r0
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f9c:	2206      	movs	r2, #6
 8003f9e:	482d      	ldr	r0, [pc, #180]	; (8004054 <_vfiprintf_r+0x254>)
 8003fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa4:	f000 fa9c 	bl	80044e0 <memchr>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d03f      	beq.n	800402c <_vfiprintf_r+0x22c>
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <_vfiprintf_r+0x258>)
 8003fae:	bb1b      	cbnz	r3, 8003ff8 <_vfiprintf_r+0x1f8>
 8003fb0:	9b03      	ldr	r3, [sp, #12]
 8003fb2:	3307      	adds	r3, #7
 8003fb4:	f023 0307 	bic.w	r3, r3, #7
 8003fb8:	3308      	adds	r3, #8
 8003fba:	9303      	str	r3, [sp, #12]
 8003fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fbe:	443b      	add	r3, r7
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	e767      	b.n	8003e94 <_vfiprintf_r+0x94>
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fcc:	e7a5      	b.n	8003f1a <_vfiprintf_r+0x11a>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f04f 0c0a 	mov.w	ip, #10
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	9305      	str	r3, [sp, #20]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe0:	3a30      	subs	r2, #48	; 0x30
 8003fe2:	2a09      	cmp	r2, #9
 8003fe4:	d903      	bls.n	8003fee <_vfiprintf_r+0x1ee>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0c5      	beq.n	8003f76 <_vfiprintf_r+0x176>
 8003fea:	9105      	str	r1, [sp, #20]
 8003fec:	e7c3      	b.n	8003f76 <_vfiprintf_r+0x176>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ff6:	e7f0      	b.n	8003fda <_vfiprintf_r+0x1da>
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	462a      	mov	r2, r5
 8003ffe:	4630      	mov	r0, r6
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <_vfiprintf_r+0x25c>)
 8004002:	a904      	add	r1, sp, #16
 8004004:	f3af 8000 	nop.w
 8004008:	4607      	mov	r7, r0
 800400a:	1c78      	adds	r0, r7, #1
 800400c:	d1d6      	bne.n	8003fbc <_vfiprintf_r+0x1bc>
 800400e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004010:	07d9      	lsls	r1, r3, #31
 8004012:	d405      	bmi.n	8004020 <_vfiprintf_r+0x220>
 8004014:	89ab      	ldrh	r3, [r5, #12]
 8004016:	059a      	lsls	r2, r3, #22
 8004018:	d402      	bmi.n	8004020 <_vfiprintf_r+0x220>
 800401a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401c:	f7ff fd85 	bl	8003b2a <__retarget_lock_release_recursive>
 8004020:	89ab      	ldrh	r3, [r5, #12]
 8004022:	065b      	lsls	r3, r3, #25
 8004024:	f53f af12 	bmi.w	8003e4c <_vfiprintf_r+0x4c>
 8004028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402a:	e711      	b.n	8003e50 <_vfiprintf_r+0x50>
 800402c:	ab03      	add	r3, sp, #12
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462a      	mov	r2, r5
 8004032:	4630      	mov	r0, r6
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <_vfiprintf_r+0x25c>)
 8004036:	a904      	add	r1, sp, #16
 8004038:	f000 f882 	bl	8004140 <_printf_i>
 800403c:	e7e4      	b.n	8004008 <_vfiprintf_r+0x208>
 800403e:	bf00      	nop
 8004040:	080045e8 	.word	0x080045e8
 8004044:	08004608 	.word	0x08004608
 8004048:	080045c8 	.word	0x080045c8
 800404c:	08004628 	.word	0x08004628
 8004050:	0800462e 	.word	0x0800462e
 8004054:	08004632 	.word	0x08004632
 8004058:	00000000 	.word	0x00000000
 800405c:	08003ddb 	.word	0x08003ddb

08004060 <_printf_common>:
 8004060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004064:	4616      	mov	r6, r2
 8004066:	4699      	mov	r9, r3
 8004068:	688a      	ldr	r2, [r1, #8]
 800406a:	690b      	ldr	r3, [r1, #16]
 800406c:	4607      	mov	r7, r0
 800406e:	4293      	cmp	r3, r2
 8004070:	bfb8      	it	lt
 8004072:	4613      	movlt	r3, r2
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407a:	460c      	mov	r4, r1
 800407c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004080:	b10a      	cbz	r2, 8004086 <_printf_common+0x26>
 8004082:	3301      	adds	r3, #1
 8004084:	6033      	str	r3, [r6, #0]
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	0699      	lsls	r1, r3, #26
 800408a:	bf42      	ittt	mi
 800408c:	6833      	ldrmi	r3, [r6, #0]
 800408e:	3302      	addmi	r3, #2
 8004090:	6033      	strmi	r3, [r6, #0]
 8004092:	6825      	ldr	r5, [r4, #0]
 8004094:	f015 0506 	ands.w	r5, r5, #6
 8004098:	d106      	bne.n	80040a8 <_printf_common+0x48>
 800409a:	f104 0a19 	add.w	sl, r4, #25
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	6832      	ldr	r2, [r6, #0]
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	dc28      	bgt.n	80040fa <_printf_common+0x9a>
 80040a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040ac:	1e13      	subs	r3, r2, #0
 80040ae:	6822      	ldr	r2, [r4, #0]
 80040b0:	bf18      	it	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	0692      	lsls	r2, r2, #26
 80040b6:	d42d      	bmi.n	8004114 <_printf_common+0xb4>
 80040b8:	4649      	mov	r1, r9
 80040ba:	4638      	mov	r0, r7
 80040bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d020      	beq.n	8004108 <_printf_common+0xa8>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	68e5      	ldr	r5, [r4, #12]
 80040ca:	f003 0306 	and.w	r3, r3, #6
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf18      	it	ne
 80040d2:	2500      	movne	r5, #0
 80040d4:	6832      	ldr	r2, [r6, #0]
 80040d6:	f04f 0600 	mov.w	r6, #0
 80040da:	68a3      	ldr	r3, [r4, #8]
 80040dc:	bf08      	it	eq
 80040de:	1aad      	subeq	r5, r5, r2
 80040e0:	6922      	ldr	r2, [r4, #16]
 80040e2:	bf08      	it	eq
 80040e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e8:	4293      	cmp	r3, r2
 80040ea:	bfc4      	itt	gt
 80040ec:	1a9b      	subgt	r3, r3, r2
 80040ee:	18ed      	addgt	r5, r5, r3
 80040f0:	341a      	adds	r4, #26
 80040f2:	42b5      	cmp	r5, r6
 80040f4:	d11a      	bne.n	800412c <_printf_common+0xcc>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e008      	b.n	800410c <_printf_common+0xac>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4652      	mov	r2, sl
 80040fe:	4649      	mov	r1, r9
 8004100:	4638      	mov	r0, r7
 8004102:	47c0      	blx	r8
 8004104:	3001      	adds	r0, #1
 8004106:	d103      	bne.n	8004110 <_printf_common+0xb0>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004110:	3501      	adds	r5, #1
 8004112:	e7c4      	b.n	800409e <_printf_common+0x3e>
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	18e1      	adds	r1, r4, r3
 8004118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004122:	4422      	add	r2, r4
 8004124:	3302      	adds	r3, #2
 8004126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412a:	e7c5      	b.n	80040b8 <_printf_common+0x58>
 800412c:	2301      	movs	r3, #1
 800412e:	4622      	mov	r2, r4
 8004130:	4649      	mov	r1, r9
 8004132:	4638      	mov	r0, r7
 8004134:	47c0      	blx	r8
 8004136:	3001      	adds	r0, #1
 8004138:	d0e6      	beq.n	8004108 <_printf_common+0xa8>
 800413a:	3601      	adds	r6, #1
 800413c:	e7d9      	b.n	80040f2 <_printf_common+0x92>
	...

08004140 <_printf_i>:
 8004140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	7e0f      	ldrb	r7, [r1, #24]
 8004146:	4691      	mov	r9, r2
 8004148:	2f78      	cmp	r7, #120	; 0x78
 800414a:	4680      	mov	r8, r0
 800414c:	460c      	mov	r4, r1
 800414e:	469a      	mov	sl, r3
 8004150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004156:	d807      	bhi.n	8004168 <_printf_i+0x28>
 8004158:	2f62      	cmp	r7, #98	; 0x62
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x32>
 800415c:	2f00      	cmp	r7, #0
 800415e:	f000 80d9 	beq.w	8004314 <_printf_i+0x1d4>
 8004162:	2f58      	cmp	r7, #88	; 0x58
 8004164:	f000 80a4 	beq.w	80042b0 <_printf_i+0x170>
 8004168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004170:	e03a      	b.n	80041e8 <_printf_i+0xa8>
 8004172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004176:	2b15      	cmp	r3, #21
 8004178:	d8f6      	bhi.n	8004168 <_printf_i+0x28>
 800417a:	a101      	add	r1, pc, #4	; (adr r1, 8004180 <_printf_i+0x40>)
 800417c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004169 	.word	0x08004169
 800418c:	08004169 	.word	0x08004169
 8004190:	08004169 	.word	0x08004169
 8004194:	08004169 	.word	0x08004169
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004169 	.word	0x08004169
 80041a0:	08004169 	.word	0x08004169
 80041a4:	08004169 	.word	0x08004169
 80041a8:	08004169 	.word	0x08004169
 80041ac:	080042fb 	.word	0x080042fb
 80041b0:	0800421d 	.word	0x0800421d
 80041b4:	080042dd 	.word	0x080042dd
 80041b8:	08004169 	.word	0x08004169
 80041bc:	08004169 	.word	0x08004169
 80041c0:	0800431d 	.word	0x0800431d
 80041c4:	08004169 	.word	0x08004169
 80041c8:	0800421d 	.word	0x0800421d
 80041cc:	08004169 	.word	0x08004169
 80041d0:	08004169 	.word	0x08004169
 80041d4:	080042e5 	.word	0x080042e5
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	602a      	str	r2, [r5, #0]
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0a4      	b.n	8004336 <_printf_i+0x1f6>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	6829      	ldr	r1, [r5, #0]
 80041f0:	0606      	lsls	r6, r0, #24
 80041f2:	f101 0304 	add.w	r3, r1, #4
 80041f6:	d50a      	bpl.n	800420e <_printf_i+0xce>
 80041f8:	680e      	ldr	r6, [r1, #0]
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	da03      	bge.n	8004208 <_printf_i+0xc8>
 8004200:	232d      	movs	r3, #45	; 0x2d
 8004202:	4276      	negs	r6, r6
 8004204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004208:	230a      	movs	r3, #10
 800420a:	485e      	ldr	r0, [pc, #376]	; (8004384 <_printf_i+0x244>)
 800420c:	e019      	b.n	8004242 <_printf_i+0x102>
 800420e:	680e      	ldr	r6, [r1, #0]
 8004210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	bf18      	it	ne
 8004218:	b236      	sxthne	r6, r6
 800421a:	e7ef      	b.n	80041fc <_printf_i+0xbc>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	1d19      	adds	r1, r3, #4
 8004222:	6029      	str	r1, [r5, #0]
 8004224:	0601      	lsls	r1, r0, #24
 8004226:	d501      	bpl.n	800422c <_printf_i+0xec>
 8004228:	681e      	ldr	r6, [r3, #0]
 800422a:	e002      	b.n	8004232 <_printf_i+0xf2>
 800422c:	0646      	lsls	r6, r0, #25
 800422e:	d5fb      	bpl.n	8004228 <_printf_i+0xe8>
 8004230:	881e      	ldrh	r6, [r3, #0]
 8004232:	2f6f      	cmp	r7, #111	; 0x6f
 8004234:	bf0c      	ite	eq
 8004236:	2308      	moveq	r3, #8
 8004238:	230a      	movne	r3, #10
 800423a:	4852      	ldr	r0, [pc, #328]	; (8004384 <_printf_i+0x244>)
 800423c:	2100      	movs	r1, #0
 800423e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004242:	6865      	ldr	r5, [r4, #4]
 8004244:	2d00      	cmp	r5, #0
 8004246:	bfa8      	it	ge
 8004248:	6821      	ldrge	r1, [r4, #0]
 800424a:	60a5      	str	r5, [r4, #8]
 800424c:	bfa4      	itt	ge
 800424e:	f021 0104 	bicge.w	r1, r1, #4
 8004252:	6021      	strge	r1, [r4, #0]
 8004254:	b90e      	cbnz	r6, 800425a <_printf_i+0x11a>
 8004256:	2d00      	cmp	r5, #0
 8004258:	d04d      	beq.n	80042f6 <_printf_i+0x1b6>
 800425a:	4615      	mov	r5, r2
 800425c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004260:	fb03 6711 	mls	r7, r3, r1, r6
 8004264:	5dc7      	ldrb	r7, [r0, r7]
 8004266:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800426a:	4637      	mov	r7, r6
 800426c:	42bb      	cmp	r3, r7
 800426e:	460e      	mov	r6, r1
 8004270:	d9f4      	bls.n	800425c <_printf_i+0x11c>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d10b      	bne.n	800428e <_printf_i+0x14e>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	07de      	lsls	r6, r3, #31
 800427a:	d508      	bpl.n	800428e <_printf_i+0x14e>
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	6861      	ldr	r1, [r4, #4]
 8004280:	4299      	cmp	r1, r3
 8004282:	bfde      	ittt	le
 8004284:	2330      	movle	r3, #48	; 0x30
 8004286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800428e:	1b52      	subs	r2, r2, r5
 8004290:	6122      	str	r2, [r4, #16]
 8004292:	464b      	mov	r3, r9
 8004294:	4621      	mov	r1, r4
 8004296:	4640      	mov	r0, r8
 8004298:	f8cd a000 	str.w	sl, [sp]
 800429c:	aa03      	add	r2, sp, #12
 800429e:	f7ff fedf 	bl	8004060 <_printf_common>
 80042a2:	3001      	adds	r0, #1
 80042a4:	d14c      	bne.n	8004340 <_printf_i+0x200>
 80042a6:	f04f 30ff 	mov.w	r0, #4294967295
 80042aa:	b004      	add	sp, #16
 80042ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b0:	4834      	ldr	r0, [pc, #208]	; (8004384 <_printf_i+0x244>)
 80042b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042b6:	6829      	ldr	r1, [r5, #0]
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80042be:	6029      	str	r1, [r5, #0]
 80042c0:	061d      	lsls	r5, r3, #24
 80042c2:	d514      	bpl.n	80042ee <_printf_i+0x1ae>
 80042c4:	07df      	lsls	r7, r3, #31
 80042c6:	bf44      	itt	mi
 80042c8:	f043 0320 	orrmi.w	r3, r3, #32
 80042cc:	6023      	strmi	r3, [r4, #0]
 80042ce:	b91e      	cbnz	r6, 80042d8 <_printf_i+0x198>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	2310      	movs	r3, #16
 80042da:	e7af      	b.n	800423c <_printf_i+0xfc>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	f043 0320 	orr.w	r3, r3, #32
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	2378      	movs	r3, #120	; 0x78
 80042e6:	4828      	ldr	r0, [pc, #160]	; (8004388 <_printf_i+0x248>)
 80042e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ec:	e7e3      	b.n	80042b6 <_printf_i+0x176>
 80042ee:	0659      	lsls	r1, r3, #25
 80042f0:	bf48      	it	mi
 80042f2:	b2b6      	uxthmi	r6, r6
 80042f4:	e7e6      	b.n	80042c4 <_printf_i+0x184>
 80042f6:	4615      	mov	r5, r2
 80042f8:	e7bb      	b.n	8004272 <_printf_i+0x132>
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	6826      	ldr	r6, [r4, #0]
 80042fe:	1d18      	adds	r0, r3, #4
 8004300:	6961      	ldr	r1, [r4, #20]
 8004302:	6028      	str	r0, [r5, #0]
 8004304:	0635      	lsls	r5, r6, #24
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	d501      	bpl.n	800430e <_printf_i+0x1ce>
 800430a:	6019      	str	r1, [r3, #0]
 800430c:	e002      	b.n	8004314 <_printf_i+0x1d4>
 800430e:	0670      	lsls	r0, r6, #25
 8004310:	d5fb      	bpl.n	800430a <_printf_i+0x1ca>
 8004312:	8019      	strh	r1, [r3, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	4615      	mov	r5, r2
 8004318:	6123      	str	r3, [r4, #16]
 800431a:	e7ba      	b.n	8004292 <_printf_i+0x152>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	2100      	movs	r1, #0
 8004320:	1d1a      	adds	r2, r3, #4
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	6862      	ldr	r2, [r4, #4]
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f8d9 	bl	80044e0 <memchr>
 800432e:	b108      	cbz	r0, 8004334 <_printf_i+0x1f4>
 8004330:	1b40      	subs	r0, r0, r5
 8004332:	6060      	str	r0, [r4, #4]
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	6123      	str	r3, [r4, #16]
 8004338:	2300      	movs	r3, #0
 800433a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433e:	e7a8      	b.n	8004292 <_printf_i+0x152>
 8004340:	462a      	mov	r2, r5
 8004342:	4649      	mov	r1, r9
 8004344:	4640      	mov	r0, r8
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	47d0      	blx	sl
 800434a:	3001      	adds	r0, #1
 800434c:	d0ab      	beq.n	80042a6 <_printf_i+0x166>
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	079b      	lsls	r3, r3, #30
 8004352:	d413      	bmi.n	800437c <_printf_i+0x23c>
 8004354:	68e0      	ldr	r0, [r4, #12]
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	4298      	cmp	r0, r3
 800435a:	bfb8      	it	lt
 800435c:	4618      	movlt	r0, r3
 800435e:	e7a4      	b.n	80042aa <_printf_i+0x16a>
 8004360:	2301      	movs	r3, #1
 8004362:	4632      	mov	r2, r6
 8004364:	4649      	mov	r1, r9
 8004366:	4640      	mov	r0, r8
 8004368:	47d0      	blx	sl
 800436a:	3001      	adds	r0, #1
 800436c:	d09b      	beq.n	80042a6 <_printf_i+0x166>
 800436e:	3501      	adds	r5, #1
 8004370:	68e3      	ldr	r3, [r4, #12]
 8004372:	9903      	ldr	r1, [sp, #12]
 8004374:	1a5b      	subs	r3, r3, r1
 8004376:	42ab      	cmp	r3, r5
 8004378:	dcf2      	bgt.n	8004360 <_printf_i+0x220>
 800437a:	e7eb      	b.n	8004354 <_printf_i+0x214>
 800437c:	2500      	movs	r5, #0
 800437e:	f104 0619 	add.w	r6, r4, #25
 8004382:	e7f5      	b.n	8004370 <_printf_i+0x230>
 8004384:	08004639 	.word	0x08004639
 8004388:	0800464a 	.word	0x0800464a

0800438c <_sbrk_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	2300      	movs	r3, #0
 8004390:	4d05      	ldr	r5, [pc, #20]	; (80043a8 <_sbrk_r+0x1c>)
 8004392:	4604      	mov	r4, r0
 8004394:	4608      	mov	r0, r1
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	f7fc fbbe 	bl	8000b18 <_sbrk>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_sbrk_r+0x1a>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_sbrk_r+0x1a>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	200001ec 	.word	0x200001ec

080043ac <__sread>:
 80043ac:	b510      	push	{r4, lr}
 80043ae:	460c      	mov	r4, r1
 80043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b4:	f000 f8ae 	bl	8004514 <_read_r>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	bfab      	itete	ge
 80043bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043be:	89a3      	ldrhlt	r3, [r4, #12]
 80043c0:	181b      	addge	r3, r3, r0
 80043c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043c6:	bfac      	ite	ge
 80043c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ca:	81a3      	strhlt	r3, [r4, #12]
 80043cc:	bd10      	pop	{r4, pc}

080043ce <__swrite>:
 80043ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	461f      	mov	r7, r3
 80043d4:	898b      	ldrh	r3, [r1, #12]
 80043d6:	4605      	mov	r5, r0
 80043d8:	05db      	lsls	r3, r3, #23
 80043da:	460c      	mov	r4, r1
 80043dc:	4616      	mov	r6, r2
 80043de:	d505      	bpl.n	80043ec <__swrite+0x1e>
 80043e0:	2302      	movs	r3, #2
 80043e2:	2200      	movs	r2, #0
 80043e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e8:	f000 f868 	bl	80044bc <_lseek_r>
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	4632      	mov	r2, r6
 80043f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	4628      	mov	r0, r5
 80043f8:	463b      	mov	r3, r7
 80043fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	f000 b817 	b.w	8004434 <_write_r>

08004406 <__sseek>:
 8004406:	b510      	push	{r4, lr}
 8004408:	460c      	mov	r4, r1
 800440a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440e:	f000 f855 	bl	80044bc <_lseek_r>
 8004412:	1c43      	adds	r3, r0, #1
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	bf15      	itete	ne
 8004418:	6560      	strne	r0, [r4, #84]	; 0x54
 800441a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800441e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004422:	81a3      	strheq	r3, [r4, #12]
 8004424:	bf18      	it	ne
 8004426:	81a3      	strhne	r3, [r4, #12]
 8004428:	bd10      	pop	{r4, pc}

0800442a <__sclose>:
 800442a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442e:	f000 b813 	b.w	8004458 <_close_r>
	...

08004434 <_write_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	2200      	movs	r2, #0
 800443e:	4d05      	ldr	r5, [pc, #20]	; (8004454 <_write_r+0x20>)
 8004440:	602a      	str	r2, [r5, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	f7fc f9d0 	bl	80007e8 <_write>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	d102      	bne.n	8004452 <_write_r+0x1e>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	b103      	cbz	r3, 8004452 <_write_r+0x1e>
 8004450:	6023      	str	r3, [r4, #0]
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	200001ec 	.word	0x200001ec

08004458 <_close_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	2300      	movs	r3, #0
 800445c:	4d05      	ldr	r5, [pc, #20]	; (8004474 <_close_r+0x1c>)
 800445e:	4604      	mov	r4, r0
 8004460:	4608      	mov	r0, r1
 8004462:	602b      	str	r3, [r5, #0]
 8004464:	f7fc fb28 	bl	8000ab8 <_close>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_close_r+0x1a>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_close_r+0x1a>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200001ec 	.word	0x200001ec

08004478 <_fstat_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	2300      	movs	r3, #0
 800447c:	4d06      	ldr	r5, [pc, #24]	; (8004498 <_fstat_r+0x20>)
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	f7fc fb22 	bl	8000ace <_fstat>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d102      	bne.n	8004494 <_fstat_r+0x1c>
 800448e:	682b      	ldr	r3, [r5, #0]
 8004490:	b103      	cbz	r3, 8004494 <_fstat_r+0x1c>
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	bf00      	nop
 8004498:	200001ec 	.word	0x200001ec

0800449c <_isatty_r>:
 800449c:	b538      	push	{r3, r4, r5, lr}
 800449e:	2300      	movs	r3, #0
 80044a0:	4d05      	ldr	r5, [pc, #20]	; (80044b8 <_isatty_r+0x1c>)
 80044a2:	4604      	mov	r4, r0
 80044a4:	4608      	mov	r0, r1
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	f7fc fb20 	bl	8000aec <_isatty>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d102      	bne.n	80044b6 <_isatty_r+0x1a>
 80044b0:	682b      	ldr	r3, [r5, #0]
 80044b2:	b103      	cbz	r3, 80044b6 <_isatty_r+0x1a>
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	200001ec 	.word	0x200001ec

080044bc <_lseek_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	2200      	movs	r2, #0
 80044c6:	4d05      	ldr	r5, [pc, #20]	; (80044dc <_lseek_r+0x20>)
 80044c8:	602a      	str	r2, [r5, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fc fb18 	bl	8000b00 <_lseek>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_lseek_r+0x1e>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_lseek_r+0x1e>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200001ec 	.word	0x200001ec

080044e0 <memchr>:
 80044e0:	4603      	mov	r3, r0
 80044e2:	b510      	push	{r4, lr}
 80044e4:	b2c9      	uxtb	r1, r1
 80044e6:	4402      	add	r2, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	d101      	bne.n	80044f2 <memchr+0x12>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e003      	b.n	80044fa <memchr+0x1a>
 80044f2:	7804      	ldrb	r4, [r0, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	428c      	cmp	r4, r1
 80044f8:	d1f6      	bne.n	80044e8 <memchr+0x8>
 80044fa:	bd10      	pop	{r4, pc}

080044fc <__malloc_lock>:
 80044fc:	4801      	ldr	r0, [pc, #4]	; (8004504 <__malloc_lock+0x8>)
 80044fe:	f7ff bb13 	b.w	8003b28 <__retarget_lock_acquire_recursive>
 8004502:	bf00      	nop
 8004504:	200001e0 	.word	0x200001e0

08004508 <__malloc_unlock>:
 8004508:	4801      	ldr	r0, [pc, #4]	; (8004510 <__malloc_unlock+0x8>)
 800450a:	f7ff bb0e 	b.w	8003b2a <__retarget_lock_release_recursive>
 800450e:	bf00      	nop
 8004510:	200001e0 	.word	0x200001e0

08004514 <_read_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	2200      	movs	r2, #0
 800451e:	4d05      	ldr	r5, [pc, #20]	; (8004534 <_read_r+0x20>)
 8004520:	602a      	str	r2, [r5, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	f7fc faab 	bl	8000a7e <_read>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d102      	bne.n	8004532 <_read_r+0x1e>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	b103      	cbz	r3, 8004532 <_read_r+0x1e>
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	bd38      	pop	{r3, r4, r5, pc}
 8004534:	200001ec 	.word	0x200001ec

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
