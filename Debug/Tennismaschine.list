
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006600  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068ac  080068ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080068ac  080068ac  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068ac  080068ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080068b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000074  08006928  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006928  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001133f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289f  00000000  00000000  000313dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0d9  00000000  00000000  00035b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013297  00000000  00000000  0004fbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092213  00000000  00000000  00062e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  000f50e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f9d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f9d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080066f4 	.word	0x080066f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080066f4 	.word	0x080066f4

0800014c <_writeCmd>:
		HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData,2, HAL_MAX_DELAY);
	}
}

// sends given command per i2c
void _writeCmd(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, &cmd, 1, HAL_MAX_DELAY);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <_writeCmd+0x2c>)
 8000158:	881b      	ldrh	r3, [r3, #0]
 800015a:	005b      	lsls	r3, r3, #1
 800015c:	b299      	uxth	r1, r3
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2301      	movs	r3, #1
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <_writeCmd+0x30>)
 800016a:	f003 f80d 	bl	8003188 <HAL_I2C_Master_Transmit>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000096 	.word	0x20000096
 800017c:	200000ec 	.word	0x200000ec

08000180 <_writePos>:

// sends value (mask) for specific position per i2c, if different from cached value
void _writePos(uint8_t pos, uint8_t mask) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	if (_displayCache[pos] == mask)
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <_writePos+0x58>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	79ba      	ldrb	r2, [r7, #6]
 800019a:	429a      	cmp	r2, r3
 800019c:	d017      	beq.n	80001ce <_writePos+0x4e>
		return;

	uint8_t pData[2];
	pData[0] = pos * 2;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	733b      	strb	r3, [r7, #12]
	pData[1] = mask;
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData, 2, HAL_MAX_DELAY);
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <_writePos+0x5c>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	b299      	uxth	r1, r3
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2302      	movs	r3, #2
 80001be:	4808      	ldr	r0, [pc, #32]	; (80001e0 <_writePos+0x60>)
 80001c0:	f002 ffe2 	bl	8003188 <HAL_I2C_Master_Transmit>
	_displayCache[pos] = mask;	// update value in cache
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4904      	ldr	r1, [pc, #16]	; (80001d8 <_writePos+0x58>)
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	54ca      	strb	r2, [r1, r3]
 80001cc:	e000      	b.n	80001d0 <_writePos+0x50>
		return;
 80001ce:	bf00      	nop
}
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000090 	.word	0x20000090
 80001dc:	20000096 	.word	0x20000096
 80001e0:	200000ec 	.word	0x200000ec

080001e4 <seg7_init>:

//##### END: I2C-WRITE-FUNCTIONS #####
//####################################
//##### BEGIN: CONTROL-FUNCTIONS #####

void seg7_init(uint16_t disp_addr) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	seg7_reset(disp_addr);
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f806 	bl	8000202 <seg7_reset>
	seg7_displayOn();
 80001f6:	f000 f835 	bl	8000264 <seg7_displayOn>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <seg7_reset>:

void seg7_reset(uint16_t disp_addr) {
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]
	seg7_displayClear(disp_addr);
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f896 	bl	8000340 <seg7_displayClear>
	seg7_clearCache();
 8000214:	f000 f80e 	bl	8000234 <seg7_clearCache>
	seg7_setBlinkRate(0);
 8000218:	2000      	movs	r0, #0
 800021a:	f000 f83f 	bl	800029c <seg7_setBlinkRate>
	seg7_setDigits(4);
 800021e:	2004      	movs	r0, #4
 8000220:	f000 f87a 	bl	8000318 <seg7_setDigits>
	seg7_setBrightness(15);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f851 	bl	80002cc <seg7_setBrightness>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <seg7_clearCache>:

void seg7_clearCache() {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 5; i++) {
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	e006      	b.n	800024e <seg7_clearCache+0x1a>
		_displayCache[i] = SEG7_NONE;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <seg7_clearCache+0x2c>)
 8000244:	2163      	movs	r1, #99	; 0x63
 8000246:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++) {
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3301      	adds	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b04      	cmp	r3, #4
 8000252:	d9f5      	bls.n	8000240 <seg7_clearCache+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000090 	.word	0x20000090

08000264 <seg7_displayOn>:

void seg7_refresh() {
	_refresh();
}

void seg7_displayOn() {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_ON);
 8000268:	2021      	movs	r0, #33	; 0x21
 800026a:	f7ff ff6f 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_DISPLAYON);
 800026e:	2081      	movs	r0, #129	; 0x81
 8000270:	f7ff ff6c 	bl	800014c <_writeCmd>
	seg7_setBrightness(_bright);
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <seg7_displayOn+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f826 	bl	80002cc <seg7_setBrightness>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000001 	.word	0x20000001

08000288 <seg7_displayOff>:

void seg7_displayOff() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_DISPLAYOFF);
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	f7ff ff5d 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_STANDBY);
 8000292:	2020      	movs	r0, #32
 8000294:	f7ff ff5a 	bl	800014c <_writeCmd>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <seg7_setBlinkRate>:

void seg7_setBlinkRate(uint8_t value) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	if (value > 0x03) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d901      	bls.n	80002b0 <seg7_setBlinkRate+0x14>
		value = 0x00;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

	_writeCmd(HT16K33_BLINKOFF | (value << 1));
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff44 	bl	800014c <_writeCmd>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <seg7_setBrightness>:

void seg7_setBrightness(uint8_t value) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (value == _bright)
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <seg7_setBrightness+0x48>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d014      	beq.n	800030c <seg7_setBrightness+0x40>
		return;

	_bright = value;
 80002e2:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <seg7_setBrightness+0x48>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	7013      	strb	r3, [r2, #0]

	if (_bright > 0x0F)
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <seg7_setBrightness+0x48>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b0f      	cmp	r3, #15
 80002f0:	d902      	bls.n	80002f8 <seg7_setBrightness+0x2c>
		_bright = 0x0F;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <seg7_setBrightness+0x48>)
 80002f4:	220f      	movs	r2, #15
 80002f6:	701a      	strb	r2, [r3, #0]

	_writeCmd(HT16K33_BRIGHTNESS | _bright);
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <seg7_setBrightness+0x48>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f063 031f 	orn	r3, r3, #31
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff21 	bl	800014c <_writeCmd>
 800030a:	e000      	b.n	800030e <seg7_setBrightness+0x42>
		return;
 800030c:	bf00      	nop
}
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000001 	.word	0x20000001

08000318 <seg7_setDigits>:

void seg7_setDigits(uint8_t value) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	_digits = (value > 4) ? 4 : value;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	bf28      	it	cs
 8000328:	2304      	movcs	r3, #4
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <seg7_setDigits+0x24>)
 800032e:	701a      	strb	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000

08000340 <seg7_displayClear>:

//#####  END: CONTROL-FUNCTIONS  #####
//####################################
//##### BEGIN: DISPLAY-FUNCTIONS #####

void seg7_displayClear(uint16_t disp_addr) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	uint8_t arr[4] = { SEG7_SPACE, SEG7_SPACE, SEG7_SPACE, SEG7_SPACE };
 800034a:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 800034e:	60fb      	str	r3, [r7, #12]
	seg7_display(arr, disp_addr);
 8000350:	88fa      	ldrh	r2, [r7, #6]
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4611      	mov	r1, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8a1 	bl	80004a0 <seg7_display>
	seg7_displayColon(0);
 800035e:	2000      	movs	r0, #0
 8000360:	f000 f8f2 	bl	8000548 <seg7_displayColon>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <seg7_displayInt>:

int seg7_displayInt(int n, uint16_t disp_addr) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
	int inRange = ((-1000 < n) && (n < 10000));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800037e:	dd06      	ble.n	800038e <seg7_displayInt+0x22>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f242 720f 	movw	r2, #9999	; 0x270f
 8000386:	4293      	cmp	r3, r2
 8000388:	dc01      	bgt.n	800038e <seg7_displayInt+0x22>
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <seg7_displayInt+0x24>
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
	int neg = (n < 0);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	0fdb      	lsrs	r3, r3, #31
 8000396:	b2db      	uxtb	r3, r3
 8000398:	617b      	str	r3, [r7, #20]

	uint8_t arr[4], h, l;

	if (neg)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <seg7_displayInt+0x3a>
		n = -n;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	425b      	negs	r3, r3
 80003a4:	607b      	str	r3, [r7, #4]

	h = n / 100;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <seg7_displayInt+0x128>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1152      	asrs	r2, r2, #5
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	74fb      	strb	r3, [r7, #19]
	l = n - h * 100;
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	461a      	mov	r2, r3
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	441a      	add	r2, r3
 80003be:	00d2      	lsls	r2, r2, #3
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	74bb      	strb	r3, [r7, #18]
	arr[0] = h / 10;
 80003ce:	7cfb      	ldrb	r3, [r7, #19]
 80003d0:	4a31      	ldr	r2, [pc, #196]	; (8000498 <seg7_displayInt+0x12c>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	08db      	lsrs	r3, r3, #3
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	733b      	strb	r3, [r7, #12]
	arr[1] = h - arr[0] * 10;
 80003dc:	7b3b      	ldrb	r3, [r7, #12]
 80003de:	461a      	mov	r2, r3
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	1ad2      	subs	r2, r2, r3
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	7cfb      	ldrb	r3, [r7, #19]
 80003ee:	4413      	add	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	737b      	strb	r3, [r7, #13]
	arr[2] = l / 10;
 80003f4:	7cbb      	ldrb	r3, [r7, #18]
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <seg7_displayInt+0x12c>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	73bb      	strb	r3, [r7, #14]
	arr[3] = l - arr[2] * 10;
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	461a      	mov	r2, r3
 8000406:	0152      	lsls	r2, r2, #5
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	b2da      	uxtb	r2, r3
 8000412:	7cbb      	ldrb	r3, [r7, #18]
 8000414:	4413      	add	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	73fb      	strb	r3, [r7, #15]

	if (neg) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d02d      	beq.n	800047c <seg7_displayInt+0x110>
		if (_digits >= 3) {
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <seg7_displayInt+0x130>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b02      	cmp	r3, #2
 8000428:	d902      	bls.n	8000430 <seg7_displayInt+0xc4>
			arr[0] = SEG7_MINUS;
 800042a:	2311      	movs	r3, #17
 800042c:	733b      	strb	r3, [r7, #12]
 800042e:	e025      	b.n	800047c <seg7_displayInt+0x110>
		} else {
			int i = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < (4 - _digits); i++) {
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
 8000438:	e00f      	b.n	800045a <seg7_displayInt+0xee>
				if (arr[i] != 0) {
 800043a:	f107 020c 	add.w	r2, r7, #12
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <seg7_displayInt+0x100>
					break;
				}
				arr[i] = SEG7_SPACE;
 8000448:	f107 020c 	add.w	r2, r7, #12
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	4413      	add	r3, r2
 8000450:	2210      	movs	r2, #16
 8000452:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (4 - _digits); i++) {
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	3301      	adds	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <seg7_displayInt+0x130>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f1c3 0304 	rsb	r3, r3, #4
 8000464:	69fa      	ldr	r2, [r7, #28]
 8000466:	429a      	cmp	r2, r3
 8000468:	dbe7      	blt.n	800043a <seg7_displayInt+0xce>
 800046a:	e000      	b.n	800046e <seg7_displayInt+0x102>
					break;
 800046c:	bf00      	nop
			}
			arr[i - 1] = SEG7_MINUS;
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3b01      	subs	r3, #1
 8000472:	3320      	adds	r3, #32
 8000474:	443b      	add	r3, r7
 8000476:	2211      	movs	r2, #17
 8000478:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
	}

	seg7_display(arr, disp_addr);
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f80b 	bl	80004a0 <seg7_display>

	return inRange;
 800048a:	69bb      	ldr	r3, [r7, #24]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	51eb851f 	.word	0x51eb851f
 8000498:	cccccccd 	.word	0xcccccccd
 800049c:	20000000 	.word	0x20000000

080004a0 <seg7_display>:
	seg7_displayColon(colon);

	return inRange;
}

void seg7_display(uint8_t *array, uint16_t disp_addr) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
	seg7_setDispAddr(disp_addr);
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f85e 	bl	8000570 <seg7_setDispAddr>

	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e00d      	b.n	80004d6 <seg7_display+0x36>
		if (array[i] != 0) {
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d110      	bne.n	80004e8 <seg7_display+0x48>
			break;
		}
		array[i] = SEG7_SPACE;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	2210      	movs	r2, #16
 80004ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	3301      	adds	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	7bfa      	ldrb	r2, [r7, #15]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <seg7_display+0xa0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f1c3 0304 	rsb	r3, r3, #4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbe9      	blt.n	80004ba <seg7_display+0x1a>
 80004e6:	e000      	b.n	80004ea <seg7_display+0x4a>
			break;
 80004e8:	bf00      	nop
	}

	_writePos(0, charmap[array[0]]);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <seg7_display+0xa4>)
 80004f2:	5c9b      	ldrb	r3, [r3, r2]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fe42 	bl	8000180 <_writePos>
	_writePos(1, charmap[array[1]]);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <seg7_display+0xa4>)
 8000506:	5c9b      	ldrb	r3, [r3, r2]
 8000508:	4619      	mov	r1, r3
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff fe38 	bl	8000180 <_writePos>
	_writePos(3, charmap[array[2]]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <seg7_display+0xa4>)
 800051a:	5c9b      	ldrb	r3, [r3, r2]
 800051c:	4619      	mov	r1, r3
 800051e:	2003      	movs	r0, #3
 8000520:	f7ff fe2e 	bl	8000180 <_writePos>
	_writePos(4, charmap[array[3]]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3303      	adds	r3, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <seg7_display+0xa4>)
 800052e:	5c9b      	ldrb	r3, [r3, r2]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f7ff fe24 	bl	8000180 <_writePos>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	0800670c 	.word	0x0800670c

08000548 <seg7_displayColon>:
	_writePosPoint(1, charmap[array[1]], point == 1);
	_writePosPoint(3, charmap[array[2]], point == 2);
	_writePosPoint(4, charmap[array[3]], point == 3);
}

void seg7_displayColon(uint8_t on) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	_writePos(2, on ? 2 : 0);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <seg7_displayColon+0x14>
 8000558:	2302      	movs	r3, #2
 800055a:	e000      	b.n	800055e <seg7_displayColon+0x16>
 800055c:	2300      	movs	r3, #0
 800055e:	4619      	mov	r1, r3
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff fe0d 	bl	8000180 <_writePos>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <seg7_setDispAddr>:
	_writePos(3, array[2]);
	_writePos(4, array[3]);
	_writePos(2, colon ? 255 : 0);
}

void seg7_setDispAddr(uint16_t addr){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	disp_addr = addr;
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <seg7_setDispAddr+0x1c>)
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	8013      	strh	r3, [r2, #0]
	seg7_clearCache();
 8000580:	f7ff fe58 	bl	8000234 <seg7_clearCache>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000096 	.word	0x20000096

08000590 <seg7_displayOnOffMulti>:

void seg7_displayOnOffMulti(uint8_t display){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	seg7_setDispAddr(SPEED_ADDR);
 800059a:	2070      	movs	r0, #112	; 0x70
 800059c:	f7ff ffe8 	bl	8000570 <seg7_setDispAddr>
	(display & SPEED) ? seg7_displayOn() : seg7_displayOff();
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <seg7_displayOnOffMulti+0x20>
 80005aa:	f7ff fe5b 	bl	8000264 <seg7_displayOn>
 80005ae:	e001      	b.n	80005b4 <seg7_displayOnOffMulti+0x24>
 80005b0:	f7ff fe6a 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(SPIN_ADDR);
 80005b4:	2071      	movs	r0, #113	; 0x71
 80005b6:	f7ff ffdb 	bl	8000570 <seg7_setDispAddr>
	(display & SPIN) ? seg7_displayOn() : seg7_displayOff();
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <seg7_displayOnOffMulti+0x3a>
 80005c4:	f7ff fe4e 	bl	8000264 <seg7_displayOn>
 80005c8:	e001      	b.n	80005ce <seg7_displayOnOffMulti+0x3e>
 80005ca:	f7ff fe5d 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(ANGLE_ADDR);
 80005ce:	2072      	movs	r0, #114	; 0x72
 80005d0:	f7ff ffce 	bl	8000570 <seg7_setDispAddr>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <seg7_displayOnOffMulti+0x54>
 80005de:	f7ff fe41 	bl	8000264 <seg7_displayOn>
}
 80005e2:	e001      	b.n	80005e8 <seg7_displayOnOffMulti+0x58>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005e4:	f7ff fe50 	bl	8000288 <seg7_displayOff>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <pgm_stop>:
 * @param: none
 *
 * @returns: int 0 = success
 */

int pgm_stop(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

	if(mainDrvRunning){
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <pgm_stop+0x64>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00a      	beq.n	8000614 <pgm_stop+0x24>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80005fe:	2100      	movs	r1, #0
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <pgm_stop+0x68>)
 8000602:	f003 fff9 	bl	80045f8 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000606:	2104      	movs	r1, #4
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <pgm_stop+0x68>)
 800060a:	f003 fff5 	bl	80045f8 <HAL_TIM_PWM_Stop>

		mainDrvRunning = RESET;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <pgm_stop+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	}

	uint8_t text_off[] = {SEG7_0, SEG7_F, SEG7_F, SEG7_SPACE};
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <pgm_stop+0x6c>)
 8000616:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffb9 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_off, SPEED_ADDR);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2170      	movs	r1, #112	; 0x70
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff3c 	bl	80004a0 <seg7_display>

	if((HAL_GetTick() - last_blink_tick) > BLINK_INT_MS){
 8000628:	f001 fd42 	bl	80020b0 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <pgm_stop+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000638:	d907      	bls.n	800064a <pgm_stop+0x5a>

			Toggle_Led_Output(GREEN);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 ff98 	bl	8001570 <Toggle_Led_Output>

			last_blink_tick = HAL_GetTick();
 8000640:	f001 fd36 	bl	80020b0 <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <pgm_stop+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000035c 	.word	0x2000035c
 8000658:	20000140 	.word	0x20000140
 800065c:	100f0f00 	.word	0x100f0f00
 8000660:	200000b0 	.word	0x200000b0

08000664 <pgm_manual>:
 * @param: none
 *
 * @returns: int 0 if success
 */

int pgm_manual(void){
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	b0ad      	sub	sp, #180	; 0xb4
 8000668:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 800066a:	4b53      	ldr	r3, [pc, #332]	; (80007b8 <pgm_manual+0x154>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <pgm_manual+0x1a>
		Set_Led_Output(GREEN);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 ff52 	bl	800151c <Set_Led_Output>
		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 8000678:	2007      	movs	r0, #7
 800067a:	f7ff ff89 	bl	8000590 <seg7_displayOnOffMulti>
	}

	get_adc_values(adc_result);
 800067e:	484f      	ldr	r0, [pc, #316]	; (80007bc <pgm_manual+0x158>)
 8000680:	f000 f9c4 	bl	8000a0c <get_adc_values>

	speed_percent = adc_result[0]*100/MAX_ADC_VALUE;
 8000684:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <pgm_manual+0x158>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <pgm_manual+0x15c>)
 8000692:	fb82 1203 	smull	r1, r2, r2, r3
 8000696:	441a      	add	r2, r3
 8000698:	12d2      	asrs	r2, r2, #11
 800069a:	17db      	asrs	r3, r3, #31
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	4b48      	ldr	r3, [pc, #288]	; (80007c4 <pgm_manual+0x160>)
 80006a2:	801a      	strh	r2, [r3, #0]
	spin_percent = (adc_result[1]*100/MAX_ADC_VALUE)-50;
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <pgm_manual+0x158>)
 80006a6:	885b      	ldrh	r3, [r3, #2]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <pgm_manual+0x15c>)
 80006b2:	fb82 1203 	smull	r1, r2, r2, r3
 80006b6:	441a      	add	r2, r3
 80006b8:	12d2      	asrs	r2, r2, #11
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	3b32      	subs	r3, #50	; 0x32
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <pgm_manual+0x164>)
 80006c8:	801a      	strh	r2, [r3, #0]
	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <pgm_manual+0x158>)
 80006cc:	889b      	ldrh	r3, [r3, #4]
 80006ce:	461a      	mov	r2, r3
 80006d0:	235a      	movs	r3, #90	; 0x5a
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	4a3a      	ldr	r2, [pc, #232]	; (80007c0 <pgm_manual+0x15c>)
 80006d8:	fb82 1203 	smull	r1, r2, r2, r3
 80006dc:	441a      	add	r2, r3
 80006de:	12d2      	asrs	r2, r2, #11
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b39      	ldr	r3, [pc, #228]	; (80007cc <pgm_manual+0x168>)
 80006e8:	801a      	strh	r2, [r3, #0]

	if(
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 80006ea:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <pgm_manual+0x16c>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <pgm_manual+0x158>)
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bfb8      	it	lt
 80006fa:	425b      	neglt	r3, r3
 80006fc:	2b32      	cmp	r3, #50	; 0x32
 80006fe:	bfcc      	ite	gt
 8000700:	2301      	movgt	r3, #1
 8000702:	2300      	movle	r3, #0
 8000704:	b2da      	uxtb	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA) |
 8000706:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <pgm_manual+0x16c>)
 8000708:	885b      	ldrh	r3, [r3, #2]
 800070a:	4619      	mov	r1, r3
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <pgm_manual+0x158>)
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	1acb      	subs	r3, r1, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	bfb8      	it	lt
 8000716:	425b      	neglt	r3, r3
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 8000718:	2b32      	cmp	r3, #50	; 0x32
 800071a:	bfcc      	ite	gt
 800071c:	2301      	movgt	r3, #1
 800071e:	2300      	movle	r3, #0
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA) |
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <pgm_manual+0x154>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4313      	orrs	r3, r2
	if(
 800072e:	2b00      	cmp	r3, #0
 8000730:	d028      	beq.n	8000784 <pgm_manual+0x120>
		pgmChanged){

			last_adc[0] = adc_result[0];
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <pgm_manual+0x158>)
 8000734:	881a      	ldrh	r2, [r3, #0]
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <pgm_manual+0x16c>)
 8000738:	801a      	strh	r2, [r3, #0]
			last_adc[1] = adc_result[1];
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <pgm_manual+0x158>)
 800073c:	885a      	ldrh	r2, [r3, #2]
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <pgm_manual+0x16c>)
 8000740:	805a      	strh	r2, [r3, #2]
			seg7_displayInt((int16_t)speed_percent, SPEED_ADDR);
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <pgm_manual+0x160>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	b21b      	sxth	r3, r3
 8000748:	2170      	movs	r1, #112	; 0x70
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fe0e 	bl	800036c <seg7_displayInt>
			seg7_displayInt(spin_percent, SPIN_ADDR);
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <pgm_manual+0x164>)
 8000752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000756:	2171      	movs	r1, #113	; 0x71
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe07 	bl	800036c <seg7_displayInt>
			set_pwm_maindrv(speed_percent, spin_percent, htim1);
 800075e:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <pgm_manual+0x160>)
 8000760:	881d      	ldrh	r5, [r3, #0]
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <pgm_manual+0x164>)
 8000764:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000768:	4c1a      	ldr	r4, [pc, #104]	; (80007d4 <pgm_manual+0x170>)
 800076a:	4668      	mov	r0, sp
 800076c:	f104 0308 	add.w	r3, r4, #8
 8000770:	22ac      	movs	r2, #172	; 0xac
 8000772:	4619      	mov	r1, r3
 8000774:	f004 ff08 	bl	8005588 <memcpy>
 8000778:	e894 000c 	ldmia.w	r4, {r2, r3}
 800077c:	4631      	mov	r1, r6
 800077e:	4628      	mov	r0, r5
 8000780:	f000 ff62 	bl	8001648 <set_pwm_maindrv>
		}

	handle_angle_change(adc_result[2], &last_adc[2]);
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <pgm_manual+0x158>)
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	4913      	ldr	r1, [pc, #76]	; (80007d8 <pgm_manual+0x174>)
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f964 	bl	8000a58 <handle_angle_change>

	if(!mainDrvRunning){
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <pgm_manual+0x178>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <pgm_manual+0x14a>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000798:	2100      	movs	r1, #0
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <pgm_manual+0x170>)
 800079c:	f003 fe8a 	bl	80044b4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007a0:	2104      	movs	r1, #4
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <pgm_manual+0x170>)
 80007a4:	f003 fe86 	bl	80044b4 <HAL_TIM_PWM_Start>

		mainDrvRunning = SET;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <pgm_manual+0x178>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3704      	adds	r7, #4
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b8:	20000003 	.word	0x20000003
 80007bc:	20000098 	.word	0x20000098
 80007c0:	825ae461 	.word	0x825ae461
 80007c4:	2000009e 	.word	0x2000009e
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	200000a2 	.word	0x200000a2
 80007d0:	200000a4 	.word	0x200000a4
 80007d4:	20000140 	.word	0x20000140
 80007d8:	200000a8 	.word	0x200000a8
 80007dc:	2000035c 	.word	0x2000035c

080007e0 <pgm_auto_speed>:
 * @parm: none
 *
 * @returns: int 0 if success
 */

int pgm_auto_speed(void){
 80007e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e2:	b0af      	sub	sp, #188	; 0xbc
 80007e4:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <pgm_auto_speed+0xf4>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d011      	beq.n	8000812 <pgm_auto_speed+0x32>
		Set_Led_Output(GREEN);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 fe94 	bl	800151c <Set_Led_Output>
		uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <pgm_auto_speed+0xf8>)
 80007f6:	603b      	str	r3, [r7, #0]

		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 80007f8:	2007      	movs	r0, #7
 80007fa:	f7ff fec9 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_auto, SPEED_ADDR);
 80007fe:	463b      	mov	r3, r7
 8000800:	2170      	movs	r1, #112	; 0x70
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe4c 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, SPIN_ADDR);
 8000808:	463b      	mov	r3, r7
 800080a:	2171      	movs	r1, #113	; 0x71
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe47 	bl	80004a0 <seg7_display>
	}

	get_adc_values(adc_result);
 8000812:	4832      	ldr	r0, [pc, #200]	; (80008dc <pgm_auto_speed+0xfc>)
 8000814:	f000 f8fa 	bl	8000a0c <get_adc_values>

	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 8000818:	4b30      	ldr	r3, [pc, #192]	; (80008dc <pgm_auto_speed+0xfc>)
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	461a      	mov	r2, r3
 800081e:	235a      	movs	r3, #90	; 0x5a
 8000820:	fb02 f303 	mul.w	r3, r2, r3
 8000824:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <pgm_auto_speed+0x100>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	441a      	add	r2, r3
 800082c:	12d2      	asrs	r2, r2, #11
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <pgm_auto_speed+0x104>)
 8000836:	801a      	strh	r2, [r3, #0]

	handle_angle_change(adc_result[2], &last_adc[2]);
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <pgm_auto_speed+0xfc>)
 800083a:	889b      	ldrh	r3, [r3, #4]
 800083c:	492a      	ldr	r1, [pc, #168]	; (80008e8 <pgm_auto_speed+0x108>)
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f90a 	bl	8000a58 <handle_angle_change>

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000844:	f001 fc34 	bl	80020b0 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <pgm_auto_speed+0x10c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	f242 7210 	movw	r2, #10000	; 0x2710
 8000854:	4293      	cmp	r3, r2
 8000856:	d938      	bls.n	80008ca <pgm_auto_speed+0xea>

			uint16_t rand_speed = (rand() % (101 - AUTO_SPEED_MIN)) + AUTO_SPEED_MIN;
 8000858:	f004 feda 	bl	8005610 <rand>
 800085c:	4602      	mov	r2, r0
 800085e:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <pgm_auto_speed+0x110>)
 8000860:	fb83 1302 	smull	r1, r3, r3, r2
 8000864:	10d9      	asrs	r1, r3, #3
 8000866:	17d3      	asrs	r3, r2, #31
 8000868:	1ac9      	subs	r1, r1, r3
 800086a:	460b      	mov	r3, r1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	440b      	add	r3, r1
 8000870:	00d9      	lsls	r1, r3, #3
 8000872:	440b      	add	r3, r1
 8000874:	1ad1      	subs	r1, r2, r3
 8000876:	b28b      	uxth	r3, r1
 8000878:	3314      	adds	r3, #20
 800087a:	80fb      	strh	r3, [r7, #6]
			int16_t rand_spin = (rand() % 101) -50;
 800087c:	f004 fec8 	bl	8005610 <rand>
 8000880:	4603      	mov	r3, r0
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <pgm_auto_speed+0x114>)
 8000884:	fb82 1203 	smull	r1, r2, r2, r3
 8000888:	1111      	asrs	r1, r2, #4
 800088a:	17da      	asrs	r2, r3, #31
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	2165      	movs	r1, #101	; 0x65
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	1a9a      	subs	r2, r3, r2
 8000896:	b293      	uxth	r3, r2
 8000898:	3b32      	subs	r3, #50	; 0x32
 800089a:	b29b      	uxth	r3, r3
 800089c:	80bb      	strh	r3, [r7, #4]

			set_pwm_maindrv(rand_speed, rand_spin, htim1);
 800089e:	4c16      	ldr	r4, [pc, #88]	; (80008f8 <pgm_auto_speed+0x118>)
 80008a0:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80008a4:	88fd      	ldrh	r5, [r7, #6]
 80008a6:	4668      	mov	r0, sp
 80008a8:	f104 0308 	add.w	r3, r4, #8
 80008ac:	22ac      	movs	r2, #172	; 0xac
 80008ae:	4619      	mov	r1, r3
 80008b0:	f004 fe6a 	bl	8005588 <memcpy>
 80008b4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80008b8:	4631      	mov	r1, r6
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 fec4 	bl	8001648 <set_pwm_maindrv>

			last_rand_tick = HAL_GetTick();
 80008c0:	f001 fbf6 	bl	80020b0 <HAL_GetTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <pgm_auto_speed+0x10c>)
 80008c8:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d4:	20000003 	.word	0x20000003
 80008d8:	0014160a 	.word	0x0014160a
 80008dc:	20000098 	.word	0x20000098
 80008e0:	825ae461 	.word	0x825ae461
 80008e4:	200000a2 	.word	0x200000a2
 80008e8:	200000a8 	.word	0x200000a8
 80008ec:	200000ac 	.word	0x200000ac
 80008f0:	1948b0fd 	.word	0x1948b0fd
 80008f4:	288df0cb 	.word	0x288df0cb
 80008f8:	20000140 	.word	0x20000140

080008fc <pgm_auto>:
 * @param: none
 *
 * @returns: int 0 if success
 */

int pgm_auto(void){
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	b0b1      	sub	sp, #196	; 0xc4
 8000900:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 8000902:	4b3b      	ldr	r3, [pc, #236]	; (80009f0 <pgm_auto+0xf4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d016      	beq.n	8000938 <pgm_auto+0x3c>
		Set_Led_Output(GREEN);
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fe06 	bl	800151c <Set_Led_Output>

		uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 8000910:	4b38      	ldr	r3, [pc, #224]	; (80009f4 <pgm_auto+0xf8>)
 8000912:	607b      	str	r3, [r7, #4]

		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 8000914:	2007      	movs	r0, #7
 8000916:	f7ff fe3b 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_auto, SPEED_ADDR);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2170      	movs	r1, #112	; 0x70
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fdbe 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, SPIN_ADDR);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2171      	movs	r1, #113	; 0x71
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fdb9 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, ANGLE_ADDR);
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2172      	movs	r1, #114	; 0x72
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdb4 	bl	80004a0 <seg7_display>
	}

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000938:	f001 fbba 	bl	80020b0 <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	4b2e      	ldr	r3, [pc, #184]	; (80009f8 <pgm_auto+0xfc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	f242 7210 	movw	r2, #10000	; 0x2710
 8000948:	4293      	cmp	r3, r2
 800094a:	d94c      	bls.n	80009e6 <pgm_auto+0xea>

		uint16_t rand_speed = (rand() % (101 - AUTO_SPEED_MIN)) + AUTO_SPEED_MIN;
 800094c:	f004 fe60 	bl	8005610 <rand>
 8000950:	4602      	mov	r2, r0
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <pgm_auto+0x100>)
 8000954:	fb83 1302 	smull	r1, r3, r3, r2
 8000958:	10d9      	asrs	r1, r3, #3
 800095a:	17d3      	asrs	r3, r2, #31
 800095c:	1ac9      	subs	r1, r1, r3
 800095e:	460b      	mov	r3, r1
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	440b      	add	r3, r1
 8000964:	00d9      	lsls	r1, r3, #3
 8000966:	440b      	add	r3, r1
 8000968:	1ad1      	subs	r1, r2, r3
 800096a:	b28b      	uxth	r3, r1
 800096c:	3314      	adds	r3, #20
 800096e:	81fb      	strh	r3, [r7, #14]
		int16_t rand_spin = (rand() % 101) -50;
 8000970:	f004 fe4e 	bl	8005610 <rand>
 8000974:	4603      	mov	r3, r0
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <pgm_auto+0x104>)
 8000978:	fb82 1203 	smull	r1, r2, r2, r3
 800097c:	1111      	asrs	r1, r2, #4
 800097e:	17da      	asrs	r2, r3, #31
 8000980:	1a8a      	subs	r2, r1, r2
 8000982:	2165      	movs	r1, #101	; 0x65
 8000984:	fb01 f202 	mul.w	r2, r1, r2
 8000988:	1a9a      	subs	r2, r3, r2
 800098a:	b293      	uxth	r3, r2
 800098c:	3b32      	subs	r3, #50	; 0x32
 800098e:	b29b      	uxth	r3, r3
 8000990:	81bb      	strh	r3, [r7, #12]
		uint16_t rand_angle = rand() % 91;
 8000992:	f004 fe3d 	bl	8005610 <rand>
 8000996:	4603      	mov	r3, r0
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <pgm_auto+0x108>)
 800099a:	fb82 1203 	smull	r1, r2, r2, r3
 800099e:	441a      	add	r2, r3
 80009a0:	1191      	asrs	r1, r2, #6
 80009a2:	17da      	asrs	r2, r3, #31
 80009a4:	1a8a      	subs	r2, r1, r2
 80009a6:	215b      	movs	r1, #91	; 0x5b
 80009a8:	fb01 f202 	mul.w	r2, r1, r2
 80009ac:	1a9a      	subs	r2, r3, r2
 80009ae:	4613      	mov	r3, r2
 80009b0:	817b      	strh	r3, [r7, #10]

		set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80009b2:	4c15      	ldr	r4, [pc, #84]	; (8000a08 <pgm_auto+0x10c>)
 80009b4:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 80009b8:	89fd      	ldrh	r5, [r7, #14]
 80009ba:	4668      	mov	r0, sp
 80009bc:	f104 0308 	add.w	r3, r4, #8
 80009c0:	22ac      	movs	r2, #172	; 0xac
 80009c2:	4619      	mov	r1, r3
 80009c4:	f004 fde0 	bl	8005588 <memcpy>
 80009c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80009cc:	4631      	mov	r1, r6
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 fe3a 	bl	8001648 <set_pwm_maindrv>
		set_pos_posdrv(rand_angle);
 80009d4:	897b      	ldrh	r3, [r7, #10]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fef6 	bl	80017c8 <set_pos_posdrv>

		last_rand_tick = HAL_GetTick();
 80009dc:	f001 fb68 	bl	80020b0 <HAL_GetTick>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <pgm_auto+0xfc>)
 80009e4:	6013      	str	r3, [r2, #0]
	}

	return EXIT_SUCCESS;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f0:	20000003 	.word	0x20000003
 80009f4:	0014160a 	.word	0x0014160a
 80009f8:	200000ac 	.word	0x200000ac
 80009fc:	1948b0fd 	.word	0x1948b0fd
 8000a00:	288df0cb 	.word	0x288df0cb
 8000a04:	b40b40b5 	.word	0xb40b40b5
 8000a08:	20000140 	.word	0x20000140

08000a0c <get_adc_values>:
 * @param: uint16_t* array size 3 to store ADC readings
 *
 * @returns: int 0 on success
 */

int get_adc_values(uint16_t* adc_result){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++){
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	e013      	b.n	8000a42 <get_adc_values+0x36>
			HAL_ADC_Start(&hadc1);
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <get_adc_values+0x48>)
 8000a1c:	f001 fc2a 	bl	8002274 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 8000a20:	2101      	movs	r1, #1
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <get_adc_values+0x48>)
 8000a24:	f001 fcd4 	bl	80023d0 <HAL_ADC_PollForConversion>
			adc_result[i] = HAL_ADC_GetValue(&hadc1);
 8000a28:	480a      	ldr	r0, [pc, #40]	; (8000a54 <get_adc_values+0x48>)
 8000a2a:	f001 fdd7 	bl	80025dc <HAL_ADC_GetValue>
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	b28a      	uxth	r2, r1
 8000a3a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	dde8      	ble.n	8000a1a <get_adc_values+0xe>
		}

	return EXIT_SUCCESS;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000bc 	.word	0x200000bc

08000a58 <handle_angle_change>:
 *
 * @param: uint16_t* last set position
 *
 * @returns: int 0 on success
 */
int handle_angle_change(uint16_t adc_result, uint16_t* last_adc){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	80fb      	strh	r3, [r7, #6]

	static uint32_t last_angle_change = 0;	//Timestamp for last change of angle target value
	static FlagStatus AngleChanged = RESET; 	//Set if the target value has changed

	if(
		(abs(*last_adc - adc_result) > MIN_ANGLE_DELTA) |
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bfb8      	it	lt
 8000a72:	425b      	neglt	r3, r3
 8000a74:	2b46      	cmp	r3, #70	; 0x46
 8000a76:	bfcc      	ite	gt
 8000a78:	2301      	movgt	r3, #1
 8000a7a:	2300      	movle	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <handle_angle_change+0xac>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4313      	orrs	r3, r2
	if(
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d017      	beq.n	8000aba <handle_angle_change+0x62>
		pgmChanged){
			*last_adc = adc_result;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	801a      	strh	r2, [r3, #0]
			seg7_displayInt((int16_t)angle_degree, ANGLE_ADDR);
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <handle_angle_change+0xb0>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	2172      	movs	r1, #114	; 0x72
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fc67 	bl	800036c <seg7_displayInt>
			seg7_setDispAddr(ANGLE_ADDR);
 8000a9e:	2072      	movs	r0, #114	; 0x72
 8000aa0:	f7ff fd66 	bl	8000570 <seg7_setDispAddr>
			seg7_setBlinkRate(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff fbf9 	bl	800029c <seg7_setBlinkRate>
			AngleChanged = SET;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <handle_angle_change+0xb4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
			last_angle_change = HAL_GetTick();
 8000ab0:	f001 fafe 	bl	80020b0 <HAL_GetTick>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <handle_angle_change+0xb8>)
 8000ab8:	6013      	str	r3, [r2, #0]
	}

	if(((HAL_GetTick() - last_angle_change) > ANGLE_SET_DELAY) & AngleChanged){
 8000aba:	f001 faf9 	bl	80020b0 <HAL_GetTick>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <handle_angle_change+0xb8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000aca:	bf8c      	ite	hi
 8000acc:	2301      	movhi	r3, #1
 8000ace:	2300      	movls	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <handle_angle_change+0xb4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00d      	beq.n	8000afa <handle_angle_change+0xa2>
		seg7_setDispAddr(ANGLE_ADDR);
 8000ade:	2072      	movs	r0, #114	; 0x72
 8000ae0:	f7ff fd46 	bl	8000570 <seg7_setDispAddr>
		seg7_setBlinkRate(0);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fbd9 	bl	800029c <seg7_setBlinkRate>
		set_pos_posdrv(angle_degree);
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <handle_angle_change+0xb0>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fe6a 	bl	80017c8 <set_pos_posdrv>
		AngleChanged = RESET;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <handle_angle_change+0xb4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000003 	.word	0x20000003
 8000b08:	200000a2 	.word	0x200000a2
 8000b0c:	200000b4 	.word	0x200000b4
 8000b10:	200000b8 	.word	0x200000b8

08000b14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d013      	beq.n	8000b54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b3c:	e000      	b.n	8000b40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f9      	beq.n	8000b3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f001 fa4b 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f8ff 	bl	8000d6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ADC_CR2_REG |= (1<<2); //Start calibration of ADCs after power on
 8000b6e:	4b74      	ldr	r3, [pc, #464]	; (8000d40 <main+0x1e0>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	4a72      	ldr	r2, [pc, #456]	; (8000d40 <main+0x1e0>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	8013      	strh	r3, [r2, #0]

  while(ADC_CR2_REG & (1<<2)){
 8000b7e:	bf00      	nop
 8000b80:	4b6f      	ldr	r3, [pc, #444]	; (8000d40 <main+0x1e0>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f8      	bne.n	8000b80 <main+0x20>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 fb79 	bl	8001284 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b92:	f000 f93b 	bl	8000e0c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000b96:	f000 f997 	bl	8000ec8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000b9a:	f000 f9c3 	bl	8000f24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b9e:	f000 fa6f 	bl	8001080 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ba2:	f000 faed 	bl	8001180 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  seg7_init(SPEED_ADDR);
 8000ba6:	2070      	movs	r0, #112	; 0x70
 8000ba8:	f7ff fb1c 	bl	80001e4 <seg7_init>
  seg7_init(SPIN_ADDR);
 8000bac:	2071      	movs	r0, #113	; 0x71
 8000bae:	f7ff fb19 	bl	80001e4 <seg7_init>
  seg7_init(ANGLE_ADDR);
 8000bb2:	2072      	movs	r0, #114	; 0x72
 8000bb4:	f7ff fb16 	bl	80001e4 <seg7_init>

  //Set position signal of main drives
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbe:	4861      	ldr	r0, [pc, #388]	; (8000d44 <main+0x1e4>)
 8000bc0:	f002 f955 	bl	8002e6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bca:	485f      	ldr	r0, [pc, #380]	; (8000d48 <main+0x1e8>)
 8000bcc:	f002 f94f 	bl	8002e6e <HAL_GPIO_WritePin>

  eStop = !HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin); 	//Get initial state of emergency stop
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	485b      	ldr	r0, [pc, #364]	; (8000d44 <main+0x1e4>)
 8000bd6:	f002 f933 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf0c      	ite	eq
 8000be0:	2301      	moveq	r3, #1
 8000be2:	2300      	movne	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <main+0x1ec>)
 8000bea:	701a      	strb	r2, [r3, #0]
  startPos = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);	//Check if start position is reached
 8000bec:	2110      	movs	r1, #16
 8000bee:	4858      	ldr	r0, [pc, #352]	; (8000d50 <main+0x1f0>)
 8000bf0:	f002 f926 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2301      	moveq	r3, #1
 8000bfc:	2300      	movne	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b54      	ldr	r3, [pc, #336]	; (8000d54 <main+0x1f4>)
 8000c04:	701a      	strb	r2, [r3, #0]
  endPos = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);		//Check if end position is reached
 8000c06:	2101      	movs	r1, #1
 8000c08:	484e      	ldr	r0, [pc, #312]	; (8000d44 <main+0x1e4>)
 8000c0a:	f002 f919 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b4e      	ldr	r3, [pc, #312]	; (8000d58 <main+0x1f8>)
 8000c1e:	701a      	strb	r2, [r3, #0]

  Set_Led_Output(YELLOW);
 8000c20:	2002      	movs	r0, #2
 8000c22:	f000 fc7b 	bl	800151c <Set_Led_Output>

  uint8_t pgm_state = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
  uint8_t prevPgmState = 0;				//Previous program state
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71bb      	strb	r3, [r7, #6]

  srand(time(NULL)); //Seed the random int generator for auto programs
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f004 fd2c 	bl	800568c <time>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4613      	mov	r3, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fcba 	bl	80055b4 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(eStop) E_Stop_Call(); //Call emergency stop routine
 8000c40:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <main+0x1ec>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <main+0xec>
 8000c48:	f000 fcbc 	bl	80015c4 <E_Stop_Call>

	uint8_t text_pos[] = {SEG7_P, SEG7_0, SEG7_5, SEG7_SPACE};
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <main+0x1fc>)
 8000c4e:	603b      	str	r3, [r7, #0]

	if(initHomingComplete == RESET){
 8000c50:	4b43      	ldr	r3, [pc, #268]	; (8000d60 <main+0x200>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d10d      	bne.n	8000c74 <main+0x114>
		seg7_displayOnOffMulti(SPEED);
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f7ff fc99 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_pos, SPEED_ADDR);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2170      	movs	r1, #112	; 0x70
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc1c 	bl	80004a0 <seg7_display>
		init_home_pos_drive();
 8000c68:	f000 fe84 	bl	8001974 <init_home_pos_drive>
		Set_Led_Output(GREEN);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 fc55 	bl	800151c <Set_Led_Output>
 8000c72:	e010      	b.n	8000c96 <main+0x136>
	}
	else if (homingComplete == RESET){
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <main+0x204>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10c      	bne.n	8000c96 <main+0x136>
		seg7_displayOnOffMulti(SPEED);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fc87 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_pos, SPEED_ADDR);
 8000c82:	463b      	mov	r3, r7
 8000c84:	2170      	movs	r1, #112	; 0x70
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc0a 	bl	80004a0 <seg7_display>
		home_pos_drive();
 8000c8c:	f000 fee8 	bl	8001a60 <home_pos_drive>
		Set_Led_Output(GREEN);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fc43 	bl	800151c <Set_Led_Output>
	}

	prevPgmState = pgm_state;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	71bb      	strb	r3, [r7, #6]

	/*The mode switch is read as bitpattern PGM_1_Pin = LSB PGM_3_Pin = MSB
	 *if pattern is not valid, machine turns of --> pgm_stop
	 */
	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <main+0x1e8>)
 8000ca0:	f002 f8ce 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf0c      	ite	eq
 8000caa:	2301      	moveq	r3, #1
 8000cac:	2300      	movne	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <main+0x1e8>)
 8000cb8:	f002 f8c2 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000cbc:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <main+0x166>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e000      	b.n	8000cc8 <main+0x168>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	4323      	orrs	r3, r4
 8000cca:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	481d      	ldr	r0, [pc, #116]	; (8000d48 <main+0x1e8>)
 8000cd2:	f002 f8b5 	bl	8002e40 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <main+0x180>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e000      	b.n	8000ce2 <main+0x182>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4323      	orrs	r3, r4
 8000ce4:	b25b      	sxtb	r3, r3
	pgm_state =
 8000ce6:	71fb      	strb	r3, [r7, #7]

	(prevPgmState == pgm_state) ? (pgmChanged = RESET) : (pgmChanged = SET);
 8000ce8:	79ba      	ldrb	r2, [r7, #6]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d103      	bne.n	8000cf8 <main+0x198>
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <main+0x208>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e002      	b.n	8000cfe <main+0x19e>
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <main+0x208>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]

	switch(pgm_state){
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d819      	bhi.n	8000d38 <main+0x1d8>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <main+0x1ac>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d21 	.word	0x08000d21
 8000d10:	08000d27 	.word	0x08000d27
 8000d14:	08000d2d 	.word	0x08000d2d
 8000d18:	08000d39 	.word	0x08000d39
 8000d1c:	08000d33 	.word	0x08000d33
	case 0:
		pgm_stop();
 8000d20:	f7ff fc66 	bl	80005f0 <pgm_stop>
		break;
 8000d24:	e00b      	b.n	8000d3e <main+0x1de>
	case 1:
		pgm_manual();
 8000d26:	f7ff fc9d 	bl	8000664 <pgm_manual>
		break;
 8000d2a:	e008      	b.n	8000d3e <main+0x1de>
	case 2:
		pgm_auto_speed();
 8000d2c:	f7ff fd58 	bl	80007e0 <pgm_auto_speed>
		break;
 8000d30:	e005      	b.n	8000d3e <main+0x1de>
	case 4:
		pgm_auto();
 8000d32:	f7ff fde3 	bl	80008fc <pgm_auto>
		break;
 8000d36:	e002      	b.n	8000d3e <main+0x1de>
	default:
		pgm_stop();
 8000d38:	f7ff fc5a 	bl	80005f0 <pgm_stop>
		break;
 8000d3c:	bf00      	nop
  {
 8000d3e:	e77f      	b.n	8000c40 <main+0xe0>
 8000d40:	40012400 	.word	0x40012400
 8000d44:	40010c00 	.word	0x40010c00
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	20000002 	.word	0x20000002
 8000d50:	40010800 	.word	0x40010800
 8000d54:	2000035f 	.word	0x2000035f
 8000d58:	20000360 	.word	0x20000360
 8000d5c:	10050015 	.word	0x10050015
 8000d60:	2000035d 	.word	0x2000035d
 8000d64:	2000035e 	.word	0x2000035e
 8000d68:	20000003 	.word	0x20000003

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fc12 	bl	80055a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	2310      	movs	r3, #16
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fd41 	bl	8003838 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000dbc:	f000 fc3c 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 ffae 	bl	8003d3c <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000de6:	f000 fc27 	bl	8001638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dea:	2302      	movs	r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f92f 	bl	8004058 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e00:	f000 fc1a 	bl	8001638 <Error_Handler>
  }
}
 8000e04:	bf00      	nop
 8000e06:	3750      	adds	r7, #80	; 0x50
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1c:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e1e:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <MX_ADC1_Init+0xb8>)
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e22:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2a:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e50:	481b      	ldr	r0, [pc, #108]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e52:	f001 f937 	bl	80020c4 <HAL_ADC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000e5c:	f000 fbec 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e60:	230a      	movs	r3, #10
 8000e62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e72:	f001 fbbf 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e7c:	f000 fbdc 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e80:	230b      	movs	r3, #11
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e8e:	f001 fbb1 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e98:	f000 fbce 	bl	8001638 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0xb4>)
 8000eaa:	f001 fba3 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000eb4:	f000 fbc0 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200000bc 	.word	0x200000bc
 8000ec4:	40012400 	.word	0x40012400

08000ec8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000ece:	4a13      	ldr	r2, [pc, #76]	; (8000f1c <MX_I2C2_Init+0x54>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_I2C2_Init+0x58>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_I2C2_Init+0x50>)
 8000f06:	f001 fffb 	bl	8002f00 <HAL_I2C_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f10:	f000 fb92 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200000ec 	.word	0x200000ec
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	000186a0 	.word	0x000186a0

08000f24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2220      	movs	r2, #32
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 fb21 	bl	80055a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f62:	4b45      	ldr	r3, [pc, #276]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f64:	4a45      	ldr	r2, [pc, #276]	; (800107c <MX_TIM1_Init+0x158>)
 8000f66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f6a:	220a      	movs	r2, #10
 8000f6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f76:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f8e:	483a      	ldr	r0, [pc, #232]	; (8001078 <MX_TIM1_Init+0x154>)
 8000f90:	f003 f9ce 	bl	8004330 <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f9a:	f000 fb4d 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4833      	ldr	r0, [pc, #204]	; (8001078 <MX_TIM1_Init+0x154>)
 8000fac:	f003 fdda 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fb6:	f000 fb3f 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fba:	482f      	ldr	r0, [pc, #188]	; (8001078 <MX_TIM1_Init+0x154>)
 8000fbc:	f003 fa14 	bl	80043e8 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fc6:	f000 fb37 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <MX_TIM1_Init+0x154>)
 8000fda:	f004 f9e1 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fe4:	f000 fb28 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 450;
 8000fec:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <MX_TIM1_Init+0x154>)
 8001010:	f003 fce6 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800101a:	f000 fb0d 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	2204      	movs	r2, #4
 8001024:	4619      	mov	r1, r3
 8001026:	4814      	ldr	r0, [pc, #80]	; (8001078 <MX_TIM1_Init+0x154>)
 8001028:	f003 fcda 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001032:	f000 fb01 	bl	8001638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <MX_TIM1_Init+0x154>)
 800105a:	f004 f9ff 	bl	800545c <HAL_TIMEx_ConfigBreakDeadTime>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001064:	f000 fae8 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <MX_TIM1_Init+0x154>)
 800106a:	f000 fe33 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 800106e:	bf00      	nop
 8001070:	3758      	adds	r7, #88	; 0x58
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000140 	.word	0x20000140
 800107c:	40012c00 	.word	0x40012c00

08001080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <MX_TIM2_Init+0xfc>)
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 80010b8:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_TIM2_Init+0xfc>)
 80010ba:	f641 3258 	movw	r2, #7000	; 0x1b58
 80010be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <MX_TIM2_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <MX_TIM2_Init+0xfc>)
 80010c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80010cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_TIM2_Init+0xfc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <MX_TIM2_Init+0xfc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010da:	4828      	ldr	r0, [pc, #160]	; (800117c <MX_TIM2_Init+0xfc>)
 80010dc:	f003 f928 	bl	8004330 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010e6:	f000 faa7 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4821      	ldr	r0, [pc, #132]	; (800117c <MX_TIM2_Init+0xfc>)
 80010f8:	f003 fd34 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001102:	f000 fa99 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001106:	481d      	ldr	r0, [pc, #116]	; (800117c <MX_TIM2_Init+0xfc>)
 8001108:	f003 f96e 	bl	80043e8 <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001112:	f000 fa91 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001116:	2108      	movs	r1, #8
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_TIM2_Init+0xfc>)
 800111a:	f003 fad1 	bl	80046c0 <HAL_TIM_OnePulse_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001124:	f000 fa88 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4619      	mov	r1, r3
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_TIM2_Init+0xfc>)
 8001138:	f004 f932 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001142:	f000 fa79 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001146:	2370      	movs	r3, #112	; 0x70
 8001148:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2204      	movs	r2, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM2_Init+0xfc>)
 8001160:	f003 fc3e 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800116a:	f000 fa65 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM2_Init+0xfc>)
 8001170:	f000 fdb0 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3738      	adds	r7, #56	; 0x38
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200001f4 	.word	0x200001f4

08001180 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011b0:	4b32      	ldr	r3, [pc, #200]	; (800127c <MX_TIM4_Init+0xfc>)
 80011b2:	4a33      	ldr	r2, [pc, #204]	; (8001280 <MX_TIM4_Init+0x100>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7000;
 80011b6:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_TIM4_Init+0xfc>)
 80011b8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80011bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <MX_TIM4_Init+0xfc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_TIM4_Init+0xfc>)
 80011c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_TIM4_Init+0xfc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_TIM4_Init+0xfc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011d8:	4828      	ldr	r0, [pc, #160]	; (800127c <MX_TIM4_Init+0xfc>)
 80011da:	f003 f8a9 	bl	8004330 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011e4:	f000 fa28 	bl	8001638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4821      	ldr	r0, [pc, #132]	; (800127c <MX_TIM4_Init+0xfc>)
 80011f6:	f003 fcb5 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001200:	f000 fa1a 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001204:	481d      	ldr	r0, [pc, #116]	; (800127c <MX_TIM4_Init+0xfc>)
 8001206:	f003 f8ef 	bl	80043e8 <HAL_TIM_PWM_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001210:	f000 fa12 	bl	8001638 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001214:	2108      	movs	r1, #8
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <MX_TIM4_Init+0xfc>)
 8001218:	f003 fa52 	bl	80046c0 <HAL_TIM_OnePulse_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8001222:	f000 fa09 	bl	8001638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	4619      	mov	r1, r3
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM4_Init+0xfc>)
 8001236:	f004 f8b3 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8001240:	f000 f9fa 	bl	8001638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001244:	2370      	movs	r3, #112	; 0x70
 8001246:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2204      	movs	r2, #4
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM4_Init+0xfc>)
 800125e:	f003 fbbf 	bl	80049e0 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001268:	f000 f9e6 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM4_Init+0xfc>)
 800126e:	f000 fd31 	bl	8001cd4 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002a8 	.word	0x200002a8
 8001280:	40000800 	.word	0x40000800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b58      	ldr	r3, [pc, #352]	; (80013fc <MX_GPIO_Init+0x178>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a57      	ldr	r2, [pc, #348]	; (80013fc <MX_GPIO_Init+0x178>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b55      	ldr	r3, [pc, #340]	; (80013fc <MX_GPIO_Init+0x178>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b52      	ldr	r3, [pc, #328]	; (80013fc <MX_GPIO_Init+0x178>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a51      	ldr	r2, [pc, #324]	; (80013fc <MX_GPIO_Init+0x178>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b4f      	ldr	r3, [pc, #316]	; (80013fc <MX_GPIO_Init+0x178>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b4c      	ldr	r3, [pc, #304]	; (80013fc <MX_GPIO_Init+0x178>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <MX_GPIO_Init+0x178>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b49      	ldr	r3, [pc, #292]	; (80013fc <MX_GPIO_Init+0x178>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80012e6:	4846      	ldr	r0, [pc, #280]	; (8001400 <MX_GPIO_Init+0x17c>)
 80012e8:	f001 fdc1 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f2:	4844      	ldr	r0, [pc, #272]	; (8001404 <MX_GPIO_Init+0x180>)
 80012f4:	f001 fdbb 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, GPIO_PIN_RESET);
 80012f8:	2200      	movs	r2, #0
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	4842      	ldr	r0, [pc, #264]	; (8001408 <MX_GPIO_Init+0x184>)
 8001300:	f001 fdb5 	bl	8002e6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8001304:	2310      	movs	r3, #16
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <MX_GPIO_Init+0x188>)
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	483a      	ldr	r0, [pc, #232]	; (8001400 <MX_GPIO_Init+0x17c>)
 8001318:	f001 fc0e 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 800131c:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	4832      	ldr	r0, [pc, #200]	; (8001400 <MX_GPIO_Init+0x17c>)
 8001336:	f001 fbff 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 800133a:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 800133e:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4619      	mov	r1, r3
 800134e:	482d      	ldr	r0, [pc, #180]	; (8001404 <MX_GPIO_Init+0x180>)
 8001350:	f001 fbf2 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_GPIO_Init+0x188>)
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	4828      	ldr	r0, [pc, #160]	; (8001408 <MX_GPIO_Init+0x184>)
 8001368:	f001 fbe6 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 800136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <MX_GPIO_Init+0x180>)
 8001386:	f001 fbd7 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = TDRV_DIR_Pin;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4819      	ldr	r0, [pc, #100]	; (8001408 <MX_GPIO_Init+0x184>)
 80013a4:	f001 fbc8 	bl	8002b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_STOP_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 80013a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_GPIO_Init+0x18c>)
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <MX_GPIO_Init+0x184>)
 80013be:	f001 fbbb 	bl	8002b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2006      	movs	r0, #6
 80013c8:	f001 fb7f 	bl	8002aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013cc:	2006      	movs	r0, #6
 80013ce:	f001 fb98 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	200a      	movs	r0, #10
 80013d8:	f001 fb77 	bl	8002aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013dc:	200a      	movs	r0, #10
 80013de:	f001 fb90 	bl	8002b02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2017      	movs	r0, #23
 80013e8:	f001 fb6f 	bl	8002aca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ec:	2017      	movs	r0, #23
 80013ee:	f001 fb88 	bl	8002b02 <HAL_NVIC_EnableIRQ>

}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010800 	.word	0x40010800
 8001404:	40011000 	.word	0x40011000
 8001408:	40010c00 	.word	0x40010c00
 800140c:	10310000 	.word	0x10310000
 8001410:	10210000 	.word	0x10210000

08001414 <_write>:

/* USER CODE BEGIN 4 */

//Overwrite _write for ITM_Console
int _write(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  int i=0;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	e009      	b.n	800143e <_write+0x2a>
    ITM_SendChar((*ptr++));
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	60ba      	str	r2, [r7, #8]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fb6e 	bl	8000b14 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	3301      	adds	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	dbf1      	blt.n	800142a <_write+0x16>
  return len;
 8001446:	687b      	ldr	r3, [r7, #4]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == E_STOP_Pin) {
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001460:	d103      	bne.n	800146a <HAL_GPIO_EXTI_Callback+0x1a>
	eStop = SET;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e000      	b.n	800146c <HAL_GPIO_EXTI_Callback+0x1c>
	HAL_Delay(DEBOUNCE_TIME);
	if(!HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin)){
		eStop = SET;
	}*/
  } else {
      __NOP();
 800146a:	bf00      	nop
  }

  if(GPIO_Pin == SW_1_Pin) {
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d11b      	bne.n	80014aa <HAL_GPIO_EXTI_Callback+0x5a>
	  	  startPos = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8001472:	2110      	movs	r1, #16
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <HAL_GPIO_EXTI_Callback+0xac>)
 8001476:	f001 fce3 	bl	8002e40 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_GPIO_EXTI_Callback+0xb0>)
 800148a:	701a      	strb	r2, [r3, #0]
	  	  if(startPos) {
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_GPIO_EXTI_Callback+0xb0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_GPIO_EXTI_Callback+0x5c>
	  		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001494:	2104      	movs	r1, #4
 8001496:	481b      	ldr	r0, [pc, #108]	; (8001504 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001498:	f003 f8ae 	bl	80045f8 <HAL_TIM_PWM_Stop>
	  		  TIM4->CNT = 0;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_GPIO_EXTI_Callback+0xb8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
	  		  actualPosdDeg = 0;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_GPIO_EXTI_Callback+0xbc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_EXTI_Callback+0x5c>
	  	  }

      } else {
          __NOP();
 80014aa:	bf00      	nop
      }

  if(GPIO_Pin == SW_2_Pin) {
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d11d      	bne.n	80014ee <HAL_GPIO_EXTI_Callback+0x9e>
	  	  endPos = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 80014b2:	2101      	movs	r1, #1
 80014b4:	4816      	ldr	r0, [pc, #88]	; (8001510 <HAL_GPIO_EXTI_Callback+0xc0>)
 80014b6:	f001 fcc3 	bl	8002e40 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_GPIO_EXTI_Callback+0xc4>)
 80014ca:	701a      	strb	r2, [r3, #0]
	  	  if(endPos){
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_GPIO_EXTI_Callback+0xc4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_EXTI_Callback+0xa0>
	  		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80014d4:	2104      	movs	r1, #4
 80014d6:	4810      	ldr	r0, [pc, #64]	; (8001518 <HAL_GPIO_EXTI_Callback+0xc8>)
 80014d8:	f003 f88e 	bl	80045f8 <HAL_TIM_PWM_Stop>
	  		  TIM2->CNT = 0;
 80014dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
	  		  actualPosdDeg = 900;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_GPIO_EXTI_Callback+0xbc>)
 80014e6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80014ea:	801a      	strh	r2, [r3, #0]
	  	  }

    } else {
        __NOP();
    }
}
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_EXTI_Callback+0xa0>
        __NOP();
 80014ee:	bf00      	nop
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000002 	.word	0x20000002
 80014fc:	40010800 	.word	0x40010800
 8001500:	2000035f 	.word	0x2000035f
 8001504:	200002a8 	.word	0x200002a8
 8001508:	40000800 	.word	0x40000800
 800150c:	20000362 	.word	0x20000362
 8001510:	40010c00 	.word	0x40010c00
 8001514:	20000360 	.word	0x20000360
 8001518:	200001f4 	.word	0x200001f4

0800151c <Set_Led_Output>:
 * @param:  bitpattern representing LED state:
 * 			RED, YELLOW, GREEN
 * 			1 = on, 0 = off
 * @return: 0 on success
 */
int Set_Led_Output(uint8_t led_mask){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_mask & RED);
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <Set_Led_Output+0x50>)
 8001534:	f001 fc9b 	bl	8002e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, led_mask & YELLOW);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001546:	4809      	ldr	r0, [pc, #36]	; (800156c <Set_Led_Output+0x50>)
 8001548:	f001 fc91 	bl	8002e6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_mask & GREEN);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <Set_Led_Output+0x50>)
 800155c:	f001 fc87 	bl	8002e6e <HAL_GPIO_WritePin>

	return EXIT_SUCCESS;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40010800 	.word	0x40010800

08001570 <Toggle_Led_Output>:
 * @param:  bitpattern representing LEDs to toggle:
 * 			RED, YELLOW, GREEN
 * 			1 = toggle, 0 = do nothing
 * @return: 0 on success
 */
int Toggle_Led_Output(uint8_t led_mask){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
	if(led_mask & RED) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <Toggle_Led_Output+0x1c>
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <Toggle_Led_Output+0x50>)
 8001588:	f001 fc89 	bl	8002e9e <HAL_GPIO_TogglePin>
	if(led_mask & YELLOW)HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <Toggle_Led_Output+0x30>
 8001596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <Toggle_Led_Output+0x50>)
 800159c:	f001 fc7f 	bl	8002e9e <HAL_GPIO_TogglePin>
	if(led_mask & GREEN)HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <Toggle_Led_Output+0x44>
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <Toggle_Led_Output+0x50>)
 80015b0:	f001 fc75 	bl	8002e9e <HAL_GPIO_TogglePin>

	return EXIT_SUCCESS;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40010800 	.word	0x40010800

080015c4 <E_Stop_Call>:

//Emergency stop routine
int E_Stop_Call(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

	Set_Led_Output(RED);
 80015ca:	2004      	movs	r0, #4
 80015cc:	f7ff ffa6 	bl	800151c <Set_Led_Output>
	homingComplete = RESET; //Reset homing because drive could be moved
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <E_Stop_Call+0x64>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]

	uint8_t text_stop[] = {SEG7_5, SEG7_T, SEG7_0, SEG7_P};
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <E_Stop_Call+0x68>)
 80015d8:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 80015da:	2001      	movs	r0, #1
 80015dc:	f7fe ffd8 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_stop, SPEED_ADDR);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2170      	movs	r1, #112	; 0x70
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff5b 	bl	80004a0 <seg7_display>

	while(eStop){
 80015ea:	e00d      	b.n	8001608 <E_Stop_Call+0x44>
			//Poll until emergency stop is disabled
			eStop = !HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	480f      	ldr	r0, [pc, #60]	; (8001630 <E_Stop_Call+0x6c>)
 80015f2:	f001 fc25 	bl	8002e40 <HAL_GPIO_ReadPin>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <E_Stop_Call+0x70>)
 8001606:	701a      	strb	r2, [r3, #0]
	while(eStop){
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <E_Stop_Call+0x70>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ed      	bne.n	80015ec <E_Stop_Call+0x28>
		}

	eStop = RESET;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <E_Stop_Call+0x70>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
	Set_Led_Output(YELLOW);
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff ff80 	bl	800151c <Set_Led_Output>

	return EXIT_SUCCESS;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000035e 	.word	0x2000035e
 800162c:	15001405 	.word	0x15001405
 8001630:	40010c00 	.word	0x40010c00
 8001634:	20000002 	.word	0x20000002

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Set_Led_Output(RED | YELLOW);
 8001640:	2006      	movs	r0, #6
 8001642:	f7ff ff6b 	bl	800151c <Set_Led_Output>
 8001646:	e7fb      	b.n	8001640 <Error_Handler+0x8>

08001648 <set_pwm_maindrv>:
 *	 	 	Calculate absolute value for max duty cycle. Calculate the absolute target speed value based on input argument
 *	 	 	speed_percent. Set the compare registers for the main drives.
 */


int set_pwm_maindrv(uint16_t speed_percent, int16_t spin_percent, TIM_HandleTypeDef htim){
 8001648:	b082      	sub	sp, #8
 800164a:	b580      	push	{r7, lr}
 800164c:	b08a      	sub	sp, #40	; 0x28
 800164e:	af02      	add	r7, sp, #8
 8001650:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001654:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001658:	4603      	mov	r3, r0
 800165a:	80fb      	strh	r3, [r7, #6]
 800165c:	460b      	mov	r3, r1
 800165e:	80bb      	strh	r3, [r7, #4]

	/*Calculate the range from min to max duty cycle. Calculate the absolute value for min duty cycle = offset.
	 * Calculate absolute value for max duty cycle. Calculate the absolute target speed value based on input argument
	 * speed_percent. Set the compare registers for the main drives.*/

	uint32_t speed_range = htim.Init.Period*(MAIN_DRV_MAX_DUTY - MAIN_DRV_MIN_DUTY)/100;
 8001660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	011a      	lsls	r2, r3, #4
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <set_pwm_maindrv+0xa0>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	61fb      	str	r3, [r7, #28]
	uint32_t speed_offset = htim.Init.Period*MAIN_DRV_MIN_DUTY/100;
 8001676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001678:	4613      	mov	r3, r2
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <set_pwm_maindrv+0xa0>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	095b      	lsrs	r3, r3, #5
 8001686:	61bb      	str	r3, [r7, #24]
	uint32_t speed_max = speed_offset + speed_range;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
	uint32_t speed_absolute = speed_offset+(speed_range*speed_percent/100);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <set_pwm_maindrv+0xa0>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4413      	add	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]

	uint32_t speed_top = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
	uint32_t speed_bottom = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]

	calc_drv_dutycycle(speed_offset, speed_max, speed_absolute, spin_percent, &speed_top, &speed_bottom);
 80016ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	6979      	ldr	r1, [r7, #20]
 80016c4:	69b8      	ldr	r0, [r7, #24]
 80016c6:	f000 f813 	bl	80016f0 <calc_drv_dutycycle>

	TIM1->CCR1 = speed_top;
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <set_pwm_maindrv+0xa4>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_bottom;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <set_pwm_maindrv+0xa4>)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38

	return EXIT_SUCCESS;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e2:	b002      	add	sp, #8
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	51eb851f 	.word	0x51eb851f
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <calc_drv_dutycycle>:
		uint32_t max_speed,
		uint32_t abs_speed,
		int16_t spin_percent,
		uint32_t* top_drv,
		uint32_t* bottom_drv
		){
 80016f0:	b480      	push	{r7}
 80016f2:	b08b      	sub	sp, #44	; 0x2c
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	807b      	strh	r3, [r7, #2]

	uint32_t speed_dif = (max_speed-min_speed)*abs(spin_percent)/100;
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001708:	2a00      	cmp	r2, #0
 800170a:	bfb8      	it	lt
 800170c:	4252      	neglt	r2, r2
 800170e:	b292      	uxth	r2, r2
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <calc_drv_dutycycle+0xd4>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	61fb      	str	r3, [r7, #28]
	uint32_t top_margin = max_speed - abs_speed;
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	61bb      	str	r3, [r7, #24]
	uint32_t bottom_margin = abs_speed - min_speed;
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]

	uint32_t* faster_drv;
	uint32_t* slower_drv;

	(spin_percent > 0) ? (faster_drv = top_drv) : (faster_drv = bottom_drv);
 800172e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dd02      	ble.n	800173c <calc_drv_dutycycle+0x4c>
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e001      	b.n	8001740 <calc_drv_dutycycle+0x50>
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
	(spin_percent < 0) ? (slower_drv = top_drv) : (slower_drv = bottom_drv);
 8001740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001744:	2b00      	cmp	r3, #0
 8001746:	da02      	bge.n	800174e <calc_drv_dutycycle+0x5e>
 8001748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	e001      	b.n	8001752 <calc_drv_dutycycle+0x62>
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	623b      	str	r3, [r7, #32]

	if(speed_dif == 0){
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d108      	bne.n	800176a <calc_drv_dutycycle+0x7a>
		*top_drv = *bottom_drv = abs_speed;
 8001758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 8001766:	2300      	movs	r3, #0
 8001768:	e026      	b.n	80017b8 <calc_drv_dutycycle+0xc8>
	}

	if(top_margin < speed_dif){
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	429a      	cmp	r2, r3
 8001770:	d209      	bcs.n	8001786 <calc_drv_dutycycle+0x96>
		*faster_drv = max_speed;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	601a      	str	r2, [r3, #0]
		*slower_drv = max_speed - 2*speed_dif;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e017      	b.n	80017b6 <calc_drv_dutycycle+0xc6>
	}
	else if(bottom_margin < speed_dif){
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	429a      	cmp	r2, r3
 800178c:	d209      	bcs.n	80017a2 <calc_drv_dutycycle+0xb2>
		*slower_drv = min_speed;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	601a      	str	r2, [r3, #0]
		*faster_drv = min_speed + 2*speed_dif;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005a      	lsls	r2, r3, #1
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	441a      	add	r2, r3
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e009      	b.n	80017b6 <calc_drv_dutycycle+0xc6>
	}
	else {
		*faster_drv = abs_speed + speed_dif;
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	441a      	add	r2, r3
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	601a      	str	r2, [r3, #0]
		*slower_drv = abs_speed - speed_dif;
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	1ad2      	subs	r2, r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	601a      	str	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80017b6:	2300      	movs	r3, #0

}
 80017b8:	4618      	mov	r0, r3
 80017ba:	372c      	adds	r7, #44	; 0x2c
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	51eb851f 	.word	0x51eb851f

080017c8 <set_pos_posdrv>:
 * @detail: if drive is running, the drive is stopped and the remaining time of the pulse is calculated.
 * Based on the direction, the actual position is corrected. Pulse duration is calculated and written to the register.
 * Drive is started in desired direction an new actual position is set.
 */

int set_pos_posdrv(uint16_t angle_degree){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]

	static enum drvDir posDrvDir = stop;
	int16_t correction_value = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	81fb      	strh	r3, [r7, #14]

	if(posDrvDir == cw){
 80017d6:	4b5e      	ldr	r3, [pc, #376]	; (8001950 <set_pos_posdrv+0x188>)
 80017d8:	f993 3000 	ldrsb.w	r3, [r3]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d121      	bne.n	8001826 <set_pos_posdrv+0x5e>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80017e2:	2104      	movs	r1, #4
 80017e4:	485b      	ldr	r0, [pc, #364]	; (8001954 <set_pos_posdrv+0x18c>)
 80017e6:	f002 ff07 	bl	80045f8 <HAL_TIM_PWM_Stop>
		if(TIM2->CNT != 0){
 80017ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d03a      	beq.n	800186a <set_pos_posdrv+0xa2>
			correction_value = posDrvDir*(int16_t)((TIM2->ARR - TIM2->CNT)/msPerdDegCw);
 80017f4:	4b56      	ldr	r3, [pc, #344]	; (8001950 <set_pos_posdrv+0x188>)
 80017f6:	f993 3000 	ldrsb.w	r3, [r3]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001800:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001808:	1a8a      	subs	r2, r1, r2
 800180a:	4953      	ldr	r1, [pc, #332]	; (8001958 <set_pos_posdrv+0x190>)
 800180c:	8809      	ldrh	r1, [r1, #0]
 800180e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001812:	b292      	uxth	r2, r2
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	b29b      	uxth	r3, r3
 800181a:	81fb      	strh	r3, [r7, #14]
			TIM2->CNT = 0;
 800181c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	; 0x24
 8001824:	e021      	b.n	800186a <set_pos_posdrv+0xa2>
		}
	}
	else if(posDrvDir == ccw){
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <set_pos_posdrv+0x188>)
 8001828:	f993 3000 	ldrsb.w	r3, [r3]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d11c      	bne.n	800186a <set_pos_posdrv+0xa2>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	484a      	ldr	r0, [pc, #296]	; (800195c <set_pos_posdrv+0x194>)
 8001834:	f002 fee0 	bl	80045f8 <HAL_TIM_PWM_Stop>
		if(TIM4->CNT != 0){
 8001838:	4b49      	ldr	r3, [pc, #292]	; (8001960 <set_pos_posdrv+0x198>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	2b00      	cmp	r3, #0
 800183e:	d014      	beq.n	800186a <set_pos_posdrv+0xa2>
			correction_value = posDrvDir*(int16_t)((TIM4->ARR - TIM4->CNT)/msPerdDegCcw);
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <set_pos_posdrv+0x188>)
 8001842:	f993 3000 	ldrsb.w	r3, [r3]
 8001846:	b29b      	uxth	r3, r3
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <set_pos_posdrv+0x198>)
 800184a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800184c:	4a44      	ldr	r2, [pc, #272]	; (8001960 <set_pos_posdrv+0x198>)
 800184e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001850:	1a8a      	subs	r2, r1, r2
 8001852:	4944      	ldr	r1, [pc, #272]	; (8001964 <set_pos_posdrv+0x19c>)
 8001854:	8809      	ldrh	r1, [r1, #0]
 8001856:	fbb2 f2f1 	udiv	r2, r2, r1
 800185a:	b292      	uxth	r2, r2
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	81fb      	strh	r3, [r7, #14]
			TIM4->CNT = 0;
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <set_pos_posdrv+0x198>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	actualPosdDeg += correction_value;
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <set_pos_posdrv+0x1a0>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	b29a      	uxth	r2, r3
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	4413      	add	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	b21a      	sxth	r2, r3
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <set_pos_posdrv+0x1a0>)
 800187c:	801a      	strh	r2, [r3, #0]
	int16_t deltadDeg = (angle_degree*10) - actualPosdDeg;
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	461a      	mov	r2, r3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <set_pos_posdrv+0x1a0>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	b29b      	uxth	r3, r3
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	81bb      	strh	r3, [r7, #12]

	if(deltadDeg == 0) return EXIT_SUCCESS;
 8001898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <set_pos_posdrv+0xdc>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e051      	b.n	8001948 <set_pos_posdrv+0x180>

	if(deltadDeg > 0){
 80018a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dd20      	ble.n	80018ee <set_pos_posdrv+0x126>
		if(endPos) return EXIT_FAILURE;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <set_pos_posdrv+0x1a4>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <set_pos_posdrv+0xf0>
 80018b4:	2301      	movs	r3, #1
 80018b6:	e047      	b.n	8001948 <set_pos_posdrv+0x180>
		TIM2->CNT = 0;
 80018b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CCR2 = PULSE_DELAY;
 80018c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018c4:	220a      	movs	r2, #10
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->ARR = (deltadDeg*msPerdDegCw) + PULSE_DELAY;
 80018c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <set_pos_posdrv+0x190>)
 80018ce:	8812      	ldrh	r2, [r2, #0]
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	f103 020a 	add.w	r2, r3, #10
 80018d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018de:	2104      	movs	r1, #4
 80018e0:	481c      	ldr	r0, [pc, #112]	; (8001954 <set_pos_posdrv+0x18c>)
 80018e2:	f002 fde7 	bl	80044b4 <HAL_TIM_PWM_Start>
		posDrvDir = cw;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <set_pos_posdrv+0x188>)
 80018e8:	22ff      	movs	r2, #255	; 0xff
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e021      	b.n	8001932 <set_pos_posdrv+0x16a>
	}
	else {
		if(startPos) return EXIT_FAILURE;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <set_pos_posdrv+0x1a8>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <set_pos_posdrv+0x132>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e026      	b.n	8001948 <set_pos_posdrv+0x180>
		TIM4->CNT = 0;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <set_pos_posdrv+0x198>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
		TIM4->CCR2 = PULSE_DELAY;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <set_pos_posdrv+0x198>)
 8001902:	220a      	movs	r2, #10
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->ARR = abs(deltadDeg)*msPerdDegCcw + PULSE_DELAY;
 8001906:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	bfb8      	it	lt
 800190e:	425b      	neglt	r3, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <set_pos_posdrv+0x19c>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	f103 020a 	add.w	r2, r3, #10
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <set_pos_posdrv+0x198>)
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001924:	2104      	movs	r1, #4
 8001926:	480d      	ldr	r0, [pc, #52]	; (800195c <set_pos_posdrv+0x194>)
 8001928:	f002 fdc4 	bl	80044b4 <HAL_TIM_PWM_Start>
		posDrvDir = ccw;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <set_pos_posdrv+0x188>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
	}

	actualPosdDeg += deltadDeg;
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <set_pos_posdrv+0x1a0>)
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	b29a      	uxth	r2, r3
 800193a:	89bb      	ldrh	r3, [r7, #12]
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <set_pos_posdrv+0x1a0>)
 8001944:	801a      	strh	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000368 	.word	0x20000368
 8001954:	200001f4 	.word	0x200001f4
 8001958:	20000364 	.word	0x20000364
 800195c:	200002a8 	.word	0x200002a8
 8001960:	40000800 	.word	0x40000800
 8001964:	20000366 	.word	0x20000366
 8001968:	20000362 	.word	0x20000362
 800196c:	20000360 	.word	0x20000360
 8001970:	2000035f 	.word	0x2000035f

08001974 <init_home_pos_drive>:
 * @return: int 0 on success
 *
 * @detail: Simple homing is performed first. Drive moves clockwise and then counterclockwise.
 * Time of both movements is stopped then the movement time for one tenth of a degree is calulated.
 */
int init_home_pos_drive(){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

	uint16_t cwTimeMs;
	uint16_t ccwTimeMs;

	home_pos_drive();
 800197a:	f000 f871 	bl	8001a60 <home_pos_drive>

	TIM2->ARR = HOME_TIMEOUT;
 800197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001982:	f247 5230 	movw	r2, #30000	; 0x7530
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = PULSE_DELAY;
 8001988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800198c:	220a      	movs	r2, #10
 800198e:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t startTime = HAL_GetTick();
 8001990:	f000 fb8e 	bl	80020b0 <HAL_GetTick>
 8001994:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001996:	2104      	movs	r1, #4
 8001998:	4828      	ldr	r0, [pc, #160]	; (8001a3c <init_home_pos_drive+0xc8>)
 800199a:	f002 fd8b 	bl	80044b4 <HAL_TIM_PWM_Start>

	while(!endPos){
 800199e:	bf00      	nop
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <init_home_pos_drive+0xcc>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0fb      	beq.n	80019a0 <init_home_pos_drive+0x2c>
		//Wait until SW2 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80019a8:	2104      	movs	r1, #4
 80019aa:	4824      	ldr	r0, [pc, #144]	; (8001a3c <init_home_pos_drive+0xc8>)
 80019ac:	f002 fe24 	bl	80045f8 <HAL_TIM_PWM_Stop>
	cwTimeMs = HAL_GetTick() - startTime;
 80019b0:	f000 fb7e 	bl	80020b0 <HAL_GetTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	807b      	strh	r3, [r7, #2]

	TIM4->ARR = HOME_TIMEOUT;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <init_home_pos_drive+0xd0>)
 80019c2:	f247 5230 	movw	r2, #30000	; 0x7530
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <init_home_pos_drive+0xd0>)
 80019ca:	220a      	movs	r2, #10
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38
	startTime = HAL_GetTick();
 80019ce:	f000 fb6f 	bl	80020b0 <HAL_GetTick>
 80019d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	481c      	ldr	r0, [pc, #112]	; (8001a48 <init_home_pos_drive+0xd4>)
 80019d8:	f002 fd6c 	bl	80044b4 <HAL_TIM_PWM_Start>

	while(!startPos){
 80019dc:	bf00      	nop
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <init_home_pos_drive+0xd8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0fb      	beq.n	80019de <init_home_pos_drive+0x6a>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80019e6:	2104      	movs	r1, #4
 80019e8:	4817      	ldr	r0, [pc, #92]	; (8001a48 <init_home_pos_drive+0xd4>)
 80019ea:	f002 fe05 	bl	80045f8 <HAL_TIM_PWM_Stop>
	ccwTimeMs = HAL_GetTick() - startTime;
 80019ee:	f000 fb5f 	bl	80020b0 <HAL_GetTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	803b      	strh	r3, [r7, #0]

	msPerdDegCw = cwTimeMs/900;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <init_home_pos_drive+0xdc>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0a5b      	lsrs	r3, r3, #9
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <init_home_pos_drive+0xe0>)
 8001a0c:	801a      	strh	r2, [r3, #0]
	msPerdDegCcw = ccwTimeMs/900;
 8001a0e:	883b      	ldrh	r3, [r7, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <init_home_pos_drive+0xdc>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a5b      	lsrs	r3, r3, #9
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <init_home_pos_drive+0xe4>)
 8001a1c:	801a      	strh	r2, [r3, #0]
	initHomingComplete = SET;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <init_home_pos_drive+0xe8>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 8001a24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <init_home_pos_drive+0xd0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24

	return EXIT_SUCCESS;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200001f4 	.word	0x200001f4
 8001a40:	20000360 	.word	0x20000360
 8001a44:	40000800 	.word	0x40000800
 8001a48:	200002a8 	.word	0x200002a8
 8001a4c:	2000035f 	.word	0x2000035f
 8001a50:	91a2b3c5 	.word	0x91a2b3c5
 8001a54:	20000364 	.word	0x20000364
 8001a58:	20000366 	.word	0x20000366
 8001a5c:	2000035d 	.word	0x2000035d

08001a60 <home_pos_drive>:
 * @return: int 0 on success
 *
 * @detail: Move drive counterclockwise to start position. Used to get the initial position of the drive
 * either after power up as part of initial homing or after a emergency stop event happened.
 */
int home_pos_drive(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

	if(startPos){
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <home_pos_drive+0x5c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <home_pos_drive+0x1c>
		actualPosdDeg = 0;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <home_pos_drive+0x60>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]
		homingComplete = SET;
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <home_pos_drive+0x64>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
		return EXIT_SUCCESS;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e01d      	b.n	8001ab8 <home_pos_drive+0x58>
	}

	TIM4->ARR = HOME_TIMEOUT;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <home_pos_drive+0x68>)
 8001a7e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <home_pos_drive+0x68>)
 8001a86:	220a      	movs	r2, #10
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	480f      	ldr	r0, [pc, #60]	; (8001acc <home_pos_drive+0x6c>)
 8001a8e:	f002 fd11 	bl	80044b4 <HAL_TIM_PWM_Start>

	while(!startPos){
 8001a92:	bf00      	nop
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <home_pos_drive+0x5c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0fb      	beq.n	8001a94 <home_pos_drive+0x34>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	480b      	ldr	r0, [pc, #44]	; (8001acc <home_pos_drive+0x6c>)
 8001aa0:	f002 fdaa 	bl	80045f8 <HAL_TIM_PWM_Stop>
	TIM4->CNT = 0;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <home_pos_drive+0x68>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
	actualPosdDeg = 0;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <home_pos_drive+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	801a      	strh	r2, [r3, #0]
	homingComplete = SET;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <home_pos_drive+0x64>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000035f 	.word	0x2000035f
 8001ac0:	20000362 	.word	0x20000362
 8001ac4:	2000035e 	.word	0x2000035e
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	200002a8 	.word	0x200002a8

08001ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_MspInit+0x5c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6193      	str	r3, [r2, #24]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_MspInit+0x5c>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_MspInit+0x5c>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_MspInit+0x5c>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_MspInit+0x60>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_MspInit+0x60>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010000 	.word	0x40010000

08001b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_ADC_MspInit+0x6c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d121      	bne.n	8001b98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5e:	6193      	str	r3, [r2, #24]
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6193      	str	r3, [r2, #24]
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_ADC_MspInit+0x70>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 8001b84:	2307      	movs	r3, #7
 8001b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_ADC_MspInit+0x74>)
 8001b94:	f000 ffd0 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012400 	.word	0x40012400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40011000 	.word	0x40011000

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_I2C_MspInit+0x74>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d124      	bne.n	8001c16 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 0310 	add.w	r3, r7, #16
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <HAL_I2C_MspInit+0x7c>)
 8001bfa:	f000 ff9d 	bl	8002b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_I2C_MspInit+0x78>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40005800 	.word	0x40005800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010c00 	.word	0x40010c00

08001c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_Base_MspInit+0x9c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10c      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c48:	6193      	str	r3, [r2, #24]
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c56:	e032      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d114      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f000 ff23 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c84:	201c      	movs	r0, #28
 8001c86:	f000 ff3c 	bl	8002b02 <HAL_NVIC_EnableIRQ>
}
 8001c8a:	e018      	b.n	8001cbe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <HAL_TIM_Base_MspInit+0xa4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d113      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_TIM_Base_MspInit+0xa0>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	201e      	movs	r0, #30
 8001cb4:	f000 ff09 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cb8:	201e      	movs	r0, #30
 8001cba:	f000 ff22 	bl	8002b02 <HAL_NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2e      	ldr	r2, [pc, #184]	; (8001da8 <HAL_TIM_MspPostInit+0xd4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 8001d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1a:	f107 0318 	add.w	r3, r7, #24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4823      	ldr	r0, [pc, #140]	; (8001db0 <HAL_TIM_MspPostInit+0xdc>)
 8001d22:	f000 ff09 	bl	8002b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d26:	e03a      	b.n	8001d9e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d30:	d118      	bne.n	8001d64 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6193      	str	r3, [r2, #24]
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = POS_CW_Pin;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CW_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4814      	ldr	r0, [pc, #80]	; (8001db0 <HAL_TIM_MspPostInit+0xdc>)
 8001d5e:	f000 feeb 	bl	8002b38 <HAL_GPIO_Init>
}
 8001d62:	e01c      	b.n	8001d9e <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_TIM_MspPostInit+0xe0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d117      	bne.n	8001d9e <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_TIM_MspPostInit+0xd8>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POS_CCW_Pin;
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CCW_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0318 	add.w	r3, r7, #24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <HAL_TIM_MspPostInit+0xe4>)
 8001d9a:	f000 fecd 	bl	8002b38 <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40000800 	.word	0x40000800
 8001db8:	40010c00 	.word	0x40010c00

08001dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <NMI_Handler+0x4>

08001dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <HardFault_Handler+0x4>

08001dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <MemManage_Handler+0x4>

08001dce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <BusFault_Handler+0x4>

08001dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler+0x4>

08001dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e02:	f000 f943 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f001 f85e 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	f001 f857 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_STOP_Pin);
 8001e2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e2e:	f001 f84f 	bl	8002ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIM2_IRQHandler+0x10>)
 8001e3e:	f002 fca6 	bl	800478e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200001f4 	.word	0x200001f4

08001e4c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <TIM4_IRQHandler+0x10>)
 8001e52:	f002 fc9c 	bl	800478e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002a8 	.word	0x200002a8

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <_kill>:

int _kill(int pid, int sig)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e78:	f003 fb5c 	bl	8005534 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2216      	movs	r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
  return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_exit>:

void _exit (int status)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e96:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffe7 	bl	8001e6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ea0:	e7fe      	b.n	8001ea0 <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
  return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <_isatty>:

int _isatty(int file)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f003 fae2 	bl	8005534 <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20005000 	.word	0x20005000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	2000036c 	.word	0x2000036c
 8001fa4:	20000388 	.word	0x20000388

08001fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb4:	f7ff fff8 	bl	8001fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fba:	490c      	ldr	r1, [pc, #48]	; (8001fec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fd0:	4c09      	ldr	r4, [pc, #36]	; (8001ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f003 faaf 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fe2:	f7fe fdbd 	bl	8000b60 <main>
  bx lr
 8001fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ff0:	080068b4 	.word	0x080068b4
  ldr r2, =_sbss
 8001ff4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ff8:	20000384 	.word	0x20000384

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_Init+0x28>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_Init+0x28>)
 800200a:	f043 0310 	orr.w	r3, r3, #16
 800200e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 fd4f 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002016:	200f      	movs	r0, #15
 8002018:	f000 f808 	bl	800202c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201c:	f7ff fd58 	bl	8001ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40022000 	.word	0x40022000

0800202c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x54>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <HAL_InitTick+0x58>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fd67 	bl	8002b1e <HAL_SYSTICK_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00e      	b.n	8002078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b0f      	cmp	r3, #15
 800205e:	d80a      	bhi.n	8002076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002060:	2200      	movs	r2, #0
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	f04f 30ff 	mov.w	r0, #4294967295
 8002068:	f000 fd2f 	bl	8002aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_InitTick+0x5c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000004 	.word	0x20000004
 8002084:	2000000c 	.word	0x2000000c
 8002088:	20000008 	.word	0x20000008

0800208c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_IncTick+0x1c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_IncTick+0x20>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_IncTick+0x20>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	20000370 	.word	0x20000370

080020b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b02      	ldr	r3, [pc, #8]	; (80020c0 <HAL_GetTick+0x10>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	20000370 	.word	0x20000370

080020c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0be      	b.n	8002264 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fd16 	bl	8001b34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fbc5 	bl	8002898 <ADC_ConversionStop_Disable>
 800210e:	4603      	mov	r3, r0
 8002110:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 8099 	bne.w	8002252 <HAL_ADC_Init+0x18e>
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8095 	bne.w	8002252 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002130:	f023 0302 	bic.w	r3, r3, #2
 8002134:	f043 0202 	orr.w	r2, r3, #2
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002144:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b1b      	ldrb	r3, [r3, #12]
 800214a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800214c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4313      	orrs	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215c:	d003      	beq.n	8002166 <HAL_ADC_Init+0xa2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_ADC_Init+0xa8>
 8002166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216a:	e000      	b.n	800216e <HAL_ADC_Init+0xaa>
 800216c:	2300      	movs	r3, #0
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7d1b      	ldrb	r3, [r3, #20]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d119      	bne.n	80021b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7b1b      	ldrb	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	3b01      	subs	r3, #1
 800218a:	035a      	lsls	r2, r3, #13
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e00b      	b.n	80021b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_ADC_Init+0x1a8>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e0:	d003      	beq.n	80021ea <HAL_ADC_Init+0x126>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d104      	bne.n	80021f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	430a      	orrs	r2, r1
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_ADC_Init+0x1ac>)
 8002210:	4013      	ands	r3, r2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	d10b      	bne.n	8002230 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800222e:	e018      	b.n	8002262 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f023 0312 	bic.w	r3, r3, #18
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002250:	e007      	b.n	8002262 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f043 0210 	orr.w	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	ffe1f7fd 	.word	0xffe1f7fd
 8002270:	ff1f0efe 	.word	0xff1f0efe

08002274 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADC_Start+0x1a>
 800228a:	2302      	movs	r3, #2
 800228c:	e098      	b.n	80023c0 <HAL_ADC_Start+0x14c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 faa4 	bl	80027e4 <ADC_Enable>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8087 	bne.w	80023b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a41      	ldr	r2, [pc, #260]	; (80023c8 <HAL_ADC_Start+0x154>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_Start+0x5e>
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_ADC_Start+0x158>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d026      	beq.n	800233a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022fc:	e01d      	b.n	800233a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <HAL_ADC_Start+0x158>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_ADC_Start+0xaa>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <HAL_ADC_Start+0x154>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d10d      	bne.n	800233a <HAL_ADC_Start+0xc6>
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_ADC_Start+0x158>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002332:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f023 0206 	bic.w	r2, r3, #6
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
 8002352:	e002      	b.n	800235a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f06f 0202 	mvn.w	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002376:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800237a:	d113      	bne.n	80023a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002380:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_ADC_Start+0x154>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d105      	bne.n	8002392 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_ADC_Start+0x158>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	e00c      	b.n	80023be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e003      	b.n	80023be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40012800 	.word	0x40012800
 80023cc:	40012400 	.word	0x40012400

080023d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023e6:	f7ff fe63 	bl	80020b0 <HAL_GetTick>
 80023ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0d3      	b.n	80025ba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d131      	bne.n	8002484 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d12a      	bne.n	8002484 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800242e:	e021      	b.n	8002474 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002436:	d01d      	beq.n	8002474 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_PollForConversion+0x7e>
 800243e:	f7ff fe37 	bl	80020b0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d212      	bcs.n	8002474 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0a2      	b.n	80025ba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0d6      	beq.n	8002430 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002482:	e070      	b.n	8002566 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_ADC_PollForConversion+0x1f4>)
 8002486:	681c      	ldr	r4, [r3, #0]
 8002488:	2002      	movs	r0, #2
 800248a:	f001 fe9b 	bl	80041c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800248e:	4603      	mov	r3, r0
 8002490:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_ADC_PollForConversion+0x1f8>)
 800249c:	400b      	ands	r3, r1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x104>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68d9      	ldr	r1, [r3, #12]
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_ADC_PollForConversion+0x1fc>)
 80024aa:	400b      	ands	r3, r1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d111      	bne.n	80024d4 <HAL_ADC_PollForConversion+0x104>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6919      	ldr	r1, [r3, #16]
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_ADC_PollForConversion+0x200>)
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <HAL_ADC_PollForConversion+0x100>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68d9      	ldr	r1, [r3, #12]
 80024c4:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_ADC_PollForConversion+0x204>)
 80024c6:	400b      	ands	r3, r1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_PollForConversion+0x100>
 80024cc:	2314      	movs	r3, #20
 80024ce:	e020      	b.n	8002512 <HAL_ADC_PollForConversion+0x142>
 80024d0:	2329      	movs	r3, #41	; 0x29
 80024d2:	e01e      	b.n	8002512 <HAL_ADC_PollForConversion+0x142>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6919      	ldr	r1, [r3, #16]
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_ADC_PollForConversion+0x200>)
 80024dc:	400b      	ands	r3, r1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x120>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68d9      	ldr	r1, [r3, #12]
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_ADC_PollForConversion+0x204>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_ADC_PollForConversion+0x13c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6919      	ldr	r1, [r3, #16]
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_ADC_PollForConversion+0x208>)
 80024f8:	400b      	ands	r3, r1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d108      	bne.n	8002510 <HAL_ADC_PollForConversion+0x140>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68d9      	ldr	r1, [r3, #12]
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_ADC_PollForConversion+0x208>)
 8002506:	400b      	ands	r3, r1
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_PollForConversion+0x140>
 800250c:	2354      	movs	r3, #84	; 0x54
 800250e:	e000      	b.n	8002512 <HAL_ADC_PollForConversion+0x142>
 8002510:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002518:	e021      	b.n	800255e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d01a      	beq.n	8002558 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_ADC_PollForConversion+0x168>
 8002528:	f7ff fdc2 	bl	80020b0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d20f      	bcs.n	8002558 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d90b      	bls.n	8002558 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e030      	b.n	80025ba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3301      	adds	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	d8d9      	bhi.n	800251a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f06f 0212 	mvn.w	r2, #18
 800256e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002586:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258a:	d115      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000004 	.word	0x20000004
 80025c8:	24924924 	.word	0x24924924
 80025cc:	00924924 	.word	0x00924924
 80025d0:	12492492 	.word	0x12492492
 80025d4:	00492492 	.word	0x00492492
 80025d8:	00249249 	.word	0x00249249

080025dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x20>
 8002610:	2302      	movs	r3, #2
 8002612:	e0dc      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1da>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b06      	cmp	r3, #6
 8002622:	d81c      	bhi.n	800265e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	3b05      	subs	r3, #5
 8002636:	221f      	movs	r2, #31
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6818      	ldr	r0, [r3, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3b05      	subs	r3, #5
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	635a      	str	r2, [r3, #52]	; 0x34
 800265c:	e03c      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d81c      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	3b23      	subs	r3, #35	; 0x23
 8002678:	221f      	movs	r2, #31
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	4019      	ands	r1, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b23      	subs	r3, #35	; 0x23
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
 800269e:	e01b      	b.n	80026d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	3b41      	subs	r3, #65	; 0x41
 80026b2:	221f      	movs	r2, #31
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4019      	ands	r1, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	3b41      	subs	r3, #65	; 0x41
 80026cc:	fa00 f203 	lsl.w	r2, r0, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d91c      	bls.n	800271a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	3b1e      	subs	r3, #30
 80026f2:	2207      	movs	r2, #7
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4019      	ands	r1, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6898      	ldr	r0, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	3b1e      	subs	r3, #30
 800270c:	fa00 f203 	lsl.w	r2, r0, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e019      	b.n	800274e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6919      	ldr	r1, [r3, #16]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6898      	ldr	r0, [r3, #8]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b10      	cmp	r3, #16
 8002754:	d003      	beq.n	800275e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800275a:	2b11      	cmp	r3, #17
 800275c:	d132      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d125      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d126      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002784:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b10      	cmp	r3, #16
 800278c:	d11a      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	0c9a      	lsrs	r2, r3, #18
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027a4:	e002      	b.n	80027ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f9      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x1b2>
 80027b2:	e007      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012400 	.word	0x40012400
 80027dc:	20000004 	.word	0x20000004
 80027e0:	431bde83 	.word	0x431bde83

080027e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d040      	beq.n	8002884 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <ADC_Enable+0xac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <ADC_Enable+0xb0>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002820:	e002      	b.n	8002828 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800282e:	f7ff fc3f 	bl	80020b0 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002834:	e01f      	b.n	8002876 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002836:	f7ff fc3b 	bl	80020b0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d918      	bls.n	8002876 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d011      	beq.n	8002876 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f043 0210 	orr.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d1d8      	bne.n	8002836 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000004 	.word	0x20000004
 8002894:	431bde83 	.word	0x431bde83

08002898 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d12e      	bne.n	8002910 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028c2:	f7ff fbf5 	bl	80020b0 <HAL_GetTick>
 80028c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028c8:	e01b      	b.n	8002902 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ca:	f7ff fbf1 	bl	80020b0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d914      	bls.n	8002902 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10d      	bne.n	8002902 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d0dc      	beq.n	80028ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <__NVIC_SetPriorityGrouping>:
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4906      	ldr	r1, [pc, #24]	; (80029b4 <__NVIC_EnableIRQ+0x34>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	db0a      	blt.n	80029e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	490c      	ldr	r1, [pc, #48]	; (8002a04 <__NVIC_SetPriority+0x4c>)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	440b      	add	r3, r1
 80029dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029e0:	e00a      	b.n	80029f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <__NVIC_SetPriority+0x50>)
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3b04      	subs	r3, #4
 80029f0:	0112      	lsls	r2, r2, #4
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	440b      	add	r3, r1
 80029f6:	761a      	strb	r2, [r3, #24]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000e100 	.word	0xe000e100
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <NVIC_EncodePriority>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f1c3 0307 	rsb	r3, r3, #7
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	bf28      	it	cs
 8002a2a:	2304      	movcs	r3, #4
 8002a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d902      	bls.n	8002a3c <NVIC_EncodePriority+0x30>
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3b03      	subs	r3, #3
 8002a3a:	e000      	b.n	8002a3e <NVIC_EncodePriority+0x32>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	401a      	ands	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43d9      	mvns	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a64:	4313      	orrs	r3, r2
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Config>:
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff90 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff2d 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff42 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff90 	bl	8002a0c <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5f 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff35 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b08b      	sub	sp, #44	; 0x2c
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4a:	e169      	b.n	8002e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 8158 	bne.w	8002e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a9a      	ldr	r2, [pc, #616]	; (8002dd8 <HAL_GPIO_Init+0x2a0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d05e      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b74:	4a98      	ldr	r2, [pc, #608]	; (8002dd8 <HAL_GPIO_Init+0x2a0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d875      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b7a:	4a98      	ldr	r2, [pc, #608]	; (8002ddc <HAL_GPIO_Init+0x2a4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d058      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b80:	4a96      	ldr	r2, [pc, #600]	; (8002ddc <HAL_GPIO_Init+0x2a4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d86f      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b86:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <HAL_GPIO_Init+0x2a8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d052      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b8c:	4a94      	ldr	r2, [pc, #592]	; (8002de0 <HAL_GPIO_Init+0x2a8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d869      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b92:	4a94      	ldr	r2, [pc, #592]	; (8002de4 <HAL_GPIO_Init+0x2ac>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d04c      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002b98:	4a92      	ldr	r2, [pc, #584]	; (8002de4 <HAL_GPIO_Init+0x2ac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d863      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002b9e:	4a92      	ldr	r2, [pc, #584]	; (8002de8 <HAL_GPIO_Init+0x2b0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d046      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
 8002ba4:	4a90      	ldr	r2, [pc, #576]	; (8002de8 <HAL_GPIO_Init+0x2b0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d85d      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002baa:	2b12      	cmp	r3, #18
 8002bac:	d82a      	bhi.n	8002c04 <HAL_GPIO_Init+0xcc>
 8002bae:	2b12      	cmp	r3, #18
 8002bb0:	d859      	bhi.n	8002c66 <HAL_GPIO_Init+0x12e>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <HAL_GPIO_Init+0x80>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002c33 	.word	0x08002c33
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002c1f 	.word	0x08002c1f
 8002bc4:	08002c61 	.word	0x08002c61
 8002bc8:	08002c67 	.word	0x08002c67
 8002bcc:	08002c67 	.word	0x08002c67
 8002bd0:	08002c67 	.word	0x08002c67
 8002bd4:	08002c67 	.word	0x08002c67
 8002bd8:	08002c67 	.word	0x08002c67
 8002bdc:	08002c67 	.word	0x08002c67
 8002be0:	08002c67 	.word	0x08002c67
 8002be4:	08002c67 	.word	0x08002c67
 8002be8:	08002c67 	.word	0x08002c67
 8002bec:	08002c67 	.word	0x08002c67
 8002bf0:	08002c67 	.word	0x08002c67
 8002bf4:	08002c67 	.word	0x08002c67
 8002bf8:	08002c67 	.word	0x08002c67
 8002bfc:	08002c15 	.word	0x08002c15
 8002c00:	08002c29 	.word	0x08002c29
 8002c04:	4a79      	ldr	r2, [pc, #484]	; (8002dec <HAL_GPIO_Init+0x2b4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c0a:	e02c      	b.n	8002c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	623b      	str	r3, [r7, #32]
          break;
 8002c12:	e029      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	623b      	str	r3, [r7, #32]
          break;
 8002c1c:	e024      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	3308      	adds	r3, #8
 8002c24:	623b      	str	r3, [r7, #32]
          break;
 8002c26:	e01f      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	623b      	str	r3, [r7, #32]
          break;
 8002c30:	e01a      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	623b      	str	r3, [r7, #32]
          break;
 8002c3e:	e013      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c48:	2308      	movs	r3, #8
 8002c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	611a      	str	r2, [r3, #16]
          break;
 8002c52:	e009      	b.n	8002c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c54:	2308      	movs	r3, #8
 8002c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	615a      	str	r2, [r3, #20]
          break;
 8002c5e:	e003      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
          break;
 8002c64:	e000      	b.n	8002c68 <HAL_GPIO_Init+0x130>
          break;
 8002c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2bff      	cmp	r3, #255	; 0xff
 8002c6c:	d801      	bhi.n	8002c72 <HAL_GPIO_Init+0x13a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	e001      	b.n	8002c76 <HAL_GPIO_Init+0x13e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2bff      	cmp	r3, #255	; 0xff
 8002c7c:	d802      	bhi.n	8002c84 <HAL_GPIO_Init+0x14c>
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	e002      	b.n	8002c8a <HAL_GPIO_Init+0x152>
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	3b08      	subs	r3, #8
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	210f      	movs	r1, #15
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	fa01 f303 	lsl.w	r3, r1, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	6a39      	ldr	r1, [r7, #32]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b1 	beq.w	8002e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb8:	4b4d      	ldr	r3, [pc, #308]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6193      	str	r3, [r2, #24]
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	; (8002df0 <HAL_GPIO_Init+0x2b8>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2bc>)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <HAL_GPIO_Init+0x2c0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_GPIO_Init+0x1ec>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <HAL_GPIO_Init+0x2c4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d00d      	beq.n	8002d20 <HAL_GPIO_Init+0x1e8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a3e      	ldr	r2, [pc, #248]	; (8002e00 <HAL_GPIO_Init+0x2c8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d007      	beq.n	8002d1c <HAL_GPIO_Init+0x1e4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a3d      	ldr	r2, [pc, #244]	; (8002e04 <HAL_GPIO_Init+0x2cc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d101      	bne.n	8002d18 <HAL_GPIO_Init+0x1e0>
 8002d14:	2303      	movs	r3, #3
 8002d16:	e006      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e004      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e002      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_GPIO_Init+0x1ee>
 8002d24:	2300      	movs	r3, #0
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	f002 0203 	and.w	r2, r2, #3
 8002d2c:	0092      	lsls	r2, r2, #2
 8002d2e:	4093      	lsls	r3, r2
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d36:	492f      	ldr	r1, [pc, #188]	; (8002df4 <HAL_GPIO_Init+0x2bc>)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d006      	beq.n	8002d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	492c      	ldr	r1, [pc, #176]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	4928      	ldr	r1, [pc, #160]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d006      	beq.n	8002d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60cb      	str	r3, [r1, #12]
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	491e      	ldr	r1, [pc, #120]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	4918      	ldr	r1, [pc, #96]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4914      	ldr	r1, [pc, #80]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d021      	beq.n	8002e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	490e      	ldr	r1, [pc, #56]	; (8002e08 <HAL_GPIO_Init+0x2d0>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e021      	b.n	8002e1a <HAL_GPIO_Init+0x2e2>
 8002dd6:	bf00      	nop
 8002dd8:	10320000 	.word	0x10320000
 8002ddc:	10310000 	.word	0x10310000
 8002de0:	10220000 	.word	0x10220000
 8002de4:	10210000 	.word	0x10210000
 8002de8:	10120000 	.word	0x10120000
 8002dec:	10110000 	.word	0x10110000
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40010800 	.word	0x40010800
 8002dfc:	40010c00 	.word	0x40010c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_GPIO_Init+0x304>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	4909      	ldr	r1, [pc, #36]	; (8002e3c <HAL_GPIO_Init+0x304>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f47f ae8e 	bne.w	8002b4c <HAL_GPIO_Init+0x14>
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	372c      	adds	r7, #44	; 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	460b      	mov	r3, r1
 8002e78:	807b      	strh	r3, [r7, #2]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e7e:	787b      	ldrb	r3, [r7, #1]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e8a:	e003      	b.n	8002e94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	611a      	str	r2, [r3, #16]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	041a      	lsls	r2, r3, #16
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d006      	beq.n	8002ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe faae 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40010400 	.word	0x40010400

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e12b      	b.n	800316a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fe40 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f64:	f001 f832 	bl	8003fcc <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a81      	ldr	r2, [pc, #516]	; (8003174 <HAL_I2C_Init+0x274>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_I2C_Init+0x278>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x92>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a7d      	ldr	r2, [pc, #500]	; (800317c <HAL_I2C_Init+0x27c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0e7      	b.n	800316a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a78      	ldr	r2, [pc, #480]	; (8003180 <HAL_I2C_Init+0x280>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_I2C_Init+0x274>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xd4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xe8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_I2C_Init+0x284>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	495c      	ldr	r1, [pc, #368]	; (8003174 <HAL_I2C_Init+0x274>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d819      	bhi.n	800303c <HAL_I2C_Init+0x13c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	f640 73fc 	movw	r3, #4092	; 0xffc
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_I2C_Init+0x138>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e59      	subs	r1, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	e051      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003038:	2304      	movs	r3, #4
 800303a:	e04f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_I2C_Init+0x168>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e012      	b.n	800308e <HAL_I2C_Init+0x18e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x196>
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_I2C_Init+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	0099      	lsls	r1, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6809      	ldr	r1, [r1, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	000186a0 	.word	0x000186a0
 8003178:	001e847f 	.word	0x001e847f
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	431bde83 	.word	0x431bde83
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
 8003198:	4613      	mov	r3, r2
 800319a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7fe ff88 	bl	80020b0 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	f040 80e0 	bne.w	8003370 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	4970      	ldr	r1, [pc, #448]	; (800337c <HAL_I2C_Master_Transmit+0x1f4>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f964 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0d3      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2C_Master_Transmit+0x50>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0cc      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d007      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2210      	movs	r2, #16
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	893a      	ldrh	r2, [r7, #8]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a50      	ldr	r2, [pc, #320]	; (8003380 <HAL_I2C_Master_Transmit+0x1f8>)
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f89c 	bl	8003384 <I2C_MasterRequestWrite>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e08d      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800326c:	e066      	b.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	6a39      	ldr	r1, [r7, #32]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa22 	bl	80036bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b04      	cmp	r3, #4
 8003284:	d107      	bne.n	8003296 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e06b      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11b      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x188>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fa19 	bl	800374c <I2C_WaitOnBTFFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003336:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01a      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d194      	bne.n	800326e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000

08003384 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d006      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <I2C_MasterRequestWrite+0x2a>
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ac:	d108      	bne.n	80033c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e00b      	b.n	80033d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b12      	cmp	r3, #18
 80033c6:	d107      	bne.n	80033d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f84f 	bl	8003488 <I2C_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d103      	bne.n	8003408 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e035      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d108      	bne.n	8003428 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	e01b      	b.n	8003460 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003428:	897b      	ldrh	r3, [r7, #10]
 800342a:	11db      	asrs	r3, r3, #7
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f003 0306 	and.w	r3, r3, #6
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f063 030f 	orn	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	490e      	ldr	r1, [pc, #56]	; (8003480 <I2C_MasterRequestWrite+0xfc>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f898 	bl	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e010      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <I2C_MasterRequestWrite+0x100>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f888 	bl	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	00010008 	.word	0x00010008
 8003484:	00010002 	.word	0x00010002

08003488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	e048      	b.n	800352c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d044      	beq.n	800352c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fe05 	bl	80020b0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d139      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10d      	bne.n	80034de <I2C_WaitOnFlagUntilTimeout+0x56>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	e00c      	b.n	80034f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d116      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e023      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	0c1b      	lsrs	r3, r3, #16
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10d      	bne.n	8003552 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	43da      	mvns	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	e00c      	b.n	800356c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	43da      	mvns	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4013      	ands	r3, r2
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	429a      	cmp	r2, r3
 8003570:	d093      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358a:	e071      	b.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d123      	bne.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0204 	orr.w	r2, r3, #4
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e067      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d041      	beq.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ec:	f7fe fd60 	bl	80020b0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d302      	bcc.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d136      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10c      	bne.n	8003626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e00b      	b.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	43da      	mvns	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4013      	ands	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2301      	movne	r3, #1
 800363a:	2300      	moveq	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e021      	b.n	80036b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10c      	bne.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e00b      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf14      	ite	ne
 80036a6:	2301      	movne	r3, #1
 80036a8:	2300      	moveq	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f47f af6d 	bne.w	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c8:	e034      	b.n	8003734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f886 	bl	80037dc <I2C_IsAcknowledgeFailed>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e034      	b.n	8003744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d028      	beq.n	8003734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7fe fce5 	bl	80020b0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11d      	bne.n	8003734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d016      	beq.n	8003734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e007      	b.n	8003744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d1c3      	bne.n	80036ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003758:	e034      	b.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f83e 	bl	80037dc <I2C_IsAcknowledgeFailed>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e034      	b.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d028      	beq.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fe fc9d 	bl	80020b0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11d      	bne.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d016      	beq.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e007      	b.n	80037d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d1c3      	bne.n	800375a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d11b      	bne.n	800382c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e272      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8087 	beq.w	8003966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00c      	beq.n	800387e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003864:	4b8f      	ldr	r3, [pc, #572]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d112      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x12c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e24c      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x76>
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7f      	ldr	r2, [pc, #508]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a77      	ldr	r2, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xbc>
 80038da:	4b72      	ldr	r3, [pc, #456]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a71      	ldr	r2, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fbcc 	bl	80020b0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fbc8 	bl	80020b0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e200      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xe4>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fbb8 	bl	80020b0 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe fbb4 	bl	80020b0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1ec      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x10c>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d063      	beq.n	8003a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003972:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397e:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
 800398a:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1c0      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4939      	ldr	r1, [pc, #228]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	e03a      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fb6d 	bl	80020b0 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7fe fb69 	bl	80020b0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1a1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4927      	ldr	r1, [pc, #156]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe fb4c 	bl	80020b0 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fb48 	bl	80020b0 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e180      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03a      	beq.n	8003abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fe fb2c 	bl	80020b0 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fe fb28 	bl	80020b0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e160      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f000 face 	bl	800401c <RCC_Delay>
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a88:	f7fe fb12 	bl	80020b0 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe fb0e 	bl	80020b0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e146      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	42420000 	.word	0x42420000
 8003aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b92      	ldr	r3, [pc, #584]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e9      	bne.n	8003a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a6 	beq.w	8003c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b88      	ldr	r3, [pc, #544]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a87      	ldr	r2, [pc, #540]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b85      	ldr	r3, [pc, #532]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b82      	ldr	r3, [pc, #520]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7e      	ldr	r2, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe facf 	bl	80020b0 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fe facb 	bl	80020b0 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e103      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x4c8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x312>
 8003b3c:	4b6f      	ldr	r3, [pc, #444]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6213      	str	r3, [r2, #32]
 8003b48:	e02d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a69      	ldr	r2, [pc, #420]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a66      	ldr	r2, [pc, #408]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	e01c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x356>
 8003b74:	4b61      	ldr	r3, [pc, #388]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a5d      	ldr	r2, [pc, #372]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a5a      	ldr	r2, [pc, #360]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	4b58      	ldr	r3, [pc, #352]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a57      	ldr	r2, [pc, #348]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fe fa7f 	bl	80020b0 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe fa7b 	bl	80020b0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b1      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x37e>
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe fa69 	bl	80020b0 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fe fa65 	bl	80020b0 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e09b      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d061      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d146      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fe fa39 	bl	80020b0 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fe fa35 	bl	80020b0 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e06d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	4b29      	ldr	r3, [pc, #164]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4921      	ldr	r1, [pc, #132]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a19      	ldr	r1, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	491b      	ldr	r1, [pc, #108]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fa09 	bl	80020b0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fe fa05 	bl	80020b0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x46a>
 8003cc0:	e035      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f9f2 	bl	80020b0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe f9ee 	bl	80020b0 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e026      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x498>
 8003cee:	e01e      	b.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e019      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x500>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000

08003d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0d0      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4b6a      	ldr	r3, [pc, #424]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d910      	bls.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5e:	4b67      	ldr	r3, [pc, #412]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 0207 	bic.w	r2, r3, #7
 8003d66:	4965      	ldr	r1, [pc, #404]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6e:	4b63      	ldr	r3, [pc, #396]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b8      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d020      	beq.n	8003dce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003da2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b50      	ldr	r3, [pc, #320]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	494d      	ldr	r1, [pc, #308]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d040      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d115      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e07f      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e073      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e06b      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e1a:	4b39      	ldr	r3, [pc, #228]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f023 0203 	bic.w	r2, r3, #3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4936      	ldr	r1, [pc, #216]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e2c:	f7fe f940 	bl	80020b0 <HAL_GetTick>
 8003e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	e00a      	b.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e34:	f7fe f93c 	bl	80020b0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e053      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 020c 	and.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1eb      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d210      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	4922      	ldr	r1, [pc, #136]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b20      	ldr	r3, [pc, #128]	; (8003efc <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e032      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4916      	ldr	r1, [pc, #88]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	490e      	ldr	r1, [pc, #56]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eca:	f000 f821 	bl	8003f10 <HAL_RCC_GetSysClockFreq>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	490a      	ldr	r1, [pc, #40]	; (8003f04 <HAL_RCC_ClockConfig+0x1c8>)
 8003edc:	5ccb      	ldrb	r3, [r1, r3]
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe f89e 	bl	800202c <HAL_InitTick>

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40022000 	.word	0x40022000
 8003f00:	40021000 	.word	0x40021000
 8003f04:	08006724 	.word	0x08006724
 8003f08:	20000004 	.word	0x20000004
 8003f0c:	20000008 	.word	0x20000008

08003f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d002      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x30>
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d003      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x36>
 8003f3e:	e027      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f42:	613b      	str	r3, [r7, #16]
      break;
 8003f44:	e027      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	0c9b      	lsrs	r3, r3, #18
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d010      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	0c5b      	lsrs	r3, r3, #17
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f6a:	5cd3      	ldrb	r3, [r2, r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	fb03 f202 	mul.w	r2, r3, r2
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e004      	b.n	8003f8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	693b      	ldr	r3, [r7, #16]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	0800673c 	.word	0x0800673c
 8003fb0:	0800674c 	.word	0x0800674c
 8003fb4:	003d0900 	.word	0x003d0900

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	20000004 	.word	0x20000004

08003fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fd0:	f7ff fff2 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08006734 	.word	0x08006734

08003ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ff8:	f7ff ffde 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0adb      	lsrs	r3, r3, #11
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08006734 	.word	0x08006734

0800401c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <RCC_Delay+0x34>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <RCC_Delay+0x38>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0a5b      	lsrs	r3, r3, #9
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004038:	bf00      	nop
  }
  while (Delay --);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	60fa      	str	r2, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f9      	bne.n	8004038 <RCC_Delay+0x1c>
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	20000004 	.word	0x20000004
 8004054:	10624dd3 	.word	0x10624dd3

08004058 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d07d      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004074:	2300      	movs	r3, #0
 8004076:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10d      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004084:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	61d3      	str	r3, [r2, #28]
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409c:	2301      	movs	r3, #1
 800409e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d118      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ac:	4b43      	ldr	r3, [pc, #268]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a42      	ldr	r2, [pc, #264]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b8:	f7fd fffa 	bl	80020b0 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	e008      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fd fff6 	bl	80020b0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e06d      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040de:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d02e      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d027      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004112:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d014      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fd ffc5 	bl	80020b0 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004128:	e00a      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412a:	f7fd ffc1 	bl	80020b0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	4293      	cmp	r3, r2
 800413a:	d901      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e036      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ee      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800414c:	4b1a      	ldr	r3, [pc, #104]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	4917      	ldr	r1, [pc, #92]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	4313      	orrs	r3, r2
 800415c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	490b      	ldr	r1, [pc, #44]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	4904      	ldr	r1, [pc, #16]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42420440 	.word	0x42420440

080041c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	f200 808a 	bhi.w	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d045      	beq.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d075      	beq.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041fa:	e082      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80041fc:	4b46      	ldr	r3, [pc, #280]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004202:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d07b      	beq.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	0c9b      	lsrs	r3, r3, #18
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	4a41      	ldr	r2, [pc, #260]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004218:	5cd3      	ldrb	r3, [r2, r3]
 800421a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d015      	beq.n	8004252 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004226:	4b3c      	ldr	r3, [pc, #240]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	0c5b      	lsrs	r3, r3, #17
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	4a3b      	ldr	r2, [pc, #236]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004232:	5cd3      	ldrb	r3, [r2, r3]
 8004234:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004240:	4a38      	ldr	r2, [pc, #224]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	fbb2 f2f3 	udiv	r2, r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e004      	b.n	800425c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4a34      	ldr	r2, [pc, #208]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004268:	d102      	bne.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	61bb      	str	r3, [r7, #24]
      break;
 800426e:	e04a      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4a2d      	ldr	r2, [pc, #180]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
      break;
 800427e:	e042      	b.n	8004306 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004290:	d108      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800429c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e01f      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ae:	d109      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80042bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e00f      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ce:	d11c      	bne.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d016      	beq.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80042dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042e0:	61bb      	str	r3, [r7, #24]
      break;
 80042e2:	e012      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042e4:	e011      	b.n	800430a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042e6:	f7ff fe85 	bl	8003ff4 <HAL_RCC_GetPCLK2Freq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	0b9b      	lsrs	r3, r3, #14
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fe:	61bb      	str	r3, [r7, #24]
      break;
 8004300:	e004      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800430a:	bf00      	nop
    }
  }
  return (frequency);
 800430c:	69bb      	ldr	r3, [r7, #24]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	08006750 	.word	0x08006750
 8004320:	08006760 	.word	0x08006760
 8004324:	007a1200 	.word	0x007a1200
 8004328:	003d0900 	.word	0x003d0900
 800432c:	aaaaaaab 	.word	0xaaaaaaab

08004330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e04c      	b.n	80043dc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d111      	bne.n	8004372 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 ffca 	bl	80052f0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <HAL_TIM_Base_Init+0xb4>)
 8004368:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4610      	mov	r0, r2
 8004386:	f000 fd0f 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08001c2d 	.word	0x08001c2d

080043e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e04c      	b.n	8004494 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d111      	bne.n	800442a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ff6e 	bl	80052f0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1f      	ldr	r2, [pc, #124]	; (800449c <HAL_TIM_PWM_Init+0xb4>)
 8004420:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f000 fcb3 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	080044a1 	.word	0x080044a1

080044a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
	...

080044b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_TIM_PWM_Start+0x24>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e022      	b.n	800451e <HAL_TIM_PWM_Start+0x6a>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d109      	bne.n	80044f2 <HAL_TIM_PWM_Start+0x3e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	bf14      	ite	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	2300      	moveq	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	e015      	b.n	800451e <HAL_TIM_PWM_Start+0x6a>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d109      	bne.n	800450c <HAL_TIM_PWM_Start+0x58>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e008      	b.n	800451e <HAL_TIM_PWM_Start+0x6a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	bf14      	ite	ne
 8004518:	2301      	movne	r3, #1
 800451a:	2300      	moveq	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e05e      	b.n	80045e4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0x82>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004534:	e013      	b.n	800455e <HAL_TIM_PWM_Start+0xaa>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b04      	cmp	r3, #4
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0x92>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004544:	e00b      	b.n	800455e <HAL_TIM_PWM_Start+0xaa>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004554:	e003      	b.n	800455e <HAL_TIM_PWM_Start+0xaa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fe9e 	bl	80052a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_TIM_PWM_Start+0x138>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d107      	bne.n	8004586 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_TIM_PWM_Start+0x138>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIM_PWM_Start+0xfa>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d009      	beq.n	80045ae <HAL_TIM_PWM_Start+0xfa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <HAL_TIM_PWM_Start+0x13c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIM_PWM_Start+0xfa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <HAL_TIM_PWM_Start+0x140>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d111      	bne.n	80045d2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d010      	beq.n	80045e2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	e007      	b.n	80045e2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800

080045f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fe4c 	bl	80052a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a29      	ldr	r2, [pc, #164]	; (80046bc <HAL_TIM_PWM_Stop+0xc4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d117      	bne.n	800464a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	f241 1311 	movw	r3, #4369	; 0x1111
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <HAL_TIM_PWM_Stop+0x52>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	f240 4344 	movw	r3, #1092	; 0x444
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_TIM_PWM_Stop+0x52>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	f241 1311 	movw	r3, #4369	; 0x1111
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_TIM_PWM_Stop+0x82>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6a1a      	ldr	r2, [r3, #32]
 8004660:	f240 4344 	movw	r3, #1092	; 0x444
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d107      	bne.n	800467a <HAL_TIM_PWM_Stop+0x82>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Stop+0x92>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004688:	e013      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xba>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b04      	cmp	r3, #4
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Stop+0xa2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004698:	e00b      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xba>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Stop+0xb2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	e003      	b.n	80046b2 <HAL_TIM_PWM_Stop+0xba>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40012c00 	.word	0x40012c00

080046c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e04c      	b.n	800476e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d111      	bne.n	8004704 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fe01 	bl	80052f0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_TIM_OnePulse_Init+0xb8>)
 80046fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fb46 	bl	8004da8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0208 	bic.w	r2, r2, #8
 800472a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	0800477d 	.word	0x0800477d

0800477c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d128      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d121      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0202 	mvn.w	r2, #2
 80047ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
 80047da:	e009      	b.n	80047f0 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d128      	bne.n	8004856 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d121      	bne.n	8004856 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f06f 0204 	mvn.w	r2, #4
 800481a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e009      	b.n	8004850 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b08      	cmp	r3, #8
 8004862:	d128      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b08      	cmp	r3, #8
 8004870:	d121      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f06f 0208 	mvn.w	r2, #8
 800487a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2204      	movs	r2, #4
 8004880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 0303 	and.w	r3, r3, #3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e009      	b.n	80048b0 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d128      	bne.n	8004916 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d121      	bne.n	8004916 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0210 	mvn.w	r2, #16
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2208      	movs	r2, #8
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
 80048fa:	e009      	b.n	8004910 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d110      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d109      	bne.n	8004946 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0201 	mvn.w	r2, #1
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d110      	bne.n	8004976 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d109      	bne.n	8004976 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800496a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d110      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d109      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800499a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d110      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b20      	cmp	r3, #32
 80049c0:	d109      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f06f 0220 	mvn.w	r2, #32
 80049ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0ae      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	f200 809f 	bhi.w	8004b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a0e:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004b4d 	.word	0x08004b4d
 8004a1c:	08004b4d 	.word	0x08004b4d
 8004a20:	08004b4d 	.word	0x08004b4d
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004b4d 	.word	0x08004b4d
 8004a2c:	08004b4d 	.word	0x08004b4d
 8004a30:	08004b4d 	.word	0x08004b4d
 8004a34:	08004acb 	.word	0x08004acb
 8004a38:	08004b4d 	.word	0x08004b4d
 8004a3c:	08004b4d 	.word	0x08004b4d
 8004a40:	08004b4d 	.word	0x08004b4d
 8004a44:	08004b0b 	.word	0x08004b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa0c 	bl	8004e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6999      	ldr	r1, [r3, #24]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	619a      	str	r2, [r3, #24]
      break;
 8004a86:	e064      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fa52 	bl	8004f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6999      	ldr	r1, [r3, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	619a      	str	r2, [r3, #24]
      break;
 8004ac8:	e043      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fa9b 	bl	800500c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0208 	orr.w	r2, r2, #8
 8004ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0204 	bic.w	r2, r2, #4
 8004af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	61da      	str	r2, [r3, #28]
      break;
 8004b08:	e023      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fae5 	bl	80050e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69d9      	ldr	r1, [r3, #28]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	021a      	lsls	r2, r3, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	61da      	str	r2, [r3, #28]
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0b4      	b.n	8004cea <HAL_TIM_ConfigClockSource+0x186>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb8:	d03e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0xd4>
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	f200 8087 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x172>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bce:	d87f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b70      	cmp	r3, #112	; 0x70
 8004bd2:	d01a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xa6>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d87b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d050      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x11a>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d877      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b50      	cmp	r3, #80	; 0x50
 8004be2:	d03c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xfa>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d873      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x13a>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d86f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d064      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d86b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d060      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d867      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d05a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f000 fb26 	bl	800526a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e04f      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f000 fb0f 	bl	800526a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e03c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fa86 	bl	800517c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2150      	movs	r1, #80	; 0x50
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fadd 	bl	8005236 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e02c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 faa4 	bl	80051d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2160      	movs	r1, #96	; 0x60
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 facd 	bl	8005236 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e01c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 fa66 	bl	800517c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2140      	movs	r1, #64	; 0x40
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fabd 	bl	8005236 <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e00c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 fab4 	bl	8005236 <TIM_ITRx_SetConfig>
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
	...

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <TIM_Base_SetConfig+0xb8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00b      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d007      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <TIM_Base_SetConfig+0xbc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <TIM_Base_SetConfig+0x30>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <TIM_Base_SetConfig+0xc0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d108      	bne.n	8004dea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <TIM_Base_SetConfig+0xb8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d007      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <TIM_Base_SetConfig+0xbc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_Base_SetConfig+0x62>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <TIM_Base_SetConfig+0xc0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <TIM_Base_SetConfig+0xb8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d103      	bne.n	8004e50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	615a      	str	r2, [r3, #20]
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800

08004e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f023 0201 	bic.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0302 	bic.w	r3, r3, #2
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <TIM_OC1_SetConfig+0xc8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10c      	bne.n	8004ee2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0308 	bic.w	r3, r3, #8
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 0304 	bic.w	r3, r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a13      	ldr	r2, [pc, #76]	; (8004f34 <TIM_OC1_SetConfig+0xc8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d111      	bne.n	8004f0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	621a      	str	r2, [r3, #32]
}
 8004f28:	bf00      	nop
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40012c00 	.word	0x40012c00

08004f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f023 0210 	bic.w	r2, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <TIM_OC2_SetConfig+0xd0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10d      	bne.n	8004fb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <TIM_OC2_SetConfig+0xd0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d113      	bne.n	8004fe4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00

0800500c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <TIM_OC3_SetConfig+0xd0>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10d      	bne.n	8005086 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <TIM_OC3_SetConfig+0xd0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d113      	bne.n	80050b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00

080050e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <TIM_OC4_SetConfig+0x98>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d109      	bne.n	8005154 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00

0800517c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f023 0201 	bic.w	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f023 030a 	bic.w	r3, r3, #10
 80051b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0210 	bic.w	r2, r3, #16
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	031b      	lsls	r3, r3, #12
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	621a      	str	r2, [r3, #32]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	f043 0307 	orr.w	r3, r3, #7
 8005258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005284:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	021a      	lsls	r2, r3, #8
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	431a      	orrs	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4313      	orrs	r3, r2
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2201      	movs	r2, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	401a      	ands	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	431a      	orrs	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <TIM_ResetCallback+0x7c>)
 80052fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <TIM_ResetCallback+0x80>)
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1a      	ldr	r2, [pc, #104]	; (8005374 <TIM_ResetCallback+0x84>)
 800530c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a19      	ldr	r2, [pc, #100]	; (8005378 <TIM_ResetCallback+0x88>)
 8005314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a18      	ldr	r2, [pc, #96]	; (800537c <TIM_ResetCallback+0x8c>)
 800531c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a17      	ldr	r2, [pc, #92]	; (8005380 <TIM_ResetCallback+0x90>)
 8005324:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a16      	ldr	r2, [pc, #88]	; (8005384 <TIM_ResetCallback+0x94>)
 800532c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a15      	ldr	r2, [pc, #84]	; (8005388 <TIM_ResetCallback+0x98>)
 8005334:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a14      	ldr	r2, [pc, #80]	; (800538c <TIM_ResetCallback+0x9c>)
 800533c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <TIM_ResetCallback+0xa0>)
 8005344:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a12      	ldr	r2, [pc, #72]	; (8005394 <TIM_ResetCallback+0xa4>)
 800534c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <TIM_ResetCallback+0xa8>)
 8005354:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a10      	ldr	r2, [pc, #64]	; (800539c <TIM_ResetCallback+0xac>)
 800535c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	08004cf3 	.word	0x08004cf3
 8005370:	08004d05 	.word	0x08004d05
 8005374:	08004d71 	.word	0x08004d71
 8005378:	08004d83 	.word	0x08004d83
 800537c:	08004d29 	.word	0x08004d29
 8005380:	08004d3b 	.word	0x08004d3b
 8005384:	08004d17 	.word	0x08004d17
 8005388:	08004d4d 	.word	0x08004d4d
 800538c:	08004d5f 	.word	0x08004d5f
 8005390:	08004d95 	.word	0x08004d95
 8005394:	080054ff 	.word	0x080054ff
 8005398:	08005511 	.word	0x08005511
 800539c:	08005523 	.word	0x08005523

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e046      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a16      	ldr	r2, [pc, #88]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a10      	ldr	r2, [pc, #64]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800

0800545c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005474:	2302      	movs	r3, #2
 8005476:	e03d      	b.n	80054f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr

08005510 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000010 	.word	0x20000010

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	2600      	movs	r6, #0
 8005544:	4d0c      	ldr	r5, [pc, #48]	; (8005578 <__libc_init_array+0x38>)
 8005546:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005548:	1b64      	subs	r4, r4, r5
 800554a:	10a4      	asrs	r4, r4, #2
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	f001 f8d0 	bl	80066f4 <_init>
 8005554:	2600      	movs	r6, #0
 8005556:	4d0a      	ldr	r5, [pc, #40]	; (8005580 <__libc_init_array+0x40>)
 8005558:	4c0a      	ldr	r4, [pc, #40]	; (8005584 <__libc_init_array+0x44>)
 800555a:	1b64      	subs	r4, r4, r5
 800555c:	10a4      	asrs	r4, r4, #2
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	080068ac 	.word	0x080068ac
 800557c:	080068ac 	.word	0x080068ac
 8005580:	080068ac 	.word	0x080068ac
 8005584:	080068b0 	.word	0x080068b0

08005588 <memcpy>:
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005590:	d100      	bne.n	8005594 <memcpy+0xc>
 8005592:	4770      	bx	lr
 8005594:	b510      	push	{r4, lr}
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	4291      	cmp	r1, r2
 800559c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a0:	d1f9      	bne.n	8005596 <memcpy+0xe>
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <memset>:
 80055a4:	4603      	mov	r3, r0
 80055a6:	4402      	add	r2, r0
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d100      	bne.n	80055ae <memset+0xa>
 80055ac:	4770      	bx	lr
 80055ae:	f803 1b01 	strb.w	r1, [r3], #1
 80055b2:	e7f9      	b.n	80055a8 <memset+0x4>

080055b4 <srand>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <srand+0x44>)
 80055b8:	4604      	mov	r4, r0
 80055ba:	681d      	ldr	r5, [r3, #0]
 80055bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80055be:	b9b3      	cbnz	r3, 80055ee <srand+0x3a>
 80055c0:	2018      	movs	r0, #24
 80055c2:	f000 f8bf 	bl	8005744 <malloc>
 80055c6:	4602      	mov	r2, r0
 80055c8:	63a8      	str	r0, [r5, #56]	; 0x38
 80055ca:	b920      	cbnz	r0, 80055d6 <srand+0x22>
 80055cc:	2142      	movs	r1, #66	; 0x42
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <srand+0x48>)
 80055d0:	480b      	ldr	r0, [pc, #44]	; (8005600 <srand+0x4c>)
 80055d2:	f000 f875 	bl	80056c0 <__assert_func>
 80055d6:	490b      	ldr	r1, [pc, #44]	; (8005604 <srand+0x50>)
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <srand+0x54>)
 80055da:	e9c0 1300 	strd	r1, r3, [r0]
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <srand+0x58>)
 80055e0:	2100      	movs	r1, #0
 80055e2:	6083      	str	r3, [r0, #8]
 80055e4:	230b      	movs	r3, #11
 80055e6:	8183      	strh	r3, [r0, #12]
 80055e8:	2001      	movs	r0, #1
 80055ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055ee:	2200      	movs	r2, #0
 80055f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80055f2:	611c      	str	r4, [r3, #16]
 80055f4:	615a      	str	r2, [r3, #20]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20000010 	.word	0x20000010
 80055fc:	08006768 	.word	0x08006768
 8005600:	0800677f 	.word	0x0800677f
 8005604:	abcd330e 	.word	0xabcd330e
 8005608:	e66d1234 	.word	0xe66d1234
 800560c:	0005deec 	.word	0x0005deec

08005610 <rand>:
 8005610:	4b16      	ldr	r3, [pc, #88]	; (800566c <rand+0x5c>)
 8005612:	b510      	push	{r4, lr}
 8005614:	681c      	ldr	r4, [r3, #0]
 8005616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005618:	b9b3      	cbnz	r3, 8005648 <rand+0x38>
 800561a:	2018      	movs	r0, #24
 800561c:	f000 f892 	bl	8005744 <malloc>
 8005620:	4602      	mov	r2, r0
 8005622:	63a0      	str	r0, [r4, #56]	; 0x38
 8005624:	b920      	cbnz	r0, 8005630 <rand+0x20>
 8005626:	214e      	movs	r1, #78	; 0x4e
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <rand+0x60>)
 800562a:	4812      	ldr	r0, [pc, #72]	; (8005674 <rand+0x64>)
 800562c:	f000 f848 	bl	80056c0 <__assert_func>
 8005630:	4911      	ldr	r1, [pc, #68]	; (8005678 <rand+0x68>)
 8005632:	4b12      	ldr	r3, [pc, #72]	; (800567c <rand+0x6c>)
 8005634:	e9c0 1300 	strd	r1, r3, [r0]
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <rand+0x70>)
 800563a:	2100      	movs	r1, #0
 800563c:	6083      	str	r3, [r0, #8]
 800563e:	230b      	movs	r3, #11
 8005640:	8183      	strh	r3, [r0, #12]
 8005642:	2001      	movs	r0, #1
 8005644:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005648:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800564a:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <rand+0x74>)
 800564c:	6920      	ldr	r0, [r4, #16]
 800564e:	6963      	ldr	r3, [r4, #20]
 8005650:	4342      	muls	r2, r0
 8005652:	490d      	ldr	r1, [pc, #52]	; (8005688 <rand+0x78>)
 8005654:	fb01 2203 	mla	r2, r1, r3, r2
 8005658:	fba0 0101 	umull	r0, r1, r0, r1
 800565c:	1c43      	adds	r3, r0, #1
 800565e:	eb42 0001 	adc.w	r0, r2, r1
 8005662:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005666:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800566a:	bd10      	pop	{r4, pc}
 800566c:	20000010 	.word	0x20000010
 8005670:	08006768 	.word	0x08006768
 8005674:	0800677f 	.word	0x0800677f
 8005678:	abcd330e 	.word	0xabcd330e
 800567c:	e66d1234 	.word	0xe66d1234
 8005680:	0005deec 	.word	0x0005deec
 8005684:	5851f42d 	.word	0x5851f42d
 8005688:	4c957f2d 	.word	0x4c957f2d

0800568c <time>:
 800568c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800568e:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <time+0x30>)
 8005690:	4604      	mov	r4, r0
 8005692:	2200      	movs	r2, #0
 8005694:	4669      	mov	r1, sp
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	f000 f842 	bl	8005720 <_gettimeofday_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	da05      	bge.n	80056ac <time+0x20>
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295
 80056a4:	f04f 33ff 	mov.w	r3, #4294967295
 80056a8:	e9cd 2300 	strd	r2, r3, [sp]
 80056ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b0:	b10c      	cbz	r4, 80056b6 <time+0x2a>
 80056b2:	e9c4 0100 	strd	r0, r1, [r4]
 80056b6:	b004      	add	sp, #16
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bf00      	nop
 80056bc:	20000010 	.word	0x20000010

080056c0 <__assert_func>:
 80056c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056c2:	4614      	mov	r4, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b09      	ldr	r3, [pc, #36]	; (80056ec <__assert_func+0x2c>)
 80056c8:	4605      	mov	r5, r0
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68d8      	ldr	r0, [r3, #12]
 80056ce:	b14c      	cbz	r4, 80056e4 <__assert_func+0x24>
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <__assert_func+0x30>)
 80056d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056d6:	9100      	str	r1, [sp, #0]
 80056d8:	462b      	mov	r3, r5
 80056da:	4906      	ldr	r1, [pc, #24]	; (80056f4 <__assert_func+0x34>)
 80056dc:	f000 f80e 	bl	80056fc <fiprintf>
 80056e0:	f000 fcd2 	bl	8006088 <abort>
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <__assert_func+0x38>)
 80056e6:	461c      	mov	r4, r3
 80056e8:	e7f3      	b.n	80056d2 <__assert_func+0x12>
 80056ea:	bf00      	nop
 80056ec:	20000010 	.word	0x20000010
 80056f0:	080067da 	.word	0x080067da
 80056f4:	080067e7 	.word	0x080067e7
 80056f8:	08006815 	.word	0x08006815

080056fc <fiprintf>:
 80056fc:	b40e      	push	{r1, r2, r3}
 80056fe:	b503      	push	{r0, r1, lr}
 8005700:	4601      	mov	r1, r0
 8005702:	ab03      	add	r3, sp, #12
 8005704:	4805      	ldr	r0, [pc, #20]	; (800571c <fiprintf+0x20>)
 8005706:	f853 2b04 	ldr.w	r2, [r3], #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	f000 f925 	bl	800595c <_vfiprintf_r>
 8005712:	b002      	add	sp, #8
 8005714:	f85d eb04 	ldr.w	lr, [sp], #4
 8005718:	b003      	add	sp, #12
 800571a:	4770      	bx	lr
 800571c:	20000010 	.word	0x20000010

08005720 <_gettimeofday_r>:
 8005720:	b538      	push	{r3, r4, r5, lr}
 8005722:	2300      	movs	r3, #0
 8005724:	4d06      	ldr	r5, [pc, #24]	; (8005740 <_gettimeofday_r+0x20>)
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f000 ffd9 	bl	80066e4 <_gettimeofday>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	d102      	bne.n	800573c <_gettimeofday_r+0x1c>
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	b103      	cbz	r3, 800573c <_gettimeofday_r+0x1c>
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	bd38      	pop	{r3, r4, r5, pc}
 800573e:	bf00      	nop
 8005740:	2000037c 	.word	0x2000037c

08005744 <malloc>:
 8005744:	4b02      	ldr	r3, [pc, #8]	; (8005750 <malloc+0xc>)
 8005746:	4601      	mov	r1, r0
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	f000 b86b 	b.w	8005824 <_malloc_r>
 800574e:	bf00      	nop
 8005750:	20000010 	.word	0x20000010

08005754 <_free_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	2900      	cmp	r1, #0
 800575a:	d040      	beq.n	80057de <_free_r+0x8a>
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f0c      	subs	r4, r1, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	18e4      	addlt	r4, r4, r3
 8005768:	f000 fec0 	bl	80064ec <__malloc_lock>
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <_free_r+0x8c>)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	b933      	cbnz	r3, 8005780 <_free_r+0x2c>
 8005772:	6063      	str	r3, [r4, #4]
 8005774:	6014      	str	r4, [r2, #0]
 8005776:	4628      	mov	r0, r5
 8005778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577c:	f000 bebc 	b.w	80064f8 <__malloc_unlock>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d908      	bls.n	8005796 <_free_r+0x42>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428b      	cmp	r3, r1
 800578a:	bf01      	itttt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	1809      	addeq	r1, r1, r0
 8005792:	6021      	streq	r1, [r4, #0]
 8005794:	e7ed      	b.n	8005772 <_free_r+0x1e>
 8005796:	461a      	mov	r2, r3
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b10b      	cbz	r3, 80057a0 <_free_r+0x4c>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d9fa      	bls.n	8005796 <_free_r+0x42>
 80057a0:	6811      	ldr	r1, [r2, #0]
 80057a2:	1850      	adds	r0, r2, r1
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d10b      	bne.n	80057c0 <_free_r+0x6c>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	4401      	add	r1, r0
 80057ac:	1850      	adds	r0, r2, r1
 80057ae:	4283      	cmp	r3, r0
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	d1e0      	bne.n	8005776 <_free_r+0x22>
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4401      	add	r1, r0
 80057ba:	6011      	str	r1, [r2, #0]
 80057bc:	6053      	str	r3, [r2, #4]
 80057be:	e7da      	b.n	8005776 <_free_r+0x22>
 80057c0:	d902      	bls.n	80057c8 <_free_r+0x74>
 80057c2:	230c      	movs	r3, #12
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	e7d6      	b.n	8005776 <_free_r+0x22>
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	1821      	adds	r1, r4, r0
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf01      	itttt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	1809      	addeq	r1, r1, r0
 80057d6:	6021      	streq	r1, [r4, #0]
 80057d8:	6063      	str	r3, [r4, #4]
 80057da:	6054      	str	r4, [r2, #4]
 80057dc:	e7cb      	b.n	8005776 <_free_r+0x22>
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000374 	.word	0x20000374

080057e4 <sbrk_aligned>:
 80057e4:	b570      	push	{r4, r5, r6, lr}
 80057e6:	4e0e      	ldr	r6, [pc, #56]	; (8005820 <sbrk_aligned+0x3c>)
 80057e8:	460c      	mov	r4, r1
 80057ea:	6831      	ldr	r1, [r6, #0]
 80057ec:	4605      	mov	r5, r0
 80057ee:	b911      	cbnz	r1, 80057f6 <sbrk_aligned+0x12>
 80057f0:	f000 fb7a 	bl	8005ee8 <_sbrk_r>
 80057f4:	6030      	str	r0, [r6, #0]
 80057f6:	4621      	mov	r1, r4
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 fb75 	bl	8005ee8 <_sbrk_r>
 80057fe:	1c43      	adds	r3, r0, #1
 8005800:	d00a      	beq.n	8005818 <sbrk_aligned+0x34>
 8005802:	1cc4      	adds	r4, r0, #3
 8005804:	f024 0403 	bic.w	r4, r4, #3
 8005808:	42a0      	cmp	r0, r4
 800580a:	d007      	beq.n	800581c <sbrk_aligned+0x38>
 800580c:	1a21      	subs	r1, r4, r0
 800580e:	4628      	mov	r0, r5
 8005810:	f000 fb6a 	bl	8005ee8 <_sbrk_r>
 8005814:	3001      	adds	r0, #1
 8005816:	d101      	bne.n	800581c <sbrk_aligned+0x38>
 8005818:	f04f 34ff 	mov.w	r4, #4294967295
 800581c:	4620      	mov	r0, r4
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	20000378 	.word	0x20000378

08005824 <_malloc_r>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	1ccd      	adds	r5, r1, #3
 800582a:	f025 0503 	bic.w	r5, r5, #3
 800582e:	3508      	adds	r5, #8
 8005830:	2d0c      	cmp	r5, #12
 8005832:	bf38      	it	cc
 8005834:	250c      	movcc	r5, #12
 8005836:	2d00      	cmp	r5, #0
 8005838:	4607      	mov	r7, r0
 800583a:	db01      	blt.n	8005840 <_malloc_r+0x1c>
 800583c:	42a9      	cmp	r1, r5
 800583e:	d905      	bls.n	800584c <_malloc_r+0x28>
 8005840:	230c      	movs	r3, #12
 8005842:	2600      	movs	r6, #0
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4630      	mov	r0, r6
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	4e2e      	ldr	r6, [pc, #184]	; (8005908 <_malloc_r+0xe4>)
 800584e:	f000 fe4d 	bl	80064ec <__malloc_lock>
 8005852:	6833      	ldr	r3, [r6, #0]
 8005854:	461c      	mov	r4, r3
 8005856:	bb34      	cbnz	r4, 80058a6 <_malloc_r+0x82>
 8005858:	4629      	mov	r1, r5
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff ffc2 	bl	80057e4 <sbrk_aligned>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	4604      	mov	r4, r0
 8005864:	d14d      	bne.n	8005902 <_malloc_r+0xde>
 8005866:	6834      	ldr	r4, [r6, #0]
 8005868:	4626      	mov	r6, r4
 800586a:	2e00      	cmp	r6, #0
 800586c:	d140      	bne.n	80058f0 <_malloc_r+0xcc>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	4631      	mov	r1, r6
 8005872:	4638      	mov	r0, r7
 8005874:	eb04 0803 	add.w	r8, r4, r3
 8005878:	f000 fb36 	bl	8005ee8 <_sbrk_r>
 800587c:	4580      	cmp	r8, r0
 800587e:	d13a      	bne.n	80058f6 <_malloc_r+0xd2>
 8005880:	6821      	ldr	r1, [r4, #0]
 8005882:	3503      	adds	r5, #3
 8005884:	1a6d      	subs	r5, r5, r1
 8005886:	f025 0503 	bic.w	r5, r5, #3
 800588a:	3508      	adds	r5, #8
 800588c:	2d0c      	cmp	r5, #12
 800588e:	bf38      	it	cc
 8005890:	250c      	movcc	r5, #12
 8005892:	4638      	mov	r0, r7
 8005894:	4629      	mov	r1, r5
 8005896:	f7ff ffa5 	bl	80057e4 <sbrk_aligned>
 800589a:	3001      	adds	r0, #1
 800589c:	d02b      	beq.n	80058f6 <_malloc_r+0xd2>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	442b      	add	r3, r5
 80058a2:	6023      	str	r3, [r4, #0]
 80058a4:	e00e      	b.n	80058c4 <_malloc_r+0xa0>
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	1b52      	subs	r2, r2, r5
 80058aa:	d41e      	bmi.n	80058ea <_malloc_r+0xc6>
 80058ac:	2a0b      	cmp	r2, #11
 80058ae:	d916      	bls.n	80058de <_malloc_r+0xba>
 80058b0:	1961      	adds	r1, r4, r5
 80058b2:	42a3      	cmp	r3, r4
 80058b4:	6025      	str	r5, [r4, #0]
 80058b6:	bf18      	it	ne
 80058b8:	6059      	strne	r1, [r3, #4]
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	bf08      	it	eq
 80058be:	6031      	streq	r1, [r6, #0]
 80058c0:	5162      	str	r2, [r4, r5]
 80058c2:	604b      	str	r3, [r1, #4]
 80058c4:	4638      	mov	r0, r7
 80058c6:	f104 060b 	add.w	r6, r4, #11
 80058ca:	f000 fe15 	bl	80064f8 <__malloc_unlock>
 80058ce:	f026 0607 	bic.w	r6, r6, #7
 80058d2:	1d23      	adds	r3, r4, #4
 80058d4:	1af2      	subs	r2, r6, r3
 80058d6:	d0b6      	beq.n	8005846 <_malloc_r+0x22>
 80058d8:	1b9b      	subs	r3, r3, r6
 80058da:	50a3      	str	r3, [r4, r2]
 80058dc:	e7b3      	b.n	8005846 <_malloc_r+0x22>
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	bf0c      	ite	eq
 80058e4:	6032      	streq	r2, [r6, #0]
 80058e6:	605a      	strne	r2, [r3, #4]
 80058e8:	e7ec      	b.n	80058c4 <_malloc_r+0xa0>
 80058ea:	4623      	mov	r3, r4
 80058ec:	6864      	ldr	r4, [r4, #4]
 80058ee:	e7b2      	b.n	8005856 <_malloc_r+0x32>
 80058f0:	4634      	mov	r4, r6
 80058f2:	6876      	ldr	r6, [r6, #4]
 80058f4:	e7b9      	b.n	800586a <_malloc_r+0x46>
 80058f6:	230c      	movs	r3, #12
 80058f8:	4638      	mov	r0, r7
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	f000 fdfc 	bl	80064f8 <__malloc_unlock>
 8005900:	e7a1      	b.n	8005846 <_malloc_r+0x22>
 8005902:	6025      	str	r5, [r4, #0]
 8005904:	e7de      	b.n	80058c4 <_malloc_r+0xa0>
 8005906:	bf00      	nop
 8005908:	20000374 	.word	0x20000374

0800590c <__sfputc_r>:
 800590c:	6893      	ldr	r3, [r2, #8]
 800590e:	b410      	push	{r4}
 8005910:	3b01      	subs	r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	6093      	str	r3, [r2, #8]
 8005916:	da07      	bge.n	8005928 <__sfputc_r+0x1c>
 8005918:	6994      	ldr	r4, [r2, #24]
 800591a:	42a3      	cmp	r3, r4
 800591c:	db01      	blt.n	8005922 <__sfputc_r+0x16>
 800591e:	290a      	cmp	r1, #10
 8005920:	d102      	bne.n	8005928 <__sfputc_r+0x1c>
 8005922:	bc10      	pop	{r4}
 8005924:	f000 baf0 	b.w	8005f08 <__swbuf_r>
 8005928:	6813      	ldr	r3, [r2, #0]
 800592a:	1c58      	adds	r0, r3, #1
 800592c:	6010      	str	r0, [r2, #0]
 800592e:	7019      	strb	r1, [r3, #0]
 8005930:	4608      	mov	r0, r1
 8005932:	bc10      	pop	{r4}
 8005934:	4770      	bx	lr

08005936 <__sfputs_r>:
 8005936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005938:	4606      	mov	r6, r0
 800593a:	460f      	mov	r7, r1
 800593c:	4614      	mov	r4, r2
 800593e:	18d5      	adds	r5, r2, r3
 8005940:	42ac      	cmp	r4, r5
 8005942:	d101      	bne.n	8005948 <__sfputs_r+0x12>
 8005944:	2000      	movs	r0, #0
 8005946:	e007      	b.n	8005958 <__sfputs_r+0x22>
 8005948:	463a      	mov	r2, r7
 800594a:	4630      	mov	r0, r6
 800594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005950:	f7ff ffdc 	bl	800590c <__sfputc_r>
 8005954:	1c43      	adds	r3, r0, #1
 8005956:	d1f3      	bne.n	8005940 <__sfputs_r+0xa>
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800595c <_vfiprintf_r>:
 800595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005960:	460d      	mov	r5, r1
 8005962:	4614      	mov	r4, r2
 8005964:	4698      	mov	r8, r3
 8005966:	4606      	mov	r6, r0
 8005968:	b09d      	sub	sp, #116	; 0x74
 800596a:	b118      	cbz	r0, 8005974 <_vfiprintf_r+0x18>
 800596c:	6983      	ldr	r3, [r0, #24]
 800596e:	b90b      	cbnz	r3, 8005974 <_vfiprintf_r+0x18>
 8005970:	f000 fca8 	bl	80062c4 <__sinit>
 8005974:	4b89      	ldr	r3, [pc, #548]	; (8005b9c <_vfiprintf_r+0x240>)
 8005976:	429d      	cmp	r5, r3
 8005978:	d11b      	bne.n	80059b2 <_vfiprintf_r+0x56>
 800597a:	6875      	ldr	r5, [r6, #4]
 800597c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800597e:	07d9      	lsls	r1, r3, #31
 8005980:	d405      	bmi.n	800598e <_vfiprintf_r+0x32>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	059a      	lsls	r2, r3, #22
 8005986:	d402      	bmi.n	800598e <_vfiprintf_r+0x32>
 8005988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800598a:	f000 fd39 	bl	8006400 <__retarget_lock_acquire_recursive>
 800598e:	89ab      	ldrh	r3, [r5, #12]
 8005990:	071b      	lsls	r3, r3, #28
 8005992:	d501      	bpl.n	8005998 <_vfiprintf_r+0x3c>
 8005994:	692b      	ldr	r3, [r5, #16]
 8005996:	b9eb      	cbnz	r3, 80059d4 <_vfiprintf_r+0x78>
 8005998:	4629      	mov	r1, r5
 800599a:	4630      	mov	r0, r6
 800599c:	f000 fb06 	bl	8005fac <__swsetup_r>
 80059a0:	b1c0      	cbz	r0, 80059d4 <_vfiprintf_r+0x78>
 80059a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059a4:	07dc      	lsls	r4, r3, #31
 80059a6:	d50e      	bpl.n	80059c6 <_vfiprintf_r+0x6a>
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	b01d      	add	sp, #116	; 0x74
 80059ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b2:	4b7b      	ldr	r3, [pc, #492]	; (8005ba0 <_vfiprintf_r+0x244>)
 80059b4:	429d      	cmp	r5, r3
 80059b6:	d101      	bne.n	80059bc <_vfiprintf_r+0x60>
 80059b8:	68b5      	ldr	r5, [r6, #8]
 80059ba:	e7df      	b.n	800597c <_vfiprintf_r+0x20>
 80059bc:	4b79      	ldr	r3, [pc, #484]	; (8005ba4 <_vfiprintf_r+0x248>)
 80059be:	429d      	cmp	r5, r3
 80059c0:	bf08      	it	eq
 80059c2:	68f5      	ldreq	r5, [r6, #12]
 80059c4:	e7da      	b.n	800597c <_vfiprintf_r+0x20>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	0598      	lsls	r0, r3, #22
 80059ca:	d4ed      	bmi.n	80059a8 <_vfiprintf_r+0x4c>
 80059cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ce:	f000 fd18 	bl	8006402 <__retarget_lock_release_recursive>
 80059d2:	e7e9      	b.n	80059a8 <_vfiprintf_r+0x4c>
 80059d4:	2300      	movs	r3, #0
 80059d6:	9309      	str	r3, [sp, #36]	; 0x24
 80059d8:	2320      	movs	r3, #32
 80059da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059de:	2330      	movs	r3, #48	; 0x30
 80059e0:	f04f 0901 	mov.w	r9, #1
 80059e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ba8 <_vfiprintf_r+0x24c>
 80059ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059f0:	4623      	mov	r3, r4
 80059f2:	469a      	mov	sl, r3
 80059f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f8:	b10a      	cbz	r2, 80059fe <_vfiprintf_r+0xa2>
 80059fa:	2a25      	cmp	r2, #37	; 0x25
 80059fc:	d1f9      	bne.n	80059f2 <_vfiprintf_r+0x96>
 80059fe:	ebba 0b04 	subs.w	fp, sl, r4
 8005a02:	d00b      	beq.n	8005a1c <_vfiprintf_r+0xc0>
 8005a04:	465b      	mov	r3, fp
 8005a06:	4622      	mov	r2, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f7ff ff93 	bl	8005936 <__sfputs_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	f000 80aa 	beq.w	8005b6a <_vfiprintf_r+0x20e>
 8005a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a18:	445a      	add	r2, fp
 8005a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80a2 	beq.w	8005b6a <_vfiprintf_r+0x20e>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a30:	f10a 0a01 	add.w	sl, sl, #1
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9307      	str	r3, [sp, #28]
 8005a38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3e:	4654      	mov	r4, sl
 8005a40:	2205      	movs	r2, #5
 8005a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a46:	4858      	ldr	r0, [pc, #352]	; (8005ba8 <_vfiprintf_r+0x24c>)
 8005a48:	f000 fd42 	bl	80064d0 <memchr>
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	b9d8      	cbnz	r0, 8005a88 <_vfiprintf_r+0x12c>
 8005a50:	06d1      	lsls	r1, r2, #27
 8005a52:	bf44      	itt	mi
 8005a54:	2320      	movmi	r3, #32
 8005a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a5a:	0713      	lsls	r3, r2, #28
 8005a5c:	bf44      	itt	mi
 8005a5e:	232b      	movmi	r3, #43	; 0x2b
 8005a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a64:	f89a 3000 	ldrb.w	r3, [sl]
 8005a68:	2b2a      	cmp	r3, #42	; 0x2a
 8005a6a:	d015      	beq.n	8005a98 <_vfiprintf_r+0x13c>
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	9a07      	ldr	r2, [sp, #28]
 8005a76:	4621      	mov	r1, r4
 8005a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a7c:	3b30      	subs	r3, #48	; 0x30
 8005a7e:	2b09      	cmp	r3, #9
 8005a80:	d94e      	bls.n	8005b20 <_vfiprintf_r+0x1c4>
 8005a82:	b1b0      	cbz	r0, 8005ab2 <_vfiprintf_r+0x156>
 8005a84:	9207      	str	r2, [sp, #28]
 8005a86:	e014      	b.n	8005ab2 <_vfiprintf_r+0x156>
 8005a88:	eba0 0308 	sub.w	r3, r0, r8
 8005a8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a90:	4313      	orrs	r3, r2
 8005a92:	46a2      	mov	sl, r4
 8005a94:	9304      	str	r3, [sp, #16]
 8005a96:	e7d2      	b.n	8005a3e <_vfiprintf_r+0xe2>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	1d19      	adds	r1, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9103      	str	r1, [sp, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfbb      	ittet	lt
 8005aa4:	425b      	neglt	r3, r3
 8005aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aaa:	9307      	strge	r3, [sp, #28]
 8005aac:	9307      	strlt	r3, [sp, #28]
 8005aae:	bfb8      	it	lt
 8005ab0:	9204      	strlt	r2, [sp, #16]
 8005ab2:	7823      	ldrb	r3, [r4, #0]
 8005ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab6:	d10c      	bne.n	8005ad2 <_vfiprintf_r+0x176>
 8005ab8:	7863      	ldrb	r3, [r4, #1]
 8005aba:	2b2a      	cmp	r3, #42	; 0x2a
 8005abc:	d135      	bne.n	8005b2a <_vfiprintf_r+0x1ce>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	3402      	adds	r4, #2
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	9203      	str	r2, [sp, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfb8      	it	lt
 8005acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ad0:	9305      	str	r3, [sp, #20]
 8005ad2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005bac <_vfiprintf_r+0x250>
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4650      	mov	r0, sl
 8005ada:	7821      	ldrb	r1, [r4, #0]
 8005adc:	f000 fcf8 	bl	80064d0 <memchr>
 8005ae0:	b140      	cbz	r0, 8005af4 <_vfiprintf_r+0x198>
 8005ae2:	2340      	movs	r3, #64	; 0x40
 8005ae4:	eba0 000a 	sub.w	r0, r0, sl
 8005ae8:	fa03 f000 	lsl.w	r0, r3, r0
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	3401      	adds	r4, #1
 8005af0:	4303      	orrs	r3, r0
 8005af2:	9304      	str	r3, [sp, #16]
 8005af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af8:	2206      	movs	r2, #6
 8005afa:	482d      	ldr	r0, [pc, #180]	; (8005bb0 <_vfiprintf_r+0x254>)
 8005afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b00:	f000 fce6 	bl	80064d0 <memchr>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d03f      	beq.n	8005b88 <_vfiprintf_r+0x22c>
 8005b08:	4b2a      	ldr	r3, [pc, #168]	; (8005bb4 <_vfiprintf_r+0x258>)
 8005b0a:	bb1b      	cbnz	r3, 8005b54 <_vfiprintf_r+0x1f8>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	3307      	adds	r3, #7
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	3308      	adds	r3, #8
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1a:	443b      	add	r3, r7
 8005b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1e:	e767      	b.n	80059f0 <_vfiprintf_r+0x94>
 8005b20:	460c      	mov	r4, r1
 8005b22:	2001      	movs	r0, #1
 8005b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b28:	e7a5      	b.n	8005a76 <_vfiprintf_r+0x11a>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f04f 0c0a 	mov.w	ip, #10
 8005b30:	4619      	mov	r1, r3
 8005b32:	3401      	adds	r4, #1
 8005b34:	9305      	str	r3, [sp, #20]
 8005b36:	4620      	mov	r0, r4
 8005b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b3c:	3a30      	subs	r2, #48	; 0x30
 8005b3e:	2a09      	cmp	r2, #9
 8005b40:	d903      	bls.n	8005b4a <_vfiprintf_r+0x1ee>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0c5      	beq.n	8005ad2 <_vfiprintf_r+0x176>
 8005b46:	9105      	str	r1, [sp, #20]
 8005b48:	e7c3      	b.n	8005ad2 <_vfiprintf_r+0x176>
 8005b4a:	4604      	mov	r4, r0
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b52:	e7f0      	b.n	8005b36 <_vfiprintf_r+0x1da>
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <_vfiprintf_r+0x25c>)
 8005b5e:	a904      	add	r1, sp, #16
 8005b60:	f3af 8000 	nop.w
 8005b64:	4607      	mov	r7, r0
 8005b66:	1c78      	adds	r0, r7, #1
 8005b68:	d1d6      	bne.n	8005b18 <_vfiprintf_r+0x1bc>
 8005b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b6c:	07d9      	lsls	r1, r3, #31
 8005b6e:	d405      	bmi.n	8005b7c <_vfiprintf_r+0x220>
 8005b70:	89ab      	ldrh	r3, [r5, #12]
 8005b72:	059a      	lsls	r2, r3, #22
 8005b74:	d402      	bmi.n	8005b7c <_vfiprintf_r+0x220>
 8005b76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b78:	f000 fc43 	bl	8006402 <__retarget_lock_release_recursive>
 8005b7c:	89ab      	ldrh	r3, [r5, #12]
 8005b7e:	065b      	lsls	r3, r3, #25
 8005b80:	f53f af12 	bmi.w	80059a8 <_vfiprintf_r+0x4c>
 8005b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b86:	e711      	b.n	80059ac <_vfiprintf_r+0x50>
 8005b88:	ab03      	add	r3, sp, #12
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <_vfiprintf_r+0x25c>)
 8005b92:	a904      	add	r1, sp, #16
 8005b94:	f000 f882 	bl	8005c9c <_printf_i>
 8005b98:	e7e4      	b.n	8005b64 <_vfiprintf_r+0x208>
 8005b9a:	bf00      	nop
 8005b9c:	0800686c 	.word	0x0800686c
 8005ba0:	0800688c 	.word	0x0800688c
 8005ba4:	0800684c 	.word	0x0800684c
 8005ba8:	08006816 	.word	0x08006816
 8005bac:	0800681c 	.word	0x0800681c
 8005bb0:	08006820 	.word	0x08006820
 8005bb4:	00000000 	.word	0x00000000
 8005bb8:	08005937 	.word	0x08005937

08005bbc <_printf_common>:
 8005bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	4699      	mov	r9, r3
 8005bc4:	688a      	ldr	r2, [r1, #8]
 8005bc6:	690b      	ldr	r3, [r1, #16]
 8005bc8:	4607      	mov	r7, r0
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	bfb8      	it	lt
 8005bce:	4613      	movlt	r3, r2
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bdc:	b10a      	cbz	r2, 8005be2 <_printf_common+0x26>
 8005bde:	3301      	adds	r3, #1
 8005be0:	6033      	str	r3, [r6, #0]
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	0699      	lsls	r1, r3, #26
 8005be6:	bf42      	ittt	mi
 8005be8:	6833      	ldrmi	r3, [r6, #0]
 8005bea:	3302      	addmi	r3, #2
 8005bec:	6033      	strmi	r3, [r6, #0]
 8005bee:	6825      	ldr	r5, [r4, #0]
 8005bf0:	f015 0506 	ands.w	r5, r5, #6
 8005bf4:	d106      	bne.n	8005c04 <_printf_common+0x48>
 8005bf6:	f104 0a19 	add.w	sl, r4, #25
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	6832      	ldr	r2, [r6, #0]
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	42ab      	cmp	r3, r5
 8005c02:	dc28      	bgt.n	8005c56 <_printf_common+0x9a>
 8005c04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c08:	1e13      	subs	r3, r2, #0
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	bf18      	it	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	0692      	lsls	r2, r2, #26
 8005c12:	d42d      	bmi.n	8005c70 <_printf_common+0xb4>
 8005c14:	4649      	mov	r1, r9
 8005c16:	4638      	mov	r0, r7
 8005c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1c:	47c0      	blx	r8
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d020      	beq.n	8005c64 <_printf_common+0xa8>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	68e5      	ldr	r5, [r4, #12]
 8005c26:	f003 0306 	and.w	r3, r3, #6
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	bf18      	it	ne
 8005c2e:	2500      	movne	r5, #0
 8005c30:	6832      	ldr	r2, [r6, #0]
 8005c32:	f04f 0600 	mov.w	r6, #0
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	bf08      	it	eq
 8005c3a:	1aad      	subeq	r5, r5, r2
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	bf08      	it	eq
 8005c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bfc4      	itt	gt
 8005c48:	1a9b      	subgt	r3, r3, r2
 8005c4a:	18ed      	addgt	r5, r5, r3
 8005c4c:	341a      	adds	r4, #26
 8005c4e:	42b5      	cmp	r5, r6
 8005c50:	d11a      	bne.n	8005c88 <_printf_common+0xcc>
 8005c52:	2000      	movs	r0, #0
 8005c54:	e008      	b.n	8005c68 <_printf_common+0xac>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4652      	mov	r2, sl
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	47c0      	blx	r8
 8005c60:	3001      	adds	r0, #1
 8005c62:	d103      	bne.n	8005c6c <_printf_common+0xb0>
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	e7c4      	b.n	8005bfa <_printf_common+0x3e>
 8005c70:	2030      	movs	r0, #48	; 0x30
 8005c72:	18e1      	adds	r1, r4, r3
 8005c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c7e:	4422      	add	r2, r4
 8005c80:	3302      	adds	r3, #2
 8005c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c86:	e7c5      	b.n	8005c14 <_printf_common+0x58>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c0      	blx	r8
 8005c92:	3001      	adds	r0, #1
 8005c94:	d0e6      	beq.n	8005c64 <_printf_common+0xa8>
 8005c96:	3601      	adds	r6, #1
 8005c98:	e7d9      	b.n	8005c4e <_printf_common+0x92>
	...

08005c9c <_printf_i>:
 8005c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	7e0f      	ldrb	r7, [r1, #24]
 8005ca2:	4691      	mov	r9, r2
 8005ca4:	2f78      	cmp	r7, #120	; 0x78
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	469a      	mov	sl, r3
 8005cac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cb2:	d807      	bhi.n	8005cc4 <_printf_i+0x28>
 8005cb4:	2f62      	cmp	r7, #98	; 0x62
 8005cb6:	d80a      	bhi.n	8005cce <_printf_i+0x32>
 8005cb8:	2f00      	cmp	r7, #0
 8005cba:	f000 80d9 	beq.w	8005e70 <_printf_i+0x1d4>
 8005cbe:	2f58      	cmp	r7, #88	; 0x58
 8005cc0:	f000 80a4 	beq.w	8005e0c <_printf_i+0x170>
 8005cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ccc:	e03a      	b.n	8005d44 <_printf_i+0xa8>
 8005cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cd2:	2b15      	cmp	r3, #21
 8005cd4:	d8f6      	bhi.n	8005cc4 <_printf_i+0x28>
 8005cd6:	a101      	add	r1, pc, #4	; (adr r1, 8005cdc <_printf_i+0x40>)
 8005cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d49 	.word	0x08005d49
 8005ce4:	08005cc5 	.word	0x08005cc5
 8005ce8:	08005cc5 	.word	0x08005cc5
 8005cec:	08005cc5 	.word	0x08005cc5
 8005cf0:	08005cc5 	.word	0x08005cc5
 8005cf4:	08005d49 	.word	0x08005d49
 8005cf8:	08005cc5 	.word	0x08005cc5
 8005cfc:	08005cc5 	.word	0x08005cc5
 8005d00:	08005cc5 	.word	0x08005cc5
 8005d04:	08005cc5 	.word	0x08005cc5
 8005d08:	08005e57 	.word	0x08005e57
 8005d0c:	08005d79 	.word	0x08005d79
 8005d10:	08005e39 	.word	0x08005e39
 8005d14:	08005cc5 	.word	0x08005cc5
 8005d18:	08005cc5 	.word	0x08005cc5
 8005d1c:	08005e79 	.word	0x08005e79
 8005d20:	08005cc5 	.word	0x08005cc5
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005cc5 	.word	0x08005cc5
 8005d2c:	08005cc5 	.word	0x08005cc5
 8005d30:	08005e41 	.word	0x08005e41
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	1d1a      	adds	r2, r3, #4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	602a      	str	r2, [r5, #0]
 8005d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0a4      	b.n	8005e92 <_printf_i+0x1f6>
 8005d48:	6820      	ldr	r0, [r4, #0]
 8005d4a:	6829      	ldr	r1, [r5, #0]
 8005d4c:	0606      	lsls	r6, r0, #24
 8005d4e:	f101 0304 	add.w	r3, r1, #4
 8005d52:	d50a      	bpl.n	8005d6a <_printf_i+0xce>
 8005d54:	680e      	ldr	r6, [r1, #0]
 8005d56:	602b      	str	r3, [r5, #0]
 8005d58:	2e00      	cmp	r6, #0
 8005d5a:	da03      	bge.n	8005d64 <_printf_i+0xc8>
 8005d5c:	232d      	movs	r3, #45	; 0x2d
 8005d5e:	4276      	negs	r6, r6
 8005d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d64:	230a      	movs	r3, #10
 8005d66:	485e      	ldr	r0, [pc, #376]	; (8005ee0 <_printf_i+0x244>)
 8005d68:	e019      	b.n	8005d9e <_printf_i+0x102>
 8005d6a:	680e      	ldr	r6, [r1, #0]
 8005d6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	bf18      	it	ne
 8005d74:	b236      	sxthne	r6, r6
 8005d76:	e7ef      	b.n	8005d58 <_printf_i+0xbc>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	1d19      	adds	r1, r3, #4
 8005d7e:	6029      	str	r1, [r5, #0]
 8005d80:	0601      	lsls	r1, r0, #24
 8005d82:	d501      	bpl.n	8005d88 <_printf_i+0xec>
 8005d84:	681e      	ldr	r6, [r3, #0]
 8005d86:	e002      	b.n	8005d8e <_printf_i+0xf2>
 8005d88:	0646      	lsls	r6, r0, #25
 8005d8a:	d5fb      	bpl.n	8005d84 <_printf_i+0xe8>
 8005d8c:	881e      	ldrh	r6, [r3, #0]
 8005d8e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d90:	bf0c      	ite	eq
 8005d92:	2308      	moveq	r3, #8
 8005d94:	230a      	movne	r3, #10
 8005d96:	4852      	ldr	r0, [pc, #328]	; (8005ee0 <_printf_i+0x244>)
 8005d98:	2100      	movs	r1, #0
 8005d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d9e:	6865      	ldr	r5, [r4, #4]
 8005da0:	2d00      	cmp	r5, #0
 8005da2:	bfa8      	it	ge
 8005da4:	6821      	ldrge	r1, [r4, #0]
 8005da6:	60a5      	str	r5, [r4, #8]
 8005da8:	bfa4      	itt	ge
 8005daa:	f021 0104 	bicge.w	r1, r1, #4
 8005dae:	6021      	strge	r1, [r4, #0]
 8005db0:	b90e      	cbnz	r6, 8005db6 <_printf_i+0x11a>
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	d04d      	beq.n	8005e52 <_printf_i+0x1b6>
 8005db6:	4615      	mov	r5, r2
 8005db8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dbc:	fb03 6711 	mls	r7, r3, r1, r6
 8005dc0:	5dc7      	ldrb	r7, [r0, r7]
 8005dc2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dc6:	4637      	mov	r7, r6
 8005dc8:	42bb      	cmp	r3, r7
 8005dca:	460e      	mov	r6, r1
 8005dcc:	d9f4      	bls.n	8005db8 <_printf_i+0x11c>
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d10b      	bne.n	8005dea <_printf_i+0x14e>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	07de      	lsls	r6, r3, #31
 8005dd6:	d508      	bpl.n	8005dea <_printf_i+0x14e>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	6861      	ldr	r1, [r4, #4]
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	bfde      	ittt	le
 8005de0:	2330      	movle	r3, #48	; 0x30
 8005de2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005de6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dea:	1b52      	subs	r2, r2, r5
 8005dec:	6122      	str	r2, [r4, #16]
 8005dee:	464b      	mov	r3, r9
 8005df0:	4621      	mov	r1, r4
 8005df2:	4640      	mov	r0, r8
 8005df4:	f8cd a000 	str.w	sl, [sp]
 8005df8:	aa03      	add	r2, sp, #12
 8005dfa:	f7ff fedf 	bl	8005bbc <_printf_common>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d14c      	bne.n	8005e9c <_printf_i+0x200>
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	b004      	add	sp, #16
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	4834      	ldr	r0, [pc, #208]	; (8005ee0 <_printf_i+0x244>)
 8005e0e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e12:	6829      	ldr	r1, [r5, #0]
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e1a:	6029      	str	r1, [r5, #0]
 8005e1c:	061d      	lsls	r5, r3, #24
 8005e1e:	d514      	bpl.n	8005e4a <_printf_i+0x1ae>
 8005e20:	07df      	lsls	r7, r3, #31
 8005e22:	bf44      	itt	mi
 8005e24:	f043 0320 	orrmi.w	r3, r3, #32
 8005e28:	6023      	strmi	r3, [r4, #0]
 8005e2a:	b91e      	cbnz	r6, 8005e34 <_printf_i+0x198>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	f023 0320 	bic.w	r3, r3, #32
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	2310      	movs	r3, #16
 8005e36:	e7af      	b.n	8005d98 <_printf_i+0xfc>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	f043 0320 	orr.w	r3, r3, #32
 8005e3e:	6023      	str	r3, [r4, #0]
 8005e40:	2378      	movs	r3, #120	; 0x78
 8005e42:	4828      	ldr	r0, [pc, #160]	; (8005ee4 <_printf_i+0x248>)
 8005e44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e48:	e7e3      	b.n	8005e12 <_printf_i+0x176>
 8005e4a:	0659      	lsls	r1, r3, #25
 8005e4c:	bf48      	it	mi
 8005e4e:	b2b6      	uxthmi	r6, r6
 8005e50:	e7e6      	b.n	8005e20 <_printf_i+0x184>
 8005e52:	4615      	mov	r5, r2
 8005e54:	e7bb      	b.n	8005dce <_printf_i+0x132>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	6826      	ldr	r6, [r4, #0]
 8005e5a:	1d18      	adds	r0, r3, #4
 8005e5c:	6961      	ldr	r1, [r4, #20]
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	0635      	lsls	r5, r6, #24
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	d501      	bpl.n	8005e6a <_printf_i+0x1ce>
 8005e66:	6019      	str	r1, [r3, #0]
 8005e68:	e002      	b.n	8005e70 <_printf_i+0x1d4>
 8005e6a:	0670      	lsls	r0, r6, #25
 8005e6c:	d5fb      	bpl.n	8005e66 <_printf_i+0x1ca>
 8005e6e:	8019      	strh	r1, [r3, #0]
 8005e70:	2300      	movs	r3, #0
 8005e72:	4615      	mov	r5, r2
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	e7ba      	b.n	8005dee <_printf_i+0x152>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	1d1a      	adds	r2, r3, #4
 8005e7e:	602a      	str	r2, [r5, #0]
 8005e80:	681d      	ldr	r5, [r3, #0]
 8005e82:	6862      	ldr	r2, [r4, #4]
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 fb23 	bl	80064d0 <memchr>
 8005e8a:	b108      	cbz	r0, 8005e90 <_printf_i+0x1f4>
 8005e8c:	1b40      	subs	r0, r0, r5
 8005e8e:	6060      	str	r0, [r4, #4]
 8005e90:	6863      	ldr	r3, [r4, #4]
 8005e92:	6123      	str	r3, [r4, #16]
 8005e94:	2300      	movs	r3, #0
 8005e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e9a:	e7a8      	b.n	8005dee <_printf_i+0x152>
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	47d0      	blx	sl
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d0ab      	beq.n	8005e02 <_printf_i+0x166>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	079b      	lsls	r3, r3, #30
 8005eae:	d413      	bmi.n	8005ed8 <_printf_i+0x23c>
 8005eb0:	68e0      	ldr	r0, [r4, #12]
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	4298      	cmp	r0, r3
 8005eb6:	bfb8      	it	lt
 8005eb8:	4618      	movlt	r0, r3
 8005eba:	e7a4      	b.n	8005e06 <_printf_i+0x16a>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4632      	mov	r2, r6
 8005ec0:	4649      	mov	r1, r9
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	47d0      	blx	sl
 8005ec6:	3001      	adds	r0, #1
 8005ec8:	d09b      	beq.n	8005e02 <_printf_i+0x166>
 8005eca:	3501      	adds	r5, #1
 8005ecc:	68e3      	ldr	r3, [r4, #12]
 8005ece:	9903      	ldr	r1, [sp, #12]
 8005ed0:	1a5b      	subs	r3, r3, r1
 8005ed2:	42ab      	cmp	r3, r5
 8005ed4:	dcf2      	bgt.n	8005ebc <_printf_i+0x220>
 8005ed6:	e7eb      	b.n	8005eb0 <_printf_i+0x214>
 8005ed8:	2500      	movs	r5, #0
 8005eda:	f104 0619 	add.w	r6, r4, #25
 8005ede:	e7f5      	b.n	8005ecc <_printf_i+0x230>
 8005ee0:	08006827 	.word	0x08006827
 8005ee4:	08006838 	.word	0x08006838

08005ee8 <_sbrk_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	2300      	movs	r3, #0
 8005eec:	4d05      	ldr	r5, [pc, #20]	; (8005f04 <_sbrk_r+0x1c>)
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	602b      	str	r3, [r5, #0]
 8005ef4:	f7fc f822 	bl	8001f3c <_sbrk>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_sbrk_r+0x1a>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_sbrk_r+0x1a>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	2000037c 	.word	0x2000037c

08005f08 <__swbuf_r>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	460e      	mov	r6, r1
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	4605      	mov	r5, r0
 8005f10:	b118      	cbz	r0, 8005f1a <__swbuf_r+0x12>
 8005f12:	6983      	ldr	r3, [r0, #24]
 8005f14:	b90b      	cbnz	r3, 8005f1a <__swbuf_r+0x12>
 8005f16:	f000 f9d5 	bl	80062c4 <__sinit>
 8005f1a:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <__swbuf_r+0x98>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d12b      	bne.n	8005f78 <__swbuf_r+0x70>
 8005f20:	686c      	ldr	r4, [r5, #4]
 8005f22:	69a3      	ldr	r3, [r4, #24]
 8005f24:	60a3      	str	r3, [r4, #8]
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	071a      	lsls	r2, r3, #28
 8005f2a:	d52f      	bpl.n	8005f8c <__swbuf_r+0x84>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	b36b      	cbz	r3, 8005f8c <__swbuf_r+0x84>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	6820      	ldr	r0, [r4, #0]
 8005f34:	b2f6      	uxtb	r6, r6
 8005f36:	1ac0      	subs	r0, r0, r3
 8005f38:	6963      	ldr	r3, [r4, #20]
 8005f3a:	4637      	mov	r7, r6
 8005f3c:	4283      	cmp	r3, r0
 8005f3e:	dc04      	bgt.n	8005f4a <__swbuf_r+0x42>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 f92a 	bl	800619c <_fflush_r>
 8005f48:	bb30      	cbnz	r0, 8005f98 <__swbuf_r+0x90>
 8005f4a:	68a3      	ldr	r3, [r4, #8]
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60a3      	str	r3, [r4, #8]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	701e      	strb	r6, [r3, #0]
 8005f5a:	6963      	ldr	r3, [r4, #20]
 8005f5c:	4283      	cmp	r3, r0
 8005f5e:	d004      	beq.n	8005f6a <__swbuf_r+0x62>
 8005f60:	89a3      	ldrh	r3, [r4, #12]
 8005f62:	07db      	lsls	r3, r3, #31
 8005f64:	d506      	bpl.n	8005f74 <__swbuf_r+0x6c>
 8005f66:	2e0a      	cmp	r6, #10
 8005f68:	d104      	bne.n	8005f74 <__swbuf_r+0x6c>
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 f915 	bl	800619c <_fflush_r>
 8005f72:	b988      	cbnz	r0, 8005f98 <__swbuf_r+0x90>
 8005f74:	4638      	mov	r0, r7
 8005f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <__swbuf_r+0x9c>)
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	d101      	bne.n	8005f82 <__swbuf_r+0x7a>
 8005f7e:	68ac      	ldr	r4, [r5, #8]
 8005f80:	e7cf      	b.n	8005f22 <__swbuf_r+0x1a>
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <__swbuf_r+0xa0>)
 8005f84:	429c      	cmp	r4, r3
 8005f86:	bf08      	it	eq
 8005f88:	68ec      	ldreq	r4, [r5, #12]
 8005f8a:	e7ca      	b.n	8005f22 <__swbuf_r+0x1a>
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f80c 	bl	8005fac <__swsetup_r>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d0cb      	beq.n	8005f30 <__swbuf_r+0x28>
 8005f98:	f04f 37ff 	mov.w	r7, #4294967295
 8005f9c:	e7ea      	b.n	8005f74 <__swbuf_r+0x6c>
 8005f9e:	bf00      	nop
 8005fa0:	0800686c 	.word	0x0800686c
 8005fa4:	0800688c 	.word	0x0800688c
 8005fa8:	0800684c 	.word	0x0800684c

08005fac <__swsetup_r>:
 8005fac:	4b32      	ldr	r3, [pc, #200]	; (8006078 <__swsetup_r+0xcc>)
 8005fae:	b570      	push	{r4, r5, r6, lr}
 8005fb0:	681d      	ldr	r5, [r3, #0]
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	b125      	cbz	r5, 8005fc2 <__swsetup_r+0x16>
 8005fb8:	69ab      	ldr	r3, [r5, #24]
 8005fba:	b913      	cbnz	r3, 8005fc2 <__swsetup_r+0x16>
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f981 	bl	80062c4 <__sinit>
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	; (800607c <__swsetup_r+0xd0>)
 8005fc4:	429c      	cmp	r4, r3
 8005fc6:	d10f      	bne.n	8005fe8 <__swsetup_r+0x3c>
 8005fc8:	686c      	ldr	r4, [r5, #4]
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fd0:	0719      	lsls	r1, r3, #28
 8005fd2:	d42c      	bmi.n	800602e <__swsetup_r+0x82>
 8005fd4:	06dd      	lsls	r5, r3, #27
 8005fd6:	d411      	bmi.n	8005ffc <__swsetup_r+0x50>
 8005fd8:	2309      	movs	r3, #9
 8005fda:	6033      	str	r3, [r6, #0]
 8005fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	e03e      	b.n	8006066 <__swsetup_r+0xba>
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <__swsetup_r+0xd4>)
 8005fea:	429c      	cmp	r4, r3
 8005fec:	d101      	bne.n	8005ff2 <__swsetup_r+0x46>
 8005fee:	68ac      	ldr	r4, [r5, #8]
 8005ff0:	e7eb      	b.n	8005fca <__swsetup_r+0x1e>
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <__swsetup_r+0xd8>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	bf08      	it	eq
 8005ff8:	68ec      	ldreq	r4, [r5, #12]
 8005ffa:	e7e6      	b.n	8005fca <__swsetup_r+0x1e>
 8005ffc:	0758      	lsls	r0, r3, #29
 8005ffe:	d512      	bpl.n	8006026 <__swsetup_r+0x7a>
 8006000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006002:	b141      	cbz	r1, 8006016 <__swsetup_r+0x6a>
 8006004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006008:	4299      	cmp	r1, r3
 800600a:	d002      	beq.n	8006012 <__swsetup_r+0x66>
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff fba1 	bl	8005754 <_free_r>
 8006012:	2300      	movs	r3, #0
 8006014:	6363      	str	r3, [r4, #52]	; 0x34
 8006016:	89a3      	ldrh	r3, [r4, #12]
 8006018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800601c:	81a3      	strh	r3, [r4, #12]
 800601e:	2300      	movs	r3, #0
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	f043 0308 	orr.w	r3, r3, #8
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	6923      	ldr	r3, [r4, #16]
 8006030:	b94b      	cbnz	r3, 8006046 <__swsetup_r+0x9a>
 8006032:	89a3      	ldrh	r3, [r4, #12]
 8006034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800603c:	d003      	beq.n	8006046 <__swsetup_r+0x9a>
 800603e:	4621      	mov	r1, r4
 8006040:	4630      	mov	r0, r6
 8006042:	f000 fa05 	bl	8006450 <__smakebuf_r>
 8006046:	89a0      	ldrh	r0, [r4, #12]
 8006048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800604c:	f010 0301 	ands.w	r3, r0, #1
 8006050:	d00a      	beq.n	8006068 <__swsetup_r+0xbc>
 8006052:	2300      	movs	r3, #0
 8006054:	60a3      	str	r3, [r4, #8]
 8006056:	6963      	ldr	r3, [r4, #20]
 8006058:	425b      	negs	r3, r3
 800605a:	61a3      	str	r3, [r4, #24]
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	b943      	cbnz	r3, 8006072 <__swsetup_r+0xc6>
 8006060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006064:	d1ba      	bne.n	8005fdc <__swsetup_r+0x30>
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	0781      	lsls	r1, r0, #30
 800606a:	bf58      	it	pl
 800606c:	6963      	ldrpl	r3, [r4, #20]
 800606e:	60a3      	str	r3, [r4, #8]
 8006070:	e7f4      	b.n	800605c <__swsetup_r+0xb0>
 8006072:	2000      	movs	r0, #0
 8006074:	e7f7      	b.n	8006066 <__swsetup_r+0xba>
 8006076:	bf00      	nop
 8006078:	20000010 	.word	0x20000010
 800607c:	0800686c 	.word	0x0800686c
 8006080:	0800688c 	.word	0x0800688c
 8006084:	0800684c 	.word	0x0800684c

08006088 <abort>:
 8006088:	2006      	movs	r0, #6
 800608a:	b508      	push	{r3, lr}
 800608c:	f000 fa62 	bl	8006554 <raise>
 8006090:	2001      	movs	r0, #1
 8006092:	f7fb fefc 	bl	8001e8e <_exit>
	...

08006098 <__sflush_r>:
 8006098:	898a      	ldrh	r2, [r1, #12]
 800609a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609c:	4605      	mov	r5, r0
 800609e:	0710      	lsls	r0, r2, #28
 80060a0:	460c      	mov	r4, r1
 80060a2:	d457      	bmi.n	8006154 <__sflush_r+0xbc>
 80060a4:	684b      	ldr	r3, [r1, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	dc04      	bgt.n	80060b4 <__sflush_r+0x1c>
 80060aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dc01      	bgt.n	80060b4 <__sflush_r+0x1c>
 80060b0:	2000      	movs	r0, #0
 80060b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060b6:	2e00      	cmp	r6, #0
 80060b8:	d0fa      	beq.n	80060b0 <__sflush_r+0x18>
 80060ba:	2300      	movs	r3, #0
 80060bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060c0:	682f      	ldr	r7, [r5, #0]
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	d032      	beq.n	800612c <__sflush_r+0x94>
 80060c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	075a      	lsls	r2, r3, #29
 80060cc:	d505      	bpl.n	80060da <__sflush_r+0x42>
 80060ce:	6863      	ldr	r3, [r4, #4]
 80060d0:	1ac0      	subs	r0, r0, r3
 80060d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060d4:	b10b      	cbz	r3, 80060da <__sflush_r+0x42>
 80060d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060d8:	1ac0      	subs	r0, r0, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	4602      	mov	r2, r0
 80060de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060e0:	4628      	mov	r0, r5
 80060e2:	6a21      	ldr	r1, [r4, #32]
 80060e4:	47b0      	blx	r6
 80060e6:	1c43      	adds	r3, r0, #1
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	d106      	bne.n	80060fa <__sflush_r+0x62>
 80060ec:	6829      	ldr	r1, [r5, #0]
 80060ee:	291d      	cmp	r1, #29
 80060f0:	d82c      	bhi.n	800614c <__sflush_r+0xb4>
 80060f2:	4a29      	ldr	r2, [pc, #164]	; (8006198 <__sflush_r+0x100>)
 80060f4:	40ca      	lsrs	r2, r1
 80060f6:	07d6      	lsls	r6, r2, #31
 80060f8:	d528      	bpl.n	800614c <__sflush_r+0xb4>
 80060fa:	2200      	movs	r2, #0
 80060fc:	6062      	str	r2, [r4, #4]
 80060fe:	6922      	ldr	r2, [r4, #16]
 8006100:	04d9      	lsls	r1, r3, #19
 8006102:	6022      	str	r2, [r4, #0]
 8006104:	d504      	bpl.n	8006110 <__sflush_r+0x78>
 8006106:	1c42      	adds	r2, r0, #1
 8006108:	d101      	bne.n	800610e <__sflush_r+0x76>
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	b903      	cbnz	r3, 8006110 <__sflush_r+0x78>
 800610e:	6560      	str	r0, [r4, #84]	; 0x54
 8006110:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006112:	602f      	str	r7, [r5, #0]
 8006114:	2900      	cmp	r1, #0
 8006116:	d0cb      	beq.n	80060b0 <__sflush_r+0x18>
 8006118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800611c:	4299      	cmp	r1, r3
 800611e:	d002      	beq.n	8006126 <__sflush_r+0x8e>
 8006120:	4628      	mov	r0, r5
 8006122:	f7ff fb17 	bl	8005754 <_free_r>
 8006126:	2000      	movs	r0, #0
 8006128:	6360      	str	r0, [r4, #52]	; 0x34
 800612a:	e7c2      	b.n	80060b2 <__sflush_r+0x1a>
 800612c:	6a21      	ldr	r1, [r4, #32]
 800612e:	2301      	movs	r3, #1
 8006130:	4628      	mov	r0, r5
 8006132:	47b0      	blx	r6
 8006134:	1c41      	adds	r1, r0, #1
 8006136:	d1c7      	bne.n	80060c8 <__sflush_r+0x30>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0c4      	beq.n	80060c8 <__sflush_r+0x30>
 800613e:	2b1d      	cmp	r3, #29
 8006140:	d001      	beq.n	8006146 <__sflush_r+0xae>
 8006142:	2b16      	cmp	r3, #22
 8006144:	d101      	bne.n	800614a <__sflush_r+0xb2>
 8006146:	602f      	str	r7, [r5, #0]
 8006148:	e7b2      	b.n	80060b0 <__sflush_r+0x18>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006150:	81a3      	strh	r3, [r4, #12]
 8006152:	e7ae      	b.n	80060b2 <__sflush_r+0x1a>
 8006154:	690f      	ldr	r7, [r1, #16]
 8006156:	2f00      	cmp	r7, #0
 8006158:	d0aa      	beq.n	80060b0 <__sflush_r+0x18>
 800615a:	0793      	lsls	r3, r2, #30
 800615c:	bf18      	it	ne
 800615e:	2300      	movne	r3, #0
 8006160:	680e      	ldr	r6, [r1, #0]
 8006162:	bf08      	it	eq
 8006164:	694b      	ldreq	r3, [r1, #20]
 8006166:	1bf6      	subs	r6, r6, r7
 8006168:	600f      	str	r7, [r1, #0]
 800616a:	608b      	str	r3, [r1, #8]
 800616c:	2e00      	cmp	r6, #0
 800616e:	dd9f      	ble.n	80060b0 <__sflush_r+0x18>
 8006170:	4633      	mov	r3, r6
 8006172:	463a      	mov	r2, r7
 8006174:	4628      	mov	r0, r5
 8006176:	6a21      	ldr	r1, [r4, #32]
 8006178:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800617c:	47e0      	blx	ip
 800617e:	2800      	cmp	r0, #0
 8006180:	dc06      	bgt.n	8006190 <__sflush_r+0xf8>
 8006182:	89a3      	ldrh	r3, [r4, #12]
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	e790      	b.n	80060b2 <__sflush_r+0x1a>
 8006190:	4407      	add	r7, r0
 8006192:	1a36      	subs	r6, r6, r0
 8006194:	e7ea      	b.n	800616c <__sflush_r+0xd4>
 8006196:	bf00      	nop
 8006198:	20400001 	.word	0x20400001

0800619c <_fflush_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	690b      	ldr	r3, [r1, #16]
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b913      	cbnz	r3, 80061ac <_fflush_r+0x10>
 80061a6:	2500      	movs	r5, #0
 80061a8:	4628      	mov	r0, r5
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	b118      	cbz	r0, 80061b6 <_fflush_r+0x1a>
 80061ae:	6983      	ldr	r3, [r0, #24]
 80061b0:	b90b      	cbnz	r3, 80061b6 <_fflush_r+0x1a>
 80061b2:	f000 f887 	bl	80062c4 <__sinit>
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <_fflush_r+0x6c>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	d11b      	bne.n	80061f4 <_fflush_r+0x58>
 80061bc:	686c      	ldr	r4, [r5, #4]
 80061be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0ef      	beq.n	80061a6 <_fflush_r+0xa>
 80061c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061c8:	07d0      	lsls	r0, r2, #31
 80061ca:	d404      	bmi.n	80061d6 <_fflush_r+0x3a>
 80061cc:	0599      	lsls	r1, r3, #22
 80061ce:	d402      	bmi.n	80061d6 <_fflush_r+0x3a>
 80061d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d2:	f000 f915 	bl	8006400 <__retarget_lock_acquire_recursive>
 80061d6:	4628      	mov	r0, r5
 80061d8:	4621      	mov	r1, r4
 80061da:	f7ff ff5d 	bl	8006098 <__sflush_r>
 80061de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e0:	4605      	mov	r5, r0
 80061e2:	07da      	lsls	r2, r3, #31
 80061e4:	d4e0      	bmi.n	80061a8 <_fflush_r+0xc>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	059b      	lsls	r3, r3, #22
 80061ea:	d4dd      	bmi.n	80061a8 <_fflush_r+0xc>
 80061ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ee:	f000 f908 	bl	8006402 <__retarget_lock_release_recursive>
 80061f2:	e7d9      	b.n	80061a8 <_fflush_r+0xc>
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <_fflush_r+0x70>)
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d101      	bne.n	80061fe <_fflush_r+0x62>
 80061fa:	68ac      	ldr	r4, [r5, #8]
 80061fc:	e7df      	b.n	80061be <_fflush_r+0x22>
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <_fflush_r+0x74>)
 8006200:	429c      	cmp	r4, r3
 8006202:	bf08      	it	eq
 8006204:	68ec      	ldreq	r4, [r5, #12]
 8006206:	e7da      	b.n	80061be <_fflush_r+0x22>
 8006208:	0800686c 	.word	0x0800686c
 800620c:	0800688c 	.word	0x0800688c
 8006210:	0800684c 	.word	0x0800684c

08006214 <std>:
 8006214:	2300      	movs	r3, #0
 8006216:	b510      	push	{r4, lr}
 8006218:	4604      	mov	r4, r0
 800621a:	e9c0 3300 	strd	r3, r3, [r0]
 800621e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006222:	6083      	str	r3, [r0, #8]
 8006224:	8181      	strh	r1, [r0, #12]
 8006226:	6643      	str	r3, [r0, #100]	; 0x64
 8006228:	81c2      	strh	r2, [r0, #14]
 800622a:	6183      	str	r3, [r0, #24]
 800622c:	4619      	mov	r1, r3
 800622e:	2208      	movs	r2, #8
 8006230:	305c      	adds	r0, #92	; 0x5c
 8006232:	f7ff f9b7 	bl	80055a4 <memset>
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <std+0x38>)
 8006238:	6224      	str	r4, [r4, #32]
 800623a:	6263      	str	r3, [r4, #36]	; 0x24
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <std+0x3c>)
 800623e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006240:	4b04      	ldr	r3, [pc, #16]	; (8006254 <std+0x40>)
 8006242:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <std+0x44>)
 8006246:	6323      	str	r3, [r4, #48]	; 0x30
 8006248:	bd10      	pop	{r4, pc}
 800624a:	bf00      	nop
 800624c:	0800658d 	.word	0x0800658d
 8006250:	080065af 	.word	0x080065af
 8006254:	080065e7 	.word	0x080065e7
 8006258:	0800660b 	.word	0x0800660b

0800625c <_cleanup_r>:
 800625c:	4901      	ldr	r1, [pc, #4]	; (8006264 <_cleanup_r+0x8>)
 800625e:	f000 b8af 	b.w	80063c0 <_fwalk_reent>
 8006262:	bf00      	nop
 8006264:	0800619d 	.word	0x0800619d

08006268 <__sfmoreglue>:
 8006268:	2268      	movs	r2, #104	; 0x68
 800626a:	b570      	push	{r4, r5, r6, lr}
 800626c:	1e4d      	subs	r5, r1, #1
 800626e:	4355      	muls	r5, r2
 8006270:	460e      	mov	r6, r1
 8006272:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006276:	f7ff fad5 	bl	8005824 <_malloc_r>
 800627a:	4604      	mov	r4, r0
 800627c:	b140      	cbz	r0, 8006290 <__sfmoreglue+0x28>
 800627e:	2100      	movs	r1, #0
 8006280:	e9c0 1600 	strd	r1, r6, [r0]
 8006284:	300c      	adds	r0, #12
 8006286:	60a0      	str	r0, [r4, #8]
 8006288:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800628c:	f7ff f98a 	bl	80055a4 <memset>
 8006290:	4620      	mov	r0, r4
 8006292:	bd70      	pop	{r4, r5, r6, pc}

08006294 <__sfp_lock_acquire>:
 8006294:	4801      	ldr	r0, [pc, #4]	; (800629c <__sfp_lock_acquire+0x8>)
 8006296:	f000 b8b3 	b.w	8006400 <__retarget_lock_acquire_recursive>
 800629a:	bf00      	nop
 800629c:	20000381 	.word	0x20000381

080062a0 <__sfp_lock_release>:
 80062a0:	4801      	ldr	r0, [pc, #4]	; (80062a8 <__sfp_lock_release+0x8>)
 80062a2:	f000 b8ae 	b.w	8006402 <__retarget_lock_release_recursive>
 80062a6:	bf00      	nop
 80062a8:	20000381 	.word	0x20000381

080062ac <__sinit_lock_acquire>:
 80062ac:	4801      	ldr	r0, [pc, #4]	; (80062b4 <__sinit_lock_acquire+0x8>)
 80062ae:	f000 b8a7 	b.w	8006400 <__retarget_lock_acquire_recursive>
 80062b2:	bf00      	nop
 80062b4:	20000382 	.word	0x20000382

080062b8 <__sinit_lock_release>:
 80062b8:	4801      	ldr	r0, [pc, #4]	; (80062c0 <__sinit_lock_release+0x8>)
 80062ba:	f000 b8a2 	b.w	8006402 <__retarget_lock_release_recursive>
 80062be:	bf00      	nop
 80062c0:	20000382 	.word	0x20000382

080062c4 <__sinit>:
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
 80062c8:	f7ff fff0 	bl	80062ac <__sinit_lock_acquire>
 80062cc:	69a3      	ldr	r3, [r4, #24]
 80062ce:	b11b      	cbz	r3, 80062d8 <__sinit+0x14>
 80062d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d4:	f7ff bff0 	b.w	80062b8 <__sinit_lock_release>
 80062d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062dc:	6523      	str	r3, [r4, #80]	; 0x50
 80062de:	4b13      	ldr	r3, [pc, #76]	; (800632c <__sinit+0x68>)
 80062e0:	4a13      	ldr	r2, [pc, #76]	; (8006330 <__sinit+0x6c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	bf08      	it	eq
 80062ea:	2301      	moveq	r3, #1
 80062ec:	4620      	mov	r0, r4
 80062ee:	bf08      	it	eq
 80062f0:	61a3      	streq	r3, [r4, #24]
 80062f2:	f000 f81f 	bl	8006334 <__sfp>
 80062f6:	6060      	str	r0, [r4, #4]
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 f81b 	bl	8006334 <__sfp>
 80062fe:	60a0      	str	r0, [r4, #8]
 8006300:	4620      	mov	r0, r4
 8006302:	f000 f817 	bl	8006334 <__sfp>
 8006306:	2200      	movs	r2, #0
 8006308:	2104      	movs	r1, #4
 800630a:	60e0      	str	r0, [r4, #12]
 800630c:	6860      	ldr	r0, [r4, #4]
 800630e:	f7ff ff81 	bl	8006214 <std>
 8006312:	2201      	movs	r2, #1
 8006314:	2109      	movs	r1, #9
 8006316:	68a0      	ldr	r0, [r4, #8]
 8006318:	f7ff ff7c 	bl	8006214 <std>
 800631c:	2202      	movs	r2, #2
 800631e:	2112      	movs	r1, #18
 8006320:	68e0      	ldr	r0, [r4, #12]
 8006322:	f7ff ff77 	bl	8006214 <std>
 8006326:	2301      	movs	r3, #1
 8006328:	61a3      	str	r3, [r4, #24]
 800632a:	e7d1      	b.n	80062d0 <__sinit+0xc>
 800632c:	08006764 	.word	0x08006764
 8006330:	0800625d 	.word	0x0800625d

08006334 <__sfp>:
 8006334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006336:	4607      	mov	r7, r0
 8006338:	f7ff ffac 	bl	8006294 <__sfp_lock_acquire>
 800633c:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <__sfp+0x84>)
 800633e:	681e      	ldr	r6, [r3, #0]
 8006340:	69b3      	ldr	r3, [r6, #24]
 8006342:	b913      	cbnz	r3, 800634a <__sfp+0x16>
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff ffbd 	bl	80062c4 <__sinit>
 800634a:	3648      	adds	r6, #72	; 0x48
 800634c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	d503      	bpl.n	800635c <__sfp+0x28>
 8006354:	6833      	ldr	r3, [r6, #0]
 8006356:	b30b      	cbz	r3, 800639c <__sfp+0x68>
 8006358:	6836      	ldr	r6, [r6, #0]
 800635a:	e7f7      	b.n	800634c <__sfp+0x18>
 800635c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006360:	b9d5      	cbnz	r5, 8006398 <__sfp+0x64>
 8006362:	4b16      	ldr	r3, [pc, #88]	; (80063bc <__sfp+0x88>)
 8006364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006368:	60e3      	str	r3, [r4, #12]
 800636a:	6665      	str	r5, [r4, #100]	; 0x64
 800636c:	f000 f847 	bl	80063fe <__retarget_lock_init_recursive>
 8006370:	f7ff ff96 	bl	80062a0 <__sfp_lock_release>
 8006374:	2208      	movs	r2, #8
 8006376:	4629      	mov	r1, r5
 8006378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800637c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006380:	6025      	str	r5, [r4, #0]
 8006382:	61a5      	str	r5, [r4, #24]
 8006384:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006388:	f7ff f90c 	bl	80055a4 <memset>
 800638c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006390:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006394:	4620      	mov	r0, r4
 8006396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006398:	3468      	adds	r4, #104	; 0x68
 800639a:	e7d9      	b.n	8006350 <__sfp+0x1c>
 800639c:	2104      	movs	r1, #4
 800639e:	4638      	mov	r0, r7
 80063a0:	f7ff ff62 	bl	8006268 <__sfmoreglue>
 80063a4:	4604      	mov	r4, r0
 80063a6:	6030      	str	r0, [r6, #0]
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d1d5      	bne.n	8006358 <__sfp+0x24>
 80063ac:	f7ff ff78 	bl	80062a0 <__sfp_lock_release>
 80063b0:	230c      	movs	r3, #12
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	e7ee      	b.n	8006394 <__sfp+0x60>
 80063b6:	bf00      	nop
 80063b8:	08006764 	.word	0x08006764
 80063bc:	ffff0001 	.word	0xffff0001

080063c0 <_fwalk_reent>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4606      	mov	r6, r0
 80063c6:	4688      	mov	r8, r1
 80063c8:	2700      	movs	r7, #0
 80063ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80063ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063d2:	f1b9 0901 	subs.w	r9, r9, #1
 80063d6:	d505      	bpl.n	80063e4 <_fwalk_reent+0x24>
 80063d8:	6824      	ldr	r4, [r4, #0]
 80063da:	2c00      	cmp	r4, #0
 80063dc:	d1f7      	bne.n	80063ce <_fwalk_reent+0xe>
 80063de:	4638      	mov	r0, r7
 80063e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e4:	89ab      	ldrh	r3, [r5, #12]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d907      	bls.n	80063fa <_fwalk_reent+0x3a>
 80063ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ee:	3301      	adds	r3, #1
 80063f0:	d003      	beq.n	80063fa <_fwalk_reent+0x3a>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4630      	mov	r0, r6
 80063f6:	47c0      	blx	r8
 80063f8:	4307      	orrs	r7, r0
 80063fa:	3568      	adds	r5, #104	; 0x68
 80063fc:	e7e9      	b.n	80063d2 <_fwalk_reent+0x12>

080063fe <__retarget_lock_init_recursive>:
 80063fe:	4770      	bx	lr

08006400 <__retarget_lock_acquire_recursive>:
 8006400:	4770      	bx	lr

08006402 <__retarget_lock_release_recursive>:
 8006402:	4770      	bx	lr

08006404 <__swhatbuf_r>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	460e      	mov	r6, r1
 8006408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640c:	4614      	mov	r4, r2
 800640e:	2900      	cmp	r1, #0
 8006410:	461d      	mov	r5, r3
 8006412:	b096      	sub	sp, #88	; 0x58
 8006414:	da08      	bge.n	8006428 <__swhatbuf_r+0x24>
 8006416:	2200      	movs	r2, #0
 8006418:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800641c:	602a      	str	r2, [r5, #0]
 800641e:	061a      	lsls	r2, r3, #24
 8006420:	d410      	bmi.n	8006444 <__swhatbuf_r+0x40>
 8006422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006426:	e00e      	b.n	8006446 <__swhatbuf_r+0x42>
 8006428:	466a      	mov	r2, sp
 800642a:	f000 f915 	bl	8006658 <_fstat_r>
 800642e:	2800      	cmp	r0, #0
 8006430:	dbf1      	blt.n	8006416 <__swhatbuf_r+0x12>
 8006432:	9a01      	ldr	r2, [sp, #4]
 8006434:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006438:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800643c:	425a      	negs	r2, r3
 800643e:	415a      	adcs	r2, r3
 8006440:	602a      	str	r2, [r5, #0]
 8006442:	e7ee      	b.n	8006422 <__swhatbuf_r+0x1e>
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2000      	movs	r0, #0
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	b016      	add	sp, #88	; 0x58
 800644c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006450 <__smakebuf_r>:
 8006450:	898b      	ldrh	r3, [r1, #12]
 8006452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006454:	079d      	lsls	r5, r3, #30
 8006456:	4606      	mov	r6, r0
 8006458:	460c      	mov	r4, r1
 800645a:	d507      	bpl.n	800646c <__smakebuf_r+0x1c>
 800645c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	2301      	movs	r3, #1
 8006466:	6163      	str	r3, [r4, #20]
 8006468:	b002      	add	sp, #8
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	466a      	mov	r2, sp
 800646e:	ab01      	add	r3, sp, #4
 8006470:	f7ff ffc8 	bl	8006404 <__swhatbuf_r>
 8006474:	9900      	ldr	r1, [sp, #0]
 8006476:	4605      	mov	r5, r0
 8006478:	4630      	mov	r0, r6
 800647a:	f7ff f9d3 	bl	8005824 <_malloc_r>
 800647e:	b948      	cbnz	r0, 8006494 <__smakebuf_r+0x44>
 8006480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006484:	059a      	lsls	r2, r3, #22
 8006486:	d4ef      	bmi.n	8006468 <__smakebuf_r+0x18>
 8006488:	f023 0303 	bic.w	r3, r3, #3
 800648c:	f043 0302 	orr.w	r3, r3, #2
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	e7e3      	b.n	800645c <__smakebuf_r+0xc>
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <__smakebuf_r+0x7c>)
 8006496:	62b3      	str	r3, [r6, #40]	; 0x28
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	6020      	str	r0, [r4, #0]
 800649c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	9b00      	ldr	r3, [sp, #0]
 80064a4:	6120      	str	r0, [r4, #16]
 80064a6:	6163      	str	r3, [r4, #20]
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	b15b      	cbz	r3, 80064c4 <__smakebuf_r+0x74>
 80064ac:	4630      	mov	r0, r6
 80064ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b2:	f000 f8e3 	bl	800667c <_isatty_r>
 80064b6:	b128      	cbz	r0, 80064c4 <__smakebuf_r+0x74>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	f023 0303 	bic.w	r3, r3, #3
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	81a3      	strh	r3, [r4, #12]
 80064c4:	89a0      	ldrh	r0, [r4, #12]
 80064c6:	4305      	orrs	r5, r0
 80064c8:	81a5      	strh	r5, [r4, #12]
 80064ca:	e7cd      	b.n	8006468 <__smakebuf_r+0x18>
 80064cc:	0800625d 	.word	0x0800625d

080064d0 <memchr>:
 80064d0:	4603      	mov	r3, r0
 80064d2:	b510      	push	{r4, lr}
 80064d4:	b2c9      	uxtb	r1, r1
 80064d6:	4402      	add	r2, r0
 80064d8:	4293      	cmp	r3, r2
 80064da:	4618      	mov	r0, r3
 80064dc:	d101      	bne.n	80064e2 <memchr+0x12>
 80064de:	2000      	movs	r0, #0
 80064e0:	e003      	b.n	80064ea <memchr+0x1a>
 80064e2:	7804      	ldrb	r4, [r0, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	428c      	cmp	r4, r1
 80064e8:	d1f6      	bne.n	80064d8 <memchr+0x8>
 80064ea:	bd10      	pop	{r4, pc}

080064ec <__malloc_lock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <__malloc_lock+0x8>)
 80064ee:	f7ff bf87 	b.w	8006400 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	20000380 	.word	0x20000380

080064f8 <__malloc_unlock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__malloc_unlock+0x8>)
 80064fa:	f7ff bf82 	b.w	8006402 <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	20000380 	.word	0x20000380

08006504 <_raise_r>:
 8006504:	291f      	cmp	r1, #31
 8006506:	b538      	push	{r3, r4, r5, lr}
 8006508:	4604      	mov	r4, r0
 800650a:	460d      	mov	r5, r1
 800650c:	d904      	bls.n	8006518 <_raise_r+0x14>
 800650e:	2316      	movs	r3, #22
 8006510:	6003      	str	r3, [r0, #0]
 8006512:	f04f 30ff 	mov.w	r0, #4294967295
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800651a:	b112      	cbz	r2, 8006522 <_raise_r+0x1e>
 800651c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006520:	b94b      	cbnz	r3, 8006536 <_raise_r+0x32>
 8006522:	4620      	mov	r0, r4
 8006524:	f000 f830 	bl	8006588 <_getpid_r>
 8006528:	462a      	mov	r2, r5
 800652a:	4601      	mov	r1, r0
 800652c:	4620      	mov	r0, r4
 800652e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006532:	f000 b817 	b.w	8006564 <_kill_r>
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00a      	beq.n	8006550 <_raise_r+0x4c>
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	d103      	bne.n	8006546 <_raise_r+0x42>
 800653e:	2316      	movs	r3, #22
 8006540:	6003      	str	r3, [r0, #0]
 8006542:	2001      	movs	r0, #1
 8006544:	e7e7      	b.n	8006516 <_raise_r+0x12>
 8006546:	2400      	movs	r4, #0
 8006548:	4628      	mov	r0, r5
 800654a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800654e:	4798      	blx	r3
 8006550:	2000      	movs	r0, #0
 8006552:	e7e0      	b.n	8006516 <_raise_r+0x12>

08006554 <raise>:
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <raise+0xc>)
 8006556:	4601      	mov	r1, r0
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	f7ff bfd3 	b.w	8006504 <_raise_r>
 800655e:	bf00      	nop
 8006560:	20000010 	.word	0x20000010

08006564 <_kill_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	2300      	movs	r3, #0
 8006568:	4d06      	ldr	r5, [pc, #24]	; (8006584 <_kill_r+0x20>)
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fb fc7c 	bl	8001e6e <_kill>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d102      	bne.n	8006580 <_kill_r+0x1c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b103      	cbz	r3, 8006580 <_kill_r+0x1c>
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	bf00      	nop
 8006584:	2000037c 	.word	0x2000037c

08006588 <_getpid_r>:
 8006588:	f7fb bc6a 	b.w	8001e60 <_getpid>

0800658c <__sread>:
 800658c:	b510      	push	{r4, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	f000 f894 	bl	80066c0 <_read_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	bfab      	itete	ge
 800659c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800659e:	89a3      	ldrhlt	r3, [r4, #12]
 80065a0:	181b      	addge	r3, r3, r0
 80065a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065a6:	bfac      	ite	ge
 80065a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065aa:	81a3      	strhlt	r3, [r4, #12]
 80065ac:	bd10      	pop	{r4, pc}

080065ae <__swrite>:
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	461f      	mov	r7, r3
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	4605      	mov	r5, r0
 80065b8:	05db      	lsls	r3, r3, #23
 80065ba:	460c      	mov	r4, r1
 80065bc:	4616      	mov	r6, r2
 80065be:	d505      	bpl.n	80065cc <__swrite+0x1e>
 80065c0:	2302      	movs	r3, #2
 80065c2:	2200      	movs	r2, #0
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	f000 f868 	bl	800669c <_lseek_r>
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	4632      	mov	r2, r6
 80065d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	4628      	mov	r0, r5
 80065d8:	463b      	mov	r3, r7
 80065da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	f000 b817 	b.w	8006614 <_write_r>

080065e6 <__sseek>:
 80065e6:	b510      	push	{r4, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ee:	f000 f855 	bl	800669c <_lseek_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	bf15      	itete	ne
 80065f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006602:	81a3      	strheq	r3, [r4, #12]
 8006604:	bf18      	it	ne
 8006606:	81a3      	strhne	r3, [r4, #12]
 8006608:	bd10      	pop	{r4, pc}

0800660a <__sclose>:
 800660a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660e:	f000 b813 	b.w	8006638 <_close_r>
	...

08006614 <_write_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	2200      	movs	r2, #0
 800661e:	4d05      	ldr	r5, [pc, #20]	; (8006634 <_write_r+0x20>)
 8006620:	602a      	str	r2, [r5, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fa fef6 	bl	8001414 <_write>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_write_r+0x1e>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_write_r+0x1e>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	2000037c 	.word	0x2000037c

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	2300      	movs	r3, #0
 800663c:	4d05      	ldr	r5, [pc, #20]	; (8006654 <_close_r+0x1c>)
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fb fc4a 	bl	8001edc <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	2000037c 	.word	0x2000037c

08006658 <_fstat_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	2300      	movs	r3, #0
 800665c:	4d06      	ldr	r5, [pc, #24]	; (8006678 <_fstat_r+0x20>)
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	f7fb fc44 	bl	8001ef2 <_fstat>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	d102      	bne.n	8006674 <_fstat_r+0x1c>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	b103      	cbz	r3, 8006674 <_fstat_r+0x1c>
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	bd38      	pop	{r3, r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	2000037c 	.word	0x2000037c

0800667c <_isatty_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	2300      	movs	r3, #0
 8006680:	4d05      	ldr	r5, [pc, #20]	; (8006698 <_isatty_r+0x1c>)
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	f7fb fc42 	bl	8001f10 <_isatty>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_isatty_r+0x1a>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_isatty_r+0x1a>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	2000037c 	.word	0x2000037c

0800669c <_lseek_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4604      	mov	r4, r0
 80066a0:	4608      	mov	r0, r1
 80066a2:	4611      	mov	r1, r2
 80066a4:	2200      	movs	r2, #0
 80066a6:	4d05      	ldr	r5, [pc, #20]	; (80066bc <_lseek_r+0x20>)
 80066a8:	602a      	str	r2, [r5, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f7fb fc3a 	bl	8001f24 <_lseek>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_lseek_r+0x1e>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_lseek_r+0x1e>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	2000037c 	.word	0x2000037c

080066c0 <_read_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4604      	mov	r4, r0
 80066c4:	4608      	mov	r0, r1
 80066c6:	4611      	mov	r1, r2
 80066c8:	2200      	movs	r2, #0
 80066ca:	4d05      	ldr	r5, [pc, #20]	; (80066e0 <_read_r+0x20>)
 80066cc:	602a      	str	r2, [r5, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f7fb fbe7 	bl	8001ea2 <_read>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_read_r+0x1e>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_read_r+0x1e>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	2000037c 	.word	0x2000037c

080066e4 <_gettimeofday>:
 80066e4:	2258      	movs	r2, #88	; 0x58
 80066e6:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <_gettimeofday+0xc>)
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	4770      	bx	lr
 80066f0:	2000037c 	.word	0x2000037c

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
