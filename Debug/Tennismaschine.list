
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005bf8  08005bf8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bf8  08005bf8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000074  08005c74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005c74  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105db  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  00030678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  00032c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd8  00000000  00000000  00034900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001241e  00000000  00000000  0004e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c38  00000000  00000000  000609f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f262e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  000f2680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f6ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f6f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a58 	.word	0x08005a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005a58 	.word	0x08005a58

0800014c <pgm_stop>:
static uint16_t angle_degree;
static uint16_t last_adc[3];
static uint32_t last_rand_tick;
static uint32_t last_blink_tick;

int pgm_stop(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	if(mainDrvRunning){
 8000150:	4b11      	ldr	r3, [pc, #68]	; (8000198 <pgm_stop+0x4c>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d00a      	beq.n	800016e <pgm_stop+0x22>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000158:	2100      	movs	r1, #0
 800015a:	4810      	ldr	r0, [pc, #64]	; (800019c <pgm_stop+0x50>)
 800015c:	f003 f98a 	bl	8003474 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000160:	2104      	movs	r1, #4
 8000162:	480e      	ldr	r0, [pc, #56]	; (800019c <pgm_stop+0x50>)
 8000164:	f003 f986 	bl	8003474 <HAL_TIM_PWM_Stop>

		mainDrvRunning = RESET;
 8000168:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <pgm_stop+0x4c>)
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
	}

	if((HAL_GetTick() - last_blink_tick) > BLINK_INT_MS){
 800016e:	f001 fa35 	bl	80015dc <HAL_GetTick>
 8000172:	4602      	mov	r2, r0
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <pgm_stop+0x54>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800017e:	d907      	bls.n	8000190 <pgm_stop+0x44>

			Toggle_Led_Output(GREEN);
 8000180:	2001      	movs	r0, #1
 8000182:	f000 fde7 	bl	8000d54 <Toggle_Led_Output>

			last_blink_tick = HAL_GetTick();
 8000186:	f001 fa29 	bl	80015dc <HAL_GetTick>
 800018a:	4603      	mov	r3, r0
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <pgm_stop+0x54>)
 800018e:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	2000029e 	.word	0x2000029e
 800019c:	20000130 	.word	0x20000130
 80001a0:	200000a8 	.word	0x200000a8

080001a4 <pgm_manual>:

int pgm_manual(void){
 80001a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001a6:	b0ad      	sub	sp, #180	; 0xb4
 80001a8:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 80001aa:	2001      	movs	r0, #1
 80001ac:	f000 fda8 	bl	8000d00 <Set_Led_Output>

	get_adc_values(adc_result);
 80001b0:	484c      	ldr	r0, [pc, #304]	; (80002e4 <pgm_manual+0x140>)
 80001b2:	f000 f98f 	bl	80004d4 <get_adc_values>

	speed_percent = adc_result[0]*100/0xFFF;
 80001b6:	4b4b      	ldr	r3, [pc, #300]	; (80002e4 <pgm_manual+0x140>)
 80001b8:	881b      	ldrh	r3, [r3, #0]
 80001ba:	461a      	mov	r2, r3
 80001bc:	2364      	movs	r3, #100	; 0x64
 80001be:	fb02 f303 	mul.w	r3, r2, r3
 80001c2:	4a49      	ldr	r2, [pc, #292]	; (80002e8 <pgm_manual+0x144>)
 80001c4:	fb82 1203 	smull	r1, r2, r2, r3
 80001c8:	441a      	add	r2, r3
 80001ca:	12d2      	asrs	r2, r2, #11
 80001cc:	17db      	asrs	r3, r3, #31
 80001ce:	1ad3      	subs	r3, r2, r3
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	4b46      	ldr	r3, [pc, #280]	; (80002ec <pgm_manual+0x148>)
 80001d4:	801a      	strh	r2, [r3, #0]
	spin_percent = (adc_result[1]*100/0xFFF)-50;
 80001d6:	4b43      	ldr	r3, [pc, #268]	; (80002e4 <pgm_manual+0x140>)
 80001d8:	885b      	ldrh	r3, [r3, #2]
 80001da:	461a      	mov	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	fb02 f303 	mul.w	r3, r2, r3
 80001e2:	4a41      	ldr	r2, [pc, #260]	; (80002e8 <pgm_manual+0x144>)
 80001e4:	fb82 1203 	smull	r1, r2, r2, r3
 80001e8:	441a      	add	r2, r3
 80001ea:	12d2      	asrs	r2, r2, #11
 80001ec:	17db      	asrs	r3, r3, #31
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	3b32      	subs	r3, #50	; 0x32
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	4b3d      	ldr	r3, [pc, #244]	; (80002f0 <pgm_manual+0x14c>)
 80001fa:	801a      	strh	r2, [r3, #0]
	angle_degree = (adc_result[2]*90/0xFFF);
 80001fc:	4b39      	ldr	r3, [pc, #228]	; (80002e4 <pgm_manual+0x140>)
 80001fe:	889b      	ldrh	r3, [r3, #4]
 8000200:	461a      	mov	r2, r3
 8000202:	235a      	movs	r3, #90	; 0x5a
 8000204:	fb02 f303 	mul.w	r3, r2, r3
 8000208:	4a37      	ldr	r2, [pc, #220]	; (80002e8 <pgm_manual+0x144>)
 800020a:	fb82 1203 	smull	r1, r2, r2, r3
 800020e:	441a      	add	r2, r3
 8000210:	12d2      	asrs	r2, r2, #11
 8000212:	17db      	asrs	r3, r3, #31
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	b29a      	uxth	r2, r3
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <pgm_manual+0x150>)
 800021a:	801a      	strh	r2, [r3, #0]

	if(
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 800021c:	4b36      	ldr	r3, [pc, #216]	; (80002f8 <pgm_manual+0x154>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	461a      	mov	r2, r3
 8000222:	4b30      	ldr	r3, [pc, #192]	; (80002e4 <pgm_manual+0x140>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	1ad3      	subs	r3, r2, r3
 8000228:	2b00      	cmp	r3, #0
 800022a:	bfb8      	it	lt
 800022c:	425b      	neglt	r3, r3
 800022e:	2b32      	cmp	r3, #50	; 0x32
 8000230:	bfcc      	ite	gt
 8000232:	2301      	movgt	r3, #1
 8000234:	2300      	movle	r3, #0
 8000236:	b2da      	uxtb	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA)){
 8000238:	4b2f      	ldr	r3, [pc, #188]	; (80002f8 <pgm_manual+0x154>)
 800023a:	885b      	ldrh	r3, [r3, #2]
 800023c:	4619      	mov	r1, r3
 800023e:	4b29      	ldr	r3, [pc, #164]	; (80002e4 <pgm_manual+0x140>)
 8000240:	885b      	ldrh	r3, [r3, #2]
 8000242:	1acb      	subs	r3, r1, r3
 8000244:	2b00      	cmp	r3, #0
 8000246:	bfb8      	it	lt
 8000248:	425b      	neglt	r3, r3
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 800024a:	2b32      	cmp	r3, #50	; 0x32
 800024c:	bfcc      	ite	gt
 800024e:	2301      	movgt	r3, #1
 8000250:	2300      	movle	r3, #0
 8000252:	b2db      	uxtb	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b2db      	uxtb	r3, r3
	if(
 8000258:	2b00      	cmp	r3, #0
 800025a:	d01a      	beq.n	8000292 <pgm_manual+0xee>

			last_adc[0] = adc_result[0];
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <pgm_manual+0x140>)
 800025e:	881a      	ldrh	r2, [r3, #0]
 8000260:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <pgm_manual+0x154>)
 8000262:	801a      	strh	r2, [r3, #0]
			last_adc[1] = adc_result[1];
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <pgm_manual+0x140>)
 8000266:	885a      	ldrh	r2, [r3, #2]
 8000268:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <pgm_manual+0x154>)
 800026a:	805a      	strh	r2, [r3, #2]
			set_pwm_maindrv(speed_percent, spin_percent, htim1);
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <pgm_manual+0x148>)
 800026e:	881d      	ldrh	r5, [r3, #0]
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <pgm_manual+0x14c>)
 8000272:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000276:	4c21      	ldr	r4, [pc, #132]	; (80002fc <pgm_manual+0x158>)
 8000278:	4668      	mov	r0, sp
 800027a:	f104 0308 	add.w	r3, r4, #8
 800027e:	22ac      	movs	r2, #172	; 0xac
 8000280:	4619      	mov	r1, r3
 8000282:	f004 fb33 	bl	80048ec <memcpy>
 8000286:	e894 000c 	ldmia.w	r4, {r2, r3}
 800028a:	4631      	mov	r1, r6
 800028c:	4628      	mov	r0, r5
 800028e:	f000 fdb7 	bl	8000e00 <set_pwm_maindrv>
		}

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <pgm_manual+0x154>)
 8000294:	889b      	ldrh	r3, [r3, #4]
 8000296:	461a      	mov	r2, r3
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <pgm_manual+0x140>)
 800029a:	889b      	ldrh	r3, [r3, #4]
 800029c:	1ad3      	subs	r3, r2, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	bfb8      	it	lt
 80002a2:	425b      	neglt	r3, r3
 80002a4:	2b32      	cmp	r3, #50	; 0x32
 80002a6:	dd08      	ble.n	80002ba <pgm_manual+0x116>
		last_adc[2] = adc_result[2];
 80002a8:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <pgm_manual+0x140>)
 80002aa:	889a      	ldrh	r2, [r3, #4]
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <pgm_manual+0x154>)
 80002ae:	809a      	strh	r2, [r3, #4]
		set_pos_posdrv(angle_degree);
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <pgm_manual+0x150>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fe65 	bl	8000f84 <set_pos_posdrv>
	}

	if(!mainDrvRunning){
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <pgm_manual+0x15c>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d10a      	bne.n	80002d8 <pgm_manual+0x134>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002c2:	2100      	movs	r1, #0
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <pgm_manual+0x158>)
 80002c6:	f003 f833 	bl	8003330 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002ca:	2104      	movs	r1, #4
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <pgm_manual+0x158>)
 80002ce:	f003 f82f 	bl	8003330 <HAL_TIM_PWM_Start>

		mainDrvRunning = SET;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <pgm_manual+0x15c>)
 80002d4:	2201      	movs	r2, #1
 80002d6:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80002d8:	2300      	movs	r3, #0
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3704      	adds	r7, #4
 80002de:	46bd      	mov	sp, r7
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000090 	.word	0x20000090
 80002e8:	80080081 	.word	0x80080081
 80002ec:	20000096 	.word	0x20000096
 80002f0:	20000098 	.word	0x20000098
 80002f4:	2000009a 	.word	0x2000009a
 80002f8:	2000009c 	.word	0x2000009c
 80002fc:	20000130 	.word	0x20000130
 8000300:	2000029e 	.word	0x2000029e

08000304 <pgm_auto_speed>:

int pgm_auto_speed(void){
 8000304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000306:	b0af      	sub	sp, #188	; 0xbc
 8000308:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fcf8 	bl	8000d00 <Set_Led_Output>

	get_adc_values(adc_result);
 8000310:	4835      	ldr	r0, [pc, #212]	; (80003e8 <pgm_auto_speed+0xe4>)
 8000312:	f000 f8df 	bl	80004d4 <get_adc_values>

	angle_degree = (adc_result[2]*90/0xFFF);
 8000316:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <pgm_auto_speed+0xe4>)
 8000318:	889b      	ldrh	r3, [r3, #4]
 800031a:	461a      	mov	r2, r3
 800031c:	235a      	movs	r3, #90	; 0x5a
 800031e:	fb02 f303 	mul.w	r3, r2, r3
 8000322:	4a32      	ldr	r2, [pc, #200]	; (80003ec <pgm_auto_speed+0xe8>)
 8000324:	fb82 1203 	smull	r1, r2, r2, r3
 8000328:	441a      	add	r2, r3
 800032a:	12d2      	asrs	r2, r2, #11
 800032c:	17db      	asrs	r3, r3, #31
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <pgm_auto_speed+0xec>)
 8000334:	801a      	strh	r2, [r3, #0]

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 8000336:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <pgm_auto_speed+0xf0>)
 8000338:	889b      	ldrh	r3, [r3, #4]
 800033a:	461a      	mov	r2, r3
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <pgm_auto_speed+0xe4>)
 800033e:	889b      	ldrh	r3, [r3, #4]
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	bfb8      	it	lt
 8000346:	425b      	neglt	r3, r3
 8000348:	2b32      	cmp	r3, #50	; 0x32
 800034a:	dd08      	ble.n	800035e <pgm_auto_speed+0x5a>
		last_adc[2] = adc_result[2];
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <pgm_auto_speed+0xe4>)
 800034e:	889a      	ldrh	r2, [r3, #4]
 8000350:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <pgm_auto_speed+0xf0>)
 8000352:	809a      	strh	r2, [r3, #4]
		set_pos_posdrv(angle_degree);
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <pgm_auto_speed+0xec>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	4618      	mov	r0, r3
 800035a:	f000 fe13 	bl	8000f84 <set_pos_posdrv>
	}

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 800035e:	f001 f93d 	bl	80015dc <HAL_GetTick>
 8000362:	4602      	mov	r2, r0
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <pgm_auto_speed+0xf4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	1ad3      	subs	r3, r2, r3
 800036a:	f242 7210 	movw	r2, #10000	; 0x2710
 800036e:	4293      	cmp	r3, r2
 8000370:	d935      	bls.n	80003de <pgm_auto_speed+0xda>

			uint16_t rand_speed = rand() % 101;
 8000372:	f004 faff 	bl	8004974 <rand>
 8000376:	4603      	mov	r3, r0
 8000378:	4a20      	ldr	r2, [pc, #128]	; (80003fc <pgm_auto_speed+0xf8>)
 800037a:	fb82 1203 	smull	r1, r2, r2, r3
 800037e:	1111      	asrs	r1, r2, #4
 8000380:	17da      	asrs	r2, r3, #31
 8000382:	1a8a      	subs	r2, r1, r2
 8000384:	2165      	movs	r1, #101	; 0x65
 8000386:	fb01 f202 	mul.w	r2, r1, r2
 800038a:	1a9a      	subs	r2, r3, r2
 800038c:	4613      	mov	r3, r2
 800038e:	80fb      	strh	r3, [r7, #6]
			int16_t rand_spin = (rand() % 101) -50;
 8000390:	f004 faf0 	bl	8004974 <rand>
 8000394:	4603      	mov	r3, r0
 8000396:	4a19      	ldr	r2, [pc, #100]	; (80003fc <pgm_auto_speed+0xf8>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	1111      	asrs	r1, r2, #4
 800039e:	17da      	asrs	r2, r3, #31
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	2165      	movs	r1, #101	; 0x65
 80003a4:	fb01 f202 	mul.w	r2, r1, r2
 80003a8:	1a9a      	subs	r2, r3, r2
 80003aa:	b293      	uxth	r3, r2
 80003ac:	3b32      	subs	r3, #50	; 0x32
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	80bb      	strh	r3, [r7, #4]

			set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80003b2:	4c13      	ldr	r4, [pc, #76]	; (8000400 <pgm_auto_speed+0xfc>)
 80003b4:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80003b8:	88fd      	ldrh	r5, [r7, #6]
 80003ba:	4668      	mov	r0, sp
 80003bc:	f104 0308 	add.w	r3, r4, #8
 80003c0:	22ac      	movs	r2, #172	; 0xac
 80003c2:	4619      	mov	r1, r3
 80003c4:	f004 fa92 	bl	80048ec <memcpy>
 80003c8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80003cc:	4631      	mov	r1, r6
 80003ce:	4628      	mov	r0, r5
 80003d0:	f000 fd16 	bl	8000e00 <set_pwm_maindrv>

			last_rand_tick = HAL_GetTick();
 80003d4:	f001 f902 	bl	80015dc <HAL_GetTick>
 80003d8:	4603      	mov	r3, r0
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <pgm_auto_speed+0xf4>)
 80003dc:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	20000090 	.word	0x20000090
 80003ec:	80080081 	.word	0x80080081
 80003f0:	2000009a 	.word	0x2000009a
 80003f4:	2000009c 	.word	0x2000009c
 80003f8:	200000a4 	.word	0x200000a4
 80003fc:	288df0cb 	.word	0x288df0cb
 8000400:	20000130 	.word	0x20000130

08000404 <pgm_auto>:

int pgm_auto(void){
 8000404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000406:	b0af      	sub	sp, #188	; 0xbc
 8000408:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fc78 	bl	8000d00 <Set_Led_Output>

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000410:	f001 f8e4 	bl	80015dc <HAL_GetTick>
 8000414:	4602      	mov	r2, r0
 8000416:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <pgm_auto+0xc0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000420:	4293      	cmp	r3, r2
 8000422:	d949      	bls.n	80004b8 <pgm_auto+0xb4>

		uint16_t rand_speed = rand() % 101;
 8000424:	f004 faa6 	bl	8004974 <rand>
 8000428:	4603      	mov	r3, r0
 800042a:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <pgm_auto+0xc4>)
 800042c:	fb82 1203 	smull	r1, r2, r2, r3
 8000430:	1111      	asrs	r1, r2, #4
 8000432:	17da      	asrs	r2, r3, #31
 8000434:	1a8a      	subs	r2, r1, r2
 8000436:	2165      	movs	r1, #101	; 0x65
 8000438:	fb01 f202 	mul.w	r2, r1, r2
 800043c:	1a9a      	subs	r2, r3, r2
 800043e:	4613      	mov	r3, r2
 8000440:	80fb      	strh	r3, [r7, #6]
		int16_t rand_spin = (rand() % 101) -50;
 8000442:	f004 fa97 	bl	8004974 <rand>
 8000446:	4603      	mov	r3, r0
 8000448:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <pgm_auto+0xc4>)
 800044a:	fb82 1203 	smull	r1, r2, r2, r3
 800044e:	1111      	asrs	r1, r2, #4
 8000450:	17da      	asrs	r2, r3, #31
 8000452:	1a8a      	subs	r2, r1, r2
 8000454:	2165      	movs	r1, #101	; 0x65
 8000456:	fb01 f202 	mul.w	r2, r1, r2
 800045a:	1a9a      	subs	r2, r3, r2
 800045c:	b293      	uxth	r3, r2
 800045e:	3b32      	subs	r3, #50	; 0x32
 8000460:	b29b      	uxth	r3, r3
 8000462:	80bb      	strh	r3, [r7, #4]
		uint16_t rand_angle = rand() % 91;
 8000464:	f004 fa86 	bl	8004974 <rand>
 8000468:	4603      	mov	r3, r0
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <pgm_auto+0xc8>)
 800046c:	fb82 1203 	smull	r1, r2, r2, r3
 8000470:	441a      	add	r2, r3
 8000472:	1191      	asrs	r1, r2, #6
 8000474:	17da      	asrs	r2, r3, #31
 8000476:	1a8a      	subs	r2, r1, r2
 8000478:	215b      	movs	r1, #91	; 0x5b
 800047a:	fb01 f202 	mul.w	r2, r1, r2
 800047e:	1a9a      	subs	r2, r3, r2
 8000480:	4613      	mov	r3, r2
 8000482:	807b      	strh	r3, [r7, #2]

		set_pwm_maindrv(rand_speed, rand_spin, htim1);
 8000484:	4c12      	ldr	r4, [pc, #72]	; (80004d0 <pgm_auto+0xcc>)
 8000486:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800048a:	88fd      	ldrh	r5, [r7, #6]
 800048c:	4668      	mov	r0, sp
 800048e:	f104 0308 	add.w	r3, r4, #8
 8000492:	22ac      	movs	r2, #172	; 0xac
 8000494:	4619      	mov	r1, r3
 8000496:	f004 fa29 	bl	80048ec <memcpy>
 800049a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800049e:	4631      	mov	r1, r6
 80004a0:	4628      	mov	r0, r5
 80004a2:	f000 fcad 	bl	8000e00 <set_pwm_maindrv>
		set_pos_posdrv(rand_angle);
 80004a6:	887b      	ldrh	r3, [r7, #2]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fd6b 	bl	8000f84 <set_pos_posdrv>

		last_rand_tick = HAL_GetTick();
 80004ae:	f001 f895 	bl	80015dc <HAL_GetTick>
 80004b2:	4603      	mov	r3, r0
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <pgm_auto+0xc0>)
 80004b6:	6013      	str	r3, [r2, #0]
	}

	return EXIT_SUCCESS;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000a4 	.word	0x200000a4
 80004c8:	288df0cb 	.word	0x288df0cb
 80004cc:	b40b40b5 	.word	0xb40b40b5
 80004d0:	20000130 	.word	0x20000130

080004d4 <get_adc_values>:

int get_adc_values(uint16_t* adc_result){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++){
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e013      	b.n	800050a <get_adc_values+0x36>
			HAL_ADC_Start(&hadc1);
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <get_adc_values+0x48>)
 80004e4:	f001 f95c 	bl	80017a0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 80004e8:	2101      	movs	r1, #1
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <get_adc_values+0x48>)
 80004ec:	f001 fa06 	bl	80018fc <HAL_ADC_PollForConversion>
			adc_result[i] = HAL_ADC_GetValue(&hadc1);
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <get_adc_values+0x48>)
 80004f2:	f001 fb09 	bl	8001b08 <HAL_ADC_GetValue>
 80004f6:	4601      	mov	r1, r0
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4413      	add	r3, r2
 8000500:	b28a      	uxth	r2, r1
 8000502:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3301      	adds	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b02      	cmp	r3, #2
 800050e:	dde8      	ble.n	80004e2 <get_adc_values+0xe>
		}

	return EXIT_SUCCESS;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000ac 	.word	0x200000ac

08000520 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000528:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000530:	f003 0301 	and.w	r3, r3, #1
 8000534:	2b00      	cmp	r3, #0
 8000536:	d013      	beq.n	8000560 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000538:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000540:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000544:	2b00      	cmp	r3, #0
 8000546:	d00b      	beq.n	8000560 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000548:	e000      	b.n	800054c <ITM_SendChar+0x2c>
    {
      __NOP();
 800054a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800054c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000556:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 ffdb 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f8a3 	bl	80006c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ADC_CR2_REG |= (1<<2);
 800057a:	4b4a      	ldr	r3, [pc, #296]	; (80006a4 <main+0x138>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a49      	ldr	r2, [pc, #292]	; (80006a4 <main+0x138>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6013      	str	r3, [r2, #0]

  while(ADC_CR2_REG & (1<<2)){
 8000586:	bf00      	nop
 8000588:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <main+0x138>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f9      	bne.n	8000588 <main+0x1c>
	  //Wait for ADC calibration finished
  }

  eStop = HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 8000594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000598:	4843      	ldr	r0, [pc, #268]	; (80006a8 <main+0x13c>)
 800059a:	f001 fee7 	bl	800236c <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b42      	ldr	r3, [pc, #264]	; (80006ac <main+0x140>)
 80005a4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 fa8b 	bl	8000ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005aa:	f000 f8d9 	bl	8000760 <MX_ADC1_Init>
  MX_I2C2_Init();
 80005ae:	f000 f935 	bl	800081c <MX_I2C2_Init>
  MX_TIM1_Init();
 80005b2:	f000 f961 	bl	8000878 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b6:	f000 fa0d 	bl	80009d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PWM_PULSE_FINISHED_CB_ID, POS_PulseFinishedCallback);
 80005ba:	4a3d      	ldr	r2, [pc, #244]	; (80006b0 <main+0x144>)
 80005bc:	2115      	movs	r1, #21
 80005be:	483d      	ldr	r0, [pc, #244]	; (80006b4 <main+0x148>)
 80005c0:	f003 fc6a 	bl	8003e98 <HAL_TIM_RegisterCallback>
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ca:	4837      	ldr	r0, [pc, #220]	; (80006a8 <main+0x13c>)
 80005cc:	f001 fee5 	bl	800239a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d6:	4838      	ldr	r0, [pc, #224]	; (80006b8 <main+0x14c>)
 80005d8:	f001 fedf 	bl	800239a <HAL_GPIO_WritePin>

  Set_Led_Output(YELLOW);
 80005dc:	2002      	movs	r0, #2
 80005de:	f000 fb8f 	bl	8000d00 <Set_Led_Output>

  uint8_t pgm_state = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]

  srand(time(NULL));
 80005e6:	2000      	movs	r0, #0
 80005e8:	f004 fa02 	bl	80049f0 <time>
 80005ec:	4602      	mov	r2, r0
 80005ee:	460b      	mov	r3, r1
 80005f0:	4613      	mov	r3, r2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 f990 	bl	8004918 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(eStop) E_Stop_Call();
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <main+0x140>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0x98>
 8000600:	f000 fbd2 	bl	8000da8 <E_Stop_Call>

	if(homingComplete == RESET){
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <main+0x150>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <main+0xaa>
		home_pos_drive();
 800060c:	f000 fd0a 	bl	8001024 <home_pos_drive>
		Set_Led_Output(GREEN);
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fb75 	bl	8000d00 <Set_Led_Output>
	}

	pgm_state = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]

	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 800061a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <main+0x14c>)
 8000620:	f001 fea4 	bl	800236c <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf0c      	ite	eq
 800062a:	2301      	moveq	r3, #1
 800062c:	2300      	movne	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x14c>)
 8000638:	f001 fe98 	bl	800236c <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <main+0xda>
 8000642:	2302      	movs	r3, #2
 8000644:	e000      	b.n	8000648 <main+0xdc>
 8000646:	2300      	movs	r3, #0
 8000648:	4323      	orrs	r3, r4
 800064a:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 800064c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <main+0x14c>)
 8000652:	f001 fe8b 	bl	800236c <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <main+0xf4>
 800065c:	2304      	movs	r3, #4
 800065e:	e000      	b.n	8000662 <main+0xf6>
 8000660:	2300      	movs	r3, #0
 8000662:	4323      	orrs	r3, r4
 8000664:	b25b      	sxtb	r3, r3
	pgm_state =
 8000666:	71fb      	strb	r3, [r7, #7]

	switch(pgm_state){
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d8c4      	bhi.n	80005f8 <main+0x8c>
 800066e:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <main+0x108>)
 8000670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000674:	08000689 	.word	0x08000689
 8000678:	0800068f 	.word	0x0800068f
 800067c:	08000695 	.word	0x08000695
 8000680:	080005f9 	.word	0x080005f9
 8000684:	0800069b 	.word	0x0800069b
	case 0:
		pgm_stop();
 8000688:	f7ff fd60 	bl	800014c <pgm_stop>
		break;
 800068c:	e008      	b.n	80006a0 <main+0x134>
	case 1:
		pgm_manual();
 800068e:	f7ff fd89 	bl	80001a4 <pgm_manual>
		break;
 8000692:	e005      	b.n	80006a0 <main+0x134>
	case 2:
		pgm_auto_speed();
 8000694:	f7ff fe36 	bl	8000304 <pgm_auto_speed>
		break;
 8000698:	e002      	b.n	80006a0 <main+0x134>
	case 4:
		pgm_auto();
 800069a:	f7ff feb3 	bl	8000404 <pgm_auto>
		break;
 800069e:	bf00      	nop
	if(eStop) E_Stop_Call();
 80006a0:	e7aa      	b.n	80005f8 <main+0x8c>
 80006a2:	bf00      	nop
 80006a4:	40012408 	.word	0x40012408
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	20000000 	.word	0x20000000
 80006b0:	08000c69 	.word	0x08000c69
 80006b4:	200001e4 	.word	0x200001e4
 80006b8:	40011000 	.word	0x40011000
 80006bc:	2000029f 	.word	0x2000029f

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	2228      	movs	r2, #40	; 0x28
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f91a 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ffd5 	bl	80026b4 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000710:	f000 fb70 	bl	8000df4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fa42 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800073a:	f000 fb5b 	bl	8000df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800073e:	2302      	movs	r3, #2
 8000740:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fbc3 	bl	8002ed4 <HAL_RCCEx_PeriphCLKConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000754:	f000 fb4e 	bl	8000df4 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_ADC1_Init+0xb4>)
 8000772:	4a29      	ldr	r2, [pc, #164]	; (8000818 <MX_ADC1_Init+0xb8>)
 8000774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_ADC1_Init+0xb4>)
 8000778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_ADC1_Init+0xb4>)
 8000780:	2200      	movs	r2, #0
 8000782:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <MX_ADC1_Init+0xb4>)
 8000786:	2201      	movs	r2, #1
 8000788:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_ADC1_Init+0xb4>)
 800078c:	2201      	movs	r2, #1
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <MX_ADC1_Init+0xb4>)
 8000792:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000796:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_ADC1_Init+0xb4>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_ADC1_Init+0xb4>)
 80007a0:	2203      	movs	r2, #3
 80007a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <MX_ADC1_Init+0xb4>)
 80007a6:	f000 ff23 	bl	80015f0 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 80007b0:	f000 fb20 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007b4:	230a      	movs	r3, #10
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80007bc:	2303      	movs	r3, #3
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4813      	ldr	r0, [pc, #76]	; (8000814 <MX_ADC1_Init+0xb4>)
 80007c6:	f001 f9ab 	bl	8001b20 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80007d0:	f000 fb10 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80007d4:	230b      	movs	r3, #11
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ADC1_Init+0xb4>)
 80007e2:	f001 f99d 	bl	8001b20 <HAL_ADC_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007ec:	f000 fb02 	bl	8000df4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007f0:	230c      	movs	r3, #12
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007f4:	2303      	movs	r3, #3
 80007f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_ADC1_Init+0xb4>)
 80007fe:	f001 f98f 	bl	8001b20 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000808:	f000 faf4 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000ac 	.word	0x200000ac
 8000818:	40012400 	.word	0x40012400

0800081c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C2_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_I2C2_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C2_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2C2_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C2_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2C2_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2C2_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_I2C2_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2C2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2C2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_I2C2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_I2C2_Init+0x50>)
 800085a:	f001 fde7 	bl	800242c <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 fac6 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000dc 	.word	0x200000dc
 8000870:	40005800 	.word	0x40005800
 8000874:	000186a0 	.word	0x000186a0

08000878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b096      	sub	sp, #88	; 0x58
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2220      	movs	r2, #32
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 f829 	bl	8004908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <MX_TIM1_Init+0x154>)
 80008b8:	4a45      	ldr	r2, [pc, #276]	; (80009d0 <MX_TIM1_Init+0x158>)
 80008ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80008bc:	4b43      	ldr	r3, [pc, #268]	; (80009cc <MX_TIM1_Init+0x154>)
 80008be:	220a      	movs	r2, #10
 80008c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b42      	ldr	r3, [pc, #264]	; (80009cc <MX_TIM1_Init+0x154>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 80008c8:	4b40      	ldr	r3, [pc, #256]	; (80009cc <MX_TIM1_Init+0x154>)
 80008ca:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80008ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <MX_TIM1_Init+0x154>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d6:	4b3d      	ldr	r3, [pc, #244]	; (80009cc <MX_TIM1_Init+0x154>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008dc:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <MX_TIM1_Init+0x154>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e2:	483a      	ldr	r0, [pc, #232]	; (80009cc <MX_TIM1_Init+0x154>)
 80008e4:	f002 fc62 	bl	80031ac <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008ee:	f000 fa81 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008fc:	4619      	mov	r1, r3
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_TIM1_Init+0x154>)
 8000900:	f003 f9a8 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800090a:	f000 fa73 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800090e:	482f      	ldr	r0, [pc, #188]	; (80009cc <MX_TIM1_Init+0x154>)
 8000910:	f002 fca8 	bl	8003264 <HAL_TIM_PWM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800091a:	f000 fa6b 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092a:	4619      	mov	r1, r3
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_TIM1_Init+0x154>)
 800092e:	f003 fee9 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000938:	f000 fa5c 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 450;
 8000940:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_TIM1_Init+0x154>)
 8000964:	f003 f8b4 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800096e:	f000 fa41 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	2204      	movs	r2, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM1_Init+0x154>)
 800097c:	f003 f8a8 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000986:	f000 fa35 	bl	8000df4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM1_Init+0x154>)
 80009ae:	f003 ff07 	bl	80047c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80009b8:	f000 fa1c 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM1_Init+0x154>)
 80009be:	f000 fc59 	bl	8001274 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3758      	adds	r7, #88	; 0x58
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000130 	.word	0x20000130
 80009d0:	40012c00 	.word	0x40012c00

080009d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	; 0x38
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14000;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a0e:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a1c:	22fa      	movs	r2, #250	; 0xfa
 8000a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2c:	4823      	ldr	r0, [pc, #140]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a2e:	f002 fbbd 	bl	80031ac <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a38:	f000 f9dc 	bl	8000df4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	4619      	mov	r1, r3
 8000a48:	481c      	ldr	r0, [pc, #112]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a4a:	f003 f903 	bl	8003c54 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a54:	f000 f9ce 	bl	8000df4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a5a:	f002 fc03 	bl	8003264 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a64:	f000 f9c6 	bl	8000df4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a78:	f003 fe44 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a82:	f000 f9b7 	bl	8000df4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000a8a:	237d      	movs	r3, #125	; 0x7d
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000a9e:	f003 f817 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000aa8:	f000 f9a4 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM2_Init+0xe8>)
 8000aae:	f000 fbe1 	bl	8001274 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3738      	adds	r7, #56	; 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001e4 	.word	0x200001e4

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a4f      	ldr	r2, [pc, #316]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a43      	ldr	r2, [pc, #268]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_GPIO_Init+0x158>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8000b22:	483e      	ldr	r0, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000b24:	f001 fc39 	bl	800239a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	483c      	ldr	r0, [pc, #240]	; (8000c20 <MX_GPIO_Init+0x160>)
 8000b30:	f001 fc33 	bl	800239a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POS_DIR_Pin|TDRV_DIR_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000b3a:	483a      	ldr	r0, [pc, #232]	; (8000c24 <MX_GPIO_Init+0x164>)
 8000b3c:	f001 fc2d 	bl	800239a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8000b40:	2310      	movs	r3, #16
 8000b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4832      	ldr	r0, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000b54:	f001 fa86 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8000b58:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482a      	ldr	r0, [pc, #168]	; (8000c1c <MX_GPIO_Init+0x15c>)
 8000b72:	f001 fa77 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 8000b76:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 8000b7a:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4825      	ldr	r0, [pc, #148]	; (8000c20 <MX_GPIO_Init+0x160>)
 8000b8c:	f001 fa6a 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4820      	ldr	r0, [pc, #128]	; (8000c24 <MX_GPIO_Init+0x164>)
 8000ba4:	f001 fa5e 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <MX_GPIO_Init+0x160>)
 8000bc2:	f001 fa4f 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pins : POS_DIR_Pin TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = POS_DIR_Pin|TDRV_DIR_Pin;
 8000bc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_GPIO_Init+0x164>)
 8000be0:	f001 fa40 	bl	8002064 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_STOP_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 8000be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_GPIO_Init+0x168>)
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480a      	ldr	r0, [pc, #40]	; (8000c24 <MX_GPIO_Init+0x164>)
 8000bfa:	f001 fa33 	bl	8002064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2017      	movs	r0, #23
 8000c04:	f001 f9f7 	bl	8001ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c08:	2017      	movs	r0, #23
 8000c0a:	f001 fa10 	bl	800202e <HAL_NVIC_EnableIRQ>

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	10110000 	.word	0x10110000

08000c2c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  /* Implement your write code here. This is
     used by puts and printf for example */
  int i=0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e009      	b.n	8000c56 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	60ba      	str	r2, [r7, #8]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc68 	bl	8000520 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	dbf1      	blt.n	8000c42 <_write+0x16>
  return len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <POS_PulseFinishedCallback>:

void POS_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	if(homingComplete == RESET) return;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <POS_PulseFinishedCallback+0x54>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d01d      	beq.n	8000cb4 <POS_PulseFinishedCallback+0x4c>

	actualPos = actualPos + posDrvDir;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <POS_PulseFinishedCallback+0x58>)
 8000c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <POS_PulseFinishedCallback+0x5c>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <POS_PulseFinishedCallback+0x5c>)
 8000c8a:	801a      	strh	r2, [r3, #0]

	if((actualPos == targetPos) | eStop){
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <POS_PulseFinishedCallback+0x5c>)
 8000c8e:	881a      	ldrh	r2, [r3, #0]
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <POS_PulseFinishedCallback+0x60>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	bf0c      	ite	eq
 8000c98:	2301      	moveq	r3, #1
 8000c9a:	2300      	movne	r3, #0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <POS_PulseFinishedCallback+0x64>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <POS_PulseFinishedCallback+0x4e>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8000caa:	2104      	movs	r1, #4
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <POS_PulseFinishedCallback+0x68>)
 8000cae:	f002 fd35 	bl	800371c <HAL_TIM_PWM_Stop_IT>
 8000cb2:	e000      	b.n	8000cb6 <POS_PulseFinishedCallback+0x4e>
	if(homingComplete == RESET) return;
 8000cb4:	bf00      	nop
	}
}
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000029f 	.word	0x2000029f
 8000cc0:	20000298 	.word	0x20000298
 8000cc4:	2000029a 	.word	0x2000029a
 8000cc8:	2000029c 	.word	0x2000029c
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	200001e4 	.word	0x200001e4

08000cd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == E_STOP_Pin) {
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce4:	d103      	bne.n	8000cee <HAL_GPIO_EXTI_Callback+0x1a>
    eStop = SET;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x28>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8000cec:	e000      	b.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 8000cee:	bf00      	nop
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000

08000d00 <Set_Led_Output>:

int Set_Led_Output(uint8_t led_mask){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_mask & RED);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <Set_Led_Output+0x50>)
 8000d18:	f001 fb3f 	bl	800239a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, led_mask & YELLOW);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <Set_Led_Output+0x50>)
 8000d2c:	f001 fb35 	bl	800239a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_mask & GREEN);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <Set_Led_Output+0x50>)
 8000d40:	f001 fb2b 	bl	800239a <HAL_GPIO_WritePin>

	return EXIT_SUCCESS;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40010800 	.word	0x40010800

08000d54 <Toggle_Led_Output>:

int Toggle_Led_Output(uint8_t led_mask){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	if(led_mask & RED) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <Toggle_Led_Output+0x1c>
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <Toggle_Led_Output+0x50>)
 8000d6c:	f001 fb2d 	bl	80023ca <HAL_GPIO_TogglePin>
	if(led_mask & YELLOW)HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d004      	beq.n	8000d84 <Toggle_Led_Output+0x30>
 8000d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <Toggle_Led_Output+0x50>)
 8000d80:	f001 fb23 	bl	80023ca <HAL_GPIO_TogglePin>
	if(led_mask & GREEN)HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d004      	beq.n	8000d98 <Toggle_Led_Output+0x44>
 8000d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d92:	4804      	ldr	r0, [pc, #16]	; (8000da4 <Toggle_Led_Output+0x50>)
 8000d94:	f001 fb19 	bl	80023ca <HAL_GPIO_TogglePin>

	return EXIT_SUCCESS;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010800 	.word	0x40010800

08000da8 <E_Stop_Call>:

int E_Stop_Call(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

	Set_Led_Output(RED);
 8000dac:	2004      	movs	r0, #4
 8000dae:	f7ff ffa7 	bl	8000d00 <Set_Led_Output>
	homingComplete = RESET;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <E_Stop_Call+0x40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

	while(eStop){
 8000db8:	e008      	b.n	8000dcc <E_Stop_Call+0x24>
			eStop = HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 8000dba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <E_Stop_Call+0x44>)
 8000dc0:	f001 fad4 	bl	800236c <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <E_Stop_Call+0x48>)
 8000dca:	701a      	strb	r2, [r3, #0]
	while(eStop){
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <E_Stop_Call+0x48>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f2      	bne.n	8000dba <E_Stop_Call+0x12>
		}

	eStop = RESET;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <E_Stop_Call+0x48>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
	Set_Led_Output(YELLOW);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f7ff ff90 	bl	8000d00 <Set_Led_Output>

	return EXIT_SUCCESS;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000029f 	.word	0x2000029f
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	20000000 	.word	0x20000000

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <set_pwm_maindrv>:
 * 			spin_percent: spin from -50 to +50%
 *
 * */


int set_pwm_maindrv(uint16_t speed_percent, int16_t spin_percent, TIM_HandleTypeDef htim){
 8000e00:	b082      	sub	sp, #8
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b08a      	sub	sp, #40	; 0x28
 8000e06:	af02      	add	r7, sp, #8
 8000e08:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000e0c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000e10:	4603      	mov	r3, r0
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	460b      	mov	r3, r1
 8000e16:	80bb      	strh	r3, [r7, #4]

	/*Calculate the range from 10 to 90 percent and the offset
	 * to 10 percent of the counter value therefore the init values
	 * of htim1 are used.*/

	uint32_t speed_range = htim.Init.Period*(MAIN_DRV_MAX_DUTY - MAIN_DRV_MIN_DUTY)/100;
 8000e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <set_pwm_maindrv+0xa4>)
 8000e26:	fba3 2302 	umull	r2, r3, r3, r2
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	61fb      	str	r3, [r7, #28]
	uint32_t speed_offset = htim.Init.Period*MAIN_DRV_MIN_DUTY/100;
 8000e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <set_pwm_maindrv+0xa4>)
 8000e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	61bb      	str	r3, [r7, #24]
	uint32_t speed_max = speed_offset + speed_range;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	4413      	add	r3, r2
 8000e4a:	617b      	str	r3, [r7, #20]
	uint32_t speed_absolute = speed_offset+(speed_range*speed_percent/100);
 8000e4c:	88fb      	ldrh	r3, [r7, #6]
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <set_pwm_maindrv+0xa4>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4413      	add	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]

	uint32_t speed_top = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
	uint32_t speed_bottom = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]

	calc_drv_dutycycle(speed_offset, speed_max, speed_absolute, spin_percent, &speed_top, &speed_bottom);
 8000e6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	6979      	ldr	r1, [r7, #20]
 8000e80:	69b8      	ldr	r0, [r7, #24]
 8000e82:	f000 f813 	bl	8000eac <calc_drv_dutycycle>

	TIM1->CCR1 = speed_top;
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <set_pwm_maindrv+0xa8>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_bottom;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <set_pwm_maindrv+0xa8>)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	6393      	str	r3, [r2, #56]	; 0x38

	return EXIT_SUCCESS;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e9e:	b002      	add	sp, #8
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	51eb851f 	.word	0x51eb851f
 8000ea8:	40012c00 	.word	0x40012c00

08000eac <calc_drv_dutycycle>:
		uint32_t max_speed,
		uint32_t abs_speed,
		int16_t spin_percent,
		uint32_t* top_drv,
		uint32_t* bottom_drv
		){
 8000eac:	b480      	push	{r7}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	807b      	strh	r3, [r7, #2]

	uint32_t speed_dif = (max_speed-min_speed)*abs(spin_percent)/100;
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	bfb8      	it	lt
 8000ec8:	4252      	neglt	r2, r2
 8000eca:	b292      	uxth	r2, r2
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <calc_drv_dutycycle+0xd4>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	61fb      	str	r3, [r7, #28]
	uint32_t top_margin = max_speed - abs_speed;
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	61bb      	str	r3, [r7, #24]
	uint32_t bottom_margin = abs_speed - min_speed;
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]

	uint32_t* faster_drv;
	uint32_t* slower_drv;

	(spin_percent > 0) ? (faster_drv = top_drv) : (faster_drv = bottom_drv);
 8000eea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	dd02      	ble.n	8000ef8 <calc_drv_dutycycle+0x4c>
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef6:	e001      	b.n	8000efc <calc_drv_dutycycle+0x50>
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
	(spin_percent < 0) ? (slower_drv = top_drv) : (slower_drv = bottom_drv);
 8000efc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da02      	bge.n	8000f0a <calc_drv_dutycycle+0x5e>
 8000f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f06:	623b      	str	r3, [r7, #32]
 8000f08:	e001      	b.n	8000f0e <calc_drv_dutycycle+0x62>
 8000f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0c:	623b      	str	r3, [r7, #32]

	if(speed_dif == 0){
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d108      	bne.n	8000f26 <calc_drv_dutycycle+0x7a>
		*top_drv = *bottom_drv = abs_speed;
 8000f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f20:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e026      	b.n	8000f74 <calc_drv_dutycycle+0xc8>
	}

	if(top_margin < speed_dif){
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d209      	bcs.n	8000f42 <calc_drv_dutycycle+0x96>
		*faster_drv = max_speed;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	601a      	str	r2, [r3, #0]
		*slower_drv = max_speed - 2*speed_dif;
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	6a3b      	ldr	r3, [r7, #32]
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e017      	b.n	8000f72 <calc_drv_dutycycle+0xc6>
	}
	else if(bottom_margin < speed_dif){
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d209      	bcs.n	8000f5e <calc_drv_dutycycle+0xb2>
		*slower_drv = min_speed;
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	601a      	str	r2, [r3, #0]
		*faster_drv = min_speed + 2*speed_dif;
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005a      	lsls	r2, r3, #1
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	441a      	add	r2, r3
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e009      	b.n	8000f72 <calc_drv_dutycycle+0xc6>
	}
	else {
		*faster_drv = abs_speed + speed_dif;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	441a      	add	r2, r3
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	601a      	str	r2, [r3, #0]
		*slower_drv = abs_speed - speed_dif;
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	1ad2      	subs	r2, r2, r3
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	601a      	str	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 8000f72:	2300      	movs	r3, #0

}
 8000f74:	4618      	mov	r0, r3
 8000f76:	372c      	adds	r7, #44	; 0x2c
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	51eb851f 	.word	0x51eb851f

08000f84 <set_pos_posdrv>:
extern uint16_t targetPos;
extern int8_t posDrvDir;
extern TIM_HandleTypeDef htim2;
extern FlagStatus homingComplete;

int set_pos_posdrv(uint16_t angle_degree){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]

	/*Set PWM frequency to fast for positioning*/
	TIM2->ARR = POS_DRV_PERIOD(POS_DRV_FAST_FREQ, htim2.Init.Prescaler, 7000000);
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <set_pos_posdrv+0x88>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	491e      	ldr	r1, [pc, #120]	; (8001010 <set_pos_posdrv+0x8c>)
 8000f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f9c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR2 = (TIM2->ARR)/2;
 8000f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa8:	085b      	lsrs	r3, r3, #1
 8000faa:	6393      	str	r3, [r2, #56]	; 0x38

	targetPos = angle_degree*STEPS_PER_DEGREE;
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <set_pos_posdrv+0x90>)
 8000fba:	801a      	strh	r2, [r3, #0]
	if(targetPos == actualPos){
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <set_pos_posdrv+0x90>)
 8000fbe:	881a      	ldrh	r2, [r3, #0]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <set_pos_posdrv+0x94>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d101      	bne.n	8000fcc <set_pos_posdrv+0x48>
		return EXIT_SUCCESS;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e01b      	b.n	8001004 <set_pos_posdrv+0x80>
	}
	else if(targetPos < actualPos) {
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <set_pos_posdrv+0x90>)
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <set_pos_posdrv+0x94>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d208      	bcs.n	8000fea <set_pos_posdrv+0x66>
		HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <set_pos_posdrv+0x98>)
 8000fde:	f001 f9dc 	bl	800239a <HAL_GPIO_WritePin>
		posDrvDir = -1;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <set_pos_posdrv+0x9c>)
 8000fe4:	22ff      	movs	r2, #255	; 0xff
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e007      	b.n	8000ffa <set_pos_posdrv+0x76>
	}
	else {
		HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <set_pos_posdrv+0x98>)
 8000ff0:	f001 f9d3 	bl	800239a <HAL_GPIO_WritePin>
		posDrvDir = 1;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <set_pos_posdrv+0x9c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000ffa:	2104      	movs	r1, #4
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <set_pos_posdrv+0x88>)
 8000ffe:	f002 fa9d 	bl	800353c <HAL_TIM_PWM_Start_IT>

	return EXIT_SUCCESS;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001e4 	.word	0x200001e4
 8001010:	000aae60 	.word	0x000aae60
 8001014:	2000029c 	.word	0x2000029c
 8001018:	2000029a 	.word	0x2000029a
 800101c:	40010c00 	.word	0x40010c00
 8001020:	20000298 	.word	0x20000298

08001024 <home_pos_drive>:

int home_pos_drive(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

	/*Set PWM frequency to low for homing*/
	TIM2->ARR = POS_DRV_PERIOD(POS_DRV_SLOW_FREQ, htim2.Init.Prescaler, 7000000);
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <home_pos_drive+0x6c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001030:	4918      	ldr	r1, [pc, #96]	; (8001094 <home_pos_drive+0x70>)
 8001032:	fbb1 f3f3 	udiv	r3, r1, r3
 8001036:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR2 = (TIM2->ARR)/2;
 8001038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <home_pos_drive+0x74>)
 800104c:	f001 f9a5 	bl	800239a <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin (SW_1_GPIO_Port, SW_1_Pin)){
 8001050:	2110      	movs	r1, #16
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <home_pos_drive+0x78>)
 8001054:	f001 f98a 	bl	800236c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <home_pos_drive+0x5a>

		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800105e:	2104      	movs	r1, #4
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <home_pos_drive+0x6c>)
 8001062:	f002 fa6b 	bl	800353c <HAL_TIM_PWM_Start_IT>

		while(HAL_GPIO_ReadPin (SW_1_GPIO_Port, SW_1_Pin)){
 8001066:	bf00      	nop
 8001068:	2110      	movs	r1, #16
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <home_pos_drive+0x78>)
 800106c:	f001 f97e 	bl	800236c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f8      	bne.n	8001068 <home_pos_drive+0x44>
			/*Wait until homingpos is reached */
			/*TODO Maybe add some safety stuff here if switch fails*/
		}

		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8001076:	2104      	movs	r1, #4
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <home_pos_drive+0x6c>)
 800107a:	f002 fb4f 	bl	800371c <HAL_TIM_PWM_Stop_IT>
	}
	actualPos = 0;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <home_pos_drive+0x7c>)
 8001080:	2200      	movs	r2, #0
 8001082:	801a      	strh	r2, [r3, #0]
	homingComplete = SET;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <home_pos_drive+0x80>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200001e4 	.word	0x200001e4
 8001094:	003567e0 	.word	0x003567e0
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40010800 	.word	0x40010800
 80010a0:	2000029a 	.word	0x2000029a
 80010a4:	2000029f 	.word	0x2000029f

080010a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_ADC_MspInit+0x6c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d121      	bne.n	8001170 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_ADC_MspInit+0x70>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <HAL_ADC_MspInit+0x70>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_ADC_MspInit+0x70>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_ADC_MspInit+0x70>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a0c      	ldr	r2, [pc, #48]	; (800117c <HAL_ADC_MspInit+0x70>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_ADC_MspInit+0x70>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 800115c:	2307      	movs	r3, #7
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001160:	2303      	movs	r3, #3
 8001162:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_ADC_MspInit+0x74>)
 800116c:	f000 ff7a 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012400 	.word	0x40012400
 800117c:	40021000 	.word	0x40021000
 8001180:	40011000 	.word	0x40011000

08001184 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_I2C_MspInit+0x74>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d124      	bne.n	80011ee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c2:	2312      	movs	r3, #18
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <HAL_I2C_MspInit+0x7c>)
 80011d2:	f000 ff47 	bl	8002064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_I2C_MspInit+0x78>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40005800 	.word	0x40005800
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010c00 	.word	0x40010c00

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_TIM_Base_MspInit+0x68>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10c      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 800121c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800122e:	e018      	b.n	8001262 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a0c      	ldr	r2, [pc, #48]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_Base_MspInit+0x6c>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fecd 	bl	8001ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fee6 	bl	800202e <HAL_NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012c00 	.word	0x40012c00
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_TIM_MspPostInit+0x98>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d119      	bne.n	80012c8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 80012ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	4814      	ldr	r0, [pc, #80]	; (8001314 <HAL_TIM_MspPostInit+0xa0>)
 80012c2:	f000 fecf 	bl	8002064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012c6:	e01c      	b.n	8001302 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d117      	bne.n	8001302 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_TIM_MspPostInit+0x9c>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <HAL_TIM_MspPostInit+0xa0>)
 80012fe:	f000 feb1 	bl	8002064 <HAL_GPIO_Init>
}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40010800 	.word	0x40010800

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f000 f92b 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}

08001366 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_STOP_Pin);
 800136a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800136e:	f001 f845 	bl	80023fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM2_IRQHandler+0x10>)
 800137e:	f002 fa7f 	bl	8003880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001e4 	.word	0x200001e4

0800138c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return 1;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <_kill>:

int _kill(int pid, int sig)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013a4:	f003 fa78 	bl	8004898 <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2216      	movs	r2, #22
 80013ac:	601a      	str	r2, [r3, #0]
  return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_exit>:

void _exit (int status)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013c2:	f04f 31ff 	mov.w	r1, #4294967295
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffe7 	bl	800139a <_kill>
  while (1) {}    /* Make sure we hang here */
 80013cc:	e7fe      	b.n	80013cc <_exit+0x12>

080013ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e00a      	b.n	80013f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013e0:	f3af 8000 	nop.w
 80013e4:	4601      	mov	r1, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	b2ca      	uxtb	r2, r1
 80013ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dbf0      	blt.n	80013e0 <_read+0x12>
  }

  return len;
 80013fe:	687b      	ldr	r3, [r7, #4]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	605a      	str	r2, [r3, #4]
  return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <_isatty>:

int _isatty(int file)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f003 f9fe 	bl	8004898 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20005000 	.word	0x20005000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	200002a0 	.word	0x200002a0
 80014d0:	200002b8 	.word	0x200002b8

080014d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff fff8 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a09      	ldr	r2, [pc, #36]	; (8001520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014fc:	4c09      	ldr	r4, [pc, #36]	; (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f003 f9cb 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff f82d 	bl	800056c <main>
  bx lr
 8001512:	4770      	bx	lr
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800151c:	08005c00 	.word	0x08005c00
  ldr r2, =_sbss
 8001520:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001524:	200002b8 	.word	0x200002b8

08001528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <ADC1_2_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 fd4f 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fdae 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fd67 	bl	800204a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 fd2f 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000004 	.word	0x20000004
 80015b0:	2000000c 	.word	0x2000000c
 80015b4:	20000008 	.word	0x20000008

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	; (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	200002a4 	.word	0x200002a4

080015dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	200002a4 	.word	0x200002a4

080015f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0be      	b.n	8001790 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fd6c 	bl	800110c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fbc5 	bl	8001dc4 <ADC_ConversionStop_Disable>
 800163a:	4603      	mov	r3, r0
 800163c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8099 	bne.w	800177e <HAL_ADC_Init+0x18e>
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f040 8095 	bne.w	800177e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	f043 0202 	orr.w	r2, r3, #2
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001670:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b1b      	ldrb	r3, [r3, #12]
 8001676:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001678:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	4313      	orrs	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001688:	d003      	beq.n	8001692 <HAL_ADC_Init+0xa2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <HAL_ADC_Init+0xa8>
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	e000      	b.n	800169a <HAL_ADC_Init+0xaa>
 8001698:	2300      	movs	r3, #0
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7d1b      	ldrb	r3, [r3, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d119      	bne.n	80016dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7b1b      	ldrb	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	035a      	lsls	r2, r3, #13
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	e00b      	b.n	80016dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f043 0220 	orr.w	r2, r3, #32
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_ADC_Init+0x1a8>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800170c:	d003      	beq.n	8001716 <HAL_ADC_Init+0x126>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d104      	bne.n	8001720 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	3b01      	subs	r3, #1
 800171c:	051b      	lsls	r3, r3, #20
 800171e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	430a      	orrs	r2, r1
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_Init+0x1ac>)
 800173c:	4013      	ands	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	d10b      	bne.n	800175c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800175a:	e018      	b.n	800178e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f023 0312 	bic.w	r3, r3, #18
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	f043 0210 	orr.w	r2, r3, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800178e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	ffe1f7fd 	.word	0xffe1f7fd
 800179c:	ff1f0efe 	.word	0xff1f0efe

080017a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e098      	b.n	80018ec <HAL_ADC_Start+0x14c>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 faa4 	bl	8001d10 <ADC_Enable>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8087 	bne.w	80018e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a41      	ldr	r2, [pc, #260]	; (80018f4 <HAL_ADC_Start+0x154>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_Start+0x5e>
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_ADC_Start+0x158>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d115      	bne.n	800182a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	2b00      	cmp	r3, #0
 8001816:	d026      	beq.n	8001866 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001820:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001828:	e01d      	b.n	8001866 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_ADC_Start+0x158>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_ADC_Start+0xaa>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_ADC_Start+0x154>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10d      	bne.n	8001866 <HAL_ADC_Start+0xc6>
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_ADC_Start+0x158>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	f023 0206 	bic.w	r2, r3, #6
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
 800187e:	e002      	b.n	8001886 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f06f 0202 	mvn.w	r2, #2
 8001896:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018a6:	d113      	bne.n	80018d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_ADC_Start+0x154>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d105      	bne.n	80018be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_ADC_Start+0x158>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d108      	bne.n	80018d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e00c      	b.n	80018ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	e003      	b.n	80018ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40012800 	.word	0x40012800
 80018f8:	40012400 	.word	0x40012400

080018fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001912:	f7ff fe63 	bl	80015dc <HAL_GetTick>
 8001916:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	f043 0220 	orr.w	r2, r3, #32
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0d3      	b.n	8001ae6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d131      	bne.n	80019b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	d12a      	bne.n	80019b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800195a:	e021      	b.n	80019a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001962:	d01d      	beq.n	80019a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ADC_PollForConversion+0x7e>
 800196a:	f7ff fe37 	bl	80015dc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d212      	bcs.n	80019a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10b      	bne.n	80019a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f043 0204 	orr.w	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0a2      	b.n	8001ae6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0d6      	beq.n	800195c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ae:	e070      	b.n	8001a92 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <HAL_ADC_PollForConversion+0x1f4>)
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	2002      	movs	r0, #2
 80019b6:	f001 fb43 	bl	8003040 <HAL_RCCEx_GetPeriphCLKFreq>
 80019ba:	4603      	mov	r3, r0
 80019bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6919      	ldr	r1, [r3, #16]
 80019c6:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_ADC_PollForConversion+0x1f8>)
 80019c8:	400b      	ands	r3, r1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x104>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68d9      	ldr	r1, [r3, #12]
 80019d4:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <HAL_ADC_PollForConversion+0x1fc>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <HAL_ADC_PollForConversion+0x104>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6919      	ldr	r1, [r3, #16]
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_ADC_PollForConversion+0x200>)
 80019e4:	400b      	ands	r3, r1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_ADC_PollForConversion+0x100>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_ADC_PollForConversion+0x204>)
 80019f2:	400b      	ands	r3, r1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_ADC_PollForConversion+0x100>
 80019f8:	2314      	movs	r3, #20
 80019fa:	e020      	b.n	8001a3e <HAL_ADC_PollForConversion+0x142>
 80019fc:	2329      	movs	r3, #41	; 0x29
 80019fe:	e01e      	b.n	8001a3e <HAL_ADC_PollForConversion+0x142>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_ADC_PollForConversion+0x200>)
 8001a08:	400b      	ands	r3, r1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_ADC_PollForConversion+0x120>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68d9      	ldr	r1, [r3, #12]
 8001a14:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <HAL_ADC_PollForConversion+0x204>)
 8001a16:	400b      	ands	r3, r1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00d      	beq.n	8001a38 <HAL_ADC_PollForConversion+0x13c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_ADC_PollForConversion+0x208>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x140>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_ADC_PollForConversion+0x208>)
 8001a32:	400b      	ands	r3, r1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_PollForConversion+0x140>
 8001a38:	2354      	movs	r3, #84	; 0x54
 8001a3a:	e000      	b.n	8001a3e <HAL_ADC_PollForConversion+0x142>
 8001a3c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a44:	e021      	b.n	8001a8a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d01a      	beq.n	8001a84 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_ADC_PollForConversion+0x168>
 8001a54:	f7ff fdc2 	bl	80015dc <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d20f      	bcs.n	8001a84 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d90b      	bls.n	8001a84 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e030      	b.n	8001ae6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d8d9      	bhi.n	8001a46 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f06f 0212 	mvn.w	r2, #18
 8001a9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ab2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ab6:	d115      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000004 	.word	0x20000004
 8001af4:	24924924 	.word	0x24924924
 8001af8:	00924924 	.word	0x00924924
 8001afc:	12492492 	.word	0x12492492
 8001b00:	00492492 	.word	0x00492492
 8001b04:	00249249 	.word	0x00249249

08001b08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x20>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0dc      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1da>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d81c      	bhi.n	8001b8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b05      	subs	r3, #5
 8001b62:	221f      	movs	r2, #31
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b05      	subs	r3, #5
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
 8001b88:	e03c      	b.n	8001c04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d81c      	bhi.n	8001bcc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b23      	subs	r3, #35	; 0x23
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4019      	ands	r1, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	3b23      	subs	r3, #35	; 0x23
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8001bca:	e01b      	b.n	8001c04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b41      	subs	r3, #65	; 0x41
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b41      	subs	r3, #65	; 0x41
 8001bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	d91c      	bls.n	8001c46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68d9      	ldr	r1, [r3, #12]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b1e      	subs	r3, #30
 8001c1e:	2207      	movs	r2, #7
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4019      	ands	r1, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	6898      	ldr	r0, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	3b1e      	subs	r3, #30
 8001c38:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	e019      	b.n	8001c7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6919      	ldr	r1, [r3, #16]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d003      	beq.n	8001c8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c86:	2b11      	cmp	r3, #17
 8001c88:	d132      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d125      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d126      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	0c9a      	lsrs	r2, r3, #18
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd0:	e002      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f9      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x1b2>
 8001cde:	e007      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f043 0220 	orr.w	r2, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40012400 	.word	0x40012400
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d040      	beq.n	8001db0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <ADC_Enable+0xac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <ADC_Enable+0xb0>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d4c:	e002      	b.n	8001d54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d5a:	f7ff fc3f 	bl	80015dc <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d60:	e01f      	b.n	8001da2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d62:	f7ff fc3b 	bl	80015dc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d918      	bls.n	8001da2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d011      	beq.n	8001da2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f043 0210 	orr.w	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f043 0201 	orr.w	r2, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e007      	b.n	8001db2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d1d8      	bne.n	8001d62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	431bde83 	.word	0x431bde83

08001dc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d12e      	bne.n	8001e3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dee:	f7ff fbf5 	bl	80015dc <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df4:	e01b      	b.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001df6:	f7ff fbf1 	bl	80015dc <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d914      	bls.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10d      	bne.n	8001e2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e007      	b.n	8001e3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d0dc      	beq.n	8001df6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <__NVIC_SetPriorityGrouping>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4906      	ldr	r1, [pc, #24]	; (8001ee0 <__NVIC_EnableIRQ+0x34>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Config>:
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ff90 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff2d 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff42 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff90 	bl	8001f38 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff35 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b082      	sub	sp, #8
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ffa2 	bl	8001f9c <SysTick_Config>
 8002058:	4603      	mov	r3, r0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002076:	e169      	b.n	800234c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002078:	2201      	movs	r2, #1
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8158 	bne.w	8002346 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a9a      	ldr	r2, [pc, #616]	; (8002304 <HAL_GPIO_Init+0x2a0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d05e      	beq.n	800215e <HAL_GPIO_Init+0xfa>
 80020a0:	4a98      	ldr	r2, [pc, #608]	; (8002304 <HAL_GPIO_Init+0x2a0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d875      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020a6:	4a98      	ldr	r2, [pc, #608]	; (8002308 <HAL_GPIO_Init+0x2a4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d058      	beq.n	800215e <HAL_GPIO_Init+0xfa>
 80020ac:	4a96      	ldr	r2, [pc, #600]	; (8002308 <HAL_GPIO_Init+0x2a4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d86f      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020b2:	4a96      	ldr	r2, [pc, #600]	; (800230c <HAL_GPIO_Init+0x2a8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d052      	beq.n	800215e <HAL_GPIO_Init+0xfa>
 80020b8:	4a94      	ldr	r2, [pc, #592]	; (800230c <HAL_GPIO_Init+0x2a8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d869      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020be:	4a94      	ldr	r2, [pc, #592]	; (8002310 <HAL_GPIO_Init+0x2ac>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d04c      	beq.n	800215e <HAL_GPIO_Init+0xfa>
 80020c4:	4a92      	ldr	r2, [pc, #584]	; (8002310 <HAL_GPIO_Init+0x2ac>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d863      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020ca:	4a92      	ldr	r2, [pc, #584]	; (8002314 <HAL_GPIO_Init+0x2b0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d046      	beq.n	800215e <HAL_GPIO_Init+0xfa>
 80020d0:	4a90      	ldr	r2, [pc, #576]	; (8002314 <HAL_GPIO_Init+0x2b0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d85d      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020d6:	2b12      	cmp	r3, #18
 80020d8:	d82a      	bhi.n	8002130 <HAL_GPIO_Init+0xcc>
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d859      	bhi.n	8002192 <HAL_GPIO_Init+0x12e>
 80020de:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <HAL_GPIO_Init+0x80>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	0800215f 	.word	0x0800215f
 80020e8:	08002139 	.word	0x08002139
 80020ec:	0800214b 	.word	0x0800214b
 80020f0:	0800218d 	.word	0x0800218d
 80020f4:	08002193 	.word	0x08002193
 80020f8:	08002193 	.word	0x08002193
 80020fc:	08002193 	.word	0x08002193
 8002100:	08002193 	.word	0x08002193
 8002104:	08002193 	.word	0x08002193
 8002108:	08002193 	.word	0x08002193
 800210c:	08002193 	.word	0x08002193
 8002110:	08002193 	.word	0x08002193
 8002114:	08002193 	.word	0x08002193
 8002118:	08002193 	.word	0x08002193
 800211c:	08002193 	.word	0x08002193
 8002120:	08002193 	.word	0x08002193
 8002124:	08002193 	.word	0x08002193
 8002128:	08002141 	.word	0x08002141
 800212c:	08002155 	.word	0x08002155
 8002130:	4a79      	ldr	r2, [pc, #484]	; (8002318 <HAL_GPIO_Init+0x2b4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002136:	e02c      	b.n	8002192 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e029      	b.n	8002194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	3304      	adds	r3, #4
 8002146:	623b      	str	r3, [r7, #32]
          break;
 8002148:	e024      	b.n	8002194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	3308      	adds	r3, #8
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e01f      	b.n	8002194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	330c      	adds	r3, #12
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e01a      	b.n	8002194 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002166:	2304      	movs	r3, #4
 8002168:	623b      	str	r3, [r7, #32]
          break;
 800216a:	e013      	b.n	8002194 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d105      	bne.n	8002180 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002174:	2308      	movs	r3, #8
 8002176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	611a      	str	r2, [r3, #16]
          break;
 800217e:	e009      	b.n	8002194 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002180:	2308      	movs	r3, #8
 8002182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	615a      	str	r2, [r3, #20]
          break;
 800218a:	e003      	b.n	8002194 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
          break;
 8002190:	e000      	b.n	8002194 <HAL_GPIO_Init+0x130>
          break;
 8002192:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2bff      	cmp	r3, #255	; 0xff
 8002198:	d801      	bhi.n	800219e <HAL_GPIO_Init+0x13a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	e001      	b.n	80021a2 <HAL_GPIO_Init+0x13e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2bff      	cmp	r3, #255	; 0xff
 80021a8:	d802      	bhi.n	80021b0 <HAL_GPIO_Init+0x14c>
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x152>
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	3b08      	subs	r3, #8
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	210f      	movs	r1, #15
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	6a39      	ldr	r1, [r7, #32]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80b1 	beq.w	8002346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021e4:	4b4d      	ldr	r3, [pc, #308]	; (800231c <HAL_GPIO_Init+0x2b8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a4c      	ldr	r2, [pc, #304]	; (800231c <HAL_GPIO_Init+0x2b8>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_GPIO_Init+0x2b8>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021fc:	4a48      	ldr	r2, [pc, #288]	; (8002320 <HAL_GPIO_Init+0x2bc>)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a40      	ldr	r2, [pc, #256]	; (8002324 <HAL_GPIO_Init+0x2c0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_GPIO_Init+0x1ec>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3f      	ldr	r2, [pc, #252]	; (8002328 <HAL_GPIO_Init+0x2c4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00d      	beq.n	800224c <HAL_GPIO_Init+0x1e8>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3e      	ldr	r2, [pc, #248]	; (800232c <HAL_GPIO_Init+0x2c8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <HAL_GPIO_Init+0x1e4>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3d      	ldr	r2, [pc, #244]	; (8002330 <HAL_GPIO_Init+0x2cc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_GPIO_Init+0x1e0>
 8002240:	2303      	movs	r3, #3
 8002242:	e006      	b.n	8002252 <HAL_GPIO_Init+0x1ee>
 8002244:	2304      	movs	r3, #4
 8002246:	e004      	b.n	8002252 <HAL_GPIO_Init+0x1ee>
 8002248:	2302      	movs	r3, #2
 800224a:	e002      	b.n	8002252 <HAL_GPIO_Init+0x1ee>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <HAL_GPIO_Init+0x1ee>
 8002250:	2300      	movs	r3, #0
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	f002 0203 	and.w	r2, r2, #3
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	4093      	lsls	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002262:	492f      	ldr	r1, [pc, #188]	; (8002320 <HAL_GPIO_Init+0x2bc>)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	492c      	ldr	r1, [pc, #176]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	43db      	mvns	r3, r3
 8002292:	4928      	ldr	r1, [pc, #160]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 8002294:	4013      	ands	r3, r2
 8002296:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4922      	ldr	r1, [pc, #136]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	491e      	ldr	r1, [pc, #120]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	4918      	ldr	r1, [pc, #96]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4914      	ldr	r1, [pc, #80]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d021      	beq.n	8002338 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_GPIO_Init+0x2d0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e021      	b.n	8002346 <HAL_GPIO_Init+0x2e2>
 8002302:	bf00      	nop
 8002304:	10320000 	.word	0x10320000
 8002308:	10310000 	.word	0x10310000
 800230c:	10220000 	.word	0x10220000
 8002310:	10210000 	.word	0x10210000
 8002314:	10120000 	.word	0x10120000
 8002318:	10110000 	.word	0x10110000
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	40010800 	.word	0x40010800
 8002328:	40010c00 	.word	0x40010c00
 800232c:	40011000 	.word	0x40011000
 8002330:	40011400 	.word	0x40011400
 8002334:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_GPIO_Init+0x304>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	43db      	mvns	r3, r3
 8002340:	4909      	ldr	r1, [pc, #36]	; (8002368 <HAL_GPIO_Init+0x304>)
 8002342:	4013      	ands	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	3301      	adds	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f ae8e 	bne.w	8002078 <HAL_GPIO_Init+0x14>
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	372c      	adds	r7, #44	; 0x2c
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e001      	b.n	800238e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
 80023a6:	4613      	mov	r3, r2
 80023a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023aa:	787b      	ldrb	r3, [r7, #1]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b0:	887a      	ldrh	r2, [r7, #2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023b6:	e003      	b.n	80023c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	041a      	lsls	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	611a      	str	r2, [r3, #16]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023dc:	887a      	ldrh	r2, [r7, #2]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4013      	ands	r3, r2
 80023e2:	041a      	lsls	r2, r3, #16
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	400b      	ands	r3, r1
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	611a      	str	r2, [r3, #16]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fc5a 	bl	8000cd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e12b      	b.n	8002696 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fe96 	bl	8001184 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2224      	movs	r2, #36	; 0x24
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002490:	f000 fcda 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a81      	ldr	r2, [pc, #516]	; (80026a0 <HAL_I2C_Init+0x274>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d807      	bhi.n	80024b0 <HAL_I2C_Init+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_I2C_Init+0x278>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	e006      	b.n	80024be <HAL_I2C_Init+0x92>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a7d      	ldr	r2, [pc, #500]	; (80026a8 <HAL_I2C_Init+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0e7      	b.n	8002696 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a78      	ldr	r2, [pc, #480]	; (80026ac <HAL_I2C_Init+0x280>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a6a      	ldr	r2, [pc, #424]	; (80026a0 <HAL_I2C_Init+0x274>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d802      	bhi.n	8002500 <HAL_I2C_Init+0xd4>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	e009      	b.n	8002514 <HAL_I2C_Init+0xe8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_I2C_Init+0x284>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002526:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	495c      	ldr	r1, [pc, #368]	; (80026a0 <HAL_I2C_Init+0x274>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d819      	bhi.n	8002568 <HAL_I2C_Init+0x13c>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1e59      	subs	r1, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002542:	1c59      	adds	r1, r3, #1
 8002544:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002548:	400b      	ands	r3, r1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_I2C_Init+0x138>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e59      	subs	r1, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fbb1 f3f3 	udiv	r3, r1, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	e051      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e04f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <HAL_I2C_Init+0x168>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e012      	b.n	80025ba <HAL_I2C_Init+0x18e>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	0099      	lsls	r1, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Init+0x196>
 80025be:	2301      	movs	r3, #1
 80025c0:	e022      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10e      	bne.n	80025e8 <HAL_I2C_Init+0x1bc>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e58      	subs	r0, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	440b      	add	r3, r1
 80025d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Init+0x1dc>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6911      	ldr	r1, [r2, #16]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	000186a0 	.word	0x000186a0
 80026a4:	001e847f 	.word	0x001e847f
 80026a8:	003d08ff 	.word	0x003d08ff
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	10624dd3 	.word	0x10624dd3

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e272      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8087 	beq.w	80027e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d4:	4b92      	ldr	r3, [pc, #584]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d00c      	beq.n	80026fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026e0:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d112      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
 80026ec:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f8:	d10b      	bne.n	8002712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d06c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x12c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d168      	bne.n	80027e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e24c      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x76>
 800271c:	4b80      	ldr	r3, [pc, #512]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a7f      	ldr	r2, [pc, #508]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e02e      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b7b      	ldr	r3, [pc, #492]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7a      	ldr	r2, [pc, #488]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a77      	ldr	r2, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e01d      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0xbc>
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a71      	ldr	r2, [pc, #452]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800275c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b6f      	ldr	r3, [pc, #444]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6e      	ldr	r2, [pc, #440]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0xd4>
 8002770:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a67      	ldr	r2, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d013      	beq.n	80027b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe ff24 	bl	80015dc <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002798:	f7fe ff20 	bl	80015dc <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e200      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0xe4>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe ff10 	bl	80015dc <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe ff0c 	bl	80015dc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1ec      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x10c>
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d063      	beq.n	80028b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00b      	beq.n	8002812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d11c      	bne.n	8002840 <HAL_RCC_OscConfig+0x18c>
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d116      	bne.n	8002840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002812:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1c0      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4939      	ldr	r1, [pc, #228]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	e03a      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe fec5 	bl	80015dc <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fec1 	bl	80015dc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e1a1      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4927      	ldr	r1, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <HAL_RCC_OscConfig+0x270>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fea4 	bl	80015dc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fea0 	bl	80015dc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e180      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03a      	beq.n	8002938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d019      	beq.n	80028fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x274>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fe84 	bl	80015dc <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d8:	f7fe fe80 	bl	80015dc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e160      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f000 face 	bl	8002e98 <RCC_Delay>
 80028fc:	e01c      	b.n	8002938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_OscConfig+0x274>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fe6a 	bl	80015dc <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290a:	e00f      	b.n	800292c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fe66 	bl	80015dc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d908      	bls.n	800292c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e146      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	42420000 	.word	0x42420000
 8002928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b92      	ldr	r3, [pc, #584]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e9      	bne.n	800290c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a6 	beq.w	8002a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b8b      	ldr	r3, [pc, #556]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7e      	ldr	r2, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fe27 	bl	80015dc <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fe23 	bl	80015dc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b64      	cmp	r3, #100	; 0x64
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e103      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x4c8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x312>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e02d      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x334>
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6213      	str	r3, [r2, #32]
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	e01c      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x356>
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6213      	str	r3, [r2, #32]
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x36e>
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a5a      	ldr	r2, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fdd7 	bl	80015dc <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fdd3 	bl	80015dc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0b1      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCC_OscConfig+0x37e>
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fdc1 	bl	80015dc <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fdbd 	bl	80015dc <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e09b      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8087 	beq.w	8002baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d061      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d146      	bne.n	8002b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fd91 	bl	80015dc <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fd8d 	bl	80015dc <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e06d      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad0:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d108      	bne.n	8002af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4921      	ldr	r1, [pc, #132]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af8:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a19      	ldr	r1, [r3, #32]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	491b      	ldr	r1, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7fe fd61 	bl	80015dc <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fd5d 	bl	80015dc <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e03d      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x46a>
 8002b3c:	e035      	b.n	8002baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_RCC_OscConfig+0x4cc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fd4a 	bl	80015dc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fd46 	bl	80015dc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e026      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x498>
 8002b6a:	e01e      	b.n	8002baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e019      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x500>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0d0      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4965      	ldr	r1, [pc, #404]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b63      	ldr	r3, [pc, #396]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0b8      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d020      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c14:	4b59      	ldr	r3, [pc, #356]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a58      	ldr	r2, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	494d      	ldr	r1, [pc, #308]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d040      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d115      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e073      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06b      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4936      	ldr	r1, [pc, #216]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fc98 	bl	80015dc <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	e00a      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb0:	f7fe fc94 	bl	80015dc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e053      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 020c 	and.w	r2, r3, #12
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d1eb      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d210      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4922      	ldr	r1, [pc, #136]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e032      	b.n	8002d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4916      	ldr	r1, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	490e      	ldr	r1, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d46:	f000 f821 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	490a      	ldr	r1, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	5ccb      	ldrb	r3, [r1, r3]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1cc>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1d0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fbf6 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	08005a70 	.word	0x08005a70
 8002d84:	20000004 	.word	0x20000004
 8002d88:	20000008 	.word	0x20000008

08002d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x30>
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8002dba:	e027      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dbe:	613b      	str	r3, [r7, #16]
      break;
 8002dc0:	e027      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0c9b      	lsrs	r3, r3, #18
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	0c5b      	lsrs	r3, r3, #17
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002de6:	5cd3      	ldrb	r3, [r2, r3]
 8002de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dee:	fb03 f202 	mul.w	r2, r3, r2
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e004      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	613b      	str	r3, [r7, #16]
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e0e:	613b      	str	r3, [r7, #16]
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	693b      	ldr	r3, [r7, #16]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	08005a88 	.word	0x08005a88
 8002e2c:	08005a98 	.word	0x08005a98
 8002e30:	003d0900 	.word	0x003d0900

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e4c:	f7ff fff2 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4903      	ldr	r1, [pc, #12]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08005a80 	.word	0x08005a80

08002e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08005a80 	.word	0x08005a80

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCC_Delay+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <RCC_Delay+0x38>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb4:	bf00      	nop
  }
  while (Delay --);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <RCC_Delay+0x1c>
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d07d      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef4:	4b4f      	ldr	r3, [pc, #316]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4a4b      	ldr	r2, [pc, #300]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	61d3      	str	r3, [r2, #28]
 8002f0c:	4b49      	ldr	r3, [pc, #292]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b46      	ldr	r3, [pc, #280]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d118      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f28:	4b43      	ldr	r3, [pc, #268]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a42      	ldr	r2, [pc, #264]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fb52 	bl	80015dc <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	e008      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fe fb4e 	bl	80015dc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e06d      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f5a:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02e      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d027      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f78:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f82:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d014      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fb1d 	bl	80015dc <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe fb19 	bl	80015dc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e036      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0ee      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4917      	ldr	r1, [pc, #92]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	490b      	ldr	r1, [pc, #44]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	40007000 	.word	0x40007000
 800303c:	42420440 	.word	0x42420440

08003040 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	2300      	movs	r3, #0
 8003052:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b10      	cmp	r3, #16
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b10      	cmp	r3, #16
 8003066:	f200 808a 	bhi.w	800317e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d045      	beq.n	80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d075      	beq.n	8003162 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003076:	e082      	b.n	800317e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800307e:	4b45      	ldr	r3, [pc, #276]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d07b      	beq.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0c9b      	lsrs	r3, r3, #18
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	4a41      	ldr	r2, [pc, #260]	; (8003198 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030a2:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0c5b      	lsrs	r3, r3, #17
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00d      	beq.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80030d8:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d102      	bne.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	61bb      	str	r3, [r7, #24]
      break;
 80030ea:	e04a      	b.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4a2d      	ldr	r2, [pc, #180]	; (80031a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
      break;
 80030fa:	e042      	b.n	8003182 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310c:	d108      	bne.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	e01f      	b.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312a:	d109      	bne.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003138:	f649 4340 	movw	r3, #40000	; 0x9c40
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e00f      	b.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314a:	d11c      	bne.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003158:	f24f 4324 	movw	r3, #62500	; 0xf424
 800315c:	61bb      	str	r3, [r7, #24]
      break;
 800315e:	e012      	b.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003160:	e011      	b.n	8003186 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003162:	f7ff fe85 	bl	8002e70 <HAL_RCC_GetPCLK2Freq>
 8003166:	4602      	mov	r2, r0
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0b9b      	lsrs	r3, r3, #14
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	3301      	adds	r3, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	61bb      	str	r3, [r7, #24]
      break;
 800317c:	e004      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003186:	bf00      	nop
    }
  }
  return (frequency);
 8003188:	69bb      	ldr	r3, [r7, #24]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	08005a9c 	.word	0x08005a9c
 800319c:	08005aac 	.word	0x08005aac
 80031a0:	007a1200 	.word	0x007a1200
 80031a4:	003d0900 	.word	0x003d0900
 80031a8:	aaaaaaab 	.word	0xaaaaaaab

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04c      	b.n	8003258 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d111      	bne.n	80031ee <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f001 fa3e 	bl	8004654 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_TIM_Base_Init+0xb4>)
 80031e4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f000 ff83 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	08001205 	.word	0x08001205

08003264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e04c      	b.n	8003310 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d111      	bne.n	80032a6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f001 f9e2 	bl	8004654 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_TIM_PWM_Init+0xb4>)
 800329c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2202      	movs	r2, #2
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f000 ff27 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0800331d 	.word	0x0800331d

0800331c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_TIM_PWM_Start+0x24>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b01      	cmp	r3, #1
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e022      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d109      	bne.n	800336e <HAL_TIM_PWM_Start+0x3e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e015      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d109      	bne.n	8003388 <HAL_TIM_PWM_Start+0x58>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e008      	b.n	800339a <HAL_TIM_PWM_Start+0x6a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e05e      	b.n	8003460 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0x82>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b0:	e013      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0x92>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	e00b      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0xa2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	e003      	b.n	80033da <HAL_TIM_PWM_Start+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f912 	bl	800460c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_TIM_PWM_Start+0x138>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_TIM_PWM_Start+0x138>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00e      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003414:	d009      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_TIM_PWM_Start+0x13c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_TIM_PWM_Start+0xfa>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <HAL_TIM_PWM_Start+0x140>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d111      	bne.n	800344e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d010      	beq.n	800345e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344c:	e007      	b.n	800345e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f001 f8c0 	bl	800460c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_TIM_PWM_Stop+0xc4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d117      	bne.n	80034c6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	f241 1311 	movw	r3, #4369	; 0x1111
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10f      	bne.n	80034c6 <HAL_TIM_PWM_Stop+0x52>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1a      	ldr	r2, [r3, #32]
 80034ac:	f240 4344 	movw	r3, #1092	; 0x444
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d107      	bne.n	80034c6 <HAL_TIM_PWM_Stop+0x52>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_TIM_PWM_Stop+0x82>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	f240 4344 	movw	r3, #1092	; 0x444
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_PWM_Stop+0x82>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_TIM_PWM_Stop+0x92>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003504:	e013      	b.n	800352e <HAL_TIM_PWM_Stop+0xba>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b04      	cmp	r3, #4
 800350a:	d104      	bne.n	8003516 <HAL_TIM_PWM_Stop+0xa2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	e00b      	b.n	800352e <HAL_TIM_PWM_Stop+0xba>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d104      	bne.n	8003526 <HAL_TIM_PWM_Stop+0xb2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003524:	e003      	b.n	800352e <HAL_TIM_PWM_Stop+0xba>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40012c00 	.word	0x40012c00

0800353c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_TIM_PWM_Start_IT+0x28>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e022      	b.n	80035aa <HAL_TIM_PWM_Start_IT+0x6e>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d109      	bne.n	800357e <HAL_TIM_PWM_Start_IT+0x42>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e015      	b.n	80035aa <HAL_TIM_PWM_Start_IT+0x6e>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d109      	bne.n	8003598 <HAL_TIM_PWM_Start_IT+0x5c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e008      	b.n	80035aa <HAL_TIM_PWM_Start_IT+0x6e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0a9      	b.n	8003706 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_TIM_PWM_Start_IT+0x86>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	e013      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0xae>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start_IT+0x96>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d0:	e00b      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0xae>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start_IT+0xa6>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	e003      	b.n	80035ea <HAL_TIM_PWM_Start_IT+0xae>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d841      	bhi.n	8003674 <HAL_TIM_PWM_Start_IT+0x138>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	08003675 	.word	0x08003675
 8003600:	08003675 	.word	0x08003675
 8003604:	08003675 	.word	0x08003675
 8003608:	0800363f 	.word	0x0800363f
 800360c:	08003675 	.word	0x08003675
 8003610:	08003675 	.word	0x08003675
 8003614:	08003675 	.word	0x08003675
 8003618:	08003651 	.word	0x08003651
 800361c:	08003675 	.word	0x08003675
 8003620:	08003675 	.word	0x08003675
 8003624:	08003675 	.word	0x08003675
 8003628:	08003663 	.word	0x08003663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0202 	orr.w	r2, r2, #2
 800363a:	60da      	str	r2, [r3, #12]
      break;
 800363c:	e01d      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0204 	orr.w	r2, r2, #4
 800364c:	60da      	str	r2, [r3, #12]
      break;
 800364e:	e014      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	60da      	str	r2, [r3, #12]
      break;
 8003660:	e00b      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0210 	orr.w	r2, r2, #16
 8003670:	60da      	str	r2, [r3, #12]
      break;
 8003672:	e002      	b.n	800367a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	bf00      	nop
  }

  if (status == HAL_OK)
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d141      	bne.n	8003704 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2201      	movs	r2, #1
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ffbf 	bl	800460c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00e      	beq.n	80036d0 <HAL_TIM_PWM_Start_IT+0x194>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d009      	beq.n	80036d0 <HAL_TIM_PWM_Start_IT+0x194>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_TIM_PWM_Start_IT+0x1d8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d004      	beq.n	80036d0 <HAL_TIM_PWM_Start_IT+0x194>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d111      	bne.n	80036f4 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d010      	beq.n	8003704 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f2:	e007      	b.n	8003704 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40000800 	.word	0x40000800

0800371c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d841      	bhi.n	80037b4 <HAL_TIM_PWM_Stop_IT+0x98>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800376d 	.word	0x0800376d
 800373c:	080037b5 	.word	0x080037b5
 8003740:	080037b5 	.word	0x080037b5
 8003744:	080037b5 	.word	0x080037b5
 8003748:	0800377f 	.word	0x0800377f
 800374c:	080037b5 	.word	0x080037b5
 8003750:	080037b5 	.word	0x080037b5
 8003754:	080037b5 	.word	0x080037b5
 8003758:	08003791 	.word	0x08003791
 800375c:	080037b5 	.word	0x080037b5
 8003760:	080037b5 	.word	0x080037b5
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037a3 	.word	0x080037a3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0202 	bic.w	r2, r2, #2
 800377a:	60da      	str	r2, [r3, #12]
      break;
 800377c:	e01d      	b.n	80037ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0204 	bic.w	r2, r2, #4
 800378c:	60da      	str	r2, [r3, #12]
      break;
 800378e:	e014      	b.n	80037ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0208 	bic.w	r2, r2, #8
 800379e:	60da      	str	r2, [r3, #12]
      break;
 80037a0:	e00b      	b.n	80037ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0210 	bic.w	r2, r2, #16
 80037b0:	60da      	str	r2, [r3, #12]
      break;
 80037b2:	e002      	b.n	80037ba <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d157      	bne.n	8003870 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	6839      	ldr	r1, [r7, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 ff1f 	bl	800460c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	; (800387c <HAL_TIM_PWM_Stop_IT+0x160>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d117      	bne.n	8003808 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	f241 1311 	movw	r3, #4369	; 0x1111
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10f      	bne.n	8003808 <HAL_TIM_PWM_Stop_IT+0xec>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	f240 4344 	movw	r3, #1092	; 0x444
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_PWM_Stop_IT+0xec>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a1a      	ldr	r2, [r3, #32]
 800381e:	f240 4344 	movw	r3, #1092	; 0x444
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d107      	bne.n	8003838 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_TIM_PWM_Stop_IT+0x12c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003846:	e013      	b.n	8003870 <HAL_TIM_PWM_Stop_IT+0x154>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d104      	bne.n	8003858 <HAL_TIM_PWM_Stop_IT+0x13c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003856:	e00b      	b.n	8003870 <HAL_TIM_PWM_Stop_IT+0x154>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d104      	bne.n	8003868 <HAL_TIM_PWM_Stop_IT+0x14c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003866:	e003      	b.n	8003870 <HAL_TIM_PWM_Stop_IT+0x154>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40012c00 	.word	0x40012c00

08003880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d128      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d121      	bne.n	80038e8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0202 	mvn.w	r2, #2
 80038ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e009      	b.n	80038e2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d128      	bne.n	8003948 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d121      	bne.n	8003948 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0204 	mvn.w	r2, #4
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
 800392c:	e009      	b.n	8003942 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d128      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d121      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0208 	mvn.w	r2, #8
 800396c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e009      	b.n	80039a2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d128      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d121      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0210 	mvn.w	r2, #16
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2208      	movs	r2, #8
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e009      	b.n	8003a02 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d110      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d110      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d109      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b40      	cmp	r3, #64	; 0x40
 8003a74:	d110      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d110      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0220 	mvn.w	r2, #32
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ae      	b.n	8003c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	f200 809f 	bhi.w	8003c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003c3d 	.word	0x08003c3d
 8003b0c:	08003c3d 	.word	0x08003c3d
 8003b10:	08003c3d 	.word	0x08003c3d
 8003b14:	08003b79 	.word	0x08003b79
 8003b18:	08003c3d 	.word	0x08003c3d
 8003b1c:	08003c3d 	.word	0x08003c3d
 8003b20:	08003c3d 	.word	0x08003c3d
 8003b24:	08003bbb 	.word	0x08003bbb
 8003b28:	08003c3d 	.word	0x08003c3d
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	08003c3d 	.word	0x08003c3d
 8003b34:	08003bfb 	.word	0x08003bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb46 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	619a      	str	r2, [r3, #24]
      break;
 8003b76:	e064      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fb8c 	bl	800429c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e043      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fbd5 	bl	8004370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0208 	orr.w	r2, r2, #8
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0204 	bic.w	r2, r2, #4
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	61da      	str	r2, [r3, #28]
      break;
 8003bf8:	e023      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fc1f 	bl	8004444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	021a      	lsls	r2, r3, #8
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	61da      	str	r2, [r3, #28]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x1c>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e0b4      	b.n	8003dda <HAL_TIM_ConfigClockSource+0x186>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca8:	d03e      	beq.n	8003d28 <HAL_TIM_ConfigClockSource+0xd4>
 8003caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cae:	f200 8087 	bhi.w	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	f000 8086 	beq.w	8003dc6 <HAL_TIM_ConfigClockSource+0x172>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbe:	d87f      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d01a      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xa6>
 8003cc4:	2b70      	cmp	r3, #112	; 0x70
 8003cc6:	d87b      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d050      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x11a>
 8003ccc:	2b60      	cmp	r3, #96	; 0x60
 8003cce:	d877      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b50      	cmp	r3, #80	; 0x50
 8003cd2:	d03c      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0xfa>
 8003cd4:	2b50      	cmp	r3, #80	; 0x50
 8003cd6:	d873      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d058      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x13a>
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d86f      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d064      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d86b      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d060      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d867      	bhi.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05c      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d05a      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x15a>
 8003cf8:	e062      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6899      	ldr	r1, [r3, #8]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 fc60 	bl	80045ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]
      break;
 8003d26:	e04f      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6899      	ldr	r1, [r3, #8]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f000 fc49 	bl	80045ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4a:	609a      	str	r2, [r3, #8]
      break;
 8003d4c:	e03c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 fbc0 	bl	80044e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2150      	movs	r1, #80	; 0x50
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fc17 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e02c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 fbde 	bl	800453c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2160      	movs	r1, #96	; 0x60
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fc07 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e01c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 fba0 	bl	80044e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2140      	movs	r1, #64	; 0x40
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fbf7 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8003dac:	e00c      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f000 fbee 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e125      	b.n	8004100 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 80b9 	bne.w	8004034 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	2b1a      	cmp	r3, #26
 8003ec6:	f200 80b2 	bhi.w	800402e <HAL_TIM_RegisterCallback+0x196>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <HAL_TIM_RegisterCallback+0x38>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f3d 	.word	0x08003f3d
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f4d 	.word	0x08003f4d
 8003edc:	08003f55 	.word	0x08003f55
 8003ee0:	08003f5d 	.word	0x08003f5d
 8003ee4:	08003f65 	.word	0x08003f65
 8003ee8:	08003f6d 	.word	0x08003f6d
 8003eec:	08003f75 	.word	0x08003f75
 8003ef0:	08003f7d 	.word	0x08003f7d
 8003ef4:	08003f85 	.word	0x08003f85
 8003ef8:	08003f8d 	.word	0x08003f8d
 8003efc:	08003f95 	.word	0x08003f95
 8003f00:	08003f9d 	.word	0x08003f9d
 8003f04:	08003fa5 	.word	0x08003fa5
 8003f08:	08003fad 	.word	0x08003fad
 8003f0c:	08003fb7 	.word	0x08003fb7
 8003f10:	08003fc1 	.word	0x08003fc1
 8003f14:	08003fcb 	.word	0x08003fcb
 8003f18:	08003fd5 	.word	0x08003fd5
 8003f1c:	08003fdf 	.word	0x08003fdf
 8003f20:	08003fe9 	.word	0x08003fe9
 8003f24:	08003ff3 	.word	0x08003ff3
 8003f28:	08003ffd 	.word	0x08003ffd
 8003f2c:	08004007 	.word	0x08004007
 8003f30:	08004011 	.word	0x08004011
 8003f34:	0800401b 	.word	0x0800401b
 8003f38:	08004025 	.word	0x08004025
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003f42:	e0dc      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003f4a:	e0d8      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003f52:	e0d4      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003f5a:	e0d0      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003f62:	e0cc      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003f6a:	e0c8      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003f72:	e0c4      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003f7a:	e0c0      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003f82:	e0bc      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003f8a:	e0b8      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003f92:	e0b4      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003f9a:	e0b0      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003fa2:	e0ac      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003faa:	e0a8      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003fb4:	e0a3      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003fbe:	e09e      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003fc8:	e099      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003fd2:	e094      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003fdc:	e08f      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003fe6:	e08a      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003ff0:	e085      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003ffa:	e080      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004004:	e07b      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800400e:	e076      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004018:	e071      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004022:	e06c      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800402c:	e067      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
        break;
 8004032:	e064      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d15c      	bne.n	80040fa <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	2b0d      	cmp	r3, #13
 8004044:	d856      	bhi.n	80040f4 <HAL_TIM_RegisterCallback+0x25c>
 8004046:	a201      	add	r2, pc, #4	; (adr r2, 800404c <HAL_TIM_RegisterCallback+0x1b4>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	08004085 	.word	0x08004085
 8004050:	0800408d 	.word	0x0800408d
 8004054:	08004095 	.word	0x08004095
 8004058:	0800409d 	.word	0x0800409d
 800405c:	080040a5 	.word	0x080040a5
 8004060:	080040ad 	.word	0x080040ad
 8004064:	080040b5 	.word	0x080040b5
 8004068:	080040bd 	.word	0x080040bd
 800406c:	080040c5 	.word	0x080040c5
 8004070:	080040cd 	.word	0x080040cd
 8004074:	080040d5 	.word	0x080040d5
 8004078:	080040dd 	.word	0x080040dd
 800407c:	080040e5 	.word	0x080040e5
 8004080:	080040ed 	.word	0x080040ed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800408a:	e038      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004092:	e034      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800409a:	e030      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80040a2:	e02c      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80040aa:	e028      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80040b2:	e024      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80040ba:	e020      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80040c2:	e01c      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80040ca:	e018      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80040d2:	e014      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80040da:	e010      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80040e2:	e00c      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80040ea:	e008      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80040f2:	e004      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
        break;
 80040f8:	e001      	b.n	80040fe <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <TIM_OC1_SetConfig+0xc8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0308 	bic.w	r3, r3, #8
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <TIM_OC1_SetConfig+0xc8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00

0800429c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 0210 	bic.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <TIM_OC2_SetConfig+0xd0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10d      	bne.n	8004318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <TIM_OC2_SetConfig+0xd0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d113      	bne.n	8004348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00

08004370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <TIM_OC3_SetConfig+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10d      	bne.n	80043ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <TIM_OC3_SetConfig+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d113      	bne.n	800441a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00

08004444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0f      	ldr	r2, [pc, #60]	; (80044dc <TIM_OC4_SetConfig+0x98>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f023 0210 	bic.w	r2, r3, #16
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	031b      	lsls	r3, r3, #12
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f043 0307 	orr.w	r3, r3, #7
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2201      	movs	r2, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <TIM_ResetCallback+0x7c>)
 8004660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <TIM_ResetCallback+0x80>)
 8004668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <TIM_ResetCallback+0x84>)
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a19      	ldr	r2, [pc, #100]	; (80046dc <TIM_ResetCallback+0x88>)
 8004678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <TIM_ResetCallback+0x8c>)
 8004680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <TIM_ResetCallback+0x90>)
 8004688:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <TIM_ResetCallback+0x94>)
 8004690:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a15      	ldr	r2, [pc, #84]	; (80046ec <TIM_ResetCallback+0x98>)
 8004698:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <TIM_ResetCallback+0x9c>)
 80046a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <TIM_ResetCallback+0xa0>)
 80046a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <TIM_ResetCallback+0xa4>)
 80046b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a11      	ldr	r2, [pc, #68]	; (80046fc <TIM_ResetCallback+0xa8>)
 80046b8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <TIM_ResetCallback+0xac>)
 80046c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	08003de3 	.word	0x08003de3
 80046d4:	08003df5 	.word	0x08003df5
 80046d8:	08003e61 	.word	0x08003e61
 80046dc:	08003e73 	.word	0x08003e73
 80046e0:	08003e19 	.word	0x08003e19
 80046e4:	08003e2b 	.word	0x08003e2b
 80046e8:	08003e07 	.word	0x08003e07
 80046ec:	08003e3d 	.word	0x08003e3d
 80046f0:	08003e4f 	.word	0x08003e4f
 80046f4:	08003e85 	.word	0x08003e85
 80046f8:	08004863 	.word	0x08004863
 80046fc:	08004875 	.word	0x08004875
 8004700:	08004887 	.word	0x08004887

08004704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e046      	b.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004768:	d009      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a10      	ldr	r2, [pc, #64]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10c      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800

080047c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047d8:	2302      	movs	r3, #2
 80047da:	e03d      	b.n	8004858 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr

08004862 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	; (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000010 	.word	0x20000010

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	2600      	movs	r6, #0
 80048a8:	4d0c      	ldr	r5, [pc, #48]	; (80048dc <__libc_init_array+0x38>)
 80048aa:	4c0d      	ldr	r4, [pc, #52]	; (80048e0 <__libc_init_array+0x3c>)
 80048ac:	1b64      	subs	r4, r4, r5
 80048ae:	10a4      	asrs	r4, r4, #2
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	f001 f8d0 	bl	8005a58 <_init>
 80048b8:	2600      	movs	r6, #0
 80048ba:	4d0a      	ldr	r5, [pc, #40]	; (80048e4 <__libc_init_array+0x40>)
 80048bc:	4c0a      	ldr	r4, [pc, #40]	; (80048e8 <__libc_init_array+0x44>)
 80048be:	1b64      	subs	r4, r4, r5
 80048c0:	10a4      	asrs	r4, r4, #2
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	08005bf8 	.word	0x08005bf8
 80048e0:	08005bf8 	.word	0x08005bf8
 80048e4:	08005bf8 	.word	0x08005bf8
 80048e8:	08005bfc 	.word	0x08005bfc

080048ec <memcpy>:
 80048ec:	440a      	add	r2, r1
 80048ee:	4291      	cmp	r1, r2
 80048f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80048f4:	d100      	bne.n	80048f8 <memcpy+0xc>
 80048f6:	4770      	bx	lr
 80048f8:	b510      	push	{r4, lr}
 80048fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fe:	4291      	cmp	r1, r2
 8004900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004904:	d1f9      	bne.n	80048fa <memcpy+0xe>
 8004906:	bd10      	pop	{r4, pc}

08004908 <memset>:
 8004908:	4603      	mov	r3, r0
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <srand>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <srand+0x44>)
 800491c:	4604      	mov	r4, r0
 800491e:	681d      	ldr	r5, [r3, #0]
 8004920:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004922:	b9b3      	cbnz	r3, 8004952 <srand+0x3a>
 8004924:	2018      	movs	r0, #24
 8004926:	f000 f8bf 	bl	8004aa8 <malloc>
 800492a:	4602      	mov	r2, r0
 800492c:	63a8      	str	r0, [r5, #56]	; 0x38
 800492e:	b920      	cbnz	r0, 800493a <srand+0x22>
 8004930:	2142      	movs	r1, #66	; 0x42
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <srand+0x48>)
 8004934:	480b      	ldr	r0, [pc, #44]	; (8004964 <srand+0x4c>)
 8004936:	f000 f875 	bl	8004a24 <__assert_func>
 800493a:	490b      	ldr	r1, [pc, #44]	; (8004968 <srand+0x50>)
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <srand+0x54>)
 800493e:	e9c0 1300 	strd	r1, r3, [r0]
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <srand+0x58>)
 8004944:	2100      	movs	r1, #0
 8004946:	6083      	str	r3, [r0, #8]
 8004948:	230b      	movs	r3, #11
 800494a:	8183      	strh	r3, [r0, #12]
 800494c:	2001      	movs	r0, #1
 800494e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004952:	2200      	movs	r2, #0
 8004954:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004956:	611c      	str	r4, [r3, #16]
 8004958:	615a      	str	r2, [r3, #20]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000010 	.word	0x20000010
 8004960:	08005ab4 	.word	0x08005ab4
 8004964:	08005acb 	.word	0x08005acb
 8004968:	abcd330e 	.word	0xabcd330e
 800496c:	e66d1234 	.word	0xe66d1234
 8004970:	0005deec 	.word	0x0005deec

08004974 <rand>:
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <rand+0x5c>)
 8004976:	b510      	push	{r4, lr}
 8004978:	681c      	ldr	r4, [r3, #0]
 800497a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800497c:	b9b3      	cbnz	r3, 80049ac <rand+0x38>
 800497e:	2018      	movs	r0, #24
 8004980:	f000 f892 	bl	8004aa8 <malloc>
 8004984:	4602      	mov	r2, r0
 8004986:	63a0      	str	r0, [r4, #56]	; 0x38
 8004988:	b920      	cbnz	r0, 8004994 <rand+0x20>
 800498a:	214e      	movs	r1, #78	; 0x4e
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <rand+0x60>)
 800498e:	4812      	ldr	r0, [pc, #72]	; (80049d8 <rand+0x64>)
 8004990:	f000 f848 	bl	8004a24 <__assert_func>
 8004994:	4911      	ldr	r1, [pc, #68]	; (80049dc <rand+0x68>)
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <rand+0x6c>)
 8004998:	e9c0 1300 	strd	r1, r3, [r0]
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <rand+0x70>)
 800499e:	2100      	movs	r1, #0
 80049a0:	6083      	str	r3, [r0, #8]
 80049a2:	230b      	movs	r3, #11
 80049a4:	8183      	strh	r3, [r0, #12]
 80049a6:	2001      	movs	r0, #1
 80049a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80049ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80049ae:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <rand+0x74>)
 80049b0:	6920      	ldr	r0, [r4, #16]
 80049b2:	6963      	ldr	r3, [r4, #20]
 80049b4:	4342      	muls	r2, r0
 80049b6:	490d      	ldr	r1, [pc, #52]	; (80049ec <rand+0x78>)
 80049b8:	fb01 2203 	mla	r2, r1, r3, r2
 80049bc:	fba0 0101 	umull	r0, r1, r0, r1
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	eb42 0001 	adc.w	r0, r2, r1
 80049c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80049ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049ce:	bd10      	pop	{r4, pc}
 80049d0:	20000010 	.word	0x20000010
 80049d4:	08005ab4 	.word	0x08005ab4
 80049d8:	08005acb 	.word	0x08005acb
 80049dc:	abcd330e 	.word	0xabcd330e
 80049e0:	e66d1234 	.word	0xe66d1234
 80049e4:	0005deec 	.word	0x0005deec
 80049e8:	5851f42d 	.word	0x5851f42d
 80049ec:	4c957f2d 	.word	0x4c957f2d

080049f0 <time>:
 80049f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <time+0x30>)
 80049f4:	4604      	mov	r4, r0
 80049f6:	2200      	movs	r2, #0
 80049f8:	4669      	mov	r1, sp
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	f000 f842 	bl	8004a84 <_gettimeofday_r>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	da05      	bge.n	8004a10 <time+0x20>
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a14:	b10c      	cbz	r4, 8004a1a <time+0x2a>
 8004a16:	e9c4 0100 	strd	r0, r1, [r4]
 8004a1a:	b004      	add	sp, #16
 8004a1c:	bd10      	pop	{r4, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000010 	.word	0x20000010

08004a24 <__assert_func>:
 8004a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a26:	4614      	mov	r4, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <__assert_func+0x2c>)
 8004a2c:	4605      	mov	r5, r0
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68d8      	ldr	r0, [r3, #12]
 8004a32:	b14c      	cbz	r4, 8004a48 <__assert_func+0x24>
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <__assert_func+0x30>)
 8004a36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a3a:	9100      	str	r1, [sp, #0]
 8004a3c:	462b      	mov	r3, r5
 8004a3e:	4906      	ldr	r1, [pc, #24]	; (8004a58 <__assert_func+0x34>)
 8004a40:	f000 f80e 	bl	8004a60 <fiprintf>
 8004a44:	f000 fcd2 	bl	80053ec <abort>
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <__assert_func+0x38>)
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	e7f3      	b.n	8004a36 <__assert_func+0x12>
 8004a4e:	bf00      	nop
 8004a50:	20000010 	.word	0x20000010
 8004a54:	08005b26 	.word	0x08005b26
 8004a58:	08005b33 	.word	0x08005b33
 8004a5c:	08005b61 	.word	0x08005b61

08004a60 <fiprintf>:
 8004a60:	b40e      	push	{r1, r2, r3}
 8004a62:	b503      	push	{r0, r1, lr}
 8004a64:	4601      	mov	r1, r0
 8004a66:	ab03      	add	r3, sp, #12
 8004a68:	4805      	ldr	r0, [pc, #20]	; (8004a80 <fiprintf+0x20>)
 8004a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a6e:	6800      	ldr	r0, [r0, #0]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	f000 f925 	bl	8004cc0 <_vfiprintf_r>
 8004a76:	b002      	add	sp, #8
 8004a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a7c:	b003      	add	sp, #12
 8004a7e:	4770      	bx	lr
 8004a80:	20000010 	.word	0x20000010

08004a84 <_gettimeofday_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	2300      	movs	r3, #0
 8004a88:	4d06      	ldr	r5, [pc, #24]	; (8004aa4 <_gettimeofday_r+0x20>)
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	602b      	str	r3, [r5, #0]
 8004a92:	f000 ffd9 	bl	8005a48 <_gettimeofday>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d102      	bne.n	8004aa0 <_gettimeofday_r+0x1c>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	b103      	cbz	r3, 8004aa0 <_gettimeofday_r+0x1c>
 8004a9e:	6023      	str	r3, [r4, #0]
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200002b0 	.word	0x200002b0

08004aa8 <malloc>:
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <malloc+0xc>)
 8004aaa:	4601      	mov	r1, r0
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f000 b86b 	b.w	8004b88 <_malloc_r>
 8004ab2:	bf00      	nop
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <_free_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d040      	beq.n	8004b42 <_free_r+0x8a>
 8004ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ac4:	1f0c      	subs	r4, r1, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	bfb8      	it	lt
 8004aca:	18e4      	addlt	r4, r4, r3
 8004acc:	f000 fec0 	bl	8005850 <__malloc_lock>
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <_free_r+0x8c>)
 8004ad2:	6813      	ldr	r3, [r2, #0]
 8004ad4:	b933      	cbnz	r3, 8004ae4 <_free_r+0x2c>
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	6014      	str	r4, [r2, #0]
 8004ada:	4628      	mov	r0, r5
 8004adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae0:	f000 bebc 	b.w	800585c <__malloc_unlock>
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d908      	bls.n	8004afa <_free_r+0x42>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	1821      	adds	r1, r4, r0
 8004aec:	428b      	cmp	r3, r1
 8004aee:	bf01      	itttt	eq
 8004af0:	6819      	ldreq	r1, [r3, #0]
 8004af2:	685b      	ldreq	r3, [r3, #4]
 8004af4:	1809      	addeq	r1, r1, r0
 8004af6:	6021      	streq	r1, [r4, #0]
 8004af8:	e7ed      	b.n	8004ad6 <_free_r+0x1e>
 8004afa:	461a      	mov	r2, r3
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	b10b      	cbz	r3, 8004b04 <_free_r+0x4c>
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d9fa      	bls.n	8004afa <_free_r+0x42>
 8004b04:	6811      	ldr	r1, [r2, #0]
 8004b06:	1850      	adds	r0, r2, r1
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d10b      	bne.n	8004b24 <_free_r+0x6c>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	4401      	add	r1, r0
 8004b10:	1850      	adds	r0, r2, r1
 8004b12:	4283      	cmp	r3, r0
 8004b14:	6011      	str	r1, [r2, #0]
 8004b16:	d1e0      	bne.n	8004ada <_free_r+0x22>
 8004b18:	6818      	ldr	r0, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	6011      	str	r1, [r2, #0]
 8004b20:	6053      	str	r3, [r2, #4]
 8004b22:	e7da      	b.n	8004ada <_free_r+0x22>
 8004b24:	d902      	bls.n	8004b2c <_free_r+0x74>
 8004b26:	230c      	movs	r3, #12
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	e7d6      	b.n	8004ada <_free_r+0x22>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	1821      	adds	r1, r4, r0
 8004b30:	428b      	cmp	r3, r1
 8004b32:	bf01      	itttt	eq
 8004b34:	6819      	ldreq	r1, [r3, #0]
 8004b36:	685b      	ldreq	r3, [r3, #4]
 8004b38:	1809      	addeq	r1, r1, r0
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	6054      	str	r4, [r2, #4]
 8004b40:	e7cb      	b.n	8004ada <_free_r+0x22>
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	200002a8 	.word	0x200002a8

08004b48 <sbrk_aligned>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	4e0e      	ldr	r6, [pc, #56]	; (8004b84 <sbrk_aligned+0x3c>)
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	6831      	ldr	r1, [r6, #0]
 8004b50:	4605      	mov	r5, r0
 8004b52:	b911      	cbnz	r1, 8004b5a <sbrk_aligned+0x12>
 8004b54:	f000 fb7a 	bl	800524c <_sbrk_r>
 8004b58:	6030      	str	r0, [r6, #0]
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 fb75 	bl	800524c <_sbrk_r>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d00a      	beq.n	8004b7c <sbrk_aligned+0x34>
 8004b66:	1cc4      	adds	r4, r0, #3
 8004b68:	f024 0403 	bic.w	r4, r4, #3
 8004b6c:	42a0      	cmp	r0, r4
 8004b6e:	d007      	beq.n	8004b80 <sbrk_aligned+0x38>
 8004b70:	1a21      	subs	r1, r4, r0
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 fb6a 	bl	800524c <_sbrk_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d101      	bne.n	8004b80 <sbrk_aligned+0x38>
 8004b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b80:	4620      	mov	r0, r4
 8004b82:	bd70      	pop	{r4, r5, r6, pc}
 8004b84:	200002ac 	.word	0x200002ac

08004b88 <_malloc_r>:
 8004b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8c:	1ccd      	adds	r5, r1, #3
 8004b8e:	f025 0503 	bic.w	r5, r5, #3
 8004b92:	3508      	adds	r5, #8
 8004b94:	2d0c      	cmp	r5, #12
 8004b96:	bf38      	it	cc
 8004b98:	250c      	movcc	r5, #12
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	db01      	blt.n	8004ba4 <_malloc_r+0x1c>
 8004ba0:	42a9      	cmp	r1, r5
 8004ba2:	d905      	bls.n	8004bb0 <_malloc_r+0x28>
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	2600      	movs	r6, #0
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4630      	mov	r0, r6
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb0:	4e2e      	ldr	r6, [pc, #184]	; (8004c6c <_malloc_r+0xe4>)
 8004bb2:	f000 fe4d 	bl	8005850 <__malloc_lock>
 8004bb6:	6833      	ldr	r3, [r6, #0]
 8004bb8:	461c      	mov	r4, r3
 8004bba:	bb34      	cbnz	r4, 8004c0a <_malloc_r+0x82>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff ffc2 	bl	8004b48 <sbrk_aligned>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	d14d      	bne.n	8004c66 <_malloc_r+0xde>
 8004bca:	6834      	ldr	r4, [r6, #0]
 8004bcc:	4626      	mov	r6, r4
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d140      	bne.n	8004c54 <_malloc_r+0xcc>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	eb04 0803 	add.w	r8, r4, r3
 8004bdc:	f000 fb36 	bl	800524c <_sbrk_r>
 8004be0:	4580      	cmp	r8, r0
 8004be2:	d13a      	bne.n	8004c5a <_malloc_r+0xd2>
 8004be4:	6821      	ldr	r1, [r4, #0]
 8004be6:	3503      	adds	r5, #3
 8004be8:	1a6d      	subs	r5, r5, r1
 8004bea:	f025 0503 	bic.w	r5, r5, #3
 8004bee:	3508      	adds	r5, #8
 8004bf0:	2d0c      	cmp	r5, #12
 8004bf2:	bf38      	it	cc
 8004bf4:	250c      	movcc	r5, #12
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f7ff ffa5 	bl	8004b48 <sbrk_aligned>
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d02b      	beq.n	8004c5a <_malloc_r+0xd2>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	442b      	add	r3, r5
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	e00e      	b.n	8004c28 <_malloc_r+0xa0>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	1b52      	subs	r2, r2, r5
 8004c0e:	d41e      	bmi.n	8004c4e <_malloc_r+0xc6>
 8004c10:	2a0b      	cmp	r2, #11
 8004c12:	d916      	bls.n	8004c42 <_malloc_r+0xba>
 8004c14:	1961      	adds	r1, r4, r5
 8004c16:	42a3      	cmp	r3, r4
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	bf18      	it	ne
 8004c1c:	6059      	strne	r1, [r3, #4]
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	bf08      	it	eq
 8004c22:	6031      	streq	r1, [r6, #0]
 8004c24:	5162      	str	r2, [r4, r5]
 8004c26:	604b      	str	r3, [r1, #4]
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f104 060b 	add.w	r6, r4, #11
 8004c2e:	f000 fe15 	bl	800585c <__malloc_unlock>
 8004c32:	f026 0607 	bic.w	r6, r6, #7
 8004c36:	1d23      	adds	r3, r4, #4
 8004c38:	1af2      	subs	r2, r6, r3
 8004c3a:	d0b6      	beq.n	8004baa <_malloc_r+0x22>
 8004c3c:	1b9b      	subs	r3, r3, r6
 8004c3e:	50a3      	str	r3, [r4, r2]
 8004c40:	e7b3      	b.n	8004baa <_malloc_r+0x22>
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	bf0c      	ite	eq
 8004c48:	6032      	streq	r2, [r6, #0]
 8004c4a:	605a      	strne	r2, [r3, #4]
 8004c4c:	e7ec      	b.n	8004c28 <_malloc_r+0xa0>
 8004c4e:	4623      	mov	r3, r4
 8004c50:	6864      	ldr	r4, [r4, #4]
 8004c52:	e7b2      	b.n	8004bba <_malloc_r+0x32>
 8004c54:	4634      	mov	r4, r6
 8004c56:	6876      	ldr	r6, [r6, #4]
 8004c58:	e7b9      	b.n	8004bce <_malloc_r+0x46>
 8004c5a:	230c      	movs	r3, #12
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	f000 fdfc 	bl	800585c <__malloc_unlock>
 8004c64:	e7a1      	b.n	8004baa <_malloc_r+0x22>
 8004c66:	6025      	str	r5, [r4, #0]
 8004c68:	e7de      	b.n	8004c28 <_malloc_r+0xa0>
 8004c6a:	bf00      	nop
 8004c6c:	200002a8 	.word	0x200002a8

08004c70 <__sfputc_r>:
 8004c70:	6893      	ldr	r3, [r2, #8]
 8004c72:	b410      	push	{r4}
 8004c74:	3b01      	subs	r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	6093      	str	r3, [r2, #8]
 8004c7a:	da07      	bge.n	8004c8c <__sfputc_r+0x1c>
 8004c7c:	6994      	ldr	r4, [r2, #24]
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	db01      	blt.n	8004c86 <__sfputc_r+0x16>
 8004c82:	290a      	cmp	r1, #10
 8004c84:	d102      	bne.n	8004c8c <__sfputc_r+0x1c>
 8004c86:	bc10      	pop	{r4}
 8004c88:	f000 baf0 	b.w	800526c <__swbuf_r>
 8004c8c:	6813      	ldr	r3, [r2, #0]
 8004c8e:	1c58      	adds	r0, r3, #1
 8004c90:	6010      	str	r0, [r2, #0]
 8004c92:	7019      	strb	r1, [r3, #0]
 8004c94:	4608      	mov	r0, r1
 8004c96:	bc10      	pop	{r4}
 8004c98:	4770      	bx	lr

08004c9a <__sfputs_r>:
 8004c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	460f      	mov	r7, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	18d5      	adds	r5, r2, r3
 8004ca4:	42ac      	cmp	r4, r5
 8004ca6:	d101      	bne.n	8004cac <__sfputs_r+0x12>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e007      	b.n	8004cbc <__sfputs_r+0x22>
 8004cac:	463a      	mov	r2, r7
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb4:	f7ff ffdc 	bl	8004c70 <__sfputc_r>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d1f3      	bne.n	8004ca4 <__sfputs_r+0xa>
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cc0 <_vfiprintf_r>:
 8004cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	4698      	mov	r8, r3
 8004cca:	4606      	mov	r6, r0
 8004ccc:	b09d      	sub	sp, #116	; 0x74
 8004cce:	b118      	cbz	r0, 8004cd8 <_vfiprintf_r+0x18>
 8004cd0:	6983      	ldr	r3, [r0, #24]
 8004cd2:	b90b      	cbnz	r3, 8004cd8 <_vfiprintf_r+0x18>
 8004cd4:	f000 fca8 	bl	8005628 <__sinit>
 8004cd8:	4b89      	ldr	r3, [pc, #548]	; (8004f00 <_vfiprintf_r+0x240>)
 8004cda:	429d      	cmp	r5, r3
 8004cdc:	d11b      	bne.n	8004d16 <_vfiprintf_r+0x56>
 8004cde:	6875      	ldr	r5, [r6, #4]
 8004ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ce2:	07d9      	lsls	r1, r3, #31
 8004ce4:	d405      	bmi.n	8004cf2 <_vfiprintf_r+0x32>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	059a      	lsls	r2, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_vfiprintf_r+0x32>
 8004cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cee:	f000 fd39 	bl	8005764 <__retarget_lock_acquire_recursive>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	071b      	lsls	r3, r3, #28
 8004cf6:	d501      	bpl.n	8004cfc <_vfiprintf_r+0x3c>
 8004cf8:	692b      	ldr	r3, [r5, #16]
 8004cfa:	b9eb      	cbnz	r3, 8004d38 <_vfiprintf_r+0x78>
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f000 fb06 	bl	8005310 <__swsetup_r>
 8004d04:	b1c0      	cbz	r0, 8004d38 <_vfiprintf_r+0x78>
 8004d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d08:	07dc      	lsls	r4, r3, #31
 8004d0a:	d50e      	bpl.n	8004d2a <_vfiprintf_r+0x6a>
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	b01d      	add	sp, #116	; 0x74
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	4b7b      	ldr	r3, [pc, #492]	; (8004f04 <_vfiprintf_r+0x244>)
 8004d18:	429d      	cmp	r5, r3
 8004d1a:	d101      	bne.n	8004d20 <_vfiprintf_r+0x60>
 8004d1c:	68b5      	ldr	r5, [r6, #8]
 8004d1e:	e7df      	b.n	8004ce0 <_vfiprintf_r+0x20>
 8004d20:	4b79      	ldr	r3, [pc, #484]	; (8004f08 <_vfiprintf_r+0x248>)
 8004d22:	429d      	cmp	r5, r3
 8004d24:	bf08      	it	eq
 8004d26:	68f5      	ldreq	r5, [r6, #12]
 8004d28:	e7da      	b.n	8004ce0 <_vfiprintf_r+0x20>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	0598      	lsls	r0, r3, #22
 8004d2e:	d4ed      	bmi.n	8004d0c <_vfiprintf_r+0x4c>
 8004d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d32:	f000 fd18 	bl	8005766 <__retarget_lock_release_recursive>
 8004d36:	e7e9      	b.n	8004d0c <_vfiprintf_r+0x4c>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d42:	2330      	movs	r3, #48	; 0x30
 8004d44:	f04f 0901 	mov.w	r9, #1
 8004d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d4c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004f0c <_vfiprintf_r+0x24c>
 8004d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d54:	4623      	mov	r3, r4
 8004d56:	469a      	mov	sl, r3
 8004d58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d5c:	b10a      	cbz	r2, 8004d62 <_vfiprintf_r+0xa2>
 8004d5e:	2a25      	cmp	r2, #37	; 0x25
 8004d60:	d1f9      	bne.n	8004d56 <_vfiprintf_r+0x96>
 8004d62:	ebba 0b04 	subs.w	fp, sl, r4
 8004d66:	d00b      	beq.n	8004d80 <_vfiprintf_r+0xc0>
 8004d68:	465b      	mov	r3, fp
 8004d6a:	4622      	mov	r2, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f7ff ff93 	bl	8004c9a <__sfputs_r>
 8004d74:	3001      	adds	r0, #1
 8004d76:	f000 80aa 	beq.w	8004ece <_vfiprintf_r+0x20e>
 8004d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d7c:	445a      	add	r2, fp
 8004d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8004d80:	f89a 3000 	ldrb.w	r3, [sl]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a2 	beq.w	8004ece <_vfiprintf_r+0x20e>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d94:	f10a 0a01 	add.w	sl, sl, #1
 8004d98:	9304      	str	r3, [sp, #16]
 8004d9a:	9307      	str	r3, [sp, #28]
 8004d9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004da0:	931a      	str	r3, [sp, #104]	; 0x68
 8004da2:	4654      	mov	r4, sl
 8004da4:	2205      	movs	r2, #5
 8004da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004daa:	4858      	ldr	r0, [pc, #352]	; (8004f0c <_vfiprintf_r+0x24c>)
 8004dac:	f000 fd42 	bl	8005834 <memchr>
 8004db0:	9a04      	ldr	r2, [sp, #16]
 8004db2:	b9d8      	cbnz	r0, 8004dec <_vfiprintf_r+0x12c>
 8004db4:	06d1      	lsls	r1, r2, #27
 8004db6:	bf44      	itt	mi
 8004db8:	2320      	movmi	r3, #32
 8004dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dbe:	0713      	lsls	r3, r2, #28
 8004dc0:	bf44      	itt	mi
 8004dc2:	232b      	movmi	r3, #43	; 0x2b
 8004dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d015      	beq.n	8004dfc <_vfiprintf_r+0x13c>
 8004dd0:	4654      	mov	r4, sl
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f04f 0c0a 	mov.w	ip, #10
 8004dd8:	9a07      	ldr	r2, [sp, #28]
 8004dda:	4621      	mov	r1, r4
 8004ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de0:	3b30      	subs	r3, #48	; 0x30
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d94e      	bls.n	8004e84 <_vfiprintf_r+0x1c4>
 8004de6:	b1b0      	cbz	r0, 8004e16 <_vfiprintf_r+0x156>
 8004de8:	9207      	str	r2, [sp, #28]
 8004dea:	e014      	b.n	8004e16 <_vfiprintf_r+0x156>
 8004dec:	eba0 0308 	sub.w	r3, r0, r8
 8004df0:	fa09 f303 	lsl.w	r3, r9, r3
 8004df4:	4313      	orrs	r3, r2
 8004df6:	46a2      	mov	sl, r4
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	e7d2      	b.n	8004da2 <_vfiprintf_r+0xe2>
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	1d19      	adds	r1, r3, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	9103      	str	r1, [sp, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bfbb      	ittet	lt
 8004e08:	425b      	neglt	r3, r3
 8004e0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e0e:	9307      	strge	r3, [sp, #28]
 8004e10:	9307      	strlt	r3, [sp, #28]
 8004e12:	bfb8      	it	lt
 8004e14:	9204      	strlt	r2, [sp, #16]
 8004e16:	7823      	ldrb	r3, [r4, #0]
 8004e18:	2b2e      	cmp	r3, #46	; 0x2e
 8004e1a:	d10c      	bne.n	8004e36 <_vfiprintf_r+0x176>
 8004e1c:	7863      	ldrb	r3, [r4, #1]
 8004e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e20:	d135      	bne.n	8004e8e <_vfiprintf_r+0x1ce>
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	3402      	adds	r4, #2
 8004e26:	1d1a      	adds	r2, r3, #4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	9203      	str	r2, [sp, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	bfb8      	it	lt
 8004e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e34:	9305      	str	r3, [sp, #20]
 8004e36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004f10 <_vfiprintf_r+0x250>
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	4650      	mov	r0, sl
 8004e3e:	7821      	ldrb	r1, [r4, #0]
 8004e40:	f000 fcf8 	bl	8005834 <memchr>
 8004e44:	b140      	cbz	r0, 8004e58 <_vfiprintf_r+0x198>
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	eba0 000a 	sub.w	r0, r0, sl
 8004e4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004e50:	9b04      	ldr	r3, [sp, #16]
 8004e52:	3401      	adds	r4, #1
 8004e54:	4303      	orrs	r3, r0
 8004e56:	9304      	str	r3, [sp, #16]
 8004e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5c:	2206      	movs	r2, #6
 8004e5e:	482d      	ldr	r0, [pc, #180]	; (8004f14 <_vfiprintf_r+0x254>)
 8004e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e64:	f000 fce6 	bl	8005834 <memchr>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d03f      	beq.n	8004eec <_vfiprintf_r+0x22c>
 8004e6c:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <_vfiprintf_r+0x258>)
 8004e6e:	bb1b      	cbnz	r3, 8004eb8 <_vfiprintf_r+0x1f8>
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	3307      	adds	r3, #7
 8004e74:	f023 0307 	bic.w	r3, r3, #7
 8004e78:	3308      	adds	r3, #8
 8004e7a:	9303      	str	r3, [sp, #12]
 8004e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7e:	443b      	add	r3, r7
 8004e80:	9309      	str	r3, [sp, #36]	; 0x24
 8004e82:	e767      	b.n	8004d54 <_vfiprintf_r+0x94>
 8004e84:	460c      	mov	r4, r1
 8004e86:	2001      	movs	r0, #1
 8004e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8c:	e7a5      	b.n	8004dda <_vfiprintf_r+0x11a>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f04f 0c0a 	mov.w	ip, #10
 8004e94:	4619      	mov	r1, r3
 8004e96:	3401      	adds	r4, #1
 8004e98:	9305      	str	r3, [sp, #20]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea0:	3a30      	subs	r2, #48	; 0x30
 8004ea2:	2a09      	cmp	r2, #9
 8004ea4:	d903      	bls.n	8004eae <_vfiprintf_r+0x1ee>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0c5      	beq.n	8004e36 <_vfiprintf_r+0x176>
 8004eaa:	9105      	str	r1, [sp, #20]
 8004eac:	e7c3      	b.n	8004e36 <_vfiprintf_r+0x176>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb6:	e7f0      	b.n	8004e9a <_vfiprintf_r+0x1da>
 8004eb8:	ab03      	add	r3, sp, #12
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <_vfiprintf_r+0x25c>)
 8004ec2:	a904      	add	r1, sp, #16
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	4607      	mov	r7, r0
 8004eca:	1c78      	adds	r0, r7, #1
 8004ecc:	d1d6      	bne.n	8004e7c <_vfiprintf_r+0x1bc>
 8004ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ed0:	07d9      	lsls	r1, r3, #31
 8004ed2:	d405      	bmi.n	8004ee0 <_vfiprintf_r+0x220>
 8004ed4:	89ab      	ldrh	r3, [r5, #12]
 8004ed6:	059a      	lsls	r2, r3, #22
 8004ed8:	d402      	bmi.n	8004ee0 <_vfiprintf_r+0x220>
 8004eda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004edc:	f000 fc43 	bl	8005766 <__retarget_lock_release_recursive>
 8004ee0:	89ab      	ldrh	r3, [r5, #12]
 8004ee2:	065b      	lsls	r3, r3, #25
 8004ee4:	f53f af12 	bmi.w	8004d0c <_vfiprintf_r+0x4c>
 8004ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eea:	e711      	b.n	8004d10 <_vfiprintf_r+0x50>
 8004eec:	ab03      	add	r3, sp, #12
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <_vfiprintf_r+0x25c>)
 8004ef6:	a904      	add	r1, sp, #16
 8004ef8:	f000 f882 	bl	8005000 <_printf_i>
 8004efc:	e7e4      	b.n	8004ec8 <_vfiprintf_r+0x208>
 8004efe:	bf00      	nop
 8004f00:	08005bb8 	.word	0x08005bb8
 8004f04:	08005bd8 	.word	0x08005bd8
 8004f08:	08005b98 	.word	0x08005b98
 8004f0c:	08005b62 	.word	0x08005b62
 8004f10:	08005b68 	.word	0x08005b68
 8004f14:	08005b6c 	.word	0x08005b6c
 8004f18:	00000000 	.word	0x00000000
 8004f1c:	08004c9b 	.word	0x08004c9b

08004f20 <_printf_common>:
 8004f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f24:	4616      	mov	r6, r2
 8004f26:	4699      	mov	r9, r3
 8004f28:	688a      	ldr	r2, [r1, #8]
 8004f2a:	690b      	ldr	r3, [r1, #16]
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	bfb8      	it	lt
 8004f32:	4613      	movlt	r3, r2
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f40:	b10a      	cbz	r2, 8004f46 <_printf_common+0x26>
 8004f42:	3301      	adds	r3, #1
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	0699      	lsls	r1, r3, #26
 8004f4a:	bf42      	ittt	mi
 8004f4c:	6833      	ldrmi	r3, [r6, #0]
 8004f4e:	3302      	addmi	r3, #2
 8004f50:	6033      	strmi	r3, [r6, #0]
 8004f52:	6825      	ldr	r5, [r4, #0]
 8004f54:	f015 0506 	ands.w	r5, r5, #6
 8004f58:	d106      	bne.n	8004f68 <_printf_common+0x48>
 8004f5a:	f104 0a19 	add.w	sl, r4, #25
 8004f5e:	68e3      	ldr	r3, [r4, #12]
 8004f60:	6832      	ldr	r2, [r6, #0]
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	42ab      	cmp	r3, r5
 8004f66:	dc28      	bgt.n	8004fba <_printf_common+0x9a>
 8004f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f6c:	1e13      	subs	r3, r2, #0
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	bf18      	it	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	0692      	lsls	r2, r2, #26
 8004f76:	d42d      	bmi.n	8004fd4 <_printf_common+0xb4>
 8004f78:	4649      	mov	r1, r9
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d020      	beq.n	8004fc8 <_printf_common+0xa8>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	68e5      	ldr	r5, [r4, #12]
 8004f8a:	f003 0306 	and.w	r3, r3, #6
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	bf18      	it	ne
 8004f92:	2500      	movne	r5, #0
 8004f94:	6832      	ldr	r2, [r6, #0]
 8004f96:	f04f 0600 	mov.w	r6, #0
 8004f9a:	68a3      	ldr	r3, [r4, #8]
 8004f9c:	bf08      	it	eq
 8004f9e:	1aad      	subeq	r5, r5, r2
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	bf08      	it	eq
 8004fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bfc4      	itt	gt
 8004fac:	1a9b      	subgt	r3, r3, r2
 8004fae:	18ed      	addgt	r5, r5, r3
 8004fb0:	341a      	adds	r4, #26
 8004fb2:	42b5      	cmp	r5, r6
 8004fb4:	d11a      	bne.n	8004fec <_printf_common+0xcc>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e008      	b.n	8004fcc <_printf_common+0xac>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4652      	mov	r2, sl
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	47c0      	blx	r8
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d103      	bne.n	8004fd0 <_printf_common+0xb0>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd0:	3501      	adds	r5, #1
 8004fd2:	e7c4      	b.n	8004f5e <_printf_common+0x3e>
 8004fd4:	2030      	movs	r0, #48	; 0x30
 8004fd6:	18e1      	adds	r1, r4, r3
 8004fd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fe2:	4422      	add	r2, r4
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fea:	e7c5      	b.n	8004f78 <_printf_common+0x58>
 8004fec:	2301      	movs	r3, #1
 8004fee:	4622      	mov	r2, r4
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	47c0      	blx	r8
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	d0e6      	beq.n	8004fc8 <_printf_common+0xa8>
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	e7d9      	b.n	8004fb2 <_printf_common+0x92>
	...

08005000 <_printf_i>:
 8005000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	7e0f      	ldrb	r7, [r1, #24]
 8005006:	4691      	mov	r9, r2
 8005008:	2f78      	cmp	r7, #120	; 0x78
 800500a:	4680      	mov	r8, r0
 800500c:	460c      	mov	r4, r1
 800500e:	469a      	mov	sl, r3
 8005010:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005016:	d807      	bhi.n	8005028 <_printf_i+0x28>
 8005018:	2f62      	cmp	r7, #98	; 0x62
 800501a:	d80a      	bhi.n	8005032 <_printf_i+0x32>
 800501c:	2f00      	cmp	r7, #0
 800501e:	f000 80d9 	beq.w	80051d4 <_printf_i+0x1d4>
 8005022:	2f58      	cmp	r7, #88	; 0x58
 8005024:	f000 80a4 	beq.w	8005170 <_printf_i+0x170>
 8005028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800502c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005030:	e03a      	b.n	80050a8 <_printf_i+0xa8>
 8005032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005036:	2b15      	cmp	r3, #21
 8005038:	d8f6      	bhi.n	8005028 <_printf_i+0x28>
 800503a:	a101      	add	r1, pc, #4	; (adr r1, 8005040 <_printf_i+0x40>)
 800503c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005040:	08005099 	.word	0x08005099
 8005044:	080050ad 	.word	0x080050ad
 8005048:	08005029 	.word	0x08005029
 800504c:	08005029 	.word	0x08005029
 8005050:	08005029 	.word	0x08005029
 8005054:	08005029 	.word	0x08005029
 8005058:	080050ad 	.word	0x080050ad
 800505c:	08005029 	.word	0x08005029
 8005060:	08005029 	.word	0x08005029
 8005064:	08005029 	.word	0x08005029
 8005068:	08005029 	.word	0x08005029
 800506c:	080051bb 	.word	0x080051bb
 8005070:	080050dd 	.word	0x080050dd
 8005074:	0800519d 	.word	0x0800519d
 8005078:	08005029 	.word	0x08005029
 800507c:	08005029 	.word	0x08005029
 8005080:	080051dd 	.word	0x080051dd
 8005084:	08005029 	.word	0x08005029
 8005088:	080050dd 	.word	0x080050dd
 800508c:	08005029 	.word	0x08005029
 8005090:	08005029 	.word	0x08005029
 8005094:	080051a5 	.word	0x080051a5
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	1d1a      	adds	r2, r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	602a      	str	r2, [r5, #0]
 80050a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0a4      	b.n	80051f6 <_printf_i+0x1f6>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	6829      	ldr	r1, [r5, #0]
 80050b0:	0606      	lsls	r6, r0, #24
 80050b2:	f101 0304 	add.w	r3, r1, #4
 80050b6:	d50a      	bpl.n	80050ce <_printf_i+0xce>
 80050b8:	680e      	ldr	r6, [r1, #0]
 80050ba:	602b      	str	r3, [r5, #0]
 80050bc:	2e00      	cmp	r6, #0
 80050be:	da03      	bge.n	80050c8 <_printf_i+0xc8>
 80050c0:	232d      	movs	r3, #45	; 0x2d
 80050c2:	4276      	negs	r6, r6
 80050c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c8:	230a      	movs	r3, #10
 80050ca:	485e      	ldr	r0, [pc, #376]	; (8005244 <_printf_i+0x244>)
 80050cc:	e019      	b.n	8005102 <_printf_i+0x102>
 80050ce:	680e      	ldr	r6, [r1, #0]
 80050d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	bf18      	it	ne
 80050d8:	b236      	sxthne	r6, r6
 80050da:	e7ef      	b.n	80050bc <_printf_i+0xbc>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	6029      	str	r1, [r5, #0]
 80050e4:	0601      	lsls	r1, r0, #24
 80050e6:	d501      	bpl.n	80050ec <_printf_i+0xec>
 80050e8:	681e      	ldr	r6, [r3, #0]
 80050ea:	e002      	b.n	80050f2 <_printf_i+0xf2>
 80050ec:	0646      	lsls	r6, r0, #25
 80050ee:	d5fb      	bpl.n	80050e8 <_printf_i+0xe8>
 80050f0:	881e      	ldrh	r6, [r3, #0]
 80050f2:	2f6f      	cmp	r7, #111	; 0x6f
 80050f4:	bf0c      	ite	eq
 80050f6:	2308      	moveq	r3, #8
 80050f8:	230a      	movne	r3, #10
 80050fa:	4852      	ldr	r0, [pc, #328]	; (8005244 <_printf_i+0x244>)
 80050fc:	2100      	movs	r1, #0
 80050fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005102:	6865      	ldr	r5, [r4, #4]
 8005104:	2d00      	cmp	r5, #0
 8005106:	bfa8      	it	ge
 8005108:	6821      	ldrge	r1, [r4, #0]
 800510a:	60a5      	str	r5, [r4, #8]
 800510c:	bfa4      	itt	ge
 800510e:	f021 0104 	bicge.w	r1, r1, #4
 8005112:	6021      	strge	r1, [r4, #0]
 8005114:	b90e      	cbnz	r6, 800511a <_printf_i+0x11a>
 8005116:	2d00      	cmp	r5, #0
 8005118:	d04d      	beq.n	80051b6 <_printf_i+0x1b6>
 800511a:	4615      	mov	r5, r2
 800511c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005120:	fb03 6711 	mls	r7, r3, r1, r6
 8005124:	5dc7      	ldrb	r7, [r0, r7]
 8005126:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800512a:	4637      	mov	r7, r6
 800512c:	42bb      	cmp	r3, r7
 800512e:	460e      	mov	r6, r1
 8005130:	d9f4      	bls.n	800511c <_printf_i+0x11c>
 8005132:	2b08      	cmp	r3, #8
 8005134:	d10b      	bne.n	800514e <_printf_i+0x14e>
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	07de      	lsls	r6, r3, #31
 800513a:	d508      	bpl.n	800514e <_printf_i+0x14e>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	6861      	ldr	r1, [r4, #4]
 8005140:	4299      	cmp	r1, r3
 8005142:	bfde      	ittt	le
 8005144:	2330      	movle	r3, #48	; 0x30
 8005146:	f805 3c01 	strble.w	r3, [r5, #-1]
 800514a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800514e:	1b52      	subs	r2, r2, r5
 8005150:	6122      	str	r2, [r4, #16]
 8005152:	464b      	mov	r3, r9
 8005154:	4621      	mov	r1, r4
 8005156:	4640      	mov	r0, r8
 8005158:	f8cd a000 	str.w	sl, [sp]
 800515c:	aa03      	add	r2, sp, #12
 800515e:	f7ff fedf 	bl	8004f20 <_printf_common>
 8005162:	3001      	adds	r0, #1
 8005164:	d14c      	bne.n	8005200 <_printf_i+0x200>
 8005166:	f04f 30ff 	mov.w	r0, #4294967295
 800516a:	b004      	add	sp, #16
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	4834      	ldr	r0, [pc, #208]	; (8005244 <_printf_i+0x244>)
 8005172:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005176:	6829      	ldr	r1, [r5, #0]
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	f851 6b04 	ldr.w	r6, [r1], #4
 800517e:	6029      	str	r1, [r5, #0]
 8005180:	061d      	lsls	r5, r3, #24
 8005182:	d514      	bpl.n	80051ae <_printf_i+0x1ae>
 8005184:	07df      	lsls	r7, r3, #31
 8005186:	bf44      	itt	mi
 8005188:	f043 0320 	orrmi.w	r3, r3, #32
 800518c:	6023      	strmi	r3, [r4, #0]
 800518e:	b91e      	cbnz	r6, 8005198 <_printf_i+0x198>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	f023 0320 	bic.w	r3, r3, #32
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	2310      	movs	r3, #16
 800519a:	e7af      	b.n	80050fc <_printf_i+0xfc>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f043 0320 	orr.w	r3, r3, #32
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	2378      	movs	r3, #120	; 0x78
 80051a6:	4828      	ldr	r0, [pc, #160]	; (8005248 <_printf_i+0x248>)
 80051a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ac:	e7e3      	b.n	8005176 <_printf_i+0x176>
 80051ae:	0659      	lsls	r1, r3, #25
 80051b0:	bf48      	it	mi
 80051b2:	b2b6      	uxthmi	r6, r6
 80051b4:	e7e6      	b.n	8005184 <_printf_i+0x184>
 80051b6:	4615      	mov	r5, r2
 80051b8:	e7bb      	b.n	8005132 <_printf_i+0x132>
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	6826      	ldr	r6, [r4, #0]
 80051be:	1d18      	adds	r0, r3, #4
 80051c0:	6961      	ldr	r1, [r4, #20]
 80051c2:	6028      	str	r0, [r5, #0]
 80051c4:	0635      	lsls	r5, r6, #24
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	d501      	bpl.n	80051ce <_printf_i+0x1ce>
 80051ca:	6019      	str	r1, [r3, #0]
 80051cc:	e002      	b.n	80051d4 <_printf_i+0x1d4>
 80051ce:	0670      	lsls	r0, r6, #25
 80051d0:	d5fb      	bpl.n	80051ca <_printf_i+0x1ca>
 80051d2:	8019      	strh	r1, [r3, #0]
 80051d4:	2300      	movs	r3, #0
 80051d6:	4615      	mov	r5, r2
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	e7ba      	b.n	8005152 <_printf_i+0x152>
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	2100      	movs	r1, #0
 80051e0:	1d1a      	adds	r2, r3, #4
 80051e2:	602a      	str	r2, [r5, #0]
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	6862      	ldr	r2, [r4, #4]
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fb23 	bl	8005834 <memchr>
 80051ee:	b108      	cbz	r0, 80051f4 <_printf_i+0x1f4>
 80051f0:	1b40      	subs	r0, r0, r5
 80051f2:	6060      	str	r0, [r4, #4]
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	2300      	movs	r3, #0
 80051fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fe:	e7a8      	b.n	8005152 <_printf_i+0x152>
 8005200:	462a      	mov	r2, r5
 8005202:	4649      	mov	r1, r9
 8005204:	4640      	mov	r0, r8
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	47d0      	blx	sl
 800520a:	3001      	adds	r0, #1
 800520c:	d0ab      	beq.n	8005166 <_printf_i+0x166>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	079b      	lsls	r3, r3, #30
 8005212:	d413      	bmi.n	800523c <_printf_i+0x23c>
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	4298      	cmp	r0, r3
 800521a:	bfb8      	it	lt
 800521c:	4618      	movlt	r0, r3
 800521e:	e7a4      	b.n	800516a <_printf_i+0x16a>
 8005220:	2301      	movs	r3, #1
 8005222:	4632      	mov	r2, r6
 8005224:	4649      	mov	r1, r9
 8005226:	4640      	mov	r0, r8
 8005228:	47d0      	blx	sl
 800522a:	3001      	adds	r0, #1
 800522c:	d09b      	beq.n	8005166 <_printf_i+0x166>
 800522e:	3501      	adds	r5, #1
 8005230:	68e3      	ldr	r3, [r4, #12]
 8005232:	9903      	ldr	r1, [sp, #12]
 8005234:	1a5b      	subs	r3, r3, r1
 8005236:	42ab      	cmp	r3, r5
 8005238:	dcf2      	bgt.n	8005220 <_printf_i+0x220>
 800523a:	e7eb      	b.n	8005214 <_printf_i+0x214>
 800523c:	2500      	movs	r5, #0
 800523e:	f104 0619 	add.w	r6, r4, #25
 8005242:	e7f5      	b.n	8005230 <_printf_i+0x230>
 8005244:	08005b73 	.word	0x08005b73
 8005248:	08005b84 	.word	0x08005b84

0800524c <_sbrk_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	2300      	movs	r3, #0
 8005250:	4d05      	ldr	r5, [pc, #20]	; (8005268 <_sbrk_r+0x1c>)
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fc f906 	bl	8001468 <_sbrk>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_sbrk_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_sbrk_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200002b0 	.word	0x200002b0

0800526c <__swbuf_r>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	460e      	mov	r6, r1
 8005270:	4614      	mov	r4, r2
 8005272:	4605      	mov	r5, r0
 8005274:	b118      	cbz	r0, 800527e <__swbuf_r+0x12>
 8005276:	6983      	ldr	r3, [r0, #24]
 8005278:	b90b      	cbnz	r3, 800527e <__swbuf_r+0x12>
 800527a:	f000 f9d5 	bl	8005628 <__sinit>
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <__swbuf_r+0x98>)
 8005280:	429c      	cmp	r4, r3
 8005282:	d12b      	bne.n	80052dc <__swbuf_r+0x70>
 8005284:	686c      	ldr	r4, [r5, #4]
 8005286:	69a3      	ldr	r3, [r4, #24]
 8005288:	60a3      	str	r3, [r4, #8]
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	071a      	lsls	r2, r3, #28
 800528e:	d52f      	bpl.n	80052f0 <__swbuf_r+0x84>
 8005290:	6923      	ldr	r3, [r4, #16]
 8005292:	b36b      	cbz	r3, 80052f0 <__swbuf_r+0x84>
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	b2f6      	uxtb	r6, r6
 800529a:	1ac0      	subs	r0, r0, r3
 800529c:	6963      	ldr	r3, [r4, #20]
 800529e:	4637      	mov	r7, r6
 80052a0:	4283      	cmp	r3, r0
 80052a2:	dc04      	bgt.n	80052ae <__swbuf_r+0x42>
 80052a4:	4621      	mov	r1, r4
 80052a6:	4628      	mov	r0, r5
 80052a8:	f000 f92a 	bl	8005500 <_fflush_r>
 80052ac:	bb30      	cbnz	r0, 80052fc <__swbuf_r+0x90>
 80052ae:	68a3      	ldr	r3, [r4, #8]
 80052b0:	3001      	adds	r0, #1
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	6022      	str	r2, [r4, #0]
 80052bc:	701e      	strb	r6, [r3, #0]
 80052be:	6963      	ldr	r3, [r4, #20]
 80052c0:	4283      	cmp	r3, r0
 80052c2:	d004      	beq.n	80052ce <__swbuf_r+0x62>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	07db      	lsls	r3, r3, #31
 80052c8:	d506      	bpl.n	80052d8 <__swbuf_r+0x6c>
 80052ca:	2e0a      	cmp	r6, #10
 80052cc:	d104      	bne.n	80052d8 <__swbuf_r+0x6c>
 80052ce:	4621      	mov	r1, r4
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 f915 	bl	8005500 <_fflush_r>
 80052d6:	b988      	cbnz	r0, 80052fc <__swbuf_r+0x90>
 80052d8:	4638      	mov	r0, r7
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <__swbuf_r+0x9c>)
 80052de:	429c      	cmp	r4, r3
 80052e0:	d101      	bne.n	80052e6 <__swbuf_r+0x7a>
 80052e2:	68ac      	ldr	r4, [r5, #8]
 80052e4:	e7cf      	b.n	8005286 <__swbuf_r+0x1a>
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <__swbuf_r+0xa0>)
 80052e8:	429c      	cmp	r4, r3
 80052ea:	bf08      	it	eq
 80052ec:	68ec      	ldreq	r4, [r5, #12]
 80052ee:	e7ca      	b.n	8005286 <__swbuf_r+0x1a>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f80c 	bl	8005310 <__swsetup_r>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d0cb      	beq.n	8005294 <__swbuf_r+0x28>
 80052fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005300:	e7ea      	b.n	80052d8 <__swbuf_r+0x6c>
 8005302:	bf00      	nop
 8005304:	08005bb8 	.word	0x08005bb8
 8005308:	08005bd8 	.word	0x08005bd8
 800530c:	08005b98 	.word	0x08005b98

08005310 <__swsetup_r>:
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <__swsetup_r+0xcc>)
 8005312:	b570      	push	{r4, r5, r6, lr}
 8005314:	681d      	ldr	r5, [r3, #0]
 8005316:	4606      	mov	r6, r0
 8005318:	460c      	mov	r4, r1
 800531a:	b125      	cbz	r5, 8005326 <__swsetup_r+0x16>
 800531c:	69ab      	ldr	r3, [r5, #24]
 800531e:	b913      	cbnz	r3, 8005326 <__swsetup_r+0x16>
 8005320:	4628      	mov	r0, r5
 8005322:	f000 f981 	bl	8005628 <__sinit>
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <__swsetup_r+0xd0>)
 8005328:	429c      	cmp	r4, r3
 800532a:	d10f      	bne.n	800534c <__swsetup_r+0x3c>
 800532c:	686c      	ldr	r4, [r5, #4]
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005334:	0719      	lsls	r1, r3, #28
 8005336:	d42c      	bmi.n	8005392 <__swsetup_r+0x82>
 8005338:	06dd      	lsls	r5, r3, #27
 800533a:	d411      	bmi.n	8005360 <__swsetup_r+0x50>
 800533c:	2309      	movs	r3, #9
 800533e:	6033      	str	r3, [r6, #0]
 8005340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	e03e      	b.n	80053ca <__swsetup_r+0xba>
 800534c:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <__swsetup_r+0xd4>)
 800534e:	429c      	cmp	r4, r3
 8005350:	d101      	bne.n	8005356 <__swsetup_r+0x46>
 8005352:	68ac      	ldr	r4, [r5, #8]
 8005354:	e7eb      	b.n	800532e <__swsetup_r+0x1e>
 8005356:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <__swsetup_r+0xd8>)
 8005358:	429c      	cmp	r4, r3
 800535a:	bf08      	it	eq
 800535c:	68ec      	ldreq	r4, [r5, #12]
 800535e:	e7e6      	b.n	800532e <__swsetup_r+0x1e>
 8005360:	0758      	lsls	r0, r3, #29
 8005362:	d512      	bpl.n	800538a <__swsetup_r+0x7a>
 8005364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005366:	b141      	cbz	r1, 800537a <__swsetup_r+0x6a>
 8005368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800536c:	4299      	cmp	r1, r3
 800536e:	d002      	beq.n	8005376 <__swsetup_r+0x66>
 8005370:	4630      	mov	r0, r6
 8005372:	f7ff fba1 	bl	8004ab8 <_free_r>
 8005376:	2300      	movs	r3, #0
 8005378:	6363      	str	r3, [r4, #52]	; 0x34
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	2300      	movs	r3, #0
 8005384:	6063      	str	r3, [r4, #4]
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	f043 0308 	orr.w	r3, r3, #8
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	6923      	ldr	r3, [r4, #16]
 8005394:	b94b      	cbnz	r3, 80053aa <__swsetup_r+0x9a>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800539c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a0:	d003      	beq.n	80053aa <__swsetup_r+0x9a>
 80053a2:	4621      	mov	r1, r4
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 fa05 	bl	80057b4 <__smakebuf_r>
 80053aa:	89a0      	ldrh	r0, [r4, #12]
 80053ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053b0:	f010 0301 	ands.w	r3, r0, #1
 80053b4:	d00a      	beq.n	80053cc <__swsetup_r+0xbc>
 80053b6:	2300      	movs	r3, #0
 80053b8:	60a3      	str	r3, [r4, #8]
 80053ba:	6963      	ldr	r3, [r4, #20]
 80053bc:	425b      	negs	r3, r3
 80053be:	61a3      	str	r3, [r4, #24]
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	b943      	cbnz	r3, 80053d6 <__swsetup_r+0xc6>
 80053c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053c8:	d1ba      	bne.n	8005340 <__swsetup_r+0x30>
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	0781      	lsls	r1, r0, #30
 80053ce:	bf58      	it	pl
 80053d0:	6963      	ldrpl	r3, [r4, #20]
 80053d2:	60a3      	str	r3, [r4, #8]
 80053d4:	e7f4      	b.n	80053c0 <__swsetup_r+0xb0>
 80053d6:	2000      	movs	r0, #0
 80053d8:	e7f7      	b.n	80053ca <__swsetup_r+0xba>
 80053da:	bf00      	nop
 80053dc:	20000010 	.word	0x20000010
 80053e0:	08005bb8 	.word	0x08005bb8
 80053e4:	08005bd8 	.word	0x08005bd8
 80053e8:	08005b98 	.word	0x08005b98

080053ec <abort>:
 80053ec:	2006      	movs	r0, #6
 80053ee:	b508      	push	{r3, lr}
 80053f0:	f000 fa62 	bl	80058b8 <raise>
 80053f4:	2001      	movs	r0, #1
 80053f6:	f7fb ffe0 	bl	80013ba <_exit>
	...

080053fc <__sflush_r>:
 80053fc:	898a      	ldrh	r2, [r1, #12]
 80053fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005400:	4605      	mov	r5, r0
 8005402:	0710      	lsls	r0, r2, #28
 8005404:	460c      	mov	r4, r1
 8005406:	d457      	bmi.n	80054b8 <__sflush_r+0xbc>
 8005408:	684b      	ldr	r3, [r1, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	dc04      	bgt.n	8005418 <__sflush_r+0x1c>
 800540e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	dc01      	bgt.n	8005418 <__sflush_r+0x1c>
 8005414:	2000      	movs	r0, #0
 8005416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800541a:	2e00      	cmp	r6, #0
 800541c:	d0fa      	beq.n	8005414 <__sflush_r+0x18>
 800541e:	2300      	movs	r3, #0
 8005420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005424:	682f      	ldr	r7, [r5, #0]
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	d032      	beq.n	8005490 <__sflush_r+0x94>
 800542a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	075a      	lsls	r2, r3, #29
 8005430:	d505      	bpl.n	800543e <__sflush_r+0x42>
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	1ac0      	subs	r0, r0, r3
 8005436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005438:	b10b      	cbz	r3, 800543e <__sflush_r+0x42>
 800543a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800543c:	1ac0      	subs	r0, r0, r3
 800543e:	2300      	movs	r3, #0
 8005440:	4602      	mov	r2, r0
 8005442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005444:	4628      	mov	r0, r5
 8005446:	6a21      	ldr	r1, [r4, #32]
 8005448:	47b0      	blx	r6
 800544a:	1c43      	adds	r3, r0, #1
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	d106      	bne.n	800545e <__sflush_r+0x62>
 8005450:	6829      	ldr	r1, [r5, #0]
 8005452:	291d      	cmp	r1, #29
 8005454:	d82c      	bhi.n	80054b0 <__sflush_r+0xb4>
 8005456:	4a29      	ldr	r2, [pc, #164]	; (80054fc <__sflush_r+0x100>)
 8005458:	40ca      	lsrs	r2, r1
 800545a:	07d6      	lsls	r6, r2, #31
 800545c:	d528      	bpl.n	80054b0 <__sflush_r+0xb4>
 800545e:	2200      	movs	r2, #0
 8005460:	6062      	str	r2, [r4, #4]
 8005462:	6922      	ldr	r2, [r4, #16]
 8005464:	04d9      	lsls	r1, r3, #19
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	d504      	bpl.n	8005474 <__sflush_r+0x78>
 800546a:	1c42      	adds	r2, r0, #1
 800546c:	d101      	bne.n	8005472 <__sflush_r+0x76>
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	b903      	cbnz	r3, 8005474 <__sflush_r+0x78>
 8005472:	6560      	str	r0, [r4, #84]	; 0x54
 8005474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005476:	602f      	str	r7, [r5, #0]
 8005478:	2900      	cmp	r1, #0
 800547a:	d0cb      	beq.n	8005414 <__sflush_r+0x18>
 800547c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005480:	4299      	cmp	r1, r3
 8005482:	d002      	beq.n	800548a <__sflush_r+0x8e>
 8005484:	4628      	mov	r0, r5
 8005486:	f7ff fb17 	bl	8004ab8 <_free_r>
 800548a:	2000      	movs	r0, #0
 800548c:	6360      	str	r0, [r4, #52]	; 0x34
 800548e:	e7c2      	b.n	8005416 <__sflush_r+0x1a>
 8005490:	6a21      	ldr	r1, [r4, #32]
 8005492:	2301      	movs	r3, #1
 8005494:	4628      	mov	r0, r5
 8005496:	47b0      	blx	r6
 8005498:	1c41      	adds	r1, r0, #1
 800549a:	d1c7      	bne.n	800542c <__sflush_r+0x30>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0c4      	beq.n	800542c <__sflush_r+0x30>
 80054a2:	2b1d      	cmp	r3, #29
 80054a4:	d001      	beq.n	80054aa <__sflush_r+0xae>
 80054a6:	2b16      	cmp	r3, #22
 80054a8:	d101      	bne.n	80054ae <__sflush_r+0xb2>
 80054aa:	602f      	str	r7, [r5, #0]
 80054ac:	e7b2      	b.n	8005414 <__sflush_r+0x18>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	e7ae      	b.n	8005416 <__sflush_r+0x1a>
 80054b8:	690f      	ldr	r7, [r1, #16]
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	d0aa      	beq.n	8005414 <__sflush_r+0x18>
 80054be:	0793      	lsls	r3, r2, #30
 80054c0:	bf18      	it	ne
 80054c2:	2300      	movne	r3, #0
 80054c4:	680e      	ldr	r6, [r1, #0]
 80054c6:	bf08      	it	eq
 80054c8:	694b      	ldreq	r3, [r1, #20]
 80054ca:	1bf6      	subs	r6, r6, r7
 80054cc:	600f      	str	r7, [r1, #0]
 80054ce:	608b      	str	r3, [r1, #8]
 80054d0:	2e00      	cmp	r6, #0
 80054d2:	dd9f      	ble.n	8005414 <__sflush_r+0x18>
 80054d4:	4633      	mov	r3, r6
 80054d6:	463a      	mov	r2, r7
 80054d8:	4628      	mov	r0, r5
 80054da:	6a21      	ldr	r1, [r4, #32]
 80054dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80054e0:	47e0      	blx	ip
 80054e2:	2800      	cmp	r0, #0
 80054e4:	dc06      	bgt.n	80054f4 <__sflush_r+0xf8>
 80054e6:	89a3      	ldrh	r3, [r4, #12]
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	e790      	b.n	8005416 <__sflush_r+0x1a>
 80054f4:	4407      	add	r7, r0
 80054f6:	1a36      	subs	r6, r6, r0
 80054f8:	e7ea      	b.n	80054d0 <__sflush_r+0xd4>
 80054fa:	bf00      	nop
 80054fc:	20400001 	.word	0x20400001

08005500 <_fflush_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	4605      	mov	r5, r0
 8005506:	460c      	mov	r4, r1
 8005508:	b913      	cbnz	r3, 8005510 <_fflush_r+0x10>
 800550a:	2500      	movs	r5, #0
 800550c:	4628      	mov	r0, r5
 800550e:	bd38      	pop	{r3, r4, r5, pc}
 8005510:	b118      	cbz	r0, 800551a <_fflush_r+0x1a>
 8005512:	6983      	ldr	r3, [r0, #24]
 8005514:	b90b      	cbnz	r3, 800551a <_fflush_r+0x1a>
 8005516:	f000 f887 	bl	8005628 <__sinit>
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <_fflush_r+0x6c>)
 800551c:	429c      	cmp	r4, r3
 800551e:	d11b      	bne.n	8005558 <_fflush_r+0x58>
 8005520:	686c      	ldr	r4, [r5, #4]
 8005522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ef      	beq.n	800550a <_fflush_r+0xa>
 800552a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800552c:	07d0      	lsls	r0, r2, #31
 800552e:	d404      	bmi.n	800553a <_fflush_r+0x3a>
 8005530:	0599      	lsls	r1, r3, #22
 8005532:	d402      	bmi.n	800553a <_fflush_r+0x3a>
 8005534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005536:	f000 f915 	bl	8005764 <__retarget_lock_acquire_recursive>
 800553a:	4628      	mov	r0, r5
 800553c:	4621      	mov	r1, r4
 800553e:	f7ff ff5d 	bl	80053fc <__sflush_r>
 8005542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005544:	4605      	mov	r5, r0
 8005546:	07da      	lsls	r2, r3, #31
 8005548:	d4e0      	bmi.n	800550c <_fflush_r+0xc>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	059b      	lsls	r3, r3, #22
 800554e:	d4dd      	bmi.n	800550c <_fflush_r+0xc>
 8005550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005552:	f000 f908 	bl	8005766 <__retarget_lock_release_recursive>
 8005556:	e7d9      	b.n	800550c <_fflush_r+0xc>
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <_fflush_r+0x70>)
 800555a:	429c      	cmp	r4, r3
 800555c:	d101      	bne.n	8005562 <_fflush_r+0x62>
 800555e:	68ac      	ldr	r4, [r5, #8]
 8005560:	e7df      	b.n	8005522 <_fflush_r+0x22>
 8005562:	4b04      	ldr	r3, [pc, #16]	; (8005574 <_fflush_r+0x74>)
 8005564:	429c      	cmp	r4, r3
 8005566:	bf08      	it	eq
 8005568:	68ec      	ldreq	r4, [r5, #12]
 800556a:	e7da      	b.n	8005522 <_fflush_r+0x22>
 800556c:	08005bb8 	.word	0x08005bb8
 8005570:	08005bd8 	.word	0x08005bd8
 8005574:	08005b98 	.word	0x08005b98

08005578 <std>:
 8005578:	2300      	movs	r3, #0
 800557a:	b510      	push	{r4, lr}
 800557c:	4604      	mov	r4, r0
 800557e:	e9c0 3300 	strd	r3, r3, [r0]
 8005582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005586:	6083      	str	r3, [r0, #8]
 8005588:	8181      	strh	r1, [r0, #12]
 800558a:	6643      	str	r3, [r0, #100]	; 0x64
 800558c:	81c2      	strh	r2, [r0, #14]
 800558e:	6183      	str	r3, [r0, #24]
 8005590:	4619      	mov	r1, r3
 8005592:	2208      	movs	r2, #8
 8005594:	305c      	adds	r0, #92	; 0x5c
 8005596:	f7ff f9b7 	bl	8004908 <memset>
 800559a:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <std+0x38>)
 800559c:	6224      	str	r4, [r4, #32]
 800559e:	6263      	str	r3, [r4, #36]	; 0x24
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <std+0x3c>)
 80055a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80055a4:	4b04      	ldr	r3, [pc, #16]	; (80055b8 <std+0x40>)
 80055a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <std+0x44>)
 80055aa:	6323      	str	r3, [r4, #48]	; 0x30
 80055ac:	bd10      	pop	{r4, pc}
 80055ae:	bf00      	nop
 80055b0:	080058f1 	.word	0x080058f1
 80055b4:	08005913 	.word	0x08005913
 80055b8:	0800594b 	.word	0x0800594b
 80055bc:	0800596f 	.word	0x0800596f

080055c0 <_cleanup_r>:
 80055c0:	4901      	ldr	r1, [pc, #4]	; (80055c8 <_cleanup_r+0x8>)
 80055c2:	f000 b8af 	b.w	8005724 <_fwalk_reent>
 80055c6:	bf00      	nop
 80055c8:	08005501 	.word	0x08005501

080055cc <__sfmoreglue>:
 80055cc:	2268      	movs	r2, #104	; 0x68
 80055ce:	b570      	push	{r4, r5, r6, lr}
 80055d0:	1e4d      	subs	r5, r1, #1
 80055d2:	4355      	muls	r5, r2
 80055d4:	460e      	mov	r6, r1
 80055d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055da:	f7ff fad5 	bl	8004b88 <_malloc_r>
 80055de:	4604      	mov	r4, r0
 80055e0:	b140      	cbz	r0, 80055f4 <__sfmoreglue+0x28>
 80055e2:	2100      	movs	r1, #0
 80055e4:	e9c0 1600 	strd	r1, r6, [r0]
 80055e8:	300c      	adds	r0, #12
 80055ea:	60a0      	str	r0, [r4, #8]
 80055ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055f0:	f7ff f98a 	bl	8004908 <memset>
 80055f4:	4620      	mov	r0, r4
 80055f6:	bd70      	pop	{r4, r5, r6, pc}

080055f8 <__sfp_lock_acquire>:
 80055f8:	4801      	ldr	r0, [pc, #4]	; (8005600 <__sfp_lock_acquire+0x8>)
 80055fa:	f000 b8b3 	b.w	8005764 <__retarget_lock_acquire_recursive>
 80055fe:	bf00      	nop
 8005600:	200002b5 	.word	0x200002b5

08005604 <__sfp_lock_release>:
 8005604:	4801      	ldr	r0, [pc, #4]	; (800560c <__sfp_lock_release+0x8>)
 8005606:	f000 b8ae 	b.w	8005766 <__retarget_lock_release_recursive>
 800560a:	bf00      	nop
 800560c:	200002b5 	.word	0x200002b5

08005610 <__sinit_lock_acquire>:
 8005610:	4801      	ldr	r0, [pc, #4]	; (8005618 <__sinit_lock_acquire+0x8>)
 8005612:	f000 b8a7 	b.w	8005764 <__retarget_lock_acquire_recursive>
 8005616:	bf00      	nop
 8005618:	200002b6 	.word	0x200002b6

0800561c <__sinit_lock_release>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__sinit_lock_release+0x8>)
 800561e:	f000 b8a2 	b.w	8005766 <__retarget_lock_release_recursive>
 8005622:	bf00      	nop
 8005624:	200002b6 	.word	0x200002b6

08005628 <__sinit>:
 8005628:	b510      	push	{r4, lr}
 800562a:	4604      	mov	r4, r0
 800562c:	f7ff fff0 	bl	8005610 <__sinit_lock_acquire>
 8005630:	69a3      	ldr	r3, [r4, #24]
 8005632:	b11b      	cbz	r3, 800563c <__sinit+0x14>
 8005634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005638:	f7ff bff0 	b.w	800561c <__sinit_lock_release>
 800563c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005640:	6523      	str	r3, [r4, #80]	; 0x50
 8005642:	4b13      	ldr	r3, [pc, #76]	; (8005690 <__sinit+0x68>)
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <__sinit+0x6c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	62a2      	str	r2, [r4, #40]	; 0x28
 800564a:	42a3      	cmp	r3, r4
 800564c:	bf08      	it	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	4620      	mov	r0, r4
 8005652:	bf08      	it	eq
 8005654:	61a3      	streq	r3, [r4, #24]
 8005656:	f000 f81f 	bl	8005698 <__sfp>
 800565a:	6060      	str	r0, [r4, #4]
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f81b 	bl	8005698 <__sfp>
 8005662:	60a0      	str	r0, [r4, #8]
 8005664:	4620      	mov	r0, r4
 8005666:	f000 f817 	bl	8005698 <__sfp>
 800566a:	2200      	movs	r2, #0
 800566c:	2104      	movs	r1, #4
 800566e:	60e0      	str	r0, [r4, #12]
 8005670:	6860      	ldr	r0, [r4, #4]
 8005672:	f7ff ff81 	bl	8005578 <std>
 8005676:	2201      	movs	r2, #1
 8005678:	2109      	movs	r1, #9
 800567a:	68a0      	ldr	r0, [r4, #8]
 800567c:	f7ff ff7c 	bl	8005578 <std>
 8005680:	2202      	movs	r2, #2
 8005682:	2112      	movs	r1, #18
 8005684:	68e0      	ldr	r0, [r4, #12]
 8005686:	f7ff ff77 	bl	8005578 <std>
 800568a:	2301      	movs	r3, #1
 800568c:	61a3      	str	r3, [r4, #24]
 800568e:	e7d1      	b.n	8005634 <__sinit+0xc>
 8005690:	08005ab0 	.word	0x08005ab0
 8005694:	080055c1 	.word	0x080055c1

08005698 <__sfp>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	4607      	mov	r7, r0
 800569c:	f7ff ffac 	bl	80055f8 <__sfp_lock_acquire>
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <__sfp+0x84>)
 80056a2:	681e      	ldr	r6, [r3, #0]
 80056a4:	69b3      	ldr	r3, [r6, #24]
 80056a6:	b913      	cbnz	r3, 80056ae <__sfp+0x16>
 80056a8:	4630      	mov	r0, r6
 80056aa:	f7ff ffbd 	bl	8005628 <__sinit>
 80056ae:	3648      	adds	r6, #72	; 0x48
 80056b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	d503      	bpl.n	80056c0 <__sfp+0x28>
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	b30b      	cbz	r3, 8005700 <__sfp+0x68>
 80056bc:	6836      	ldr	r6, [r6, #0]
 80056be:	e7f7      	b.n	80056b0 <__sfp+0x18>
 80056c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80056c4:	b9d5      	cbnz	r5, 80056fc <__sfp+0x64>
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <__sfp+0x88>)
 80056c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80056cc:	60e3      	str	r3, [r4, #12]
 80056ce:	6665      	str	r5, [r4, #100]	; 0x64
 80056d0:	f000 f847 	bl	8005762 <__retarget_lock_init_recursive>
 80056d4:	f7ff ff96 	bl	8005604 <__sfp_lock_release>
 80056d8:	2208      	movs	r2, #8
 80056da:	4629      	mov	r1, r5
 80056dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80056e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80056e4:	6025      	str	r5, [r4, #0]
 80056e6:	61a5      	str	r5, [r4, #24]
 80056e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056ec:	f7ff f90c 	bl	8004908 <memset>
 80056f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80056f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80056f8:	4620      	mov	r0, r4
 80056fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056fc:	3468      	adds	r4, #104	; 0x68
 80056fe:	e7d9      	b.n	80056b4 <__sfp+0x1c>
 8005700:	2104      	movs	r1, #4
 8005702:	4638      	mov	r0, r7
 8005704:	f7ff ff62 	bl	80055cc <__sfmoreglue>
 8005708:	4604      	mov	r4, r0
 800570a:	6030      	str	r0, [r6, #0]
 800570c:	2800      	cmp	r0, #0
 800570e:	d1d5      	bne.n	80056bc <__sfp+0x24>
 8005710:	f7ff ff78 	bl	8005604 <__sfp_lock_release>
 8005714:	230c      	movs	r3, #12
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	e7ee      	b.n	80056f8 <__sfp+0x60>
 800571a:	bf00      	nop
 800571c:	08005ab0 	.word	0x08005ab0
 8005720:	ffff0001 	.word	0xffff0001

08005724 <_fwalk_reent>:
 8005724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005728:	4606      	mov	r6, r0
 800572a:	4688      	mov	r8, r1
 800572c:	2700      	movs	r7, #0
 800572e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005736:	f1b9 0901 	subs.w	r9, r9, #1
 800573a:	d505      	bpl.n	8005748 <_fwalk_reent+0x24>
 800573c:	6824      	ldr	r4, [r4, #0]
 800573e:	2c00      	cmp	r4, #0
 8005740:	d1f7      	bne.n	8005732 <_fwalk_reent+0xe>
 8005742:	4638      	mov	r0, r7
 8005744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005748:	89ab      	ldrh	r3, [r5, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d907      	bls.n	800575e <_fwalk_reent+0x3a>
 800574e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005752:	3301      	adds	r3, #1
 8005754:	d003      	beq.n	800575e <_fwalk_reent+0x3a>
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	47c0      	blx	r8
 800575c:	4307      	orrs	r7, r0
 800575e:	3568      	adds	r5, #104	; 0x68
 8005760:	e7e9      	b.n	8005736 <_fwalk_reent+0x12>

08005762 <__retarget_lock_init_recursive>:
 8005762:	4770      	bx	lr

08005764 <__retarget_lock_acquire_recursive>:
 8005764:	4770      	bx	lr

08005766 <__retarget_lock_release_recursive>:
 8005766:	4770      	bx	lr

08005768 <__swhatbuf_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	460e      	mov	r6, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	4614      	mov	r4, r2
 8005772:	2900      	cmp	r1, #0
 8005774:	461d      	mov	r5, r3
 8005776:	b096      	sub	sp, #88	; 0x58
 8005778:	da08      	bge.n	800578c <__swhatbuf_r+0x24>
 800577a:	2200      	movs	r2, #0
 800577c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005780:	602a      	str	r2, [r5, #0]
 8005782:	061a      	lsls	r2, r3, #24
 8005784:	d410      	bmi.n	80057a8 <__swhatbuf_r+0x40>
 8005786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578a:	e00e      	b.n	80057aa <__swhatbuf_r+0x42>
 800578c:	466a      	mov	r2, sp
 800578e:	f000 f915 	bl	80059bc <_fstat_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	dbf1      	blt.n	800577a <__swhatbuf_r+0x12>
 8005796:	9a01      	ldr	r2, [sp, #4]
 8005798:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800579c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057a0:	425a      	negs	r2, r3
 80057a2:	415a      	adcs	r2, r3
 80057a4:	602a      	str	r2, [r5, #0]
 80057a6:	e7ee      	b.n	8005786 <__swhatbuf_r+0x1e>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	2000      	movs	r0, #0
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	b016      	add	sp, #88	; 0x58
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080057b4 <__smakebuf_r>:
 80057b4:	898b      	ldrh	r3, [r1, #12]
 80057b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057b8:	079d      	lsls	r5, r3, #30
 80057ba:	4606      	mov	r6, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	d507      	bpl.n	80057d0 <__smakebuf_r+0x1c>
 80057c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	6123      	str	r3, [r4, #16]
 80057c8:	2301      	movs	r3, #1
 80057ca:	6163      	str	r3, [r4, #20]
 80057cc:	b002      	add	sp, #8
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	466a      	mov	r2, sp
 80057d2:	ab01      	add	r3, sp, #4
 80057d4:	f7ff ffc8 	bl	8005768 <__swhatbuf_r>
 80057d8:	9900      	ldr	r1, [sp, #0]
 80057da:	4605      	mov	r5, r0
 80057dc:	4630      	mov	r0, r6
 80057de:	f7ff f9d3 	bl	8004b88 <_malloc_r>
 80057e2:	b948      	cbnz	r0, 80057f8 <__smakebuf_r+0x44>
 80057e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e8:	059a      	lsls	r2, r3, #22
 80057ea:	d4ef      	bmi.n	80057cc <__smakebuf_r+0x18>
 80057ec:	f023 0303 	bic.w	r3, r3, #3
 80057f0:	f043 0302 	orr.w	r3, r3, #2
 80057f4:	81a3      	strh	r3, [r4, #12]
 80057f6:	e7e3      	b.n	80057c0 <__smakebuf_r+0xc>
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <__smakebuf_r+0x7c>)
 80057fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	6020      	str	r0, [r4, #0]
 8005800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	9b00      	ldr	r3, [sp, #0]
 8005808:	6120      	str	r0, [r4, #16]
 800580a:	6163      	str	r3, [r4, #20]
 800580c:	9b01      	ldr	r3, [sp, #4]
 800580e:	b15b      	cbz	r3, 8005828 <__smakebuf_r+0x74>
 8005810:	4630      	mov	r0, r6
 8005812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005816:	f000 f8e3 	bl	80059e0 <_isatty_r>
 800581a:	b128      	cbz	r0, 8005828 <__smakebuf_r+0x74>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	89a0      	ldrh	r0, [r4, #12]
 800582a:	4305      	orrs	r5, r0
 800582c:	81a5      	strh	r5, [r4, #12]
 800582e:	e7cd      	b.n	80057cc <__smakebuf_r+0x18>
 8005830:	080055c1 	.word	0x080055c1

08005834 <memchr>:
 8005834:	4603      	mov	r3, r0
 8005836:	b510      	push	{r4, lr}
 8005838:	b2c9      	uxtb	r1, r1
 800583a:	4402      	add	r2, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	4618      	mov	r0, r3
 8005840:	d101      	bne.n	8005846 <memchr+0x12>
 8005842:	2000      	movs	r0, #0
 8005844:	e003      	b.n	800584e <memchr+0x1a>
 8005846:	7804      	ldrb	r4, [r0, #0]
 8005848:	3301      	adds	r3, #1
 800584a:	428c      	cmp	r4, r1
 800584c:	d1f6      	bne.n	800583c <memchr+0x8>
 800584e:	bd10      	pop	{r4, pc}

08005850 <__malloc_lock>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__malloc_lock+0x8>)
 8005852:	f7ff bf87 	b.w	8005764 <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	200002b4 	.word	0x200002b4

0800585c <__malloc_unlock>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__malloc_unlock+0x8>)
 800585e:	f7ff bf82 	b.w	8005766 <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	200002b4 	.word	0x200002b4

08005868 <_raise_r>:
 8005868:	291f      	cmp	r1, #31
 800586a:	b538      	push	{r3, r4, r5, lr}
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
 8005870:	d904      	bls.n	800587c <_raise_r+0x14>
 8005872:	2316      	movs	r3, #22
 8005874:	6003      	str	r3, [r0, #0]
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800587e:	b112      	cbz	r2, 8005886 <_raise_r+0x1e>
 8005880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005884:	b94b      	cbnz	r3, 800589a <_raise_r+0x32>
 8005886:	4620      	mov	r0, r4
 8005888:	f000 f830 	bl	80058ec <_getpid_r>
 800588c:	462a      	mov	r2, r5
 800588e:	4601      	mov	r1, r0
 8005890:	4620      	mov	r0, r4
 8005892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005896:	f000 b817 	b.w	80058c8 <_kill_r>
 800589a:	2b01      	cmp	r3, #1
 800589c:	d00a      	beq.n	80058b4 <_raise_r+0x4c>
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	d103      	bne.n	80058aa <_raise_r+0x42>
 80058a2:	2316      	movs	r3, #22
 80058a4:	6003      	str	r3, [r0, #0]
 80058a6:	2001      	movs	r0, #1
 80058a8:	e7e7      	b.n	800587a <_raise_r+0x12>
 80058aa:	2400      	movs	r4, #0
 80058ac:	4628      	mov	r0, r5
 80058ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058b2:	4798      	blx	r3
 80058b4:	2000      	movs	r0, #0
 80058b6:	e7e0      	b.n	800587a <_raise_r+0x12>

080058b8 <raise>:
 80058b8:	4b02      	ldr	r3, [pc, #8]	; (80058c4 <raise+0xc>)
 80058ba:	4601      	mov	r1, r0
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	f7ff bfd3 	b.w	8005868 <_raise_r>
 80058c2:	bf00      	nop
 80058c4:	20000010 	.word	0x20000010

080058c8 <_kill_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	2300      	movs	r3, #0
 80058cc:	4d06      	ldr	r5, [pc, #24]	; (80058e8 <_kill_r+0x20>)
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	f7fb fd60 	bl	800139a <_kill>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	d102      	bne.n	80058e4 <_kill_r+0x1c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	b103      	cbz	r3, 80058e4 <_kill_r+0x1c>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd38      	pop	{r3, r4, r5, pc}
 80058e6:	bf00      	nop
 80058e8:	200002b0 	.word	0x200002b0

080058ec <_getpid_r>:
 80058ec:	f7fb bd4e 	b.w	800138c <_getpid>

080058f0 <__sread>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	460c      	mov	r4, r1
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	f000 f894 	bl	8005a24 <_read_r>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	bfab      	itete	ge
 8005900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005902:	89a3      	ldrhlt	r3, [r4, #12]
 8005904:	181b      	addge	r3, r3, r0
 8005906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800590a:	bfac      	ite	ge
 800590c:	6563      	strge	r3, [r4, #84]	; 0x54
 800590e:	81a3      	strhlt	r3, [r4, #12]
 8005910:	bd10      	pop	{r4, pc}

08005912 <__swrite>:
 8005912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	461f      	mov	r7, r3
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	4605      	mov	r5, r0
 800591c:	05db      	lsls	r3, r3, #23
 800591e:	460c      	mov	r4, r1
 8005920:	4616      	mov	r6, r2
 8005922:	d505      	bpl.n	8005930 <__swrite+0x1e>
 8005924:	2302      	movs	r3, #2
 8005926:	2200      	movs	r2, #0
 8005928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800592c:	f000 f868 	bl	8005a00 <_lseek_r>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	4632      	mov	r2, r6
 8005934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005938:	81a3      	strh	r3, [r4, #12]
 800593a:	4628      	mov	r0, r5
 800593c:	463b      	mov	r3, r7
 800593e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005946:	f000 b817 	b.w	8005978 <_write_r>

0800594a <__sseek>:
 800594a:	b510      	push	{r4, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 f855 	bl	8005a00 <_lseek_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	bf15      	itete	ne
 800595c:	6560      	strne	r0, [r4, #84]	; 0x54
 800595e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005966:	81a3      	strheq	r3, [r4, #12]
 8005968:	bf18      	it	ne
 800596a:	81a3      	strhne	r3, [r4, #12]
 800596c:	bd10      	pop	{r4, pc}

0800596e <__sclose>:
 800596e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005972:	f000 b813 	b.w	800599c <_close_r>
	...

08005978 <_write_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4604      	mov	r4, r0
 800597c:	4608      	mov	r0, r1
 800597e:	4611      	mov	r1, r2
 8005980:	2200      	movs	r2, #0
 8005982:	4d05      	ldr	r5, [pc, #20]	; (8005998 <_write_r+0x20>)
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fb f950 	bl	8000c2c <_write>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_write_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_write_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	200002b0 	.word	0x200002b0

0800599c <_close_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	2300      	movs	r3, #0
 80059a0:	4d05      	ldr	r5, [pc, #20]	; (80059b8 <_close_r+0x1c>)
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	602b      	str	r3, [r5, #0]
 80059a8:	f7fb fd2e 	bl	8001408 <_close>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_close_r+0x1a>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_close_r+0x1a>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	200002b0 	.word	0x200002b0

080059bc <_fstat_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	2300      	movs	r3, #0
 80059c0:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_fstat_r+0x20>)
 80059c2:	4604      	mov	r4, r0
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	602b      	str	r3, [r5, #0]
 80059ca:	f7fb fd28 	bl	800141e <_fstat>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d102      	bne.n	80059d8 <_fstat_r+0x1c>
 80059d2:	682b      	ldr	r3, [r5, #0]
 80059d4:	b103      	cbz	r3, 80059d8 <_fstat_r+0x1c>
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
 80059da:	bf00      	nop
 80059dc:	200002b0 	.word	0x200002b0

080059e0 <_isatty_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	2300      	movs	r3, #0
 80059e4:	4d05      	ldr	r5, [pc, #20]	; (80059fc <_isatty_r+0x1c>)
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	602b      	str	r3, [r5, #0]
 80059ec:	f7fb fd26 	bl	800143c <_isatty>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d102      	bne.n	80059fa <_isatty_r+0x1a>
 80059f4:	682b      	ldr	r3, [r5, #0]
 80059f6:	b103      	cbz	r3, 80059fa <_isatty_r+0x1a>
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	200002b0 	.word	0x200002b0

08005a00 <_lseek_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4d05      	ldr	r5, [pc, #20]	; (8005a20 <_lseek_r+0x20>)
 8005a0c:	602a      	str	r2, [r5, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f7fb fd1e 	bl	8001450 <_lseek>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d102      	bne.n	8005a1e <_lseek_r+0x1e>
 8005a18:	682b      	ldr	r3, [r5, #0]
 8005a1a:	b103      	cbz	r3, 8005a1e <_lseek_r+0x1e>
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	200002b0 	.word	0x200002b0

08005a24 <_read_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4d05      	ldr	r5, [pc, #20]	; (8005a44 <_read_r+0x20>)
 8005a30:	602a      	str	r2, [r5, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	f7fb fccb 	bl	80013ce <_read>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_read_r+0x1e>
 8005a3c:	682b      	ldr	r3, [r5, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_read_r+0x1e>
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	200002b0 	.word	0x200002b0

08005a48 <_gettimeofday>:
 8005a48:	2258      	movs	r2, #88	; 0x58
 8005a4a:	4b02      	ldr	r3, [pc, #8]	; (8005a54 <_gettimeofday+0xc>)
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	4770      	bx	lr
 8005a54:	200002b0 	.word	0x200002b0

08005a58 <_init>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr

08005a64 <_fini>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr
