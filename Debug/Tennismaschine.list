
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800679c  0800679c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800679c  0800679c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000074  08006818  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006818  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112c2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286b  00000000  00000000  0003135f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00033bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00034b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a093  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012feb  00000000  00000000  0004fab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920a3  00000000  00000000  00062a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4b41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  000f4b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f9748  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f976c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080065e4 	.word	0x080065e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080065e4 	.word	0x080065e4

0800014c <_writeCmd>:
		HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData,2, HAL_MAX_DELAY);
	}
}

// sends given command per i2c
void _writeCmd(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, &cmd, 1, HAL_MAX_DELAY);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <_writeCmd+0x2c>)
 8000158:	881b      	ldrh	r3, [r3, #0]
 800015a:	005b      	lsls	r3, r3, #1
 800015c:	b299      	uxth	r1, r3
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2301      	movs	r3, #1
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <_writeCmd+0x30>)
 800016a:	f002 fd11 	bl	8002b90 <HAL_I2C_Master_Transmit>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000096 	.word	0x20000096
 800017c:	200000e8 	.word	0x200000e8

08000180 <_writePos>:

// sends value (mask) for specific position per i2c, if different from cached value
void _writePos(uint8_t pos, uint8_t mask) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	if (_displayCache[pos] == mask)
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <_writePos+0x58>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	79ba      	ldrb	r2, [r7, #6]
 800019a:	429a      	cmp	r2, r3
 800019c:	d017      	beq.n	80001ce <_writePos+0x4e>
		return;

	uint8_t pData[2];
	pData[0] = pos * 2;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	733b      	strb	r3, [r7, #12]
	pData[1] = mask;
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData, 2, HAL_MAX_DELAY);
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <_writePos+0x5c>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	b299      	uxth	r1, r3
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2302      	movs	r3, #2
 80001be:	4808      	ldr	r0, [pc, #32]	; (80001e0 <_writePos+0x60>)
 80001c0:	f002 fce6 	bl	8002b90 <HAL_I2C_Master_Transmit>
	_displayCache[pos] = mask;	// update value in cache
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4904      	ldr	r1, [pc, #16]	; (80001d8 <_writePos+0x58>)
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	54ca      	strb	r2, [r1, r3]
 80001cc:	e000      	b.n	80001d0 <_writePos+0x50>
		return;
 80001ce:	bf00      	nop
}
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000090 	.word	0x20000090
 80001dc:	20000096 	.word	0x20000096
 80001e0:	200000e8 	.word	0x200000e8

080001e4 <seg7_displayOn>:

void seg7_refresh() {
	_refresh();
}

void seg7_displayOn() {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_ON);
 80001e8:	2021      	movs	r0, #33	; 0x21
 80001ea:	f7ff ffaf 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_DISPLAYON);
 80001ee:	2081      	movs	r0, #129	; 0x81
 80001f0:	f7ff ffac 	bl	800014c <_writeCmd>
	seg7_setBrightness(_bright);
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <seg7_displayOn+0x20>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 f826 	bl	800024c <seg7_setBrightness>
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	20000001 	.word	0x20000001

08000208 <seg7_displayOff>:

void seg7_displayOff() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_DISPLAYOFF);
 800020c:	2080      	movs	r0, #128	; 0x80
 800020e:	f7ff ff9d 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_STANDBY);
 8000212:	2020      	movs	r0, #32
 8000214:	f7ff ff9a 	bl	800014c <_writeCmd>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}

0800021c <seg7_setBlinkRate>:

void seg7_setBlinkRate(uint8_t value) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	if (value > 0x03) {
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d901      	bls.n	8000230 <seg7_setBlinkRate+0x14>
		value = 0x00;
 800022c:	2300      	movs	r3, #0
 800022e:	71fb      	strb	r3, [r7, #7]
	}

	_writeCmd(HT16K33_BLINKOFF | (value << 1));
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	005b      	lsls	r3, r3, #1
 8000234:	b25b      	sxtb	r3, r3
 8000236:	f063 037e 	orn	r3, r3, #126	; 0x7e
 800023a:	b25b      	sxtb	r3, r3
 800023c:	b2db      	uxtb	r3, r3
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff84 	bl	800014c <_writeCmd>
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <seg7_setBrightness>:

void seg7_setBrightness(uint8_t value) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	if (value == _bright)
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <seg7_setBrightness+0x48>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	79fa      	ldrb	r2, [r7, #7]
 800025e:	429a      	cmp	r2, r3
 8000260:	d014      	beq.n	800028c <seg7_setBrightness+0x40>
		return;

	_bright = value;
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <seg7_setBrightness+0x48>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	7013      	strb	r3, [r2, #0]

	if (_bright > 0x0F)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <seg7_setBrightness+0x48>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b0f      	cmp	r3, #15
 8000270:	d902      	bls.n	8000278 <seg7_setBrightness+0x2c>
		_bright = 0x0F;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <seg7_setBrightness+0x48>)
 8000274:	220f      	movs	r2, #15
 8000276:	701a      	strb	r2, [r3, #0]

	_writeCmd(HT16K33_BRIGHTNESS | _bright);
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <seg7_setBrightness+0x48>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f063 031f 	orn	r3, r3, #31
 8000282:	b2db      	uxtb	r3, r3
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff61 	bl	800014c <_writeCmd>
 800028a:	e000      	b.n	800028e <seg7_setBrightness+0x42>
		return;
 800028c:	bf00      	nop
}
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000001 	.word	0x20000001

08000298 <seg7_displayInt>:
	uint8_t arr[4] = { SEG7_SPACE, SEG7_SPACE, SEG7_SPACE, SEG7_SPACE };
	seg7_display(arr);
	seg7_displayColon(0);
}

int seg7_displayInt(int n) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	int inRange = ((-1000 < n) && (n < 10000));
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80002a6:	dd06      	ble.n	80002b6 <seg7_displayInt+0x1e>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ae:	4293      	cmp	r3, r2
 80002b0:	dc01      	bgt.n	80002b6 <seg7_displayInt+0x1e>
 80002b2:	2301      	movs	r3, #1
 80002b4:	e000      	b.n	80002b8 <seg7_displayInt+0x20>
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
	int neg = (n < 0);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	0fdb      	lsrs	r3, r3, #31
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	617b      	str	r3, [r7, #20]

	uint8_t arr[4], h, l;

	if (neg)
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <seg7_displayInt+0x36>
		n = -n;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	425b      	negs	r3, r3
 80002cc:	607b      	str	r3, [r7, #4]

	h = n / 100;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a39      	ldr	r2, [pc, #228]	; (80003b8 <seg7_displayInt+0x120>)
 80002d2:	fb82 1203 	smull	r1, r2, r2, r3
 80002d6:	1152      	asrs	r2, r2, #5
 80002d8:	17db      	asrs	r3, r3, #31
 80002da:	1ad3      	subs	r3, r2, r3
 80002dc:	74fb      	strb	r3, [r7, #19]
	l = n - h * 100;
 80002de:	7cfb      	ldrb	r3, [r7, #19]
 80002e0:	461a      	mov	r2, r3
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	441a      	add	r2, r3
 80002e6:	00d2      	lsls	r2, r2, #3
 80002e8:	1ad3      	subs	r3, r2, r3
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	4413      	add	r3, r2
 80002f4:	74bb      	strb	r3, [r7, #18]
	arr[0] = h / 10;
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	4a30      	ldr	r2, [pc, #192]	; (80003bc <seg7_displayInt+0x124>)
 80002fa:	fba2 2303 	umull	r2, r3, r2, r3
 80002fe:	08db      	lsrs	r3, r3, #3
 8000300:	b2db      	uxtb	r3, r3
 8000302:	733b      	strb	r3, [r7, #12]
	arr[1] = h - arr[0] * 10;
 8000304:	7b3b      	ldrb	r3, [r7, #12]
 8000306:	461a      	mov	r2, r3
 8000308:	0152      	lsls	r2, r2, #5
 800030a:	1ad2      	subs	r2, r2, r3
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	1ad3      	subs	r3, r2, r3
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	b2da      	uxtb	r2, r3
 8000314:	7cfb      	ldrb	r3, [r7, #19]
 8000316:	4413      	add	r3, r2
 8000318:	b2db      	uxtb	r3, r3
 800031a:	737b      	strb	r3, [r7, #13]
	arr[2] = l / 10;
 800031c:	7cbb      	ldrb	r3, [r7, #18]
 800031e:	4a27      	ldr	r2, [pc, #156]	; (80003bc <seg7_displayInt+0x124>)
 8000320:	fba2 2303 	umull	r2, r3, r2, r3
 8000324:	08db      	lsrs	r3, r3, #3
 8000326:	b2db      	uxtb	r3, r3
 8000328:	73bb      	strb	r3, [r7, #14]
	arr[3] = l - arr[2] * 10;
 800032a:	7bbb      	ldrb	r3, [r7, #14]
 800032c:	461a      	mov	r2, r3
 800032e:	0152      	lsls	r2, r2, #5
 8000330:	1ad2      	subs	r2, r2, r3
 8000332:	0092      	lsls	r2, r2, #2
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	7cbb      	ldrb	r3, [r7, #18]
 800033c:	4413      	add	r3, r2
 800033e:	b2db      	uxtb	r3, r3
 8000340:	73fb      	strb	r3, [r7, #15]

	if (neg) {
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d02d      	beq.n	80003a4 <seg7_displayInt+0x10c>
		if (_digits >= 3) {
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <seg7_displayInt+0x128>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b02      	cmp	r3, #2
 8000350:	d902      	bls.n	8000358 <seg7_displayInt+0xc0>
			arr[0] = SEG7_MINUS;
 8000352:	2311      	movs	r3, #17
 8000354:	733b      	strb	r3, [r7, #12]
 8000356:	e025      	b.n	80003a4 <seg7_displayInt+0x10c>
		} else {
			int i = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < (4 - _digits); i++) {
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
 8000360:	e00f      	b.n	8000382 <seg7_displayInt+0xea>
				if (arr[i] != 0) {
 8000362:	f107 020c 	add.w	r2, r7, #12
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	4413      	add	r3, r2
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d111      	bne.n	8000394 <seg7_displayInt+0xfc>
					break;
				}
				arr[i] = SEG7_SPACE;
 8000370:	f107 020c 	add.w	r2, r7, #12
 8000374:	69fb      	ldr	r3, [r7, #28]
 8000376:	4413      	add	r3, r2
 8000378:	2210      	movs	r2, #16
 800037a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (4 - _digits); i++) {
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	3301      	adds	r3, #1
 8000380:	61fb      	str	r3, [r7, #28]
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <seg7_displayInt+0x128>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f1c3 0304 	rsb	r3, r3, #4
 800038c:	69fa      	ldr	r2, [r7, #28]
 800038e:	429a      	cmp	r2, r3
 8000390:	dbe7      	blt.n	8000362 <seg7_displayInt+0xca>
 8000392:	e000      	b.n	8000396 <seg7_displayInt+0xfe>
					break;
 8000394:	bf00      	nop
			}
			arr[i - 1] = SEG7_MINUS;
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	3b01      	subs	r3, #1
 800039a:	3320      	adds	r3, #32
 800039c:	443b      	add	r3, r7
 800039e:	2211      	movs	r2, #17
 80003a0:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
	}

	seg7_display(arr);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f80b 	bl	80003c4 <seg7_display>

	return inRange;
 80003ae:	69bb      	ldr	r3, [r7, #24]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	51eb851f 	.word	0x51eb851f
 80003bc:	cccccccd 	.word	0xcccccccd
 80003c0:	20000000 	.word	0x20000000

080003c4 <seg7_display>:
	seg7_displayColon(colon);

	return inRange;
}

void seg7_display(uint8_t *array) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	73fb      	strb	r3, [r7, #15]
 80003d0:	e00d      	b.n	80003ee <seg7_display+0x2a>
		if (array[i] != 0) {
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d110      	bne.n	8000400 <seg7_display+0x3c>
			break;
		}
		array[i] = SEG7_SPACE;
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	2210      	movs	r2, #16
 80003e6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
 80003ea:	3301      	adds	r3, #1
 80003ec:	73fb      	strb	r3, [r7, #15]
 80003ee:	7bfa      	ldrb	r2, [r7, #15]
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <seg7_display+0x94>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f1c3 0304 	rsb	r3, r3, #4
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbe9      	blt.n	80003d2 <seg7_display+0xe>
 80003fe:	e000      	b.n	8000402 <seg7_display+0x3e>
			break;
 8000400:	bf00      	nop
	}

	_writePos(0, charmap[array[0]]);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <seg7_display+0x98>)
 800040a:	5c9b      	ldrb	r3, [r3, r2]
 800040c:	4619      	mov	r1, r3
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff feb6 	bl	8000180 <_writePos>
	_writePos(1, charmap[array[1]]);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3301      	adds	r3, #1
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <seg7_display+0x98>)
 800041e:	5c9b      	ldrb	r3, [r3, r2]
 8000420:	4619      	mov	r1, r3
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff feac 	bl	8000180 <_writePos>
	_writePos(3, charmap[array[2]]);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3302      	adds	r3, #2
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	461a      	mov	r2, r3
 8000430:	4b0a      	ldr	r3, [pc, #40]	; (800045c <seg7_display+0x98>)
 8000432:	5c9b      	ldrb	r3, [r3, r2]
 8000434:	4619      	mov	r1, r3
 8000436:	2003      	movs	r0, #3
 8000438:	f7ff fea2 	bl	8000180 <_writePos>
	_writePos(4, charmap[array[3]]);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3303      	adds	r3, #3
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <seg7_display+0x98>)
 8000446:	5c9b      	ldrb	r3, [r3, r2]
 8000448:	4619      	mov	r1, r3
 800044a:	2004      	movs	r0, #4
 800044c:	f7ff fe98 	bl	8000180 <_writePos>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000000 	.word	0x20000000
 800045c:	080065fc 	.word	0x080065fc

08000460 <seg7_setDispAddr>:
	_writePos(3, array[2]);
	_writePos(4, array[3]);
	_writePos(2, colon ? 255 : 0);
}

void seg7_setDispAddr(uint16_t disp_addr){
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	80fb      	strh	r3, [r7, #6]
	disp_addr = disp_addr;
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <seg7_displayOnOffMulti>:

void seg7_displayOnOffMulti(uint8_t display){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	seg7_setDispAddr(SPEED_ADDR);
 800047e:	2070      	movs	r0, #112	; 0x70
 8000480:	f7ff ffee 	bl	8000460 <seg7_setDispAddr>
	(display & SPEED) ? seg7_displayOn() : seg7_displayOff();
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <seg7_displayOnOffMulti+0x20>
 800048e:	f7ff fea9 	bl	80001e4 <seg7_displayOn>
 8000492:	e001      	b.n	8000498 <seg7_displayOnOffMulti+0x24>
 8000494:	f7ff feb8 	bl	8000208 <seg7_displayOff>

	seg7_setDispAddr(SPIN_ADDR);
 8000498:	2071      	movs	r0, #113	; 0x71
 800049a:	f7ff ffe1 	bl	8000460 <seg7_setDispAddr>
	(display & SPIN) ? seg7_displayOn() : seg7_displayOff();
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f003 0302 	and.w	r3, r3, #2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <seg7_displayOnOffMulti+0x3a>
 80004a8:	f7ff fe9c 	bl	80001e4 <seg7_displayOn>
 80004ac:	e001      	b.n	80004b2 <seg7_displayOnOffMulti+0x3e>
 80004ae:	f7ff feab 	bl	8000208 <seg7_displayOff>

	seg7_setDispAddr(ANGLE_ADDR);
 80004b2:	2072      	movs	r0, #114	; 0x72
 80004b4:	f7ff ffd4 	bl	8000460 <seg7_setDispAddr>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d002      	beq.n	80004c8 <seg7_displayOnOffMulti+0x54>
 80004c2:	f7ff fe8f 	bl	80001e4 <seg7_displayOn>
}
 80004c6:	e001      	b.n	80004cc <seg7_displayOnOffMulti+0x58>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80004c8:	f7ff fe9e 	bl	8000208 <seg7_displayOff>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <seg7_displayIntMulti>:

void seg7_displayIntMulti(uint16_t speed, int16_t spin, uint16_t angle){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
 80004de:	460b      	mov	r3, r1
 80004e0:	80bb      	strh	r3, [r7, #4]
 80004e2:	4613      	mov	r3, r2
 80004e4:	807b      	strh	r3, [r7, #2]
	seg7_setDispAddr(SPEED_ADDR);
 80004e6:	2070      	movs	r0, #112	; 0x70
 80004e8:	f7ff ffba 	bl	8000460 <seg7_setDispAddr>
	seg7_displayInt((int) speed);
 80004ec:	88fb      	ldrh	r3, [r7, #6]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fed2 	bl	8000298 <seg7_displayInt>
	seg7_setDispAddr(SPIN_ADDR);
 80004f4:	2071      	movs	r0, #113	; 0x71
 80004f6:	f7ff ffb3 	bl	8000460 <seg7_setDispAddr>
	seg7_displayInt((int) spin);
 80004fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff feca 	bl	8000298 <seg7_displayInt>
	seg7_setDispAddr(ANGLE_ADDR);
 8000504:	2072      	movs	r0, #114	; 0x72
 8000506:	f7ff ffab 	bl	8000460 <seg7_setDispAddr>
	seg7_displayInt((int) angle);
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fec3 	bl	8000298 <seg7_displayInt>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <pgm_stop>:
static uint32_t last_rand_tick;		//Timestamp when last random value generation takes place
static uint32_t last_blink_tick;	//Timestamp for blinking LED

uint32_t last_angle_change;

int pgm_stop(void){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

	if(mainDrvRunning){
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <pgm_stop+0x68>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00a      	beq.n	8000540 <pgm_stop+0x24>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4816      	ldr	r0, [pc, #88]	; (8000588 <pgm_stop+0x6c>)
 800052e:	f003 fd67 	bl	8004000 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000532:	2104      	movs	r1, #4
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <pgm_stop+0x6c>)
 8000536:	f003 fd63 	bl	8004000 <HAL_TIM_PWM_Stop>

		mainDrvRunning = RESET;
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <pgm_stop+0x68>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t text_off[] = {SEG7_0, SEG7_F, SEG7_F, SEG7_SPACE};
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <pgm_stop+0x70>)
 8000542:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff ff95 	bl	8000474 <seg7_displayOnOffMulti>
	seg7_setDispAddr(SPEED);
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff ff88 	bl	8000460 <seg7_setDispAddr>
	seg7_display(text_off);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff36 	bl	80003c4 <seg7_display>

	if((HAL_GetTick() - last_blink_tick) > BLINK_INT_MS){
 8000558:	f001 faae 	bl	8001ab8 <HAL_GetTick>
 800055c:	4602      	mov	r2, r0
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <pgm_stop+0x74>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000568:	d907      	bls.n	800057a <pgm_stop+0x5e>

			Toggle_Led_Output(GREEN);
 800056a:	2001      	movs	r0, #1
 800056c:	f000 fe48 	bl	8001200 <Toggle_Led_Output>

			last_blink_tick = HAL_GetTick();
 8000570:	f001 faa2 	bl	8001ab8 <HAL_GetTick>
 8000574:	4603      	mov	r3, r0
 8000576:	4a06      	ldr	r2, [pc, #24]	; (8000590 <pgm_stop+0x74>)
 8000578:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200002aa 	.word	0x200002aa
 8000588:	2000013c 	.word	0x2000013c
 800058c:	100f0f00 	.word	0x100f0f00
 8000590:	200000b0 	.word	0x200000b0

08000594 <pgm_manual>:

int pgm_manual(void){
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b0ad      	sub	sp, #180	; 0xb4
 8000598:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fe06 	bl	80011ac <Set_Led_Output>
	seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 80005a0:	2007      	movs	r0, #7
 80005a2:	f7ff ff67 	bl	8000474 <seg7_displayOnOffMulti>

	get_adc_values(adc_result);
 80005a6:	4854      	ldr	r0, [pc, #336]	; (80006f8 <pgm_manual+0x164>)
 80005a8:	f000 f9c0 	bl	800092c <get_adc_values>

	speed_percent = adc_result[0]*100/0xFFF;
 80005ac:	4b52      	ldr	r3, [pc, #328]	; (80006f8 <pgm_manual+0x164>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4a50      	ldr	r2, [pc, #320]	; (80006fc <pgm_manual+0x168>)
 80005ba:	fb82 1203 	smull	r1, r2, r2, r3
 80005be:	441a      	add	r2, r3
 80005c0:	12d2      	asrs	r2, r2, #11
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b4d      	ldr	r3, [pc, #308]	; (8000700 <pgm_manual+0x16c>)
 80005ca:	801a      	strh	r2, [r3, #0]
	spin_percent = (adc_result[1]*100/0xFFF)-50;
 80005cc:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <pgm_manual+0x164>)
 80005ce:	885b      	ldrh	r3, [r3, #2]
 80005d0:	461a      	mov	r2, r3
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	4a48      	ldr	r2, [pc, #288]	; (80006fc <pgm_manual+0x168>)
 80005da:	fb82 1203 	smull	r1, r2, r2, r3
 80005de:	441a      	add	r2, r3
 80005e0:	12d2      	asrs	r2, r2, #11
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b32      	subs	r3, #50	; 0x32
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b21a      	sxth	r2, r3
 80005ee:	4b45      	ldr	r3, [pc, #276]	; (8000704 <pgm_manual+0x170>)
 80005f0:	801a      	strh	r2, [r3, #0]
	angle_degree = (adc_result[2]*90/0xFFF);
 80005f2:	4b41      	ldr	r3, [pc, #260]	; (80006f8 <pgm_manual+0x164>)
 80005f4:	889b      	ldrh	r3, [r3, #4]
 80005f6:	461a      	mov	r2, r3
 80005f8:	235a      	movs	r3, #90	; 0x5a
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	4a3f      	ldr	r2, [pc, #252]	; (80006fc <pgm_manual+0x168>)
 8000600:	fb82 1203 	smull	r1, r2, r2, r3
 8000604:	441a      	add	r2, r3
 8000606:	12d2      	asrs	r2, r2, #11
 8000608:	17db      	asrs	r3, r3, #31
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <pgm_manual+0x174>)
 8000610:	801a      	strh	r2, [r3, #0]

	seg7_displayIntMulti(speed_percent, spin_percent, angle_degree);
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <pgm_manual+0x16c>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4a3b      	ldr	r2, [pc, #236]	; (8000704 <pgm_manual+0x170>)
 8000618:	f9b2 1000 	ldrsh.w	r1, [r2]
 800061c:	4a3a      	ldr	r2, [pc, #232]	; (8000708 <pgm_manual+0x174>)
 800061e:	8812      	ldrh	r2, [r2, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff57 	bl	80004d4 <seg7_displayIntMulti>

	if(
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 8000626:	4b39      	ldr	r3, [pc, #228]	; (800070c <pgm_manual+0x178>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <pgm_manual+0x164>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	bfb8      	it	lt
 8000636:	425b      	neglt	r3, r3
 8000638:	2b32      	cmp	r3, #50	; 0x32
 800063a:	bfcc      	ite	gt
 800063c:	2301      	movgt	r3, #1
 800063e:	2300      	movle	r3, #0
 8000640:	b2da      	uxtb	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA)){
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <pgm_manual+0x178>)
 8000644:	885b      	ldrh	r3, [r3, #2]
 8000646:	4619      	mov	r1, r3
 8000648:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <pgm_manual+0x164>)
 800064a:	885b      	ldrh	r3, [r3, #2]
 800064c:	1acb      	subs	r3, r1, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	bfb8      	it	lt
 8000652:	425b      	neglt	r3, r3
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 8000654:	2b32      	cmp	r3, #50	; 0x32
 8000656:	bfcc      	ite	gt
 8000658:	2301      	movgt	r3, #1
 800065a:	2300      	movle	r3, #0
 800065c:	b2db      	uxtb	r3, r3
 800065e:	4313      	orrs	r3, r2
 8000660:	b2db      	uxtb	r3, r3
	if(
 8000662:	2b00      	cmp	r3, #0
 8000664:	d01a      	beq.n	800069c <pgm_manual+0x108>

			last_adc[0] = adc_result[0];
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <pgm_manual+0x164>)
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <pgm_manual+0x178>)
 800066c:	801a      	strh	r2, [r3, #0]
			last_adc[1] = adc_result[1];
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <pgm_manual+0x164>)
 8000670:	885a      	ldrh	r2, [r3, #2]
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <pgm_manual+0x178>)
 8000674:	805a      	strh	r2, [r3, #2]
			set_pwm_maindrv(speed_percent, spin_percent, htim1);
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <pgm_manual+0x16c>)
 8000678:	881d      	ldrh	r5, [r3, #0]
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <pgm_manual+0x170>)
 800067c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000680:	4c23      	ldr	r4, [pc, #140]	; (8000710 <pgm_manual+0x17c>)
 8000682:	4668      	mov	r0, sp
 8000684:	f104 0308 	add.w	r3, r4, #8
 8000688:	22ac      	movs	r2, #172	; 0xac
 800068a:	4619      	mov	r1, r3
 800068c:	f004 fef4 	bl	8005478 <memcpy>
 8000690:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000694:	4631      	mov	r1, r6
 8000696:	4628      	mov	r0, r5
 8000698:	f000 fe1a 	bl	80012d0 <set_pwm_maindrv>
		}

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <pgm_manual+0x178>)
 800069e:	889b      	ldrh	r3, [r3, #4]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <pgm_manual+0x164>)
 80006a4:	889b      	ldrh	r3, [r3, #4]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bfb8      	it	lt
 80006ac:	425b      	neglt	r3, r3
 80006ae:	2b32      	cmp	r3, #50	; 0x32
 80006b0:	dd0d      	ble.n	80006ce <pgm_manual+0x13a>
		last_adc[2] = adc_result[2];
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <pgm_manual+0x164>)
 80006b4:	889a      	ldrh	r2, [r3, #4]
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <pgm_manual+0x178>)
 80006b8:	809a      	strh	r2, [r3, #4]
		set_pos_posdrv(angle_degree);
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <pgm_manual+0x174>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fec8 	bl	8001454 <set_pos_posdrv>
		last_angle_change = HAL_GetTick();
 80006c4:	f001 f9f8 	bl	8001ab8 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <pgm_manual+0x180>)
 80006cc:	6013      	str	r3, [r2, #0]
	}

	if(!mainDrvRunning){
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <pgm_manual+0x184>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10a      	bne.n	80006ec <pgm_manual+0x158>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006d6:	2100      	movs	r1, #0
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <pgm_manual+0x17c>)
 80006da:	f003 fbef 	bl	8003ebc <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006de:	2104      	movs	r1, #4
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <pgm_manual+0x17c>)
 80006e2:	f003 fbeb 	bl	8003ebc <HAL_TIM_PWM_Start>

		mainDrvRunning = SET;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <pgm_manual+0x184>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3704      	adds	r7, #4
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	80080081 	.word	0x80080081
 8000700:	2000009e 	.word	0x2000009e
 8000704:	200000a0 	.word	0x200000a0
 8000708:	200000a2 	.word	0x200000a2
 800070c:	200000a4 	.word	0x200000a4
 8000710:	2000013c 	.word	0x2000013c
 8000714:	200000b4 	.word	0x200000b4
 8000718:	200002aa 	.word	0x200002aa

0800071c <pgm_auto_speed>:

int pgm_auto_speed(void){
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b0af      	sub	sp, #188	; 0xbc
 8000720:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fd42 	bl	80011ac <Set_Led_Output>
	seg7_displayOnOffMulti(ANGLE);
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff fea3 	bl	8000474 <seg7_displayOnOffMulti>

	get_adc_values(adc_result);
 800072e:	483c      	ldr	r0, [pc, #240]	; (8000820 <pgm_auto_speed+0x104>)
 8000730:	f000 f8fc 	bl	800092c <get_adc_values>

	angle_degree = (adc_result[2]*90/0xFFF);
 8000734:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <pgm_auto_speed+0x104>)
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	461a      	mov	r2, r3
 800073a:	235a      	movs	r3, #90	; 0x5a
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	4a38      	ldr	r2, [pc, #224]	; (8000824 <pgm_auto_speed+0x108>)
 8000742:	fb82 1203 	smull	r1, r2, r2, r3
 8000746:	441a      	add	r2, r3
 8000748:	12d2      	asrs	r2, r2, #11
 800074a:	17db      	asrs	r3, r3, #31
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	b29a      	uxth	r2, r3
 8000750:	4b35      	ldr	r3, [pc, #212]	; (8000828 <pgm_auto_speed+0x10c>)
 8000752:	801a      	strh	r2, [r3, #0]

	seg7_setDispAddr(ANGLE_ADDR);
 8000754:	2072      	movs	r0, #114	; 0x72
 8000756:	f7ff fe83 	bl	8000460 <seg7_setDispAddr>
	seg7_displayInt((int) angle_degree);
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <pgm_auto_speed+0x10c>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd9a 	bl	8000298 <seg7_displayInt>

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 8000764:	4b31      	ldr	r3, [pc, #196]	; (800082c <pgm_auto_speed+0x110>)
 8000766:	889b      	ldrh	r3, [r3, #4]
 8000768:	461a      	mov	r2, r3
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <pgm_auto_speed+0x104>)
 800076c:	889b      	ldrh	r3, [r3, #4]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	bfb8      	it	lt
 8000774:	425b      	neglt	r3, r3
 8000776:	2b32      	cmp	r3, #50	; 0x32
 8000778:	dd0d      	ble.n	8000796 <pgm_auto_speed+0x7a>
		last_adc[2] = adc_result[2];
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <pgm_auto_speed+0x104>)
 800077c:	889a      	ldrh	r2, [r3, #4]
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <pgm_auto_speed+0x110>)
 8000780:	809a      	strh	r2, [r3, #4]
		set_pos_posdrv(angle_degree);
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <pgm_auto_speed+0x10c>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe64 	bl	8001454 <set_pos_posdrv>
		last_angle_change = HAL_GetTick();
 800078c:	f001 f994 	bl	8001ab8 <HAL_GetTick>
 8000790:	4603      	mov	r3, r0
 8000792:	4a27      	ldr	r2, [pc, #156]	; (8000830 <pgm_auto_speed+0x114>)
 8000794:	6013      	str	r3, [r2, #0]
	}

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000796:	f001 f98f 	bl	8001ab8 <HAL_GetTick>
 800079a:	4602      	mov	r2, r0
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <pgm_auto_speed+0x118>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d935      	bls.n	8000816 <pgm_auto_speed+0xfa>

			uint16_t rand_speed = rand() % 101;
 80007aa:	f004 fea9 	bl	8005500 <rand>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a21      	ldr	r2, [pc, #132]	; (8000838 <pgm_auto_speed+0x11c>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1111      	asrs	r1, r2, #4
 80007b8:	17da      	asrs	r2, r3, #31
 80007ba:	1a8a      	subs	r2, r1, r2
 80007bc:	2165      	movs	r1, #101	; 0x65
 80007be:	fb01 f202 	mul.w	r2, r1, r2
 80007c2:	1a9a      	subs	r2, r3, r2
 80007c4:	4613      	mov	r3, r2
 80007c6:	80fb      	strh	r3, [r7, #6]
			int16_t rand_spin = (rand() % 101) -50;
 80007c8:	f004 fe9a 	bl	8005500 <rand>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <pgm_auto_speed+0x11c>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1111      	asrs	r1, r2, #4
 80007d6:	17da      	asrs	r2, r3, #31
 80007d8:	1a8a      	subs	r2, r1, r2
 80007da:	2165      	movs	r1, #101	; 0x65
 80007dc:	fb01 f202 	mul.w	r2, r1, r2
 80007e0:	1a9a      	subs	r2, r3, r2
 80007e2:	b293      	uxth	r3, r2
 80007e4:	3b32      	subs	r3, #50	; 0x32
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	80bb      	strh	r3, [r7, #4]

			set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80007ea:	4c14      	ldr	r4, [pc, #80]	; (800083c <pgm_auto_speed+0x120>)
 80007ec:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80007f0:	88fd      	ldrh	r5, [r7, #6]
 80007f2:	4668      	mov	r0, sp
 80007f4:	f104 0308 	add.w	r3, r4, #8
 80007f8:	22ac      	movs	r2, #172	; 0xac
 80007fa:	4619      	mov	r1, r3
 80007fc:	f004 fe3c 	bl	8005478 <memcpy>
 8000800:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000804:	4631      	mov	r1, r6
 8000806:	4628      	mov	r0, r5
 8000808:	f000 fd62 	bl	80012d0 <set_pwm_maindrv>

			last_rand_tick = HAL_GetTick();
 800080c:	f001 f954 	bl	8001ab8 <HAL_GetTick>
 8000810:	4603      	mov	r3, r0
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <pgm_auto_speed+0x118>)
 8000814:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	20000098 	.word	0x20000098
 8000824:	80080081 	.word	0x80080081
 8000828:	200000a2 	.word	0x200000a2
 800082c:	200000a4 	.word	0x200000a4
 8000830:	200000b4 	.word	0x200000b4
 8000834:	200000ac 	.word	0x200000ac
 8000838:	288df0cb 	.word	0x288df0cb
 800083c:	2000013c 	.word	0x2000013c

08000840 <pgm_auto>:

int pgm_auto(void){
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	b0b1      	sub	sp, #196	; 0xc4
 8000844:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 fcb0 	bl	80011ac <Set_Led_Output>

	uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 800084c:	4b32      	ldr	r3, [pc, #200]	; (8000918 <pgm_auto+0xd8>)
 800084e:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fe0f 	bl	8000474 <seg7_displayOnOffMulti>
	seg7_setDispAddr(SPEED);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff fe02 	bl	8000460 <seg7_setDispAddr>
	seg7_display(text_auto);
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fdb0 	bl	80003c4 <seg7_display>

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000864:	f001 f928 	bl	8001ab8 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <pgm_auto+0xdc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	f242 7210 	movw	r2, #10000	; 0x2710
 8000874:	4293      	cmp	r3, r2
 8000876:	d949      	bls.n	800090c <pgm_auto+0xcc>

		uint16_t rand_speed = rand() % 101;
 8000878:	f004 fe42 	bl	8005500 <rand>
 800087c:	4603      	mov	r3, r0
 800087e:	4a28      	ldr	r2, [pc, #160]	; (8000920 <pgm_auto+0xe0>)
 8000880:	fb82 1203 	smull	r1, r2, r2, r3
 8000884:	1111      	asrs	r1, r2, #4
 8000886:	17da      	asrs	r2, r3, #31
 8000888:	1a8a      	subs	r2, r1, r2
 800088a:	2165      	movs	r1, #101	; 0x65
 800088c:	fb01 f202 	mul.w	r2, r1, r2
 8000890:	1a9a      	subs	r2, r3, r2
 8000892:	4613      	mov	r3, r2
 8000894:	81fb      	strh	r3, [r7, #14]
		int16_t rand_spin = (rand() % 101) -50;
 8000896:	f004 fe33 	bl	8005500 <rand>
 800089a:	4603      	mov	r3, r0
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <pgm_auto+0xe0>)
 800089e:	fb82 1203 	smull	r1, r2, r2, r3
 80008a2:	1111      	asrs	r1, r2, #4
 80008a4:	17da      	asrs	r2, r3, #31
 80008a6:	1a8a      	subs	r2, r1, r2
 80008a8:	2165      	movs	r1, #101	; 0x65
 80008aa:	fb01 f202 	mul.w	r2, r1, r2
 80008ae:	1a9a      	subs	r2, r3, r2
 80008b0:	b293      	uxth	r3, r2
 80008b2:	3b32      	subs	r3, #50	; 0x32
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	81bb      	strh	r3, [r7, #12]
		uint16_t rand_angle = rand() % 91;
 80008b8:	f004 fe22 	bl	8005500 <rand>
 80008bc:	4603      	mov	r3, r0
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <pgm_auto+0xe4>)
 80008c0:	fb82 1203 	smull	r1, r2, r2, r3
 80008c4:	441a      	add	r2, r3
 80008c6:	1191      	asrs	r1, r2, #6
 80008c8:	17da      	asrs	r2, r3, #31
 80008ca:	1a8a      	subs	r2, r1, r2
 80008cc:	215b      	movs	r1, #91	; 0x5b
 80008ce:	fb01 f202 	mul.w	r2, r1, r2
 80008d2:	1a9a      	subs	r2, r3, r2
 80008d4:	4613      	mov	r3, r2
 80008d6:	817b      	strh	r3, [r7, #10]

		set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80008d8:	4c13      	ldr	r4, [pc, #76]	; (8000928 <pgm_auto+0xe8>)
 80008da:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 80008de:	89fd      	ldrh	r5, [r7, #14]
 80008e0:	4668      	mov	r0, sp
 80008e2:	f104 0308 	add.w	r3, r4, #8
 80008e6:	22ac      	movs	r2, #172	; 0xac
 80008e8:	4619      	mov	r1, r3
 80008ea:	f004 fdc5 	bl	8005478 <memcpy>
 80008ee:	e894 000c 	ldmia.w	r4, {r2, r3}
 80008f2:	4631      	mov	r1, r6
 80008f4:	4628      	mov	r0, r5
 80008f6:	f000 fceb 	bl	80012d0 <set_pwm_maindrv>
		set_pos_posdrv(rand_angle);
 80008fa:	897b      	ldrh	r3, [r7, #10]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fda9 	bl	8001454 <set_pos_posdrv>

		last_rand_tick = HAL_GetTick();
 8000902:	f001 f8d9 	bl	8001ab8 <HAL_GetTick>
 8000906:	4603      	mov	r3, r0
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <pgm_auto+0xdc>)
 800090a:	6013      	str	r3, [r2, #0]
	}

	return EXIT_SUCCESS;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000916:	bf00      	nop
 8000918:	0014160a 	.word	0x0014160a
 800091c:	200000ac 	.word	0x200000ac
 8000920:	288df0cb 	.word	0x288df0cb
 8000924:	b40b40b5 	.word	0xb40b40b5
 8000928:	2000013c 	.word	0x2000013c

0800092c <get_adc_values>:

int get_adc_values(uint16_t* adc_result){
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++){
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e013      	b.n	8000962 <get_adc_values+0x36>
			HAL_ADC_Start(&hadc1);
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <get_adc_values+0x48>)
 800093c:	f001 f99e 	bl	8001c7c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 8000940:	2101      	movs	r1, #1
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <get_adc_values+0x48>)
 8000944:	f001 fa48 	bl	8001dd8 <HAL_ADC_PollForConversion>
			adc_result[i] = HAL_ADC_GetValue(&hadc1);
 8000948:	480a      	ldr	r0, [pc, #40]	; (8000974 <get_adc_values+0x48>)
 800094a:	f001 fb4b 	bl	8001fe4 <HAL_ADC_GetValue>
 800094e:	4601      	mov	r1, r0
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	b28a      	uxth	r2, r1
 800095a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b02      	cmp	r3, #2
 8000966:	dde8      	ble.n	800093a <get_adc_values+0xe>
		}

	return EXIT_SUCCESS;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b8 	.word	0x200000b8

08000978 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000980:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000984:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d013      	beq.n	80009b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000990:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000994:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000998:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00b      	beq.n	80009b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009a0:	e000      	b.n	80009a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0f9      	beq.n	80009a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f001 f81d 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8c7 	bl	8000b60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ADC_CR2_REG |= (1<<2); //Start calibration of ADCs after power on
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <main+0x178>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a59      	ldr	r2, [pc, #356]	; (8000b3c <main+0x178>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6013      	str	r3, [r2, #0]

  while(ADC_CR2_REG & (1<<2)){
 80009de:	bf00      	nop
 80009e0:	4b56      	ldr	r3, [pc, #344]	; (8000b3c <main+0x178>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1f9      	bne.n	80009e0 <main+0x1c>
	  //Wait for ADC calibration finished
  }

  eStop = HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin); //Get initial state of emergency stop
 80009ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f0:	4853      	ldr	r0, [pc, #332]	; (8000b40 <main+0x17c>)
 80009f2:	f001 ff29 	bl	8002848 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b52      	ldr	r3, [pc, #328]	; (8000b44 <main+0x180>)
 80009fc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 faaf 	bl	8000f60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a02:	f000 f8fd 	bl	8000c00 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000a06:	f000 f959 	bl	8000cbc <MX_I2C2_Init>
  MX_TIM1_Init();
 8000a0a:	f000 f985 	bl	8000d18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a0e:	f000 fa31 	bl	8000e74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PWM_PULSE_FINISHED_CB_ID, POS_PulseFinishedCallback);
 8000a12:	4a4d      	ldr	r2, [pc, #308]	; (8000b48 <main+0x184>)
 8000a14:	2115      	movs	r1, #21
 8000a16:	484d      	ldr	r0, [pc, #308]	; (8000b4c <main+0x188>)
 8000a18:	f004 f804 	bl	8004a24 <HAL_TIM_RegisterCallback>

  //Set position signal of main drives
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a22:	4847      	ldr	r0, [pc, #284]	; (8000b40 <main+0x17c>)
 8000a24:	f001 ff27 	bl	8002876 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	4848      	ldr	r0, [pc, #288]	; (8000b50 <main+0x18c>)
 8000a30:	f001 ff21 	bl	8002876 <HAL_GPIO_WritePin>

  Set_Led_Output(YELLOW);
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 fbb9 	bl	80011ac <Set_Led_Output>

  uint8_t pgm_state = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	71fb      	strb	r3, [r7, #7]

  srand(time(NULL)); //Seed the random int generator for auto programms
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f004 fd9c 	bl	800557c <time>
 8000a44:	4602      	mov	r2, r0
 8000a46:	460b      	mov	r3, r1
 8000a48:	4613      	mov	r3, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fd2a 	bl	80054a4 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(eStop) E_Stop_Call(); //Call emergency stop routine
 8000a50:	4b3c      	ldr	r3, [pc, #240]	; (8000b44 <main+0x180>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <main+0x98>
 8000a58:	f000 fbfc 	bl	8001254 <E_Stop_Call>

	if(homingComplete == RESET){
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <main+0x190>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d104      	bne.n	8000a6e <main+0xaa>
		home_pos_drive();
 8000a64:	f000 fd4c 	bl	8001500 <home_pos_drive>
		Set_Led_Output(GREEN);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f000 fb9f 	bl	80011ac <Set_Led_Output>
	}

	/*This if switches the angle display blinking on if the stepper drive is on and
	* and the last change is longer ago then BLINK_DISP_DELAY*/
	if((HAL_GetTick() - last_angle_change > BLINK_DISP_DELAY) & posDrvRunning){
 8000a6e:	f001 f823 	bl	8001ab8 <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <main+0x194>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a7e:	bf8c      	ite	hi
 8000a80:	2301      	movhi	r3, #1
 8000a82:	2300      	movls	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <main+0x198>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <main+0xdc>
		seg7_setDispAddr(ANGLE);
 8000a92:	2004      	movs	r0, #4
 8000a94:	f7ff fce4 	bl	8000460 <seg7_setDispAddr>
		seg7_setBlinkRate(2);
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fbbf 	bl	800021c <seg7_setBlinkRate>
 8000a9e:	e005      	b.n	8000aac <main+0xe8>
	} else
	{
		seg7_setDispAddr(ANGLE);
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f7ff fcdd 	bl	8000460 <seg7_setDispAddr>
		seg7_setBlinkRate(0);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fbb8 	bl	800021c <seg7_setBlinkRate>
	}

	pgm_state = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	71fb      	strb	r3, [r7, #7]

	/*The mode switch is read as bitpattern PGM_1_Pin = LSB PGM_3_Pin = MSB
	 *if pattern is not valid, machine turns of --> pgm_stop
	 */
	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	4826      	ldr	r0, [pc, #152]	; (8000b50 <main+0x18c>)
 8000ab6:	f001 fec7 	bl	8002848 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	bf0c      	ite	eq
 8000ac0:	2301      	moveq	r3, #1
 8000ac2:	2300      	movne	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000acc:	4820      	ldr	r0, [pc, #128]	; (8000b50 <main+0x18c>)
 8000ace:	f001 febb 	bl	8002848 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <main+0x118>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e000      	b.n	8000ade <main+0x11a>
 8000adc:	2300      	movs	r3, #0
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 8000ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae6:	481a      	ldr	r0, [pc, #104]	; (8000b50 <main+0x18c>)
 8000ae8:	f001 feae 	bl	8002848 <HAL_GPIO_ReadPin>
 8000aec:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <main+0x132>
 8000af2:	2304      	movs	r3, #4
 8000af4:	e000      	b.n	8000af8 <main+0x134>
 8000af6:	2300      	movs	r3, #0
 8000af8:	4323      	orrs	r3, r4
 8000afa:	b25b      	sxtb	r3, r3
	pgm_state =
 8000afc:	71fb      	strb	r3, [r7, #7]

	switch(pgm_state){
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d8a5      	bhi.n	8000a50 <main+0x8c>
 8000b04:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <main+0x148>)
 8000b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0a:	bf00      	nop
 8000b0c:	08000b21 	.word	0x08000b21
 8000b10:	08000b27 	.word	0x08000b27
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000a51 	.word	0x08000a51
 8000b1c:	08000b33 	.word	0x08000b33
	case 0:
		pgm_stop();
 8000b20:	f7ff fcfc 	bl	800051c <pgm_stop>
		break;
 8000b24:	e008      	b.n	8000b38 <main+0x174>
	case 1:
		pgm_manual();
 8000b26:	f7ff fd35 	bl	8000594 <pgm_manual>
		break;
 8000b2a:	e005      	b.n	8000b38 <main+0x174>
	case 2:
		pgm_auto_speed();
 8000b2c:	f7ff fdf6 	bl	800071c <pgm_auto_speed>
		break;
 8000b30:	e002      	b.n	8000b38 <main+0x174>
	case 4:
		pgm_auto();
 8000b32:	f7ff fe85 	bl	8000840 <pgm_auto>
		break;
 8000b36:	bf00      	nop
	if(eStop) E_Stop_Call(); //Call emergency stop routine
 8000b38:	e78a      	b.n	8000a50 <main+0x8c>
 8000b3a:	bf00      	nop
 8000b3c:	40012408 	.word	0x40012408
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	20000002 	.word	0x20000002
 8000b48:	08001109 	.word	0x08001109
 8000b4c:	200001f0 	.word	0x200001f0
 8000b50:	40011000 	.word	0x40011000
 8000b54:	200002ab 	.word	0x200002ab
 8000b58:	200000b4 	.word	0x200000b4
 8000b5c:	200002ac 	.word	0x200002ac

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	2228      	movs	r2, #40	; 0x28
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fc90 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fb4b 	bl	8003240 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000bb0:	f000 fb86 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fdb8 	bl	8003744 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bda:	f000 fb71 	bl	80012c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bde:	2302      	movs	r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 ff39 	bl	8003a60 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bf4:	f000 fb64 	bl	80012c0 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3750      	adds	r7, #80	; 0x50
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c12:	4a29      	ldr	r2, [pc, #164]	; (8000cb8 <MX_ADC1_Init+0xb8>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c32:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c40:	2203      	movs	r2, #3
 8000c42:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c46:	f000 ff41 	bl	8001acc <HAL_ADC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000c50:	f000 fb36 	bl	80012c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c54:	230a      	movs	r3, #10
 8000c56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c66:	f001 f9c9 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c70:	f000 fb26 	bl	80012c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c74:	230b      	movs	r3, #11
 8000c76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c82:	f001 f9bb 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f000 fb18 	bl	80012c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c90:	230c      	movs	r3, #12
 8000c92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c94:	2303      	movs	r3, #3
 8000c96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_ADC1_Init+0xb4>)
 8000c9e:	f001 f9ad 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ca8:	f000 fb0a 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000b8 	.word	0x200000b8
 8000cb8:	40012400 	.word	0x40012400

08000cbc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <MX_I2C2_Init+0x54>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <MX_I2C2_Init+0x58>)
 8000cca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_I2C2_Init+0x50>)
 8000cfa:	f001 fe05 	bl	8002908 <HAL_I2C_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d04:	f000 fadc 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000e8 	.word	0x200000e8
 8000d10:	40005800 	.word	0x40005800
 8000d14:	000186a0 	.word	0x000186a0

08000d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
 8000d46:	615a      	str	r2, [r3, #20]
 8000d48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fb9f 	bl	8005494 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d56:	4b45      	ldr	r3, [pc, #276]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d58:	4a45      	ldr	r2, [pc, #276]	; (8000e70 <MX_TIM1_Init+0x158>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000d5c:	4b43      	ldr	r3, [pc, #268]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 8000d68:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d82:	483a      	ldr	r0, [pc, #232]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000d84:	f002 ffd8 	bl	8003d38 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d8e:	f000 fa97 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4833      	ldr	r0, [pc, #204]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000da0:	f003 fd1e 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000daa:	f000 fa89 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dae:	482f      	ldr	r0, [pc, #188]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000db0:	f003 f81e 	bl	8003df0 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dba:	f000 fa81 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4827      	ldr	r0, [pc, #156]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000dce:	f004 fa5f 	bl	8005290 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 fa72 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 450;
 8000de0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	481a      	ldr	r0, [pc, #104]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000e04:	f003 fc2a 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e0e:	f000 fa57 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4814      	ldr	r0, [pc, #80]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000e1c:	f003 fc1e 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000e26:	f000 fa4b 	bl	80012c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000e4e:	f004 fa7d 	bl	800534c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e58:	f000 fa32 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM1_Init+0x154>)
 8000e5e:	f000 fc77 	bl	8001750 <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3758      	adds	r7, #88	; 0x58
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000013c 	.word	0x2000013c
 8000e70:	40012c00 	.word	0x40012c00

08000e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14000;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000eae:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8000eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000ebc:	22fa      	movs	r2, #250	; 0xfa
 8000ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000ece:	f002 ff33 	bl	8003d38 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ed8:	f000 f9f2 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481c      	ldr	r0, [pc, #112]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000eea:	f003 fc79 	bl	80047e0 <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ef4:	f000 f9e4 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000efa:	f002 ff79 	bl	8003df0 <HAL_TIM_PWM_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f04:	f000 f9dc 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4619      	mov	r1, r3
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000f18:	f004 f9ba 	bl	8005290 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f22:	f000 f9cd 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f26:	2360      	movs	r3, #96	; 0x60
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 125;
 8000f2a:	237d      	movs	r3, #125	; 0x7d
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000f3e:	f003 fb8d 	bl	800465c <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f48:	f000 f9ba 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM2_Init+0xe8>)
 8000f4e:	f000 fbff 	bl	8001750 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001f0 	.word	0x200001f0

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a4f      	ldr	r2, [pc, #316]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b44      	ldr	r3, [pc, #272]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a43      	ldr	r2, [pc, #268]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <MX_GPIO_Init+0x158>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 8000fc2:	483e      	ldr	r0, [pc, #248]	; (80010bc <MX_GPIO_Init+0x15c>)
 8000fc4:	f001 fc57 	bl	8002876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	483c      	ldr	r0, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x160>)
 8000fd0:	f001 fc51 	bl	8002876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, POS_DIR_Pin|TDRV_DIR_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000fda:	483a      	ldr	r0, [pc, #232]	; (80010c4 <MX_GPIO_Init+0x164>)
 8000fdc:	f001 fc4b 	bl	8002876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4832      	ldr	r0, [pc, #200]	; (80010bc <MX_GPIO_Init+0x15c>)
 8000ff4:	f001 faa4 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8000ff8:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	482a      	ldr	r0, [pc, #168]	; (80010bc <MX_GPIO_Init+0x15c>)
 8001012:	f001 fa95 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 8001016:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 800101a:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4825      	ldr	r0, [pc, #148]	; (80010c0 <MX_GPIO_Init+0x160>)
 800102c:	f001 fa88 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8001030:	2301      	movs	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	4820      	ldr	r0, [pc, #128]	; (80010c4 <MX_GPIO_Init+0x164>)
 8001044:	f001 fa7c 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 8001048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <MX_GPIO_Init+0x160>)
 8001062:	f001 fa6d 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : POS_DIR_Pin TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = POS_DIR_Pin|TDRV_DIR_Pin;
 8001066:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800106a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_GPIO_Init+0x164>)
 8001080:	f001 fa5e 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_STOP_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_GPIO_Init+0x168>)
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	4619      	mov	r1, r3
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <MX_GPIO_Init+0x164>)
 800109a:	f001 fa51 	bl	8002540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2017      	movs	r0, #23
 80010a4:	f001 fa15 	bl	80024d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a8:	2017      	movs	r0, #23
 80010aa:	f001 fa2e 	bl	800250a <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	10110000 	.word	0x10110000

080010cc <_write>:

/* USER CODE BEGIN 4 */

//Overwrite _write for ITM_Console
int _write(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  int i=0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e009      	b.n	80010f6 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	60ba      	str	r2, [r7, #8]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fc44 	bl	8000978 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	3301      	adds	r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dbf1      	blt.n	80010e2 <_write+0x16>
  return len;
 80010fe:	687b      	ldr	r3, [r7, #4]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <POS_PulseFinishedCallback>:

/*Callback after each stepper pulse. When homing is in in progress nothing happens here*/
void POS_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	if(homingComplete == RESET) return;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <POS_PulseFinishedCallback+0x5c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <POS_PulseFinishedCallback+0x52>

	actualPos = actualPos + posDrvDir;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <POS_PulseFinishedCallback+0x60>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <POS_PulseFinishedCallback+0x64>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <POS_PulseFinishedCallback+0x64>)
 800112a:	801a      	strh	r2, [r3, #0]

	if((actualPos == targetPos) | eStop){
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <POS_PulseFinishedCallback+0x64>)
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <POS_PulseFinishedCallback+0x68>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <POS_PulseFinishedCallback+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4313      	orrs	r3, r2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <POS_PulseFinishedCallback+0x54>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 800114a:	2104      	movs	r1, #4
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <POS_PulseFinishedCallback+0x70>)
 800114e:	f003 f8ab 	bl	80042a8 <HAL_TIM_PWM_Stop_IT>
		posDrvRunning = RESET;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <POS_PulseFinishedCallback+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
 8001158:	e000      	b.n	800115c <POS_PulseFinishedCallback+0x54>
	if(homingComplete == RESET) return;
 800115a:	bf00      	nop
	}
}
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002ab 	.word	0x200002ab
 8001168:	200002a4 	.word	0x200002a4
 800116c:	200002a6 	.word	0x200002a6
 8001170:	200002a8 	.word	0x200002a8
 8001174:	20000002 	.word	0x20000002
 8001178:	200001f0 	.word	0x200001f0
 800117c:	200002ac 	.word	0x200002ac

08001180 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == E_STOP_Pin) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001190:	d103      	bne.n	800119a <HAL_GPIO_EXTI_Callback+0x1a>
    eStop = SET;
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 8001198:	e000      	b.n	800119c <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 800119a:	bf00      	nop
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000002 	.word	0x20000002

080011ac <Set_Led_Output>:
 * @param:  bitpattern representing LED state:
 * 			RED, YELLOW, GREEN
 * 			1 = on, 0 = off
 * @return: 0 on success
 */
int Set_Led_Output(uint8_t led_mask){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_mask & RED);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <Set_Led_Output+0x50>)
 80011c4:	f001 fb57 	bl	8002876 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, led_mask & YELLOW);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <Set_Led_Output+0x50>)
 80011d8:	f001 fb4d 	bl	8002876 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_mask & GREEN);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ea:	4804      	ldr	r0, [pc, #16]	; (80011fc <Set_Led_Output+0x50>)
 80011ec:	f001 fb43 	bl	8002876 <HAL_GPIO_WritePin>

	return EXIT_SUCCESS;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40010800 	.word	0x40010800

08001200 <Toggle_Led_Output>:
 * @param:  bitpattern representing LEDs to toggle:
 * 			RED, YELLOW, GREEN
 * 			1 = toggle, 0 = do nothing
 * @return: 0 on success
 */
int Toggle_Led_Output(uint8_t led_mask){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	if(led_mask & RED) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <Toggle_Led_Output+0x1c>
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <Toggle_Led_Output+0x50>)
 8001218:	f001 fb45 	bl	80028a6 <HAL_GPIO_TogglePin>
	if(led_mask & YELLOW)HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <Toggle_Led_Output+0x30>
 8001226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122a:	4809      	ldr	r0, [pc, #36]	; (8001250 <Toggle_Led_Output+0x50>)
 800122c:	f001 fb3b 	bl	80028a6 <HAL_GPIO_TogglePin>
	if(led_mask & GREEN)HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <Toggle_Led_Output+0x44>
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <Toggle_Led_Output+0x50>)
 8001240:	f001 fb31 	bl	80028a6 <HAL_GPIO_TogglePin>

	return EXIT_SUCCESS;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010800 	.word	0x40010800

08001254 <E_Stop_Call>:

//Emergency stop routine
int E_Stop_Call(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

	Set_Led_Output(RED);
 800125a:	2004      	movs	r0, #4
 800125c:	f7ff ffa6 	bl	80011ac <Set_Led_Output>
	homingComplete = RESET; //Reset homing because drive could be moved
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <E_Stop_Call+0x5c>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]

	uint8_t text_stop[] = {SEG7_5, SEG7_T, SEG7_0, SEG7_P};
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <E_Stop_Call+0x60>)
 8001268:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff f902 	bl	8000474 <seg7_displayOnOffMulti>
	seg7_setDispAddr(SPEED_ADDR);
 8001270:	2070      	movs	r0, #112	; 0x70
 8001272:	f7ff f8f5 	bl	8000460 <seg7_setDispAddr>
	seg7_display(text_stop);
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f8a3 	bl	80003c4 <seg7_display>

	while(eStop){
 800127e:	e008      	b.n	8001292 <E_Stop_Call+0x3e>
			//Poll until emergency stop is disabled
			eStop = HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 8001280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <E_Stop_Call+0x64>)
 8001286:	f001 fadf 	bl	8002848 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <E_Stop_Call+0x68>)
 8001290:	701a      	strb	r2, [r3, #0]
	while(eStop){
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <E_Stop_Call+0x68>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <E_Stop_Call+0x2c>
		}

	eStop = RESET;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <E_Stop_Call+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
	Set_Led_Output(YELLOW);
 80012a0:	2002      	movs	r0, #2
 80012a2:	f7ff ff83 	bl	80011ac <Set_Led_Output>

	return EXIT_SUCCESS;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200002ab 	.word	0x200002ab
 80012b4:	15001405 	.word	0x15001405
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	20000002 	.word	0x20000002

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Set_Led_Output(RED | YELLOW);
 80012c8:	2006      	movs	r0, #6
 80012ca:	f7ff ff6f 	bl	80011ac <Set_Led_Output>
 80012ce:	e7fb      	b.n	80012c8 <Error_Handler+0x8>

080012d0 <set_pwm_maindrv>:
 * 			spin_percent: spin from -50 to +50%
 *
 * */


int set_pwm_maindrv(uint16_t speed_percent, int16_t spin_percent, TIM_HandleTypeDef htim){
 80012d0:	b082      	sub	sp, #8
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	; 0x28
 80012d6:	af02      	add	r7, sp, #8
 80012d8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80012dc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80012e0:	4603      	mov	r3, r0
 80012e2:	80fb      	strh	r3, [r7, #6]
 80012e4:	460b      	mov	r3, r1
 80012e6:	80bb      	strh	r3, [r7, #4]

	/*Calculate the range from 10 to 90 percent and the offset
	 * to 10 percent of the counter value therefore the init values
	 * of htim1 are used.*/

	uint32_t speed_range = htim.Init.Period*(MAIN_DRV_MAX_DUTY - MAIN_DRV_MIN_DUTY)/100;
 80012e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <set_pwm_maindrv+0xa4>)
 80012f6:	fba3 2302 	umull	r2, r3, r3, r2
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	61fb      	str	r3, [r7, #28]
	uint32_t speed_offset = htim.Init.Period*MAIN_DRV_MIN_DUTY/100;
 80012fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	461a      	mov	r2, r3
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <set_pwm_maindrv+0xa4>)
 800130c:	fba3 2302 	umull	r2, r3, r3, r2
 8001310:	095b      	lsrs	r3, r3, #5
 8001312:	61bb      	str	r3, [r7, #24]
	uint32_t speed_max = speed_offset + speed_range;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
	uint32_t speed_absolute = speed_offset+(speed_range*speed_percent/100);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <set_pwm_maindrv+0xa4>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4413      	add	r3, r2
 8001330:	613b      	str	r3, [r7, #16]

	uint32_t speed_top = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
	uint32_t speed_bottom = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]

	calc_drv_dutycycle(speed_offset, speed_max, speed_absolute, spin_percent, &speed_top, &speed_bottom);
 800133a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4613      	mov	r3, r2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	69b8      	ldr	r0, [r7, #24]
 8001352:	f000 f813 	bl	800137c <calc_drv_dutycycle>

	TIM1->CCR1 = speed_top;
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <set_pwm_maindrv+0xa8>)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_bottom;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <set_pwm_maindrv+0xa8>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	6393      	str	r3, [r2, #56]	; 0x38

	return EXIT_SUCCESS;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800136e:	b002      	add	sp, #8
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	51eb851f 	.word	0x51eb851f
 8001378:	40012c00 	.word	0x40012c00

0800137c <calc_drv_dutycycle>:
		uint32_t max_speed,
		uint32_t abs_speed,
		int16_t spin_percent,
		uint32_t* top_drv,
		uint32_t* bottom_drv
		){
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	; 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
 8001388:	807b      	strh	r3, [r7, #2]

	uint32_t speed_dif = (max_speed-min_speed)*abs(spin_percent)/100;
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001394:	2a00      	cmp	r2, #0
 8001396:	bfb8      	it	lt
 8001398:	4252      	neglt	r2, r2
 800139a:	b292      	uxth	r2, r2
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <calc_drv_dutycycle+0xd4>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	61fb      	str	r3, [r7, #28]
	uint32_t top_margin = max_speed - abs_speed;
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	61bb      	str	r3, [r7, #24]
	uint32_t bottom_margin = abs_speed - min_speed;
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	617b      	str	r3, [r7, #20]

	uint32_t* faster_drv;
	uint32_t* slower_drv;

	(spin_percent > 0) ? (faster_drv = top_drv) : (faster_drv = bottom_drv);
 80013ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd02      	ble.n	80013c8 <calc_drv_dutycycle+0x4c>
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	e001      	b.n	80013cc <calc_drv_dutycycle+0x50>
 80013c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
	(spin_percent < 0) ? (slower_drv = top_drv) : (slower_drv = bottom_drv);
 80013cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da02      	bge.n	80013da <calc_drv_dutycycle+0x5e>
 80013d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	e001      	b.n	80013de <calc_drv_dutycycle+0x62>
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	623b      	str	r3, [r7, #32]

	if(speed_dif == 0){
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <calc_drv_dutycycle+0x7a>
		*top_drv = *bottom_drv = abs_speed;
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e026      	b.n	8001444 <calc_drv_dutycycle+0xc8>
	}

	if(top_margin < speed_dif){
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d209      	bcs.n	8001412 <calc_drv_dutycycle+0x96>
		*faster_drv = max_speed;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	601a      	str	r2, [r3, #0]
		*slower_drv = max_speed - 2*speed_dif;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e017      	b.n	8001442 <calc_drv_dutycycle+0xc6>
	}
	else if(bottom_margin < speed_dif){
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	429a      	cmp	r2, r3
 8001418:	d209      	bcs.n	800142e <calc_drv_dutycycle+0xb2>
		*slower_drv = min_speed;
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	601a      	str	r2, [r3, #0]
		*faster_drv = min_speed + 2*speed_dif;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005a      	lsls	r2, r3, #1
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	441a      	add	r2, r3
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e009      	b.n	8001442 <calc_drv_dutycycle+0xc6>
	}
	else {
		*faster_drv = abs_speed + speed_dif;
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	441a      	add	r2, r3
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	601a      	str	r2, [r3, #0]
		*slower_drv = abs_speed - speed_dif;
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	1ad2      	subs	r2, r2, r3
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	601a      	str	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 8001442:	2300      	movs	r3, #0

}
 8001444:	4618      	mov	r0, r3
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	51eb851f 	.word	0x51eb851f

08001454 <set_pos_posdrv>:

#include <stdint.h>
#include <stdlib.h>
#include "main.h"

int set_pos_posdrv(uint16_t angle_degree){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]

	/*Set PWM frequency to fast for positioning*/
	TIM2->ARR = POS_DRV_PERIOD(POS_DRV_FAST_FREQ, htim2.Init.Prescaler, 7000000);
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <set_pos_posdrv+0x90>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001466:	4920      	ldr	r1, [pc, #128]	; (80014e8 <set_pos_posdrv+0x94>)
 8001468:	fbb1 f3f3 	udiv	r3, r1, r3
 800146c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR2 = (TIM2->ARR)/2;
 800146e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	6393      	str	r3, [r2, #56]	; 0x38

	targetPos = angle_degree*STEPS_PER_DEGREE;
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	461a      	mov	r2, r3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <set_pos_posdrv+0x98>)
 800148a:	801a      	strh	r2, [r3, #0]
	if(targetPos == actualPos){
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <set_pos_posdrv+0x98>)
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <set_pos_posdrv+0x9c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d101      	bne.n	800149c <set_pos_posdrv+0x48>
		return EXIT_SUCCESS;
 8001498:	2300      	movs	r3, #0
 800149a:	e01e      	b.n	80014da <set_pos_posdrv+0x86>
	}
	else if(targetPos < actualPos) {
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <set_pos_posdrv+0x98>)
 800149e:	881a      	ldrh	r2, [r3, #0]
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <set_pos_posdrv+0x9c>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d208      	bcs.n	80014ba <set_pos_posdrv+0x66>
		HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <set_pos_posdrv+0xa0>)
 80014ae:	f001 f9e2 	bl	8002876 <HAL_GPIO_WritePin>
		posDrvDir = -1;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <set_pos_posdrv+0xa4>)
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e007      	b.n	80014ca <set_pos_posdrv+0x76>
	}
	else {
		HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <set_pos_posdrv+0xa0>)
 80014c0:	f001 f9d9 	bl	8002876 <HAL_GPIO_WritePin>
		posDrvDir = 1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <set_pos_posdrv+0xa4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80014ca:	2104      	movs	r1, #4
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <set_pos_posdrv+0x90>)
 80014ce:	f002 fdfb 	bl	80040c8 <HAL_TIM_PWM_Start_IT>
	posDrvRunning = SET;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <set_pos_posdrv+0xa8>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001f0 	.word	0x200001f0
 80014e8:	000aae60 	.word	0x000aae60
 80014ec:	200002a8 	.word	0x200002a8
 80014f0:	200002a6 	.word	0x200002a6
 80014f4:	40010c00 	.word	0x40010c00
 80014f8:	200002a4 	.word	0x200002a4
 80014fc:	200002ac 	.word	0x200002ac

08001500 <home_pos_drive>:

int home_pos_drive(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

	/*Set PWM frequency to low for homing*/
	TIM2->ARR = POS_DRV_PERIOD(POS_DRV_SLOW_FREQ, htim2.Init.Prescaler, 7000000);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <home_pos_drive+0x6c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800150c:	4918      	ldr	r1, [pc, #96]	; (8001570 <home_pos_drive+0x70>)
 800150e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001512:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CCR2 = (TIM2->ARR)/2;
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_GPIO_WritePin(POS_DIR_GPIO_Port, POS_DIR_Pin, POS_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <home_pos_drive+0x74>)
 8001528:	f001 f9a5 	bl	8002876 <HAL_GPIO_WritePin>

	if(!HAL_GPIO_ReadPin (SW_1_GPIO_Port, SW_1_Pin)){
 800152c:	2110      	movs	r1, #16
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <home_pos_drive+0x78>)
 8001530:	f001 f98a 	bl	8002848 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <home_pos_drive+0x5a>

		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 800153a:	2104      	movs	r1, #4
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <home_pos_drive+0x6c>)
 800153e:	f002 fdc3 	bl	80040c8 <HAL_TIM_PWM_Start_IT>

		while(HAL_GPIO_ReadPin (SW_1_GPIO_Port, SW_1_Pin)){
 8001542:	bf00      	nop
 8001544:	2110      	movs	r1, #16
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <home_pos_drive+0x78>)
 8001548:	f001 f97e 	bl	8002848 <HAL_GPIO_ReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f8      	bne.n	8001544 <home_pos_drive+0x44>
			/*Wait until homingpos is reached */
			/*TODO Maybe add some safety stuff here if switch fails*/
		}

		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 8001552:	2104      	movs	r1, #4
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <home_pos_drive+0x6c>)
 8001556:	f002 fea7 	bl	80042a8 <HAL_TIM_PWM_Stop_IT>
	}
	actualPos = 0;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <home_pos_drive+0x7c>)
 800155c:	2200      	movs	r2, #0
 800155e:	801a      	strh	r2, [r3, #0]
	homingComplete = SET;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <home_pos_drive+0x80>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001f0 	.word	0x200001f0
 8001570:	003567e0 	.word	0x003567e0
 8001574:	40010c00 	.word	0x40010c00
 8001578:	40010800 	.word	0x40010800
 800157c:	200002a6 	.word	0x200002a6
 8001580:	200002ab 	.word	0x200002ab

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <HAL_MspInit+0x5c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_MspInit+0x5c>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_MspInit+0x5c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x5c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_MspInit+0x60>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <HAL_MspInit+0x60>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000

080015e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_ADC_MspInit+0x6c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d121      	bne.n	800164c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_ADC_MspInit+0x70>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_ADC_MspInit+0x70>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_ADC_MspInit+0x70>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_ADC_MspInit+0x70>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_ADC_MspInit+0x70>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_ADC_MspInit+0x70>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 8001638:	2307      	movs	r3, #7
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_ADC_MspInit+0x74>)
 8001648:	f000 ff7a 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40012400 	.word	0x40012400
 8001658:	40021000 	.word	0x40021000
 800165c:	40011000 	.word	0x40011000

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_I2C_MspInit+0x74>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d124      	bne.n	80016ca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001698:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800169c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <HAL_I2C_MspInit+0x7c>)
 80016ae:	f000 ff47 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_I2C_MspInit+0x78>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005800 	.word	0x40005800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010c00 	.word	0x40010c00

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_TIM_Base_MspInit+0x68>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10c      	bne.n	800170c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 80016f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800170a:	e018      	b.n	800173e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001714:	d113      	bne.n	800173e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	61d3      	str	r3, [r2, #28]
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x6c>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201c      	movs	r0, #28
 8001734:	f000 fecd 	bl	80024d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001738:	201c      	movs	r0, #28
 800173a:	f000 fee6 	bl	800250a <HAL_NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_TIM_MspPostInit+0x98>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d119      	bne.n	80017a4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 8001788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	4814      	ldr	r0, [pc, #80]	; (80017f0 <HAL_TIM_MspPostInit+0xa0>)
 800179e:	f000 fecf 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017a2:	e01c      	b.n	80017de <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d117      	bne.n	80017de <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_MspPostInit+0x9c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c6:	2302      	movs	r3, #2
 80017c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_TIM_MspPostInit+0xa0>)
 80017da:	f000 feb1 	bl	8002540 <HAL_GPIO_Init>
}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 f92b 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}

08001842 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_STOP_Pin);
 8001846:	f44f 7000 	mov.w	r0, #512	; 0x200
 800184a:	f001 f845 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <TIM2_IRQHandler+0x10>)
 800185a:	f002 fdd7 	bl	800440c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001f0 	.word	0x200001f0

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_kill>:

int _kill(int pid, int sig)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001880:	f003 fdd0 	bl	8005424 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	2216      	movs	r2, #22
 8001888:	601a      	str	r2, [r3, #0]
  return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_exit>:

void _exit (int status)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189e:	f04f 31ff 	mov.w	r1, #4294967295
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffe7 	bl	8001876 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a8:	e7fe      	b.n	80018a8 <_exit+0x12>

080018aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
  }

  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
  return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <_isatty>:

int _isatty(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f003 fd56 	bl	8005424 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20005000 	.word	0x20005000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	200002b0 	.word	0x200002b0
 80019ac:	200002c8 	.word	0x200002c8

080019b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019bc:	f7ff fff8 	bl	80019b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c2:	490c      	ldr	r1, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d8:	4c09      	ldr	r4, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f003 fd23 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7fe ffeb 	bl	80009c4 <main>
  bx lr
 80019ee:	4770      	bx	lr
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019f8:	080067a4 	.word	0x080067a4
  ldr r2, =_sbss
 80019fc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a00:	200002c8 	.word	0x200002c8

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x28>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x28>)
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 fd4f 	bl	80024bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fdae 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fd67 	bl	8002526 <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 fd2f 	bl	80024d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	2000000c 	.word	0x2000000c
 8001a90:	20000008 	.word	0x20000008

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	200002b4 	.word	0x200002b4

08001ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	200002b4 	.word	0x200002b4

08001acc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0be      	b.n	8001c6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fd6c 	bl	80015e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fbc5 	bl	80022a0 <ADC_ConversionStop_Disable>
 8001b16:	4603      	mov	r3, r0
 8001b18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8099 	bne.w	8001c5a <HAL_ADC_Init+0x18e>
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8095 	bne.w	8001c5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7b1b      	ldrb	r3, [r3, #12]
 8001b52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b64:	d003      	beq.n	8001b6e <HAL_ADC_Init+0xa2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <HAL_ADC_Init+0xa8>
 8001b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b72:	e000      	b.n	8001b76 <HAL_ADC_Init+0xaa>
 8001b74:	2300      	movs	r3, #0
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7d1b      	ldrb	r3, [r3, #20]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d119      	bne.n	8001bb8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	035a      	lsls	r2, r3, #13
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f043 0220 	orr.w	r2, r3, #32
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <HAL_ADC_Init+0x1a8>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be8:	d003      	beq.n	8001bf2 <HAL_ADC_Init+0x126>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d104      	bne.n	8001bfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	051b      	lsls	r3, r3, #20
 8001bfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_ADC_Init+0x1ac>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10b      	bne.n	8001c38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	f023 0303 	bic.w	r3, r3, #3
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c36:	e018      	b.n	8001c6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f023 0312 	bic.w	r3, r3, #18
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c58:	e007      	b.n	8001c6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	ffe1f7fd 	.word	0xffe1f7fd
 8001c78:	ff1f0efe 	.word	0xff1f0efe

08001c7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Start+0x1a>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e098      	b.n	8001dc8 <HAL_ADC_Start+0x14c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 faa4 	bl	80021ec <ADC_Enable>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 8087 	bne.w	8001dbe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_ADC_Start+0x154>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_Start+0x5e>
 8001cce:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_ADC_Start+0x158>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d026      	beq.n	8001d42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d04:	e01d      	b.n	8001d42 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_ADC_Start+0x158>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_Start+0xaa>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <HAL_ADC_Start+0x154>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10d      	bne.n	8001d42 <HAL_ADC_Start+0xc6>
 8001d26:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_ADC_Start+0x158>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f023 0206 	bic.w	r2, r3, #6
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d5a:	e002      	b.n	8001d62 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0202 	mvn.w	r2, #2
 8001d72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d82:	d113      	bne.n	8001dac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_ADC_Start+0x154>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_ADC_Start+0x158>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d108      	bne.n	8001dac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	e00c      	b.n	8001dc6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	e003      	b.n	8001dc6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40012800 	.word	0x40012800
 8001dd4:	40012400 	.word	0x40012400

08001dd8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dee:	f7ff fe63 	bl	8001ab8 <HAL_GetTick>
 8001df2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f043 0220 	orr.w	r2, r3, #32
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0d3      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d131      	bne.n	8001e8c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d12a      	bne.n	8001e8c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e36:	e021      	b.n	8001e7c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d01d      	beq.n	8001e7c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x7e>
 8001e46:	f7ff fe37 	bl	8001ab8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d212      	bcs.n	8001e7c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f043 0204 	orr.w	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0a2      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0d6      	beq.n	8001e38 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e8a:	e070      	b.n	8001f6e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	; (8001fcc <HAL_ADC_PollForConversion+0x1f4>)
 8001e8e:	681c      	ldr	r4, [r3, #0]
 8001e90:	2002      	movs	r0, #2
 8001e92:	f001 fe9b 	bl	8003bcc <HAL_RCCEx_GetPeriphCLKFreq>
 8001e96:	4603      	mov	r3, r0
 8001e98:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6919      	ldr	r1, [r3, #16]
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <HAL_ADC_PollForConversion+0x1f8>)
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_ADC_PollForConversion+0x104>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68d9      	ldr	r1, [r3, #12]
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <HAL_ADC_PollForConversion+0x1fc>)
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_ADC_PollForConversion+0x104>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <HAL_ADC_PollForConversion+0x200>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d108      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x100>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_ADC_PollForConversion+0x204>)
 8001ece:	400b      	ands	r3, r1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_PollForConversion+0x100>
 8001ed4:	2314      	movs	r3, #20
 8001ed6:	e020      	b.n	8001f1a <HAL_ADC_PollForConversion+0x142>
 8001ed8:	2329      	movs	r3, #41	; 0x29
 8001eda:	e01e      	b.n	8001f1a <HAL_ADC_PollForConversion+0x142>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <HAL_ADC_PollForConversion+0x200>)
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0x120>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_ADC_PollForConversion+0x204>)
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00d      	beq.n	8001f14 <HAL_ADC_PollForConversion+0x13c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6919      	ldr	r1, [r3, #16]
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_ADC_PollForConversion+0x208>)
 8001f00:	400b      	ands	r3, r1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x140>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <HAL_ADC_PollForConversion+0x208>)
 8001f0e:	400b      	ands	r3, r1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_PollForConversion+0x140>
 8001f14:	2354      	movs	r3, #84	; 0x54
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_PollForConversion+0x142>
 8001f18:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f20:	e021      	b.n	8001f66 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d01a      	beq.n	8001f60 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_PollForConversion+0x168>
 8001f30:	f7ff fdc2 	bl	8001ab8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d20f      	bcs.n	8001f60 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d90b      	bls.n	8001f60 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f043 0204 	orr.w	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e030      	b.n	8001fc2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d8d9      	bhi.n	8001f22 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f06f 0212 	mvn.w	r2, #18
 8001f76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f92:	d115      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d111      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	24924924 	.word	0x24924924
 8001fd4:	00924924 	.word	0x00924924
 8001fd8:	12492492 	.word	0x12492492
 8001fdc:	00492492 	.word	0x00492492
 8001fe0:	00249249 	.word	0x00249249

08001fe4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x20>
 8002018:	2302      	movs	r3, #2
 800201a:	e0dc      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x1da>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b06      	cmp	r3, #6
 800202a:	d81c      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	3b05      	subs	r3, #5
 800203e:	221f      	movs	r2, #31
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	4019      	ands	r1, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	3b05      	subs	r3, #5
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
 8002064:	e03c      	b.n	80020e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d81c      	bhi.n	80020a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3b23      	subs	r3, #35	; 0x23
 8002080:	221f      	movs	r2, #31
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	4019      	ands	r1, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	3b23      	subs	r3, #35	; 0x23
 800209a:	fa00 f203 	lsl.w	r2, r0, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	e01b      	b.n	80020e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b41      	subs	r3, #65	; 0x41
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b41      	subs	r3, #65	; 0x41
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	d91c      	bls.n	8002122 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	3b1e      	subs	r3, #30
 80020fa:	2207      	movs	r2, #7
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6898      	ldr	r0, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	3b1e      	subs	r3, #30
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	e019      	b.n	8002156 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	2207      	movs	r2, #7
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	4019      	ands	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6898      	ldr	r0, [r3, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	fa00 f203 	lsl.w	r2, r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b10      	cmp	r3, #16
 800215c:	d003      	beq.n	8002166 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002162:	2b11      	cmp	r3, #17
 8002164:	d132      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d125      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d126      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800218c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b10      	cmp	r3, #16
 8002194:	d11a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	0c9a      	lsrs	r2, r3, #18
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f9      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x1b2>
 80021ba:	e007      	b.n	80021cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40012400 	.word	0x40012400
 80021e4:	20000004 	.word	0x20000004
 80021e8:	431bde83 	.word	0x431bde83

080021ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b01      	cmp	r3, #1
 8002208:	d040      	beq.n	800228c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0201 	orr.w	r2, r2, #1
 8002218:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <ADC_Enable+0xac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <ADC_Enable+0xb0>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002228:	e002      	b.n	8002230 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002236:	f7ff fc3f 	bl	8001ab8 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800223c:	e01f      	b.n	800227e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800223e:	f7ff fc3b 	bl	8001ab8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d918      	bls.n	800227e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d011      	beq.n	800227e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d1d8      	bne.n	800223e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000004 	.word	0x20000004
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d12e      	bne.n	8002318 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ca:	f7ff fbf5 	bl	8001ab8 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022d0:	e01b      	b.n	800230a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022d2:	f7ff fbf1 	bl	8001ab8 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d914      	bls.n	800230a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d0dc      	beq.n	80022d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <__NVIC_SetPriorityGrouping>:
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_EnableIRQ>:
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0b      	blt.n	80023b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	f003 021f 	and.w	r2, r3, #31
 80023a0:	4906      	ldr	r1, [pc, #24]	; (80023bc <__NVIC_EnableIRQ+0x34>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	2001      	movs	r0, #1
 80023aa:	fa00 f202 	lsl.w	r2, r0, r2
 80023ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <SysTick_Config>:
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002488:	d301      	bcc.n	800248e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800248a:	2301      	movs	r3, #1
 800248c:	e00f      	b.n	80024ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <SysTick_Config+0x40>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002496:	210f      	movs	r1, #15
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f7ff ff90 	bl	80023c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <SysTick_Config+0x40>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SysTick_Config+0x40>)
 80024a8:	2207      	movs	r2, #7
 80024aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010

080024bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff2d 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e4:	f7ff ff42 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f7ff ff90 	bl	8002414 <NVIC_EncodePriority>
 80024f4:	4602      	mov	r2, r0
 80024f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff5f 	bl	80023c0 <__NVIC_SetPriority>
}
 8002502:	bf00      	nop
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff35 	bl	8002388 <__NVIC_EnableIRQ>
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ffa2 	bl	8002478 <SysTick_Config>
 8002534:	4603      	mov	r3, r0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e169      	b.n	8002828 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002554:	2201      	movs	r2, #1
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8158 	bne.w	8002822 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a9a      	ldr	r2, [pc, #616]	; (80027e0 <HAL_GPIO_Init+0x2a0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d05e      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 800257c:	4a98      	ldr	r2, [pc, #608]	; (80027e0 <HAL_GPIO_Init+0x2a0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d875      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 8002582:	4a98      	ldr	r2, [pc, #608]	; (80027e4 <HAL_GPIO_Init+0x2a4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d058      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002588:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <HAL_GPIO_Init+0x2a4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d86f      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800258e:	4a96      	ldr	r2, [pc, #600]	; (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d052      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 8002594:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <HAL_GPIO_Init+0x2a8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d869      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 800259a:	4a94      	ldr	r2, [pc, #592]	; (80027ec <HAL_GPIO_Init+0x2ac>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04c      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025a0:	4a92      	ldr	r2, [pc, #584]	; (80027ec <HAL_GPIO_Init+0x2ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d863      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025a6:	4a92      	ldr	r2, [pc, #584]	; (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d046      	beq.n	800263a <HAL_GPIO_Init+0xfa>
 80025ac:	4a90      	ldr	r2, [pc, #576]	; (80027f0 <HAL_GPIO_Init+0x2b0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d85d      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d82a      	bhi.n	800260c <HAL_GPIO_Init+0xcc>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d859      	bhi.n	800266e <HAL_GPIO_Init+0x12e>
 80025ba:	a201      	add	r2, pc, #4	; (adr r2, 80025c0 <HAL_GPIO_Init+0x80>)
 80025bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	08002615 	.word	0x08002615
 80025c8:	08002627 	.word	0x08002627
 80025cc:	08002669 	.word	0x08002669
 80025d0:	0800266f 	.word	0x0800266f
 80025d4:	0800266f 	.word	0x0800266f
 80025d8:	0800266f 	.word	0x0800266f
 80025dc:	0800266f 	.word	0x0800266f
 80025e0:	0800266f 	.word	0x0800266f
 80025e4:	0800266f 	.word	0x0800266f
 80025e8:	0800266f 	.word	0x0800266f
 80025ec:	0800266f 	.word	0x0800266f
 80025f0:	0800266f 	.word	0x0800266f
 80025f4:	0800266f 	.word	0x0800266f
 80025f8:	0800266f 	.word	0x0800266f
 80025fc:	0800266f 	.word	0x0800266f
 8002600:	0800266f 	.word	0x0800266f
 8002604:	0800261d 	.word	0x0800261d
 8002608:	08002631 	.word	0x08002631
 800260c:	4a79      	ldr	r2, [pc, #484]	; (80027f4 <HAL_GPIO_Init+0x2b4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002612:	e02c      	b.n	800266e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e029      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	3304      	adds	r3, #4
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e024      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	3308      	adds	r3, #8
 800262c:	623b      	str	r3, [r7, #32]
          break;
 800262e:	e01f      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	330c      	adds	r3, #12
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e01a      	b.n	8002670 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002642:	2304      	movs	r3, #4
 8002644:	623b      	str	r3, [r7, #32]
          break;
 8002646:	e013      	b.n	8002670 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002650:	2308      	movs	r3, #8
 8002652:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	611a      	str	r2, [r3, #16]
          break;
 800265a:	e009      	b.n	8002670 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800265c:	2308      	movs	r3, #8
 800265e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	615a      	str	r2, [r3, #20]
          break;
 8002666:	e003      	b.n	8002670 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x130>
          break;
 800266e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2bff      	cmp	r3, #255	; 0xff
 8002674:	d801      	bhi.n	800267a <HAL_GPIO_Init+0x13a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e001      	b.n	800267e <HAL_GPIO_Init+0x13e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d802      	bhi.n	800268c <HAL_GPIO_Init+0x14c>
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x152>
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3b08      	subs	r3, #8
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	210f      	movs	r1, #15
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	431a      	orrs	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80b1 	beq.w	8002822 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c0:	4b4d      	ldr	r3, [pc, #308]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b4a      	ldr	r3, [pc, #296]	; (80027f8 <HAL_GPIO_Init+0x2b8>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026d8:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2bc>)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <HAL_GPIO_Init+0x2c0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_GPIO_Init+0x1ec>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <HAL_GPIO_Init+0x2c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00d      	beq.n	8002728 <HAL_GPIO_Init+0x1e8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <HAL_GPIO_Init+0x2c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <HAL_GPIO_Init+0x1e4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3d      	ldr	r2, [pc, #244]	; (800280c <HAL_GPIO_Init+0x2cc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_GPIO_Init+0x1e0>
 800271c:	2303      	movs	r3, #3
 800271e:	e006      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002720:	2304      	movs	r3, #4
 8002722:	e004      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002724:	2302      	movs	r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_GPIO_Init+0x1ee>
 800272c:	2300      	movs	r3, #0
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	f002 0203 	and.w	r2, r2, #3
 8002734:	0092      	lsls	r2, r2, #2
 8002736:	4093      	lsls	r3, r2
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800273e:	492f      	ldr	r1, [pc, #188]	; (80027fc <HAL_GPIO_Init+0x2bc>)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	492c      	ldr	r1, [pc, #176]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	43db      	mvns	r3, r3
 800276e:	4928      	ldr	r1, [pc, #160]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002770:	4013      	ands	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d006      	beq.n	800278e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	4922      	ldr	r1, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	60cb      	str	r3, [r1, #12]
 800278c:	e006      	b.n	800279c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	43db      	mvns	r3, r3
 8002796:	491e      	ldr	r1, [pc, #120]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 8002798:	4013      	ands	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d006      	beq.n	80027b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	4918      	ldr	r1, [pc, #96]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027b6:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	43db      	mvns	r3, r3
 80027be:	4914      	ldr	r1, [pc, #80]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d021      	beq.n	8002814 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	490e      	ldr	r1, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x2d0>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e021      	b.n	8002822 <HAL_GPIO_Init+0x2e2>
 80027de:	bf00      	nop
 80027e0:	10320000 	.word	0x10320000
 80027e4:	10310000 	.word	0x10310000
 80027e8:	10220000 	.word	0x10220000
 80027ec:	10210000 	.word	0x10210000
 80027f0:	10120000 	.word	0x10120000
 80027f4:	10110000 	.word	0x10110000
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010800 	.word	0x40010800
 8002804:	40010c00 	.word	0x40010c00
 8002808:	40011000 	.word	0x40011000
 800280c:	40011400 	.word	0x40011400
 8002810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_GPIO_Init+0x304>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <HAL_GPIO_Init+0x304>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f ae8e 	bne.w	8002554 <HAL_GPIO_Init+0x14>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	372c      	adds	r7, #44	; 0x2c
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e001      	b.n	800286a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	807b      	strh	r3, [r7, #2]
 8002882:	4613      	mov	r3, r2
 8002884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002886:	787b      	ldrb	r3, [r7, #1]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002892:	e003      	b.n	800289c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	041a      	lsls	r2, r3, #16
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	611a      	str	r2, [r3, #16]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	041a      	lsls	r2, r3, #16
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	400b      	ands	r3, r1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fc42 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e12b      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fe96 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	; 0x24
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800295a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800296a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800296c:	f001 f832 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8002970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a81      	ldr	r2, [pc, #516]	; (8002b7c <HAL_I2C_Init+0x274>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d807      	bhi.n	800298c <HAL_I2C_Init+0x84>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a80      	ldr	r2, [pc, #512]	; (8002b80 <HAL_I2C_Init+0x278>)
 8002980:	4293      	cmp	r3, r2
 8002982:	bf94      	ite	ls
 8002984:	2301      	movls	r3, #1
 8002986:	2300      	movhi	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e006      	b.n	800299a <HAL_I2C_Init+0x92>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a7d      	ldr	r2, [pc, #500]	; (8002b84 <HAL_I2C_Init+0x27c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	bf94      	ite	ls
 8002994:	2301      	movls	r3, #1
 8002996:	2300      	movhi	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0e7      	b.n	8002b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a78      	ldr	r2, [pc, #480]	; (8002b88 <HAL_I2C_Init+0x280>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a6a      	ldr	r2, [pc, #424]	; (8002b7c <HAL_I2C_Init+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d802      	bhi.n	80029dc <HAL_I2C_Init+0xd4>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	e009      	b.n	80029f0 <HAL_I2C_Init+0xe8>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_I2C_Init+0x284>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	3301      	adds	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	495c      	ldr	r1, [pc, #368]	; (8002b7c <HAL_I2C_Init+0x274>)
 8002a0c:	428b      	cmp	r3, r1
 8002a0e:	d819      	bhi.n	8002a44 <HAL_I2C_Init+0x13c>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e59      	subs	r1, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a24:	400b      	ands	r3, r1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_I2C_Init+0x138>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e59      	subs	r1, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	e051      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a40:	2304      	movs	r3, #4
 8002a42:	e04f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d111      	bne.n	8002a70 <HAL_I2C_Init+0x168>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	bf0c      	ite	eq
 8002a68:	2301      	moveq	r3, #1
 8002a6a:	2300      	movne	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e012      	b.n	8002a96 <HAL_I2C_Init+0x18e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1e58      	subs	r0, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	0099      	lsls	r1, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Init+0x196>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e022      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_I2C_Init+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1e58      	subs	r0, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Init+0x1dc>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6809      	ldr	r1, [r1, #0]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6911      	ldr	r1, [r2, #16]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68d2      	ldr	r2, [r2, #12]
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	000186a0 	.word	0x000186a0
 8002b80:	001e847f 	.word	0x001e847f
 8002b84:	003d08ff 	.word	0x003d08ff
 8002b88:	431bde83 	.word	0x431bde83
 8002b8c:	10624dd3 	.word	0x10624dd3

08002b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba4:	f7fe ff88 	bl	8001ab8 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	f040 80e0 	bne.w	8002d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2319      	movs	r3, #25
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4970      	ldr	r1, [pc, #448]	; (8002d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f964 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0d3      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_I2C_Master_Transmit+0x50>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0cc      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d007      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2221      	movs	r2, #33	; 0x21
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2210      	movs	r2, #16
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	893a      	ldrh	r2, [r7, #8]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f89c 	bl	8002d8c <I2C_MasterRequestWrite>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e08d      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c74:	e066      	b.n	8002d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa22 	bl	80030c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06b      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_I2C_Master_Transmit+0x188>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d017      	beq.n	8002d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6a39      	ldr	r1, [r7, #32]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa19 	bl	8003154 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e01a      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d194      	bne.n	8002c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	00100002 	.word	0x00100002
 8002d88:	ffff0000 	.word	0xffff0000

08002d8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d006      	beq.n	8002db6 <I2C_MasterRequestWrite+0x2a>
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d003      	beq.n	8002db6 <I2C_MasterRequestWrite+0x2a>
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002db4:	d108      	bne.n	8002dc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e00b      	b.n	8002de0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	2b12      	cmp	r3, #18
 8002dce:	d107      	bne.n	8002de0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f84f 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d103      	bne.n	8002e10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e035      	b.n	8002e80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1c:	d108      	bne.n	8002e30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e1e:	897b      	ldrh	r3, [r7, #10]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	e01b      	b.n	8002e68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e30:	897b      	ldrh	r3, [r7, #10]
 8002e32:	11db      	asrs	r3, r3, #7
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	f003 0306 	and.w	r3, r3, #6
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f063 030f 	orn	r3, r3, #15
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <I2C_MasterRequestWrite+0xfc>)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f898 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e010      	b.n	8002e80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <I2C_MasterRequestWrite+0x100>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f888 	bl	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	00010008 	.word	0x00010008
 8002e8c:	00010002 	.word	0x00010002

08002e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	e048      	b.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d044      	beq.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eaa:	f7fe fe05 	bl	8001ab8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d302      	bcc.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d139      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10d      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	e00c      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d116      	bne.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e023      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	e00c      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d093      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f92:	e071      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	d123      	bne.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0204 	orr.w	r2, r3, #4
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e067      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff2:	d041      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe fd60 	bl	8001ab8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d136      	bne.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10c      	bne.n	800302e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e00b      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e021      	b.n	80030bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d10c      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	43da      	mvns	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e00b      	b.n	80030b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f af6d 	bne.w	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d0:	e034      	b.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f886 	bl	80031e4 <I2C_IsAcknowledgeFailed>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e034      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d028      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fce5 	bl	8001ab8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d11d      	bne.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d016      	beq.n	800313c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e007      	b.n	800314c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d1c3      	bne.n	80030d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003160:	e034      	b.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f83e 	bl	80031e4 <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e034      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d028      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fc9d 	bl	8001ab8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d1c3      	bne.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	d11b      	bne.n	8003234 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003204:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e272      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003260:	4b92      	ldr	r3, [pc, #584]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b04      	cmp	r3, #4
 800326a:	d00c      	beq.n	8003286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 030c 	and.w	r3, r3, #12
 8003274:	2b08      	cmp	r3, #8
 8003276:	d112      	bne.n	800329e <HAL_RCC_OscConfig+0x5e>
 8003278:	4b8c      	ldr	r3, [pc, #560]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003284:	d10b      	bne.n	800329e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003286:	4b89      	ldr	r3, [pc, #548]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d06c      	beq.n	800336c <HAL_RCC_OscConfig+0x12c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d168      	bne.n	800336c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e24c      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x76>
 80032a8:	4b80      	ldr	r3, [pc, #512]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a7f      	ldr	r2, [pc, #508]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e02e      	b.n	8003314 <HAL_RCC_OscConfig+0xd4>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x98>
 80032be:	4b7b      	ldr	r3, [pc, #492]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a7a      	ldr	r2, [pc, #488]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b78      	ldr	r3, [pc, #480]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a77      	ldr	r2, [pc, #476]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xd4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0xbc>
 80032e2:	4b72      	ldr	r3, [pc, #456]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a71      	ldr	r2, [pc, #452]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b6f      	ldr	r3, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a6e      	ldr	r2, [pc, #440]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xd4>
 80032fc:	4b6b      	ldr	r3, [pc, #428]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a6a      	ldr	r2, [pc, #424]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b68      	ldr	r3, [pc, #416]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a67      	ldr	r2, [pc, #412]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fbcc 	bl	8001ab8 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fbc8 	bl	8001ab8 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e200      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b5d      	ldr	r3, [pc, #372]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xe4>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fbb8 	bl	8001ab8 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fbb4 	bl	8001ab8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1ec      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b53      	ldr	r3, [pc, #332]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x10c>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337a:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003386:	4b49      	ldr	r3, [pc, #292]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x18c>
 8003392:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x176>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1c0      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4939      	ldr	r1, [pc, #228]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e03a      	b.n	8003442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCC_OscConfig+0x270>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe fb6d 	bl	8001ab8 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe fb69 	bl	8001ab8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1a1      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4927      	ldr	r1, [pc, #156]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_OscConfig+0x270>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fb4c 	bl	8001ab8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe fb48 	bl	8001ab8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e180      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03a      	beq.n	80034c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345c:	f7fe fb2c 	bl	8001ab8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003464:	f7fe fb28 	bl	8001ab8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e160      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_RCC_OscConfig+0x26c>)
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003482:	2001      	movs	r0, #1
 8003484:	f000 face 	bl	8003a24 <RCC_Delay>
 8003488:	e01c      	b.n	80034c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_OscConfig+0x274>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7fe fb12 	bl	8001ab8 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003496:	e00f      	b.n	80034b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003498:	f7fe fb0e 	bl	8001ab8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d908      	bls.n	80034b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e146      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	42420000 	.word	0x42420000
 80034b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	4b92      	ldr	r3, [pc, #584]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e9      	bne.n	8003498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a6 	beq.w	800361e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d6:	4b8b      	ldr	r3, [pc, #556]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	4a87      	ldr	r2, [pc, #540]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	61d3      	str	r3, [r2, #28]
 80034ee:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b82      	ldr	r3, [pc, #520]	; (8003708 <HAL_RCC_OscConfig+0x4c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350a:	4b7f      	ldr	r3, [pc, #508]	; (8003708 <HAL_RCC_OscConfig+0x4c8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7e      	ldr	r2, [pc, #504]	; (8003708 <HAL_RCC_OscConfig+0x4c8>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fe facf 	bl	8001ab8 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fe facb 	bl	8001ab8 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b64      	cmp	r3, #100	; 0x64
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e103      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	4b75      	ldr	r3, [pc, #468]	; (8003708 <HAL_RCC_OscConfig+0x4c8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x312>
 8003544:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	4a6e      	ldr	r2, [pc, #440]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6213      	str	r3, [r2, #32]
 8003550:	e02d      	b.n	80035ae <HAL_RCC_OscConfig+0x36e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x334>
 800355a:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	4b67      	ldr	r3, [pc, #412]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a66      	ldr	r2, [pc, #408]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	e01c      	b.n	80035ae <HAL_RCC_OscConfig+0x36e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x356>
 800357c:	4b61      	ldr	r3, [pc, #388]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a60      	ldr	r2, [pc, #384]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	4b5e      	ldr	r3, [pc, #376]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x36e>
 8003596:	4b5b      	ldr	r3, [pc, #364]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a5a      	ldr	r2, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	4b58      	ldr	r3, [pc, #352]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a57      	ldr	r2, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fa7f 	bl	8001ab8 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fe fa7b 	bl	8001ab8 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0b1      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCC_OscConfig+0x37e>
 80035e0:	e014      	b.n	800360c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fe fa69 	bl	8001ab8 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fa65 	bl	8001ab8 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e09b      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	4b40      	ldr	r3, [pc, #256]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ee      	bne.n	80035ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003612:	4b3c      	ldr	r3, [pc, #240]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	4a3b      	ldr	r2, [pc, #236]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8087 	beq.w	8003736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d061      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d146      	bne.n	80036ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	4b33      	ldr	r3, [pc, #204]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fa39 	bl	8001ab8 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364a:	f7fe fa35 	bl	8001ab8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e06d      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365c:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003670:	d108      	bne.n	8003684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	4921      	ldr	r1, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003684:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a19      	ldr	r1, [r3, #32]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	430b      	orrs	r3, r1
 8003696:	491b      	ldr	r1, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe fa09 	bl	8001ab8 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fe fa05 	bl	8001ab8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x46a>
 80036c8:	e035      	b.n	8003736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x4cc>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f9f2 	bl	8001ab8 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe f9ee 	bl	8001ab8 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e026      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x498>
 80036f6:	e01e      	b.n	8003736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e019      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
 8003704:	40021000 	.word	0x40021000
 8003708:	40007000 	.word	0x40007000
 800370c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x500>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	429a      	cmp	r2, r3
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0d0      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b6a      	ldr	r3, [pc, #424]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d910      	bls.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b67      	ldr	r3, [pc, #412]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 0207 	bic.w	r2, r3, #7
 800376e:	4965      	ldr	r1, [pc, #404]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d040      	beq.n	8003864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d115      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b41      	ldr	r3, [pc, #260]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e073      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06b      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4936      	ldr	r1, [pc, #216]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7fe f940 	bl	8001ab8 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fe f93c 	bl	8001ab8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e053      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d210      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4922      	ldr	r1, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490a      	ldr	r1, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x1c8>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1cc>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1d0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe f89e 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40022000 	.word	0x40022000
 8003908:	40021000 	.word	0x40021000
 800390c:	08006614 	.word	0x08006614
 8003910:	20000004 	.word	0x20000004
 8003914:	20000008 	.word	0x20000008

08003918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x30>
 8003942:	2b08      	cmp	r3, #8
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x36>
 8003946:	e027      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	613b      	str	r3, [r7, #16]
      break;
 800394c:	e027      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0c9b      	lsrs	r3, r3, #18
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003958:	5cd3      	ldrb	r3, [r2, r3]
 800395a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003966:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0c5b      	lsrs	r3, r3, #17
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003972:	5cd3      	ldrb	r3, [r2, r3]
 8003974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800397a:	fb03 f202 	mul.w	r2, r3, r2
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e004      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800398c:	fb02 f303 	mul.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	613b      	str	r3, [r7, #16]
      break;
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800399a:	613b      	str	r3, [r7, #16]
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	693b      	ldr	r3, [r7, #16]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	007a1200 	.word	0x007a1200
 80039b4:	0800662c 	.word	0x0800662c
 80039b8:	0800663c 	.word	0x0800663c
 80039bc:	003d0900 	.word	0x003d0900

080039c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039d8:	f7ff fff2 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	08006624 	.word	0x08006624

080039fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a00:	f7ff ffde 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0adb      	lsrs	r3, r3, #11
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4903      	ldr	r1, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08006624 	.word	0x08006624

08003a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <RCC_Delay+0x34>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <RCC_Delay+0x38>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a40:	bf00      	nop
  }
  while (Delay --);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	60fa      	str	r2, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <RCC_Delay+0x1c>
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000004 	.word	0x20000004
 8003a5c:	10624dd3 	.word	0x10624dd3

08003a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d07d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a80:	4b4f      	ldr	r3, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	61d3      	str	r3, [r2, #28]
 8003a98:	4b49      	ldr	r3, [pc, #292]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d118      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fffa 	bl	8001ab8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	e008      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fd fff6 	bl	8001ab8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e06d      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae6:	4b36      	ldr	r3, [pc, #216]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02e      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d027      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b04:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b1a:	4a29      	ldr	r2, [pc, #164]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d014      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2a:	f7fd ffc5 	bl	8001ab8 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fd ffc1 	bl	8001ab8 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e036      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ee      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4917      	ldr	r1, [pc, #92]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6c:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	490b      	ldr	r1, [pc, #44]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	42420440 	.word	0x42420440

08003bcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	f200 808a 	bhi.w	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d045      	beq.n	8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d075      	beq.n	8003cee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c02:	e082      	b.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c0a:	4b45      	ldr	r3, [pc, #276]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d07b      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0c9b      	lsrs	r3, r3, #18
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	4a41      	ldr	r2, [pc, #260]	; (8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003c20:	5cd3      	ldrb	r3, [r2, r3]
 8003c22:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c2e:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	0c5b      	lsrs	r3, r3, #17
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003c3a:	5cd3      	ldrb	r3, [r2, r3]
 8003c3c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c64:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d102      	bne.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	61bb      	str	r3, [r7, #24]
      break;
 8003c76:	e04a      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	4a2d      	ldr	r2, [pc, #180]	; (8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	085b      	lsrs	r3, r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
      break;
 8003c86:	e042      	b.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d108      	bne.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e01f      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb6:	d109      	bne.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003cc4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e00f      	b.n	8003cec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd6:	d11c      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d016      	beq.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ce4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ce8:	61bb      	str	r3, [r7, #24]
      break;
 8003cea:	e012      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003cec:	e011      	b.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cee:	f7ff fe85 	bl	80039fc <HAL_RCC_GetPCLK2Freq>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0b9b      	lsrs	r3, r3, #14
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	61bb      	str	r3, [r7, #24]
      break;
 8003d08:	e004      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d12:	bf00      	nop
    }
  }
  return (frequency);
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08006640 	.word	0x08006640
 8003d28:	08006650 	.word	0x08006650
 8003d2c:	007a1200 	.word	0x007a1200
 8003d30:	003d0900 	.word	0x003d0900
 8003d34:	aaaaaaab 	.word	0xaaaaaaab

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e04c      	b.n	8003de4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d111      	bne.n	8003d7a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 fa3e 	bl	80051e0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_TIM_Base_Init+0xb4>)
 8003d70:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 ff83 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	080016e1 	.word	0x080016e1

08003df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e04c      	b.n	8003e9c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d111      	bne.n	8003e32 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f001 f9e2 	bl	80051e0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <HAL_TIM_PWM_Init+0xb4>)
 8003e28:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f000 ff27 	bl	8004c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	08003ea9 	.word	0x08003ea9

08003ea8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_TIM_PWM_Start+0x24>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	bf14      	ite	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	2300      	moveq	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	e022      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d109      	bne.n	8003efa <HAL_TIM_PWM_Start+0x3e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e015      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d109      	bne.n	8003f14 <HAL_TIM_PWM_Start+0x58>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e008      	b.n	8003f26 <HAL_TIM_PWM_Start+0x6a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e05e      	b.n	8003fec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_PWM_Start+0x82>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3c:	e013      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x92>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	e00b      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	e003      	b.n	8003f66 <HAL_TIM_PWM_Start+0xaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 f912 	bl	8005198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_TIM_PWM_Start+0x138>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d107      	bne.n	8003f8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_TIM_PWM_Start+0x138>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0xfa>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0xfa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <HAL_TIM_PWM_Start+0x13c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIM_PWM_Start+0xfa>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <HAL_TIM_PWM_Start+0x140>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d111      	bne.n	8003fda <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d010      	beq.n	8003fea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd8:	e007      	b.n	8003fea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40000400 	.word	0x40000400
 8003ffc:	40000800 	.word	0x40000800

08004000 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2200      	movs	r2, #0
 8004010:	6839      	ldr	r1, [r7, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f8c0 	bl	8005198 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a29      	ldr	r2, [pc, #164]	; (80040c4 <HAL_TIM_PWM_Stop+0xc4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d117      	bne.n	8004052 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	f241 1311 	movw	r3, #4369	; 0x1111
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_TIM_PWM_Stop+0x52>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	f240 4344 	movw	r3, #1092	; 0x444
 800403c:	4013      	ands	r3, r2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <HAL_TIM_PWM_Stop+0x52>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	f241 1311 	movw	r3, #4369	; 0x1111
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_TIM_PWM_Stop+0x82>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	f240 4344 	movw	r3, #1092	; 0x444
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_TIM_PWM_Stop+0x82>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Stop+0x92>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	e013      	b.n	80040ba <HAL_TIM_PWM_Stop+0xba>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_PWM_Stop+0xa2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_PWM_Stop+0xba>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Stop+0xb2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b0:	e003      	b.n	80040ba <HAL_TIM_PWM_Stop+0xba>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40012c00 	.word	0x40012c00

080040c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_TIM_PWM_Start_IT+0x28>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	bf14      	ite	ne
 80040e8:	2301      	movne	r3, #1
 80040ea:	2300      	moveq	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e022      	b.n	8004136 <HAL_TIM_PWM_Start_IT+0x6e>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d109      	bne.n	800410a <HAL_TIM_PWM_Start_IT+0x42>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e015      	b.n	8004136 <HAL_TIM_PWM_Start_IT+0x6e>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d109      	bne.n	8004124 <HAL_TIM_PWM_Start_IT+0x5c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e008      	b.n	8004136 <HAL_TIM_PWM_Start_IT+0x6e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0a9      	b.n	8004292 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <HAL_TIM_PWM_Start_IT+0x86>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	e013      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0xae>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d104      	bne.n	800415e <HAL_TIM_PWM_Start_IT+0x96>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800415c:	e00b      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0xae>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d104      	bne.n	800416e <HAL_TIM_PWM_Start_IT+0xa6>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800416c:	e003      	b.n	8004176 <HAL_TIM_PWM_Start_IT+0xae>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d841      	bhi.n	8004200 <HAL_TIM_PWM_Start_IT+0x138>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_TIM_PWM_Start_IT+0xbc>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041b9 	.word	0x080041b9
 8004188:	08004201 	.word	0x08004201
 800418c:	08004201 	.word	0x08004201
 8004190:	08004201 	.word	0x08004201
 8004194:	080041cb 	.word	0x080041cb
 8004198:	08004201 	.word	0x08004201
 800419c:	08004201 	.word	0x08004201
 80041a0:	08004201 	.word	0x08004201
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004201 	.word	0x08004201
 80041b0:	08004201 	.word	0x08004201
 80041b4:	080041ef 	.word	0x080041ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0202 	orr.w	r2, r2, #2
 80041c6:	60da      	str	r2, [r3, #12]
      break;
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0204 	orr.w	r2, r2, #4
 80041d8:	60da      	str	r2, [r3, #12]
      break;
 80041da:	e014      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	60da      	str	r2, [r3, #12]
      break;
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0210 	orr.w	r2, r2, #16
 80041fc:	60da      	str	r2, [r3, #12]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	bf00      	nop
  }

  if (status == HAL_OK)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d141      	bne.n	8004290 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 ffbf 	bl	8005198 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1f      	ldr	r2, [pc, #124]	; (800429c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d107      	bne.n	8004234 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <HAL_TIM_PWM_Start_IT+0x1d4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_TIM_PWM_Start_IT+0x194>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d009      	beq.n	800425c <HAL_TIM_PWM_Start_IT+0x194>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_PWM_Start_IT+0x194>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a13      	ldr	r2, [pc, #76]	; (80042a4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d111      	bne.n	8004280 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d010      	beq.n	8004290 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	e007      	b.n	8004290 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d841      	bhi.n	8004340 <HAL_TIM_PWM_Stop_IT+0x98>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004341 	.word	0x08004341
 80042cc:	08004341 	.word	0x08004341
 80042d0:	08004341 	.word	0x08004341
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	08004341 	.word	0x08004341
 80042dc:	08004341 	.word	0x08004341
 80042e0:	08004341 	.word	0x08004341
 80042e4:	0800431d 	.word	0x0800431d
 80042e8:	08004341 	.word	0x08004341
 80042ec:	08004341 	.word	0x08004341
 80042f0:	08004341 	.word	0x08004341
 80042f4:	0800432f 	.word	0x0800432f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0202 	bic.w	r2, r2, #2
 8004306:	60da      	str	r2, [r3, #12]
      break;
 8004308:	e01d      	b.n	8004346 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	60da      	str	r2, [r3, #12]
      break;
 800431a:	e014      	b.n	8004346 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0208 	bic.w	r2, r2, #8
 800432a:	60da      	str	r2, [r3, #12]
      break;
 800432c:	e00b      	b.n	8004346 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0210 	bic.w	r2, r2, #16
 800433c:	60da      	str	r2, [r3, #12]
      break;
 800433e:	e002      	b.n	8004346 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	bf00      	nop
  }

  if (status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d157      	bne.n	80043fc <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2200      	movs	r2, #0
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 ff1f 	bl	8005198 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d117      	bne.n	8004394 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a1a      	ldr	r2, [r3, #32]
 800436a:	f241 1311 	movw	r3, #4369	; 0x1111
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <HAL_TIM_PWM_Stop_IT+0xec>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	f240 4344 	movw	r3, #1092	; 0x444
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d107      	bne.n	8004394 <HAL_TIM_PWM_Stop_IT+0xec>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004392:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	f241 1311 	movw	r3, #4369	; 0x1111
 800439e:	4013      	ands	r3, r2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	f240 4344 	movw	r3, #1092	; 0x444
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d107      	bne.n	80043c4 <HAL_TIM_PWM_Stop_IT+0x11c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_TIM_PWM_Stop_IT+0x12c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d2:	e013      	b.n	80043fc <HAL_TIM_PWM_Stop_IT+0x154>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d104      	bne.n	80043e4 <HAL_TIM_PWM_Stop_IT+0x13c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e2:	e00b      	b.n	80043fc <HAL_TIM_PWM_Stop_IT+0x154>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d104      	bne.n	80043f4 <HAL_TIM_PWM_Stop_IT+0x14c>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f2:	e003      	b.n	80043fc <HAL_TIM_PWM_Stop_IT+0x154>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40012c00 	.word	0x40012c00

0800440c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	d128      	bne.n	8004474 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d121      	bne.n	8004474 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	4798      	blx	r3
 8004458:	e009      	b.n	800446e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d128      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d121      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0204 	mvn.w	r2, #4
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
 80044b8:	e009      	b.n	80044ce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d128      	bne.n	8004534 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d121      	bne.n	8004534 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
 8004518:	e009      	b.n	800452e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b10      	cmp	r3, #16
 8004540:	d128      	bne.n	8004594 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b10      	cmp	r3, #16
 800454e:	d121      	bne.n	8004594 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0210 	mvn.w	r2, #16
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2208      	movs	r2, #8
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	e009      	b.n	800458e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d110      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0201 	mvn.w	r2, #1
 80045b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d110      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d109      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d110      	bne.n	8004624 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d109      	bne.n	8004624 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d110      	bne.n	8004654 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b20      	cmp	r3, #32
 800463e:	d109      	bne.n	8004654 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0220 	mvn.w	r2, #32
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004676:	2302      	movs	r3, #2
 8004678:	e0ae      	b.n	80047d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	f200 809f 	bhi.w	80047c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046c5 	.word	0x080046c5
 8004694:	080047c9 	.word	0x080047c9
 8004698:	080047c9 	.word	0x080047c9
 800469c:	080047c9 	.word	0x080047c9
 80046a0:	08004705 	.word	0x08004705
 80046a4:	080047c9 	.word	0x080047c9
 80046a8:	080047c9 	.word	0x080047c9
 80046ac:	080047c9 	.word	0x080047c9
 80046b0:	08004747 	.word	0x08004747
 80046b4:	080047c9 	.word	0x080047c9
 80046b8:	080047c9 	.word	0x080047c9
 80046bc:	080047c9 	.word	0x080047c9
 80046c0:	08004787 	.word	0x08004787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb46 	bl	8004d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0204 	bic.w	r2, r2, #4
 80046ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6999      	ldr	r1, [r3, #24]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	619a      	str	r2, [r3, #24]
      break;
 8004702:	e064      	b.n	80047ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fb8c 	bl	8004e28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800471e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6999      	ldr	r1, [r3, #24]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	021a      	lsls	r2, r3, #8
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	619a      	str	r2, [r3, #24]
      break;
 8004744:	e043      	b.n	80047ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fbd5 	bl	8004efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0208 	orr.w	r2, r2, #8
 8004760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0204 	bic.w	r2, r2, #4
 8004770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69d9      	ldr	r1, [r3, #28]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	61da      	str	r2, [r3, #28]
      break;
 8004784:	e023      	b.n	80047ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68b9      	ldr	r1, [r7, #8]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fc1f 	bl	8004fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	61da      	str	r2, [r3, #28]
      break;
 80047c6:	e002      	b.n	80047ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
      break;
 80047cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_ConfigClockSource+0x1c>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e0b4      	b.n	8004966 <HAL_TIM_ConfigClockSource+0x186>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800481a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	d03e      	beq.n	80048b4 <HAL_TIM_ConfigClockSource+0xd4>
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	f200 8087 	bhi.w	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004842:	f000 8086 	beq.w	8004952 <HAL_TIM_ConfigClockSource+0x172>
 8004846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484a:	d87f      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800484c:	2b70      	cmp	r3, #112	; 0x70
 800484e:	d01a      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xa6>
 8004850:	2b70      	cmp	r3, #112	; 0x70
 8004852:	d87b      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004854:	2b60      	cmp	r3, #96	; 0x60
 8004856:	d050      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x11a>
 8004858:	2b60      	cmp	r3, #96	; 0x60
 800485a:	d877      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800485c:	2b50      	cmp	r3, #80	; 0x50
 800485e:	d03c      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xfa>
 8004860:	2b50      	cmp	r3, #80	; 0x50
 8004862:	d873      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004864:	2b40      	cmp	r3, #64	; 0x40
 8004866:	d058      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x13a>
 8004868:	2b40      	cmp	r3, #64	; 0x40
 800486a:	d86f      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d064      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	2b30      	cmp	r3, #48	; 0x30
 8004872:	d86b      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 8004874:	2b20      	cmp	r3, #32
 8004876:	d060      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	2b20      	cmp	r3, #32
 800487a:	d867      	bhi.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05c      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004880:	2b10      	cmp	r3, #16
 8004882:	d05a      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x15a>
 8004884:	e062      	b.n	800494c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6899      	ldr	r1, [r3, #8]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f000 fc60 	bl	800515a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	609a      	str	r2, [r3, #8]
      break;
 80048b2:	e04f      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6899      	ldr	r1, [r3, #8]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f000 fc49 	bl	800515a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048d6:	609a      	str	r2, [r3, #8]
      break;
 80048d8:	e03c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6859      	ldr	r1, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f000 fbc0 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2150      	movs	r1, #80	; 0x50
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fc17 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 80048f8:	e02c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 fbde 	bl	80050c8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2160      	movs	r1, #96	; 0x60
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fc07 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004918:	e01c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	461a      	mov	r2, r3
 8004928:	f000 fba0 	bl	800506c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2140      	movs	r1, #64	; 0x40
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fbf7 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 8004938:	e00c      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	4610      	mov	r0, r2
 8004946:	f000 fbee 	bl	8005126 <TIM_ITRx_SetConfig>
      break;
 800494a:	e003      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	e000      	b.n	8004954 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bc80      	pop	{r7}
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e125      	b.n	8004c8c <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	f040 80b9 	bne.w	8004bc0 <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	2b1a      	cmp	r3, #26
 8004a52:	f200 80b2 	bhi.w	8004bba <HAL_TIM_RegisterCallback+0x196>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_TIM_RegisterCallback+0x38>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004ac9 	.word	0x08004ac9
 8004a60:	08004ad1 	.word	0x08004ad1
 8004a64:	08004ad9 	.word	0x08004ad9
 8004a68:	08004ae1 	.word	0x08004ae1
 8004a6c:	08004ae9 	.word	0x08004ae9
 8004a70:	08004af1 	.word	0x08004af1
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004b01 	.word	0x08004b01
 8004a7c:	08004b09 	.word	0x08004b09
 8004a80:	08004b11 	.word	0x08004b11
 8004a84:	08004b19 	.word	0x08004b19
 8004a88:	08004b21 	.word	0x08004b21
 8004a8c:	08004b29 	.word	0x08004b29
 8004a90:	08004b31 	.word	0x08004b31
 8004a94:	08004b39 	.word	0x08004b39
 8004a98:	08004b43 	.word	0x08004b43
 8004a9c:	08004b4d 	.word	0x08004b4d
 8004aa0:	08004b57 	.word	0x08004b57
 8004aa4:	08004b61 	.word	0x08004b61
 8004aa8:	08004b6b 	.word	0x08004b6b
 8004aac:	08004b75 	.word	0x08004b75
 8004ab0:	08004b7f 	.word	0x08004b7f
 8004ab4:	08004b89 	.word	0x08004b89
 8004ab8:	08004b93 	.word	0x08004b93
 8004abc:	08004b9d 	.word	0x08004b9d
 8004ac0:	08004ba7 	.word	0x08004ba7
 8004ac4:	08004bb1 	.word	0x08004bb1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004ace:	e0dc      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004ad6:	e0d8      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004ade:	e0d4      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004ae6:	e0d0      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004aee:	e0cc      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004af6:	e0c8      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004afe:	e0c4      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004b06:	e0c0      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004b0e:	e0bc      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004b16:	e0b8      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004b1e:	e0b4      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004b26:	e0b0      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004b2e:	e0ac      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004b36:	e0a8      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004b40:	e0a3      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004b4a:	e09e      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004b54:	e099      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8004b5e:	e094      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004b68:	e08f      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004b72:	e08a      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004b7c:	e085      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004b86:	e080      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004b90:	e07b      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004b9a:	e076      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004ba4:	e071      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004bae:	e06c      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004bb8:	e067      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	75fb      	strb	r3, [r7, #23]
        break;
 8004bbe:	e064      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d15c      	bne.n	8004c86 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	2b0d      	cmp	r3, #13
 8004bd0:	d856      	bhi.n	8004c80 <HAL_TIM_RegisterCallback+0x25c>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_TIM_RegisterCallback+0x1b4>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c11 	.word	0x08004c11
 8004bdc:	08004c19 	.word	0x08004c19
 8004be0:	08004c21 	.word	0x08004c21
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c31 	.word	0x08004c31
 8004bec:	08004c39 	.word	0x08004c39
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004c51 	.word	0x08004c51
 8004bfc:	08004c59 	.word	0x08004c59
 8004c00:	08004c61 	.word	0x08004c61
 8004c04:	08004c69 	.word	0x08004c69
 8004c08:	08004c71 	.word	0x08004c71
 8004c0c:	08004c79 	.word	0x08004c79
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004c16:	e038      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004c1e:	e034      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004c26:	e030      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004c2e:	e02c      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004c36:	e028      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004c3e:	e024      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004c46:	e020      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004c4e:	e01c      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004c56:	e018      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004c5e:	e014      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004c66:	e010      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004c6e:	e00c      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004c76:	e008      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004c7e:	e004      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
        break;
 8004c84:	e001      	b.n	8004c8a <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop

08004c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <TIM_Base_SetConfig+0xb8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <TIM_Base_SetConfig+0x30>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0x30>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <TIM_Base_SetConfig+0xbc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0x30>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <TIM_Base_SetConfig+0xc0>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d108      	bne.n	8004cda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1c      	ldr	r2, [pc, #112]	; (8004d50 <TIM_Base_SetConfig+0xb8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0x62>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0x62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <TIM_Base_SetConfig+0xbc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0x62>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <TIM_Base_SetConfig+0xc0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a07      	ldr	r2, [pc, #28]	; (8004d50 <TIM_Base_SetConfig+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800

08004d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0201 	bic.w	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 0302 	bic.w	r3, r3, #2
 8004da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <TIM_OC1_SetConfig+0xc8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10c      	bne.n	8004dd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 0308 	bic.w	r3, r3, #8
 8004dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <TIM_OC1_SetConfig+0xc8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d111      	bne.n	8004dfe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40012c00 	.word	0x40012c00

08004e28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f023 0210 	bic.w	r2, r3, #16
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
 8004e72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <TIM_OC2_SetConfig+0xd0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10d      	bne.n	8004ea4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <TIM_OC2_SetConfig+0xd0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d113      	bne.n	8004ed4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr
 8004ef8:	40012c00 	.word	0x40012c00

08004efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0303 	bic.w	r3, r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <TIM_OC3_SetConfig+0xd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d10d      	bne.n	8004f76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <TIM_OC3_SetConfig+0xd0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d113      	bne.n	8004fa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	621a      	str	r2, [r3, #32]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00

08004fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800501a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	031b      	lsls	r3, r3, #12
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <TIM_OC4_SetConfig+0x98>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d109      	bne.n	8005044 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr
 8005068:	40012c00 	.word	0x40012c00

0800506c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 030a 	bic.w	r3, r3, #10
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	621a      	str	r2, [r3, #32]
}
 80050be:	bf00      	nop
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0210 	bic.w	r2, r3, #16
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	031b      	lsls	r3, r3, #12
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005104:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	f043 0307 	orr.w	r3, r3, #7
 8005148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	609a      	str	r2, [r3, #8]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800515a:	b480      	push	{r7}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005174:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	021a      	lsls	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	609a      	str	r2, [r3, #8]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2201      	movs	r2, #1
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	401a      	ands	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	fa01 f303 	lsl.w	r3, r1, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <TIM_ResetCallback+0x7c>)
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	; (8005260 <TIM_ResetCallback+0x80>)
 80051f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1a      	ldr	r2, [pc, #104]	; (8005264 <TIM_ResetCallback+0x84>)
 80051fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a19      	ldr	r2, [pc, #100]	; (8005268 <TIM_ResetCallback+0x88>)
 8005204:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <TIM_ResetCallback+0x8c>)
 800520c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a17      	ldr	r2, [pc, #92]	; (8005270 <TIM_ResetCallback+0x90>)
 8005214:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a16      	ldr	r2, [pc, #88]	; (8005274 <TIM_ResetCallback+0x94>)
 800521c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a15      	ldr	r2, [pc, #84]	; (8005278 <TIM_ResetCallback+0x98>)
 8005224:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <TIM_ResetCallback+0x9c>)
 800522c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a13      	ldr	r2, [pc, #76]	; (8005280 <TIM_ResetCallback+0xa0>)
 8005234:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <TIM_ResetCallback+0xa4>)
 800523c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a11      	ldr	r2, [pc, #68]	; (8005288 <TIM_ResetCallback+0xa8>)
 8005244:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <TIM_ResetCallback+0xac>)
 800524c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	0800496f 	.word	0x0800496f
 8005260:	08004981 	.word	0x08004981
 8005264:	080049ed 	.word	0x080049ed
 8005268:	080049ff 	.word	0x080049ff
 800526c:	080049a5 	.word	0x080049a5
 8005270:	080049b7 	.word	0x080049b7
 8005274:	08004993 	.word	0x08004993
 8005278:	080049c9 	.word	0x080049c9
 800527c:	080049db 	.word	0x080049db
 8005280:	08004a11 	.word	0x08004a11
 8005284:	080053ef 	.word	0x080053ef
 8005288:	08005401 	.word	0x08005401
 800528c:	08005413 	.word	0x08005413

08005290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e046      	b.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d009      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10c      	bne.n	8005324 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4313      	orrs	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800

0800534c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005364:	2302      	movs	r3, #2
 8005366:	e03d      	b.n	80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr

08005412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20000010 	.word	0x20000010

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	2600      	movs	r6, #0
 8005434:	4d0c      	ldr	r5, [pc, #48]	; (8005468 <__libc_init_array+0x38>)
 8005436:	4c0d      	ldr	r4, [pc, #52]	; (800546c <__libc_init_array+0x3c>)
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	f001 f8d0 	bl	80065e4 <_init>
 8005444:	2600      	movs	r6, #0
 8005446:	4d0a      	ldr	r5, [pc, #40]	; (8005470 <__libc_init_array+0x40>)
 8005448:	4c0a      	ldr	r4, [pc, #40]	; (8005474 <__libc_init_array+0x44>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	0800679c 	.word	0x0800679c
 800546c:	0800679c 	.word	0x0800679c
 8005470:	0800679c 	.word	0x0800679c
 8005474:	080067a0 	.word	0x080067a0

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	4291      	cmp	r1, r2
 800548c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <memset>:
 8005494:	4603      	mov	r3, r0
 8005496:	4402      	add	r2, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <srand>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <srand+0x44>)
 80054a8:	4604      	mov	r4, r0
 80054aa:	681d      	ldr	r5, [r3, #0]
 80054ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80054ae:	b9b3      	cbnz	r3, 80054de <srand+0x3a>
 80054b0:	2018      	movs	r0, #24
 80054b2:	f000 f8bf 	bl	8005634 <malloc>
 80054b6:	4602      	mov	r2, r0
 80054b8:	63a8      	str	r0, [r5, #56]	; 0x38
 80054ba:	b920      	cbnz	r0, 80054c6 <srand+0x22>
 80054bc:	2142      	movs	r1, #66	; 0x42
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <srand+0x48>)
 80054c0:	480b      	ldr	r0, [pc, #44]	; (80054f0 <srand+0x4c>)
 80054c2:	f000 f875 	bl	80055b0 <__assert_func>
 80054c6:	490b      	ldr	r1, [pc, #44]	; (80054f4 <srand+0x50>)
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <srand+0x54>)
 80054ca:	e9c0 1300 	strd	r1, r3, [r0]
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <srand+0x58>)
 80054d0:	2100      	movs	r1, #0
 80054d2:	6083      	str	r3, [r0, #8]
 80054d4:	230b      	movs	r3, #11
 80054d6:	8183      	strh	r3, [r0, #12]
 80054d8:	2001      	movs	r0, #1
 80054da:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80054de:	2200      	movs	r2, #0
 80054e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80054e2:	611c      	str	r4, [r3, #16]
 80054e4:	615a      	str	r2, [r3, #20]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	20000010 	.word	0x20000010
 80054ec:	08006658 	.word	0x08006658
 80054f0:	0800666f 	.word	0x0800666f
 80054f4:	abcd330e 	.word	0xabcd330e
 80054f8:	e66d1234 	.word	0xe66d1234
 80054fc:	0005deec 	.word	0x0005deec

08005500 <rand>:
 8005500:	4b16      	ldr	r3, [pc, #88]	; (800555c <rand+0x5c>)
 8005502:	b510      	push	{r4, lr}
 8005504:	681c      	ldr	r4, [r3, #0]
 8005506:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005508:	b9b3      	cbnz	r3, 8005538 <rand+0x38>
 800550a:	2018      	movs	r0, #24
 800550c:	f000 f892 	bl	8005634 <malloc>
 8005510:	4602      	mov	r2, r0
 8005512:	63a0      	str	r0, [r4, #56]	; 0x38
 8005514:	b920      	cbnz	r0, 8005520 <rand+0x20>
 8005516:	214e      	movs	r1, #78	; 0x4e
 8005518:	4b11      	ldr	r3, [pc, #68]	; (8005560 <rand+0x60>)
 800551a:	4812      	ldr	r0, [pc, #72]	; (8005564 <rand+0x64>)
 800551c:	f000 f848 	bl	80055b0 <__assert_func>
 8005520:	4911      	ldr	r1, [pc, #68]	; (8005568 <rand+0x68>)
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <rand+0x6c>)
 8005524:	e9c0 1300 	strd	r1, r3, [r0]
 8005528:	4b11      	ldr	r3, [pc, #68]	; (8005570 <rand+0x70>)
 800552a:	2100      	movs	r1, #0
 800552c:	6083      	str	r3, [r0, #8]
 800552e:	230b      	movs	r3, #11
 8005530:	8183      	strh	r3, [r0, #12]
 8005532:	2001      	movs	r0, #1
 8005534:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005538:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800553a:	4a0e      	ldr	r2, [pc, #56]	; (8005574 <rand+0x74>)
 800553c:	6920      	ldr	r0, [r4, #16]
 800553e:	6963      	ldr	r3, [r4, #20]
 8005540:	4342      	muls	r2, r0
 8005542:	490d      	ldr	r1, [pc, #52]	; (8005578 <rand+0x78>)
 8005544:	fb01 2203 	mla	r2, r1, r3, r2
 8005548:	fba0 0101 	umull	r0, r1, r0, r1
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	eb42 0001 	adc.w	r0, r2, r1
 8005552:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005556:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800555a:	bd10      	pop	{r4, pc}
 800555c:	20000010 	.word	0x20000010
 8005560:	08006658 	.word	0x08006658
 8005564:	0800666f 	.word	0x0800666f
 8005568:	abcd330e 	.word	0xabcd330e
 800556c:	e66d1234 	.word	0xe66d1234
 8005570:	0005deec 	.word	0x0005deec
 8005574:	5851f42d 	.word	0x5851f42d
 8005578:	4c957f2d 	.word	0x4c957f2d

0800557c <time>:
 800557c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <time+0x30>)
 8005580:	4604      	mov	r4, r0
 8005582:	2200      	movs	r2, #0
 8005584:	4669      	mov	r1, sp
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	f000 f842 	bl	8005610 <_gettimeofday_r>
 800558c:	2800      	cmp	r0, #0
 800558e:	da05      	bge.n	800559c <time+0x20>
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	e9cd 2300 	strd	r2, r3, [sp]
 800559c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055a0:	b10c      	cbz	r4, 80055a6 <time+0x2a>
 80055a2:	e9c4 0100 	strd	r0, r1, [r4]
 80055a6:	b004      	add	sp, #16
 80055a8:	bd10      	pop	{r4, pc}
 80055aa:	bf00      	nop
 80055ac:	20000010 	.word	0x20000010

080055b0 <__assert_func>:
 80055b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055b2:	4614      	mov	r4, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b09      	ldr	r3, [pc, #36]	; (80055dc <__assert_func+0x2c>)
 80055b8:	4605      	mov	r5, r0
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68d8      	ldr	r0, [r3, #12]
 80055be:	b14c      	cbz	r4, 80055d4 <__assert_func+0x24>
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <__assert_func+0x30>)
 80055c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055c6:	9100      	str	r1, [sp, #0]
 80055c8:	462b      	mov	r3, r5
 80055ca:	4906      	ldr	r1, [pc, #24]	; (80055e4 <__assert_func+0x34>)
 80055cc:	f000 f80e 	bl	80055ec <fiprintf>
 80055d0:	f000 fcd2 	bl	8005f78 <abort>
 80055d4:	4b04      	ldr	r3, [pc, #16]	; (80055e8 <__assert_func+0x38>)
 80055d6:	461c      	mov	r4, r3
 80055d8:	e7f3      	b.n	80055c2 <__assert_func+0x12>
 80055da:	bf00      	nop
 80055dc:	20000010 	.word	0x20000010
 80055e0:	080066ca 	.word	0x080066ca
 80055e4:	080066d7 	.word	0x080066d7
 80055e8:	08006705 	.word	0x08006705

080055ec <fiprintf>:
 80055ec:	b40e      	push	{r1, r2, r3}
 80055ee:	b503      	push	{r0, r1, lr}
 80055f0:	4601      	mov	r1, r0
 80055f2:	ab03      	add	r3, sp, #12
 80055f4:	4805      	ldr	r0, [pc, #20]	; (800560c <fiprintf+0x20>)
 80055f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	f000 f925 	bl	800584c <_vfiprintf_r>
 8005602:	b002      	add	sp, #8
 8005604:	f85d eb04 	ldr.w	lr, [sp], #4
 8005608:	b003      	add	sp, #12
 800560a:	4770      	bx	lr
 800560c:	20000010 	.word	0x20000010

08005610 <_gettimeofday_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	2300      	movs	r3, #0
 8005614:	4d06      	ldr	r5, [pc, #24]	; (8005630 <_gettimeofday_r+0x20>)
 8005616:	4604      	mov	r4, r0
 8005618:	4608      	mov	r0, r1
 800561a:	4611      	mov	r1, r2
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	f000 ffd9 	bl	80065d4 <_gettimeofday>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	d102      	bne.n	800562c <_gettimeofday_r+0x1c>
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	b103      	cbz	r3, 800562c <_gettimeofday_r+0x1c>
 800562a:	6023      	str	r3, [r4, #0]
 800562c:	bd38      	pop	{r3, r4, r5, pc}
 800562e:	bf00      	nop
 8005630:	200002c0 	.word	0x200002c0

08005634 <malloc>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <malloc+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f000 b86b 	b.w	8005714 <_malloc_r>
 800563e:	bf00      	nop
 8005640:	20000010 	.word	0x20000010

08005644 <_free_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4605      	mov	r5, r0
 8005648:	2900      	cmp	r1, #0
 800564a:	d040      	beq.n	80056ce <_free_r+0x8a>
 800564c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005650:	1f0c      	subs	r4, r1, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	bfb8      	it	lt
 8005656:	18e4      	addlt	r4, r4, r3
 8005658:	f000 fec0 	bl	80063dc <__malloc_lock>
 800565c:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <_free_r+0x8c>)
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	b933      	cbnz	r3, 8005670 <_free_r+0x2c>
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6014      	str	r4, [r2, #0]
 8005666:	4628      	mov	r0, r5
 8005668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566c:	f000 bebc 	b.w	80063e8 <__malloc_unlock>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d908      	bls.n	8005686 <_free_r+0x42>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	1821      	adds	r1, r4, r0
 8005678:	428b      	cmp	r3, r1
 800567a:	bf01      	itttt	eq
 800567c:	6819      	ldreq	r1, [r3, #0]
 800567e:	685b      	ldreq	r3, [r3, #4]
 8005680:	1809      	addeq	r1, r1, r0
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	e7ed      	b.n	8005662 <_free_r+0x1e>
 8005686:	461a      	mov	r2, r3
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b10b      	cbz	r3, 8005690 <_free_r+0x4c>
 800568c:	42a3      	cmp	r3, r4
 800568e:	d9fa      	bls.n	8005686 <_free_r+0x42>
 8005690:	6811      	ldr	r1, [r2, #0]
 8005692:	1850      	adds	r0, r2, r1
 8005694:	42a0      	cmp	r0, r4
 8005696:	d10b      	bne.n	80056b0 <_free_r+0x6c>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	4401      	add	r1, r0
 800569c:	1850      	adds	r0, r2, r1
 800569e:	4283      	cmp	r3, r0
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	d1e0      	bne.n	8005666 <_free_r+0x22>
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4401      	add	r1, r0
 80056aa:	6011      	str	r1, [r2, #0]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	e7da      	b.n	8005666 <_free_r+0x22>
 80056b0:	d902      	bls.n	80056b8 <_free_r+0x74>
 80056b2:	230c      	movs	r3, #12
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	e7d6      	b.n	8005666 <_free_r+0x22>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	1821      	adds	r1, r4, r0
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1809      	addeq	r1, r1, r0
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	6054      	str	r4, [r2, #4]
 80056cc:	e7cb      	b.n	8005666 <_free_r+0x22>
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	200002b8 	.word	0x200002b8

080056d4 <sbrk_aligned>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	4e0e      	ldr	r6, [pc, #56]	; (8005710 <sbrk_aligned+0x3c>)
 80056d8:	460c      	mov	r4, r1
 80056da:	6831      	ldr	r1, [r6, #0]
 80056dc:	4605      	mov	r5, r0
 80056de:	b911      	cbnz	r1, 80056e6 <sbrk_aligned+0x12>
 80056e0:	f000 fb7a 	bl	8005dd8 <_sbrk_r>
 80056e4:	6030      	str	r0, [r6, #0]
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 fb75 	bl	8005dd8 <_sbrk_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	d00a      	beq.n	8005708 <sbrk_aligned+0x34>
 80056f2:	1cc4      	adds	r4, r0, #3
 80056f4:	f024 0403 	bic.w	r4, r4, #3
 80056f8:	42a0      	cmp	r0, r4
 80056fa:	d007      	beq.n	800570c <sbrk_aligned+0x38>
 80056fc:	1a21      	subs	r1, r4, r0
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 fb6a 	bl	8005dd8 <_sbrk_r>
 8005704:	3001      	adds	r0, #1
 8005706:	d101      	bne.n	800570c <sbrk_aligned+0x38>
 8005708:	f04f 34ff 	mov.w	r4, #4294967295
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}
 8005710:	200002bc 	.word	0x200002bc

08005714 <_malloc_r>:
 8005714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005718:	1ccd      	adds	r5, r1, #3
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	2d00      	cmp	r5, #0
 8005728:	4607      	mov	r7, r0
 800572a:	db01      	blt.n	8005730 <_malloc_r+0x1c>
 800572c:	42a9      	cmp	r1, r5
 800572e:	d905      	bls.n	800573c <_malloc_r+0x28>
 8005730:	230c      	movs	r3, #12
 8005732:	2600      	movs	r6, #0
 8005734:	603b      	str	r3, [r7, #0]
 8005736:	4630      	mov	r0, r6
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	4e2e      	ldr	r6, [pc, #184]	; (80057f8 <_malloc_r+0xe4>)
 800573e:	f000 fe4d 	bl	80063dc <__malloc_lock>
 8005742:	6833      	ldr	r3, [r6, #0]
 8005744:	461c      	mov	r4, r3
 8005746:	bb34      	cbnz	r4, 8005796 <_malloc_r+0x82>
 8005748:	4629      	mov	r1, r5
 800574a:	4638      	mov	r0, r7
 800574c:	f7ff ffc2 	bl	80056d4 <sbrk_aligned>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	4604      	mov	r4, r0
 8005754:	d14d      	bne.n	80057f2 <_malloc_r+0xde>
 8005756:	6834      	ldr	r4, [r6, #0]
 8005758:	4626      	mov	r6, r4
 800575a:	2e00      	cmp	r6, #0
 800575c:	d140      	bne.n	80057e0 <_malloc_r+0xcc>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	4631      	mov	r1, r6
 8005762:	4638      	mov	r0, r7
 8005764:	eb04 0803 	add.w	r8, r4, r3
 8005768:	f000 fb36 	bl	8005dd8 <_sbrk_r>
 800576c:	4580      	cmp	r8, r0
 800576e:	d13a      	bne.n	80057e6 <_malloc_r+0xd2>
 8005770:	6821      	ldr	r1, [r4, #0]
 8005772:	3503      	adds	r5, #3
 8005774:	1a6d      	subs	r5, r5, r1
 8005776:	f025 0503 	bic.w	r5, r5, #3
 800577a:	3508      	adds	r5, #8
 800577c:	2d0c      	cmp	r5, #12
 800577e:	bf38      	it	cc
 8005780:	250c      	movcc	r5, #12
 8005782:	4638      	mov	r0, r7
 8005784:	4629      	mov	r1, r5
 8005786:	f7ff ffa5 	bl	80056d4 <sbrk_aligned>
 800578a:	3001      	adds	r0, #1
 800578c:	d02b      	beq.n	80057e6 <_malloc_r+0xd2>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	442b      	add	r3, r5
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	e00e      	b.n	80057b4 <_malloc_r+0xa0>
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	1b52      	subs	r2, r2, r5
 800579a:	d41e      	bmi.n	80057da <_malloc_r+0xc6>
 800579c:	2a0b      	cmp	r2, #11
 800579e:	d916      	bls.n	80057ce <_malloc_r+0xba>
 80057a0:	1961      	adds	r1, r4, r5
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	6025      	str	r5, [r4, #0]
 80057a6:	bf18      	it	ne
 80057a8:	6059      	strne	r1, [r3, #4]
 80057aa:	6863      	ldr	r3, [r4, #4]
 80057ac:	bf08      	it	eq
 80057ae:	6031      	streq	r1, [r6, #0]
 80057b0:	5162      	str	r2, [r4, r5]
 80057b2:	604b      	str	r3, [r1, #4]
 80057b4:	4638      	mov	r0, r7
 80057b6:	f104 060b 	add.w	r6, r4, #11
 80057ba:	f000 fe15 	bl	80063e8 <__malloc_unlock>
 80057be:	f026 0607 	bic.w	r6, r6, #7
 80057c2:	1d23      	adds	r3, r4, #4
 80057c4:	1af2      	subs	r2, r6, r3
 80057c6:	d0b6      	beq.n	8005736 <_malloc_r+0x22>
 80057c8:	1b9b      	subs	r3, r3, r6
 80057ca:	50a3      	str	r3, [r4, r2]
 80057cc:	e7b3      	b.n	8005736 <_malloc_r+0x22>
 80057ce:	6862      	ldr	r2, [r4, #4]
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	bf0c      	ite	eq
 80057d4:	6032      	streq	r2, [r6, #0]
 80057d6:	605a      	strne	r2, [r3, #4]
 80057d8:	e7ec      	b.n	80057b4 <_malloc_r+0xa0>
 80057da:	4623      	mov	r3, r4
 80057dc:	6864      	ldr	r4, [r4, #4]
 80057de:	e7b2      	b.n	8005746 <_malloc_r+0x32>
 80057e0:	4634      	mov	r4, r6
 80057e2:	6876      	ldr	r6, [r6, #4]
 80057e4:	e7b9      	b.n	800575a <_malloc_r+0x46>
 80057e6:	230c      	movs	r3, #12
 80057e8:	4638      	mov	r0, r7
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	f000 fdfc 	bl	80063e8 <__malloc_unlock>
 80057f0:	e7a1      	b.n	8005736 <_malloc_r+0x22>
 80057f2:	6025      	str	r5, [r4, #0]
 80057f4:	e7de      	b.n	80057b4 <_malloc_r+0xa0>
 80057f6:	bf00      	nop
 80057f8:	200002b8 	.word	0x200002b8

080057fc <__sfputc_r>:
 80057fc:	6893      	ldr	r3, [r2, #8]
 80057fe:	b410      	push	{r4}
 8005800:	3b01      	subs	r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	6093      	str	r3, [r2, #8]
 8005806:	da07      	bge.n	8005818 <__sfputc_r+0x1c>
 8005808:	6994      	ldr	r4, [r2, #24]
 800580a:	42a3      	cmp	r3, r4
 800580c:	db01      	blt.n	8005812 <__sfputc_r+0x16>
 800580e:	290a      	cmp	r1, #10
 8005810:	d102      	bne.n	8005818 <__sfputc_r+0x1c>
 8005812:	bc10      	pop	{r4}
 8005814:	f000 baf0 	b.w	8005df8 <__swbuf_r>
 8005818:	6813      	ldr	r3, [r2, #0]
 800581a:	1c58      	adds	r0, r3, #1
 800581c:	6010      	str	r0, [r2, #0]
 800581e:	7019      	strb	r1, [r3, #0]
 8005820:	4608      	mov	r0, r1
 8005822:	bc10      	pop	{r4}
 8005824:	4770      	bx	lr

08005826 <__sfputs_r>:
 8005826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005828:	4606      	mov	r6, r0
 800582a:	460f      	mov	r7, r1
 800582c:	4614      	mov	r4, r2
 800582e:	18d5      	adds	r5, r2, r3
 8005830:	42ac      	cmp	r4, r5
 8005832:	d101      	bne.n	8005838 <__sfputs_r+0x12>
 8005834:	2000      	movs	r0, #0
 8005836:	e007      	b.n	8005848 <__sfputs_r+0x22>
 8005838:	463a      	mov	r2, r7
 800583a:	4630      	mov	r0, r6
 800583c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005840:	f7ff ffdc 	bl	80057fc <__sfputc_r>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d1f3      	bne.n	8005830 <__sfputs_r+0xa>
 8005848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800584c <_vfiprintf_r>:
 800584c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005850:	460d      	mov	r5, r1
 8005852:	4614      	mov	r4, r2
 8005854:	4698      	mov	r8, r3
 8005856:	4606      	mov	r6, r0
 8005858:	b09d      	sub	sp, #116	; 0x74
 800585a:	b118      	cbz	r0, 8005864 <_vfiprintf_r+0x18>
 800585c:	6983      	ldr	r3, [r0, #24]
 800585e:	b90b      	cbnz	r3, 8005864 <_vfiprintf_r+0x18>
 8005860:	f000 fca8 	bl	80061b4 <__sinit>
 8005864:	4b89      	ldr	r3, [pc, #548]	; (8005a8c <_vfiprintf_r+0x240>)
 8005866:	429d      	cmp	r5, r3
 8005868:	d11b      	bne.n	80058a2 <_vfiprintf_r+0x56>
 800586a:	6875      	ldr	r5, [r6, #4]
 800586c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800586e:	07d9      	lsls	r1, r3, #31
 8005870:	d405      	bmi.n	800587e <_vfiprintf_r+0x32>
 8005872:	89ab      	ldrh	r3, [r5, #12]
 8005874:	059a      	lsls	r2, r3, #22
 8005876:	d402      	bmi.n	800587e <_vfiprintf_r+0x32>
 8005878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587a:	f000 fd39 	bl	80062f0 <__retarget_lock_acquire_recursive>
 800587e:	89ab      	ldrh	r3, [r5, #12]
 8005880:	071b      	lsls	r3, r3, #28
 8005882:	d501      	bpl.n	8005888 <_vfiprintf_r+0x3c>
 8005884:	692b      	ldr	r3, [r5, #16]
 8005886:	b9eb      	cbnz	r3, 80058c4 <_vfiprintf_r+0x78>
 8005888:	4629      	mov	r1, r5
 800588a:	4630      	mov	r0, r6
 800588c:	f000 fb06 	bl	8005e9c <__swsetup_r>
 8005890:	b1c0      	cbz	r0, 80058c4 <_vfiprintf_r+0x78>
 8005892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005894:	07dc      	lsls	r4, r3, #31
 8005896:	d50e      	bpl.n	80058b6 <_vfiprintf_r+0x6a>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	b01d      	add	sp, #116	; 0x74
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	4b7b      	ldr	r3, [pc, #492]	; (8005a90 <_vfiprintf_r+0x244>)
 80058a4:	429d      	cmp	r5, r3
 80058a6:	d101      	bne.n	80058ac <_vfiprintf_r+0x60>
 80058a8:	68b5      	ldr	r5, [r6, #8]
 80058aa:	e7df      	b.n	800586c <_vfiprintf_r+0x20>
 80058ac:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <_vfiprintf_r+0x248>)
 80058ae:	429d      	cmp	r5, r3
 80058b0:	bf08      	it	eq
 80058b2:	68f5      	ldreq	r5, [r6, #12]
 80058b4:	e7da      	b.n	800586c <_vfiprintf_r+0x20>
 80058b6:	89ab      	ldrh	r3, [r5, #12]
 80058b8:	0598      	lsls	r0, r3, #22
 80058ba:	d4ed      	bmi.n	8005898 <_vfiprintf_r+0x4c>
 80058bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058be:	f000 fd18 	bl	80062f2 <__retarget_lock_release_recursive>
 80058c2:	e7e9      	b.n	8005898 <_vfiprintf_r+0x4c>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	2320      	movs	r3, #32
 80058ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ce:	2330      	movs	r3, #48	; 0x30
 80058d0:	f04f 0901 	mov.w	r9, #1
 80058d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80058d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005a98 <_vfiprintf_r+0x24c>
 80058dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e0:	4623      	mov	r3, r4
 80058e2:	469a      	mov	sl, r3
 80058e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e8:	b10a      	cbz	r2, 80058ee <_vfiprintf_r+0xa2>
 80058ea:	2a25      	cmp	r2, #37	; 0x25
 80058ec:	d1f9      	bne.n	80058e2 <_vfiprintf_r+0x96>
 80058ee:	ebba 0b04 	subs.w	fp, sl, r4
 80058f2:	d00b      	beq.n	800590c <_vfiprintf_r+0xc0>
 80058f4:	465b      	mov	r3, fp
 80058f6:	4622      	mov	r2, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ff93 	bl	8005826 <__sfputs_r>
 8005900:	3001      	adds	r0, #1
 8005902:	f000 80aa 	beq.w	8005a5a <_vfiprintf_r+0x20e>
 8005906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005908:	445a      	add	r2, fp
 800590a:	9209      	str	r2, [sp, #36]	; 0x24
 800590c:	f89a 3000 	ldrb.w	r3, [sl]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80a2 	beq.w	8005a5a <_vfiprintf_r+0x20e>
 8005916:	2300      	movs	r3, #0
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005920:	f10a 0a01 	add.w	sl, sl, #1
 8005924:	9304      	str	r3, [sp, #16]
 8005926:	9307      	str	r3, [sp, #28]
 8005928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800592c:	931a      	str	r3, [sp, #104]	; 0x68
 800592e:	4654      	mov	r4, sl
 8005930:	2205      	movs	r2, #5
 8005932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005936:	4858      	ldr	r0, [pc, #352]	; (8005a98 <_vfiprintf_r+0x24c>)
 8005938:	f000 fd42 	bl	80063c0 <memchr>
 800593c:	9a04      	ldr	r2, [sp, #16]
 800593e:	b9d8      	cbnz	r0, 8005978 <_vfiprintf_r+0x12c>
 8005940:	06d1      	lsls	r1, r2, #27
 8005942:	bf44      	itt	mi
 8005944:	2320      	movmi	r3, #32
 8005946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594a:	0713      	lsls	r3, r2, #28
 800594c:	bf44      	itt	mi
 800594e:	232b      	movmi	r3, #43	; 0x2b
 8005950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005954:	f89a 3000 	ldrb.w	r3, [sl]
 8005958:	2b2a      	cmp	r3, #42	; 0x2a
 800595a:	d015      	beq.n	8005988 <_vfiprintf_r+0x13c>
 800595c:	4654      	mov	r4, sl
 800595e:	2000      	movs	r0, #0
 8005960:	f04f 0c0a 	mov.w	ip, #10
 8005964:	9a07      	ldr	r2, [sp, #28]
 8005966:	4621      	mov	r1, r4
 8005968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800596c:	3b30      	subs	r3, #48	; 0x30
 800596e:	2b09      	cmp	r3, #9
 8005970:	d94e      	bls.n	8005a10 <_vfiprintf_r+0x1c4>
 8005972:	b1b0      	cbz	r0, 80059a2 <_vfiprintf_r+0x156>
 8005974:	9207      	str	r2, [sp, #28]
 8005976:	e014      	b.n	80059a2 <_vfiprintf_r+0x156>
 8005978:	eba0 0308 	sub.w	r3, r0, r8
 800597c:	fa09 f303 	lsl.w	r3, r9, r3
 8005980:	4313      	orrs	r3, r2
 8005982:	46a2      	mov	sl, r4
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	e7d2      	b.n	800592e <_vfiprintf_r+0xe2>
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	1d19      	adds	r1, r3, #4
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	9103      	str	r1, [sp, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfbb      	ittet	lt
 8005994:	425b      	neglt	r3, r3
 8005996:	f042 0202 	orrlt.w	r2, r2, #2
 800599a:	9307      	strge	r3, [sp, #28]
 800599c:	9307      	strlt	r3, [sp, #28]
 800599e:	bfb8      	it	lt
 80059a0:	9204      	strlt	r2, [sp, #16]
 80059a2:	7823      	ldrb	r3, [r4, #0]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d10c      	bne.n	80059c2 <_vfiprintf_r+0x176>
 80059a8:	7863      	ldrb	r3, [r4, #1]
 80059aa:	2b2a      	cmp	r3, #42	; 0x2a
 80059ac:	d135      	bne.n	8005a1a <_vfiprintf_r+0x1ce>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	3402      	adds	r4, #2
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	9203      	str	r2, [sp, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bfb8      	it	lt
 80059bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c0:	9305      	str	r3, [sp, #20]
 80059c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005a9c <_vfiprintf_r+0x250>
 80059c6:	2203      	movs	r2, #3
 80059c8:	4650      	mov	r0, sl
 80059ca:	7821      	ldrb	r1, [r4, #0]
 80059cc:	f000 fcf8 	bl	80063c0 <memchr>
 80059d0:	b140      	cbz	r0, 80059e4 <_vfiprintf_r+0x198>
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	eba0 000a 	sub.w	r0, r0, sl
 80059d8:	fa03 f000 	lsl.w	r0, r3, r0
 80059dc:	9b04      	ldr	r3, [sp, #16]
 80059de:	3401      	adds	r4, #1
 80059e0:	4303      	orrs	r3, r0
 80059e2:	9304      	str	r3, [sp, #16]
 80059e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e8:	2206      	movs	r2, #6
 80059ea:	482d      	ldr	r0, [pc, #180]	; (8005aa0 <_vfiprintf_r+0x254>)
 80059ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f0:	f000 fce6 	bl	80063c0 <memchr>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d03f      	beq.n	8005a78 <_vfiprintf_r+0x22c>
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <_vfiprintf_r+0x258>)
 80059fa:	bb1b      	cbnz	r3, 8005a44 <_vfiprintf_r+0x1f8>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	3307      	adds	r3, #7
 8005a00:	f023 0307 	bic.w	r3, r3, #7
 8005a04:	3308      	adds	r3, #8
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	443b      	add	r3, r7
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	e767      	b.n	80058e0 <_vfiprintf_r+0x94>
 8005a10:	460c      	mov	r4, r1
 8005a12:	2001      	movs	r0, #1
 8005a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a18:	e7a5      	b.n	8005966 <_vfiprintf_r+0x11a>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f04f 0c0a 	mov.w	ip, #10
 8005a20:	4619      	mov	r1, r3
 8005a22:	3401      	adds	r4, #1
 8005a24:	9305      	str	r3, [sp, #20]
 8005a26:	4620      	mov	r0, r4
 8005a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a2c:	3a30      	subs	r2, #48	; 0x30
 8005a2e:	2a09      	cmp	r2, #9
 8005a30:	d903      	bls.n	8005a3a <_vfiprintf_r+0x1ee>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0c5      	beq.n	80059c2 <_vfiprintf_r+0x176>
 8005a36:	9105      	str	r1, [sp, #20]
 8005a38:	e7c3      	b.n	80059c2 <_vfiprintf_r+0x176>
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a42:	e7f0      	b.n	8005a26 <_vfiprintf_r+0x1da>
 8005a44:	ab03      	add	r3, sp, #12
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	462a      	mov	r2, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <_vfiprintf_r+0x25c>)
 8005a4e:	a904      	add	r1, sp, #16
 8005a50:	f3af 8000 	nop.w
 8005a54:	4607      	mov	r7, r0
 8005a56:	1c78      	adds	r0, r7, #1
 8005a58:	d1d6      	bne.n	8005a08 <_vfiprintf_r+0x1bc>
 8005a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a5c:	07d9      	lsls	r1, r3, #31
 8005a5e:	d405      	bmi.n	8005a6c <_vfiprintf_r+0x220>
 8005a60:	89ab      	ldrh	r3, [r5, #12]
 8005a62:	059a      	lsls	r2, r3, #22
 8005a64:	d402      	bmi.n	8005a6c <_vfiprintf_r+0x220>
 8005a66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a68:	f000 fc43 	bl	80062f2 <__retarget_lock_release_recursive>
 8005a6c:	89ab      	ldrh	r3, [r5, #12]
 8005a6e:	065b      	lsls	r3, r3, #25
 8005a70:	f53f af12 	bmi.w	8005898 <_vfiprintf_r+0x4c>
 8005a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a76:	e711      	b.n	800589c <_vfiprintf_r+0x50>
 8005a78:	ab03      	add	r3, sp, #12
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <_vfiprintf_r+0x25c>)
 8005a82:	a904      	add	r1, sp, #16
 8005a84:	f000 f882 	bl	8005b8c <_printf_i>
 8005a88:	e7e4      	b.n	8005a54 <_vfiprintf_r+0x208>
 8005a8a:	bf00      	nop
 8005a8c:	0800675c 	.word	0x0800675c
 8005a90:	0800677c 	.word	0x0800677c
 8005a94:	0800673c 	.word	0x0800673c
 8005a98:	08006706 	.word	0x08006706
 8005a9c:	0800670c 	.word	0x0800670c
 8005aa0:	08006710 	.word	0x08006710
 8005aa4:	00000000 	.word	0x00000000
 8005aa8:	08005827 	.word	0x08005827

08005aac <_printf_common>:
 8005aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	688a      	ldr	r2, [r1, #8]
 8005ab6:	690b      	ldr	r3, [r1, #16]
 8005ab8:	4607      	mov	r7, r0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bfb8      	it	lt
 8005abe:	4613      	movlt	r3, r2
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ac6:	460c      	mov	r4, r1
 8005ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005acc:	b10a      	cbz	r2, 8005ad2 <_printf_common+0x26>
 8005ace:	3301      	adds	r3, #1
 8005ad0:	6033      	str	r3, [r6, #0]
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	0699      	lsls	r1, r3, #26
 8005ad6:	bf42      	ittt	mi
 8005ad8:	6833      	ldrmi	r3, [r6, #0]
 8005ada:	3302      	addmi	r3, #2
 8005adc:	6033      	strmi	r3, [r6, #0]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	f015 0506 	ands.w	r5, r5, #6
 8005ae4:	d106      	bne.n	8005af4 <_printf_common+0x48>
 8005ae6:	f104 0a19 	add.w	sl, r4, #25
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	6832      	ldr	r2, [r6, #0]
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dc28      	bgt.n	8005b46 <_printf_common+0x9a>
 8005af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005af8:	1e13      	subs	r3, r2, #0
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	bf18      	it	ne
 8005afe:	2301      	movne	r3, #1
 8005b00:	0692      	lsls	r2, r2, #26
 8005b02:	d42d      	bmi.n	8005b60 <_printf_common+0xb4>
 8005b04:	4649      	mov	r1, r9
 8005b06:	4638      	mov	r0, r7
 8005b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0c:	47c0      	blx	r8
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d020      	beq.n	8005b54 <_printf_common+0xa8>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	68e5      	ldr	r5, [r4, #12]
 8005b16:	f003 0306 	and.w	r3, r3, #6
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	bf18      	it	ne
 8005b1e:	2500      	movne	r5, #0
 8005b20:	6832      	ldr	r2, [r6, #0]
 8005b22:	f04f 0600 	mov.w	r6, #0
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	bf08      	it	eq
 8005b2a:	1aad      	subeq	r5, r5, r2
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	bf08      	it	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bfc4      	itt	gt
 8005b38:	1a9b      	subgt	r3, r3, r2
 8005b3a:	18ed      	addgt	r5, r5, r3
 8005b3c:	341a      	adds	r4, #26
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d11a      	bne.n	8005b78 <_printf_common+0xcc>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e008      	b.n	8005b58 <_printf_common+0xac>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d103      	bne.n	8005b5c <_printf_common+0xb0>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7c4      	b.n	8005aea <_printf_common+0x3e>
 8005b60:	2030      	movs	r0, #48	; 0x30
 8005b62:	18e1      	adds	r1, r4, r3
 8005b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b6e:	4422      	add	r2, r4
 8005b70:	3302      	adds	r3, #2
 8005b72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b76:	e7c5      	b.n	8005b04 <_printf_common+0x58>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0e6      	beq.n	8005b54 <_printf_common+0xa8>
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7d9      	b.n	8005b3e <_printf_common+0x92>
	...

08005b8c <_printf_i>:
 8005b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	7e0f      	ldrb	r7, [r1, #24]
 8005b92:	4691      	mov	r9, r2
 8005b94:	2f78      	cmp	r7, #120	; 0x78
 8005b96:	4680      	mov	r8, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	469a      	mov	sl, r3
 8005b9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ba2:	d807      	bhi.n	8005bb4 <_printf_i+0x28>
 8005ba4:	2f62      	cmp	r7, #98	; 0x62
 8005ba6:	d80a      	bhi.n	8005bbe <_printf_i+0x32>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f000 80d9 	beq.w	8005d60 <_printf_i+0x1d4>
 8005bae:	2f58      	cmp	r7, #88	; 0x58
 8005bb0:	f000 80a4 	beq.w	8005cfc <_printf_i+0x170>
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bbc:	e03a      	b.n	8005c34 <_printf_i+0xa8>
 8005bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc2:	2b15      	cmp	r3, #21
 8005bc4:	d8f6      	bhi.n	8005bb4 <_printf_i+0x28>
 8005bc6:	a101      	add	r1, pc, #4	; (adr r1, 8005bcc <_printf_i+0x40>)
 8005bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005bb5 	.word	0x08005bb5
 8005bd8:	08005bb5 	.word	0x08005bb5
 8005bdc:	08005bb5 	.word	0x08005bb5
 8005be0:	08005bb5 	.word	0x08005bb5
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005bb5 	.word	0x08005bb5
 8005bec:	08005bb5 	.word	0x08005bb5
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005d47 	.word	0x08005d47
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005d29 	.word	0x08005d29
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d69 	.word	0x08005d69
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005d31 	.word	0x08005d31
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	602a      	str	r2, [r5, #0]
 8005c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0a4      	b.n	8005d82 <_printf_i+0x1f6>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	6829      	ldr	r1, [r5, #0]
 8005c3c:	0606      	lsls	r6, r0, #24
 8005c3e:	f101 0304 	add.w	r3, r1, #4
 8005c42:	d50a      	bpl.n	8005c5a <_printf_i+0xce>
 8005c44:	680e      	ldr	r6, [r1, #0]
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	2e00      	cmp	r6, #0
 8005c4a:	da03      	bge.n	8005c54 <_printf_i+0xc8>
 8005c4c:	232d      	movs	r3, #45	; 0x2d
 8005c4e:	4276      	negs	r6, r6
 8005c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c54:	230a      	movs	r3, #10
 8005c56:	485e      	ldr	r0, [pc, #376]	; (8005dd0 <_printf_i+0x244>)
 8005c58:	e019      	b.n	8005c8e <_printf_i+0x102>
 8005c5a:	680e      	ldr	r6, [r1, #0]
 8005c5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	bf18      	it	ne
 8005c64:	b236      	sxthne	r6, r6
 8005c66:	e7ef      	b.n	8005c48 <_printf_i+0xbc>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	1d19      	adds	r1, r3, #4
 8005c6e:	6029      	str	r1, [r5, #0]
 8005c70:	0601      	lsls	r1, r0, #24
 8005c72:	d501      	bpl.n	8005c78 <_printf_i+0xec>
 8005c74:	681e      	ldr	r6, [r3, #0]
 8005c76:	e002      	b.n	8005c7e <_printf_i+0xf2>
 8005c78:	0646      	lsls	r6, r0, #25
 8005c7a:	d5fb      	bpl.n	8005c74 <_printf_i+0xe8>
 8005c7c:	881e      	ldrh	r6, [r3, #0]
 8005c7e:	2f6f      	cmp	r7, #111	; 0x6f
 8005c80:	bf0c      	ite	eq
 8005c82:	2308      	moveq	r3, #8
 8005c84:	230a      	movne	r3, #10
 8005c86:	4852      	ldr	r0, [pc, #328]	; (8005dd0 <_printf_i+0x244>)
 8005c88:	2100      	movs	r1, #0
 8005c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c8e:	6865      	ldr	r5, [r4, #4]
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	bfa8      	it	ge
 8005c94:	6821      	ldrge	r1, [r4, #0]
 8005c96:	60a5      	str	r5, [r4, #8]
 8005c98:	bfa4      	itt	ge
 8005c9a:	f021 0104 	bicge.w	r1, r1, #4
 8005c9e:	6021      	strge	r1, [r4, #0]
 8005ca0:	b90e      	cbnz	r6, 8005ca6 <_printf_i+0x11a>
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	d04d      	beq.n	8005d42 <_printf_i+0x1b6>
 8005ca6:	4615      	mov	r5, r2
 8005ca8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cac:	fb03 6711 	mls	r7, r3, r1, r6
 8005cb0:	5dc7      	ldrb	r7, [r0, r7]
 8005cb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb6:	4637      	mov	r7, r6
 8005cb8:	42bb      	cmp	r3, r7
 8005cba:	460e      	mov	r6, r1
 8005cbc:	d9f4      	bls.n	8005ca8 <_printf_i+0x11c>
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d10b      	bne.n	8005cda <_printf_i+0x14e>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	07de      	lsls	r6, r3, #31
 8005cc6:	d508      	bpl.n	8005cda <_printf_i+0x14e>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	6861      	ldr	r1, [r4, #4]
 8005ccc:	4299      	cmp	r1, r3
 8005cce:	bfde      	ittt	le
 8005cd0:	2330      	movle	r3, #48	; 0x30
 8005cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cda:	1b52      	subs	r2, r2, r5
 8005cdc:	6122      	str	r2, [r4, #16]
 8005cde:	464b      	mov	r3, r9
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f8cd a000 	str.w	sl, [sp]
 8005ce8:	aa03      	add	r2, sp, #12
 8005cea:	f7ff fedf 	bl	8005aac <_printf_common>
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d14c      	bne.n	8005d8c <_printf_i+0x200>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	b004      	add	sp, #16
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	4834      	ldr	r0, [pc, #208]	; (8005dd0 <_printf_i+0x244>)
 8005cfe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d02:	6829      	ldr	r1, [r5, #0]
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d0a:	6029      	str	r1, [r5, #0]
 8005d0c:	061d      	lsls	r5, r3, #24
 8005d0e:	d514      	bpl.n	8005d3a <_printf_i+0x1ae>
 8005d10:	07df      	lsls	r7, r3, #31
 8005d12:	bf44      	itt	mi
 8005d14:	f043 0320 	orrmi.w	r3, r3, #32
 8005d18:	6023      	strmi	r3, [r4, #0]
 8005d1a:	b91e      	cbnz	r6, 8005d24 <_printf_i+0x198>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	f023 0320 	bic.w	r3, r3, #32
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	2310      	movs	r3, #16
 8005d26:	e7af      	b.n	8005c88 <_printf_i+0xfc>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	f043 0320 	orr.w	r3, r3, #32
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2378      	movs	r3, #120	; 0x78
 8005d32:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <_printf_i+0x248>)
 8005d34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d38:	e7e3      	b.n	8005d02 <_printf_i+0x176>
 8005d3a:	0659      	lsls	r1, r3, #25
 8005d3c:	bf48      	it	mi
 8005d3e:	b2b6      	uxthmi	r6, r6
 8005d40:	e7e6      	b.n	8005d10 <_printf_i+0x184>
 8005d42:	4615      	mov	r5, r2
 8005d44:	e7bb      	b.n	8005cbe <_printf_i+0x132>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	6826      	ldr	r6, [r4, #0]
 8005d4a:	1d18      	adds	r0, r3, #4
 8005d4c:	6961      	ldr	r1, [r4, #20]
 8005d4e:	6028      	str	r0, [r5, #0]
 8005d50:	0635      	lsls	r5, r6, #24
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	d501      	bpl.n	8005d5a <_printf_i+0x1ce>
 8005d56:	6019      	str	r1, [r3, #0]
 8005d58:	e002      	b.n	8005d60 <_printf_i+0x1d4>
 8005d5a:	0670      	lsls	r0, r6, #25
 8005d5c:	d5fb      	bpl.n	8005d56 <_printf_i+0x1ca>
 8005d5e:	8019      	strh	r1, [r3, #0]
 8005d60:	2300      	movs	r3, #0
 8005d62:	4615      	mov	r5, r2
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	e7ba      	b.n	8005cde <_printf_i+0x152>
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 fb23 	bl	80063c0 <memchr>
 8005d7a:	b108      	cbz	r0, 8005d80 <_printf_i+0x1f4>
 8005d7c:	1b40      	subs	r0, r0, r5
 8005d7e:	6060      	str	r0, [r4, #4]
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	2300      	movs	r3, #0
 8005d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8a:	e7a8      	b.n	8005cde <_printf_i+0x152>
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	47d0      	blx	sl
 8005d96:	3001      	adds	r0, #1
 8005d98:	d0ab      	beq.n	8005cf2 <_printf_i+0x166>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	079b      	lsls	r3, r3, #30
 8005d9e:	d413      	bmi.n	8005dc8 <_printf_i+0x23c>
 8005da0:	68e0      	ldr	r0, [r4, #12]
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	4298      	cmp	r0, r3
 8005da6:	bfb8      	it	lt
 8005da8:	4618      	movlt	r0, r3
 8005daa:	e7a4      	b.n	8005cf6 <_printf_i+0x16a>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4632      	mov	r2, r6
 8005db0:	4649      	mov	r1, r9
 8005db2:	4640      	mov	r0, r8
 8005db4:	47d0      	blx	sl
 8005db6:	3001      	adds	r0, #1
 8005db8:	d09b      	beq.n	8005cf2 <_printf_i+0x166>
 8005dba:	3501      	adds	r5, #1
 8005dbc:	68e3      	ldr	r3, [r4, #12]
 8005dbe:	9903      	ldr	r1, [sp, #12]
 8005dc0:	1a5b      	subs	r3, r3, r1
 8005dc2:	42ab      	cmp	r3, r5
 8005dc4:	dcf2      	bgt.n	8005dac <_printf_i+0x220>
 8005dc6:	e7eb      	b.n	8005da0 <_printf_i+0x214>
 8005dc8:	2500      	movs	r5, #0
 8005dca:	f104 0619 	add.w	r6, r4, #25
 8005dce:	e7f5      	b.n	8005dbc <_printf_i+0x230>
 8005dd0:	08006717 	.word	0x08006717
 8005dd4:	08006728 	.word	0x08006728

08005dd8 <_sbrk_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	; (8005df4 <_sbrk_r+0x1c>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fb fdae 	bl	8001944 <_sbrk>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_sbrk_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_sbrk_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200002c0 	.word	0x200002c0

08005df8 <__swbuf_r>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	460e      	mov	r6, r1
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	4605      	mov	r5, r0
 8005e00:	b118      	cbz	r0, 8005e0a <__swbuf_r+0x12>
 8005e02:	6983      	ldr	r3, [r0, #24]
 8005e04:	b90b      	cbnz	r3, 8005e0a <__swbuf_r+0x12>
 8005e06:	f000 f9d5 	bl	80061b4 <__sinit>
 8005e0a:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <__swbuf_r+0x98>)
 8005e0c:	429c      	cmp	r4, r3
 8005e0e:	d12b      	bne.n	8005e68 <__swbuf_r+0x70>
 8005e10:	686c      	ldr	r4, [r5, #4]
 8005e12:	69a3      	ldr	r3, [r4, #24]
 8005e14:	60a3      	str	r3, [r4, #8]
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	071a      	lsls	r2, r3, #28
 8005e1a:	d52f      	bpl.n	8005e7c <__swbuf_r+0x84>
 8005e1c:	6923      	ldr	r3, [r4, #16]
 8005e1e:	b36b      	cbz	r3, 8005e7c <__swbuf_r+0x84>
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	6820      	ldr	r0, [r4, #0]
 8005e24:	b2f6      	uxtb	r6, r6
 8005e26:	1ac0      	subs	r0, r0, r3
 8005e28:	6963      	ldr	r3, [r4, #20]
 8005e2a:	4637      	mov	r7, r6
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	dc04      	bgt.n	8005e3a <__swbuf_r+0x42>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f92a 	bl	800608c <_fflush_r>
 8005e38:	bb30      	cbnz	r0, 8005e88 <__swbuf_r+0x90>
 8005e3a:	68a3      	ldr	r3, [r4, #8]
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	701e      	strb	r6, [r3, #0]
 8005e4a:	6963      	ldr	r3, [r4, #20]
 8005e4c:	4283      	cmp	r3, r0
 8005e4e:	d004      	beq.n	8005e5a <__swbuf_r+0x62>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	07db      	lsls	r3, r3, #31
 8005e54:	d506      	bpl.n	8005e64 <__swbuf_r+0x6c>
 8005e56:	2e0a      	cmp	r6, #10
 8005e58:	d104      	bne.n	8005e64 <__swbuf_r+0x6c>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f915 	bl	800608c <_fflush_r>
 8005e62:	b988      	cbnz	r0, 8005e88 <__swbuf_r+0x90>
 8005e64:	4638      	mov	r0, r7
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <__swbuf_r+0x9c>)
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d101      	bne.n	8005e72 <__swbuf_r+0x7a>
 8005e6e:	68ac      	ldr	r4, [r5, #8]
 8005e70:	e7cf      	b.n	8005e12 <__swbuf_r+0x1a>
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <__swbuf_r+0xa0>)
 8005e74:	429c      	cmp	r4, r3
 8005e76:	bf08      	it	eq
 8005e78:	68ec      	ldreq	r4, [r5, #12]
 8005e7a:	e7ca      	b.n	8005e12 <__swbuf_r+0x1a>
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 f80c 	bl	8005e9c <__swsetup_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d0cb      	beq.n	8005e20 <__swbuf_r+0x28>
 8005e88:	f04f 37ff 	mov.w	r7, #4294967295
 8005e8c:	e7ea      	b.n	8005e64 <__swbuf_r+0x6c>
 8005e8e:	bf00      	nop
 8005e90:	0800675c 	.word	0x0800675c
 8005e94:	0800677c 	.word	0x0800677c
 8005e98:	0800673c 	.word	0x0800673c

08005e9c <__swsetup_r>:
 8005e9c:	4b32      	ldr	r3, [pc, #200]	; (8005f68 <__swsetup_r+0xcc>)
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	b125      	cbz	r5, 8005eb2 <__swsetup_r+0x16>
 8005ea8:	69ab      	ldr	r3, [r5, #24]
 8005eaa:	b913      	cbnz	r3, 8005eb2 <__swsetup_r+0x16>
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f981 	bl	80061b4 <__sinit>
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	; (8005f6c <__swsetup_r+0xd0>)
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	d10f      	bne.n	8005ed8 <__swsetup_r+0x3c>
 8005eb8:	686c      	ldr	r4, [r5, #4]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec0:	0719      	lsls	r1, r3, #28
 8005ec2:	d42c      	bmi.n	8005f1e <__swsetup_r+0x82>
 8005ec4:	06dd      	lsls	r5, r3, #27
 8005ec6:	d411      	bmi.n	8005eec <__swsetup_r+0x50>
 8005ec8:	2309      	movs	r3, #9
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	e03e      	b.n	8005f56 <__swsetup_r+0xba>
 8005ed8:	4b25      	ldr	r3, [pc, #148]	; (8005f70 <__swsetup_r+0xd4>)
 8005eda:	429c      	cmp	r4, r3
 8005edc:	d101      	bne.n	8005ee2 <__swsetup_r+0x46>
 8005ede:	68ac      	ldr	r4, [r5, #8]
 8005ee0:	e7eb      	b.n	8005eba <__swsetup_r+0x1e>
 8005ee2:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <__swsetup_r+0xd8>)
 8005ee4:	429c      	cmp	r4, r3
 8005ee6:	bf08      	it	eq
 8005ee8:	68ec      	ldreq	r4, [r5, #12]
 8005eea:	e7e6      	b.n	8005eba <__swsetup_r+0x1e>
 8005eec:	0758      	lsls	r0, r3, #29
 8005eee:	d512      	bpl.n	8005f16 <__swsetup_r+0x7a>
 8005ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ef2:	b141      	cbz	r1, 8005f06 <__swsetup_r+0x6a>
 8005ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ef8:	4299      	cmp	r1, r3
 8005efa:	d002      	beq.n	8005f02 <__swsetup_r+0x66>
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff fba1 	bl	8005644 <_free_r>
 8005f02:	2300      	movs	r3, #0
 8005f04:	6363      	str	r3, [r4, #52]	; 0x34
 8005f06:	89a3      	ldrh	r3, [r4, #12]
 8005f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f0c:	81a3      	strh	r3, [r4, #12]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	6923      	ldr	r3, [r4, #16]
 8005f20:	b94b      	cbnz	r3, 8005f36 <__swsetup_r+0x9a>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2c:	d003      	beq.n	8005f36 <__swsetup_r+0x9a>
 8005f2e:	4621      	mov	r1, r4
 8005f30:	4630      	mov	r0, r6
 8005f32:	f000 fa05 	bl	8006340 <__smakebuf_r>
 8005f36:	89a0      	ldrh	r0, [r4, #12]
 8005f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f3c:	f010 0301 	ands.w	r3, r0, #1
 8005f40:	d00a      	beq.n	8005f58 <__swsetup_r+0xbc>
 8005f42:	2300      	movs	r3, #0
 8005f44:	60a3      	str	r3, [r4, #8]
 8005f46:	6963      	ldr	r3, [r4, #20]
 8005f48:	425b      	negs	r3, r3
 8005f4a:	61a3      	str	r3, [r4, #24]
 8005f4c:	6923      	ldr	r3, [r4, #16]
 8005f4e:	b943      	cbnz	r3, 8005f62 <__swsetup_r+0xc6>
 8005f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f54:	d1ba      	bne.n	8005ecc <__swsetup_r+0x30>
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	0781      	lsls	r1, r0, #30
 8005f5a:	bf58      	it	pl
 8005f5c:	6963      	ldrpl	r3, [r4, #20]
 8005f5e:	60a3      	str	r3, [r4, #8]
 8005f60:	e7f4      	b.n	8005f4c <__swsetup_r+0xb0>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e7f7      	b.n	8005f56 <__swsetup_r+0xba>
 8005f66:	bf00      	nop
 8005f68:	20000010 	.word	0x20000010
 8005f6c:	0800675c 	.word	0x0800675c
 8005f70:	0800677c 	.word	0x0800677c
 8005f74:	0800673c 	.word	0x0800673c

08005f78 <abort>:
 8005f78:	2006      	movs	r0, #6
 8005f7a:	b508      	push	{r3, lr}
 8005f7c:	f000 fa62 	bl	8006444 <raise>
 8005f80:	2001      	movs	r0, #1
 8005f82:	f7fb fc88 	bl	8001896 <_exit>
	...

08005f88 <__sflush_r>:
 8005f88:	898a      	ldrh	r2, [r1, #12]
 8005f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	0710      	lsls	r0, r2, #28
 8005f90:	460c      	mov	r4, r1
 8005f92:	d457      	bmi.n	8006044 <__sflush_r+0xbc>
 8005f94:	684b      	ldr	r3, [r1, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	dc04      	bgt.n	8005fa4 <__sflush_r+0x1c>
 8005f9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	dc01      	bgt.n	8005fa4 <__sflush_r+0x1c>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa6:	2e00      	cmp	r6, #0
 8005fa8:	d0fa      	beq.n	8005fa0 <__sflush_r+0x18>
 8005faa:	2300      	movs	r3, #0
 8005fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fb0:	682f      	ldr	r7, [r5, #0]
 8005fb2:	602b      	str	r3, [r5, #0]
 8005fb4:	d032      	beq.n	800601c <__sflush_r+0x94>
 8005fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	075a      	lsls	r2, r3, #29
 8005fbc:	d505      	bpl.n	8005fca <__sflush_r+0x42>
 8005fbe:	6863      	ldr	r3, [r4, #4]
 8005fc0:	1ac0      	subs	r0, r0, r3
 8005fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fc4:	b10b      	cbz	r3, 8005fca <__sflush_r+0x42>
 8005fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fc8:	1ac0      	subs	r0, r0, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	6a21      	ldr	r1, [r4, #32]
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	d106      	bne.n	8005fea <__sflush_r+0x62>
 8005fdc:	6829      	ldr	r1, [r5, #0]
 8005fde:	291d      	cmp	r1, #29
 8005fe0:	d82c      	bhi.n	800603c <__sflush_r+0xb4>
 8005fe2:	4a29      	ldr	r2, [pc, #164]	; (8006088 <__sflush_r+0x100>)
 8005fe4:	40ca      	lsrs	r2, r1
 8005fe6:	07d6      	lsls	r6, r2, #31
 8005fe8:	d528      	bpl.n	800603c <__sflush_r+0xb4>
 8005fea:	2200      	movs	r2, #0
 8005fec:	6062      	str	r2, [r4, #4]
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	04d9      	lsls	r1, r3, #19
 8005ff2:	6022      	str	r2, [r4, #0]
 8005ff4:	d504      	bpl.n	8006000 <__sflush_r+0x78>
 8005ff6:	1c42      	adds	r2, r0, #1
 8005ff8:	d101      	bne.n	8005ffe <__sflush_r+0x76>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	b903      	cbnz	r3, 8006000 <__sflush_r+0x78>
 8005ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8006000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006002:	602f      	str	r7, [r5, #0]
 8006004:	2900      	cmp	r1, #0
 8006006:	d0cb      	beq.n	8005fa0 <__sflush_r+0x18>
 8006008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800600c:	4299      	cmp	r1, r3
 800600e:	d002      	beq.n	8006016 <__sflush_r+0x8e>
 8006010:	4628      	mov	r0, r5
 8006012:	f7ff fb17 	bl	8005644 <_free_r>
 8006016:	2000      	movs	r0, #0
 8006018:	6360      	str	r0, [r4, #52]	; 0x34
 800601a:	e7c2      	b.n	8005fa2 <__sflush_r+0x1a>
 800601c:	6a21      	ldr	r1, [r4, #32]
 800601e:	2301      	movs	r3, #1
 8006020:	4628      	mov	r0, r5
 8006022:	47b0      	blx	r6
 8006024:	1c41      	adds	r1, r0, #1
 8006026:	d1c7      	bne.n	8005fb8 <__sflush_r+0x30>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0c4      	beq.n	8005fb8 <__sflush_r+0x30>
 800602e:	2b1d      	cmp	r3, #29
 8006030:	d001      	beq.n	8006036 <__sflush_r+0xae>
 8006032:	2b16      	cmp	r3, #22
 8006034:	d101      	bne.n	800603a <__sflush_r+0xb2>
 8006036:	602f      	str	r7, [r5, #0]
 8006038:	e7b2      	b.n	8005fa0 <__sflush_r+0x18>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	e7ae      	b.n	8005fa2 <__sflush_r+0x1a>
 8006044:	690f      	ldr	r7, [r1, #16]
 8006046:	2f00      	cmp	r7, #0
 8006048:	d0aa      	beq.n	8005fa0 <__sflush_r+0x18>
 800604a:	0793      	lsls	r3, r2, #30
 800604c:	bf18      	it	ne
 800604e:	2300      	movne	r3, #0
 8006050:	680e      	ldr	r6, [r1, #0]
 8006052:	bf08      	it	eq
 8006054:	694b      	ldreq	r3, [r1, #20]
 8006056:	1bf6      	subs	r6, r6, r7
 8006058:	600f      	str	r7, [r1, #0]
 800605a:	608b      	str	r3, [r1, #8]
 800605c:	2e00      	cmp	r6, #0
 800605e:	dd9f      	ble.n	8005fa0 <__sflush_r+0x18>
 8006060:	4633      	mov	r3, r6
 8006062:	463a      	mov	r2, r7
 8006064:	4628      	mov	r0, r5
 8006066:	6a21      	ldr	r1, [r4, #32]
 8006068:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800606c:	47e0      	blx	ip
 800606e:	2800      	cmp	r0, #0
 8006070:	dc06      	bgt.n	8006080 <__sflush_r+0xf8>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	e790      	b.n	8005fa2 <__sflush_r+0x1a>
 8006080:	4407      	add	r7, r0
 8006082:	1a36      	subs	r6, r6, r0
 8006084:	e7ea      	b.n	800605c <__sflush_r+0xd4>
 8006086:	bf00      	nop
 8006088:	20400001 	.word	0x20400001

0800608c <_fflush_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	690b      	ldr	r3, [r1, #16]
 8006090:	4605      	mov	r5, r0
 8006092:	460c      	mov	r4, r1
 8006094:	b913      	cbnz	r3, 800609c <_fflush_r+0x10>
 8006096:	2500      	movs	r5, #0
 8006098:	4628      	mov	r0, r5
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	b118      	cbz	r0, 80060a6 <_fflush_r+0x1a>
 800609e:	6983      	ldr	r3, [r0, #24]
 80060a0:	b90b      	cbnz	r3, 80060a6 <_fflush_r+0x1a>
 80060a2:	f000 f887 	bl	80061b4 <__sinit>
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <_fflush_r+0x6c>)
 80060a8:	429c      	cmp	r4, r3
 80060aa:	d11b      	bne.n	80060e4 <_fflush_r+0x58>
 80060ac:	686c      	ldr	r4, [r5, #4]
 80060ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ef      	beq.n	8006096 <_fflush_r+0xa>
 80060b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060b8:	07d0      	lsls	r0, r2, #31
 80060ba:	d404      	bmi.n	80060c6 <_fflush_r+0x3a>
 80060bc:	0599      	lsls	r1, r3, #22
 80060be:	d402      	bmi.n	80060c6 <_fflush_r+0x3a>
 80060c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060c2:	f000 f915 	bl	80062f0 <__retarget_lock_acquire_recursive>
 80060c6:	4628      	mov	r0, r5
 80060c8:	4621      	mov	r1, r4
 80060ca:	f7ff ff5d 	bl	8005f88 <__sflush_r>
 80060ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060d0:	4605      	mov	r5, r0
 80060d2:	07da      	lsls	r2, r3, #31
 80060d4:	d4e0      	bmi.n	8006098 <_fflush_r+0xc>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	d4dd      	bmi.n	8006098 <_fflush_r+0xc>
 80060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060de:	f000 f908 	bl	80062f2 <__retarget_lock_release_recursive>
 80060e2:	e7d9      	b.n	8006098 <_fflush_r+0xc>
 80060e4:	4b05      	ldr	r3, [pc, #20]	; (80060fc <_fflush_r+0x70>)
 80060e6:	429c      	cmp	r4, r3
 80060e8:	d101      	bne.n	80060ee <_fflush_r+0x62>
 80060ea:	68ac      	ldr	r4, [r5, #8]
 80060ec:	e7df      	b.n	80060ae <_fflush_r+0x22>
 80060ee:	4b04      	ldr	r3, [pc, #16]	; (8006100 <_fflush_r+0x74>)
 80060f0:	429c      	cmp	r4, r3
 80060f2:	bf08      	it	eq
 80060f4:	68ec      	ldreq	r4, [r5, #12]
 80060f6:	e7da      	b.n	80060ae <_fflush_r+0x22>
 80060f8:	0800675c 	.word	0x0800675c
 80060fc:	0800677c 	.word	0x0800677c
 8006100:	0800673c 	.word	0x0800673c

08006104 <std>:
 8006104:	2300      	movs	r3, #0
 8006106:	b510      	push	{r4, lr}
 8006108:	4604      	mov	r4, r0
 800610a:	e9c0 3300 	strd	r3, r3, [r0]
 800610e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006112:	6083      	str	r3, [r0, #8]
 8006114:	8181      	strh	r1, [r0, #12]
 8006116:	6643      	str	r3, [r0, #100]	; 0x64
 8006118:	81c2      	strh	r2, [r0, #14]
 800611a:	6183      	str	r3, [r0, #24]
 800611c:	4619      	mov	r1, r3
 800611e:	2208      	movs	r2, #8
 8006120:	305c      	adds	r0, #92	; 0x5c
 8006122:	f7ff f9b7 	bl	8005494 <memset>
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <std+0x38>)
 8006128:	6224      	str	r4, [r4, #32]
 800612a:	6263      	str	r3, [r4, #36]	; 0x24
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <std+0x3c>)
 800612e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <std+0x40>)
 8006132:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <std+0x44>)
 8006136:	6323      	str	r3, [r4, #48]	; 0x30
 8006138:	bd10      	pop	{r4, pc}
 800613a:	bf00      	nop
 800613c:	0800647d 	.word	0x0800647d
 8006140:	0800649f 	.word	0x0800649f
 8006144:	080064d7 	.word	0x080064d7
 8006148:	080064fb 	.word	0x080064fb

0800614c <_cleanup_r>:
 800614c:	4901      	ldr	r1, [pc, #4]	; (8006154 <_cleanup_r+0x8>)
 800614e:	f000 b8af 	b.w	80062b0 <_fwalk_reent>
 8006152:	bf00      	nop
 8006154:	0800608d 	.word	0x0800608d

08006158 <__sfmoreglue>:
 8006158:	2268      	movs	r2, #104	; 0x68
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	1e4d      	subs	r5, r1, #1
 800615e:	4355      	muls	r5, r2
 8006160:	460e      	mov	r6, r1
 8006162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006166:	f7ff fad5 	bl	8005714 <_malloc_r>
 800616a:	4604      	mov	r4, r0
 800616c:	b140      	cbz	r0, 8006180 <__sfmoreglue+0x28>
 800616e:	2100      	movs	r1, #0
 8006170:	e9c0 1600 	strd	r1, r6, [r0]
 8006174:	300c      	adds	r0, #12
 8006176:	60a0      	str	r0, [r4, #8]
 8006178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800617c:	f7ff f98a 	bl	8005494 <memset>
 8006180:	4620      	mov	r0, r4
 8006182:	bd70      	pop	{r4, r5, r6, pc}

08006184 <__sfp_lock_acquire>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sfp_lock_acquire+0x8>)
 8006186:	f000 b8b3 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 800618a:	bf00      	nop
 800618c:	200002c5 	.word	0x200002c5

08006190 <__sfp_lock_release>:
 8006190:	4801      	ldr	r0, [pc, #4]	; (8006198 <__sfp_lock_release+0x8>)
 8006192:	f000 b8ae 	b.w	80062f2 <__retarget_lock_release_recursive>
 8006196:	bf00      	nop
 8006198:	200002c5 	.word	0x200002c5

0800619c <__sinit_lock_acquire>:
 800619c:	4801      	ldr	r0, [pc, #4]	; (80061a4 <__sinit_lock_acquire+0x8>)
 800619e:	f000 b8a7 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 80061a2:	bf00      	nop
 80061a4:	200002c6 	.word	0x200002c6

080061a8 <__sinit_lock_release>:
 80061a8:	4801      	ldr	r0, [pc, #4]	; (80061b0 <__sinit_lock_release+0x8>)
 80061aa:	f000 b8a2 	b.w	80062f2 <__retarget_lock_release_recursive>
 80061ae:	bf00      	nop
 80061b0:	200002c6 	.word	0x200002c6

080061b4 <__sinit>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	4604      	mov	r4, r0
 80061b8:	f7ff fff0 	bl	800619c <__sinit_lock_acquire>
 80061bc:	69a3      	ldr	r3, [r4, #24]
 80061be:	b11b      	cbz	r3, 80061c8 <__sinit+0x14>
 80061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c4:	f7ff bff0 	b.w	80061a8 <__sinit_lock_release>
 80061c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061cc:	6523      	str	r3, [r4, #80]	; 0x50
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <__sinit+0x68>)
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <__sinit+0x6c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	bf08      	it	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	4620      	mov	r0, r4
 80061de:	bf08      	it	eq
 80061e0:	61a3      	streq	r3, [r4, #24]
 80061e2:	f000 f81f 	bl	8006224 <__sfp>
 80061e6:	6060      	str	r0, [r4, #4]
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 f81b 	bl	8006224 <__sfp>
 80061ee:	60a0      	str	r0, [r4, #8]
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 f817 	bl	8006224 <__sfp>
 80061f6:	2200      	movs	r2, #0
 80061f8:	2104      	movs	r1, #4
 80061fa:	60e0      	str	r0, [r4, #12]
 80061fc:	6860      	ldr	r0, [r4, #4]
 80061fe:	f7ff ff81 	bl	8006104 <std>
 8006202:	2201      	movs	r2, #1
 8006204:	2109      	movs	r1, #9
 8006206:	68a0      	ldr	r0, [r4, #8]
 8006208:	f7ff ff7c 	bl	8006104 <std>
 800620c:	2202      	movs	r2, #2
 800620e:	2112      	movs	r1, #18
 8006210:	68e0      	ldr	r0, [r4, #12]
 8006212:	f7ff ff77 	bl	8006104 <std>
 8006216:	2301      	movs	r3, #1
 8006218:	61a3      	str	r3, [r4, #24]
 800621a:	e7d1      	b.n	80061c0 <__sinit+0xc>
 800621c:	08006654 	.word	0x08006654
 8006220:	0800614d 	.word	0x0800614d

08006224 <__sfp>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	4607      	mov	r7, r0
 8006228:	f7ff ffac 	bl	8006184 <__sfp_lock_acquire>
 800622c:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <__sfp+0x84>)
 800622e:	681e      	ldr	r6, [r3, #0]
 8006230:	69b3      	ldr	r3, [r6, #24]
 8006232:	b913      	cbnz	r3, 800623a <__sfp+0x16>
 8006234:	4630      	mov	r0, r6
 8006236:	f7ff ffbd 	bl	80061b4 <__sinit>
 800623a:	3648      	adds	r6, #72	; 0x48
 800623c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006240:	3b01      	subs	r3, #1
 8006242:	d503      	bpl.n	800624c <__sfp+0x28>
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	b30b      	cbz	r3, 800628c <__sfp+0x68>
 8006248:	6836      	ldr	r6, [r6, #0]
 800624a:	e7f7      	b.n	800623c <__sfp+0x18>
 800624c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006250:	b9d5      	cbnz	r5, 8006288 <__sfp+0x64>
 8006252:	4b16      	ldr	r3, [pc, #88]	; (80062ac <__sfp+0x88>)
 8006254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006258:	60e3      	str	r3, [r4, #12]
 800625a:	6665      	str	r5, [r4, #100]	; 0x64
 800625c:	f000 f847 	bl	80062ee <__retarget_lock_init_recursive>
 8006260:	f7ff ff96 	bl	8006190 <__sfp_lock_release>
 8006264:	2208      	movs	r2, #8
 8006266:	4629      	mov	r1, r5
 8006268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800626c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006270:	6025      	str	r5, [r4, #0]
 8006272:	61a5      	str	r5, [r4, #24]
 8006274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006278:	f7ff f90c 	bl	8005494 <memset>
 800627c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006284:	4620      	mov	r0, r4
 8006286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006288:	3468      	adds	r4, #104	; 0x68
 800628a:	e7d9      	b.n	8006240 <__sfp+0x1c>
 800628c:	2104      	movs	r1, #4
 800628e:	4638      	mov	r0, r7
 8006290:	f7ff ff62 	bl	8006158 <__sfmoreglue>
 8006294:	4604      	mov	r4, r0
 8006296:	6030      	str	r0, [r6, #0]
 8006298:	2800      	cmp	r0, #0
 800629a:	d1d5      	bne.n	8006248 <__sfp+0x24>
 800629c:	f7ff ff78 	bl	8006190 <__sfp_lock_release>
 80062a0:	230c      	movs	r3, #12
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	e7ee      	b.n	8006284 <__sfp+0x60>
 80062a6:	bf00      	nop
 80062a8:	08006654 	.word	0x08006654
 80062ac:	ffff0001 	.word	0xffff0001

080062b0 <_fwalk_reent>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	4606      	mov	r6, r0
 80062b6:	4688      	mov	r8, r1
 80062b8:	2700      	movs	r7, #0
 80062ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062c2:	f1b9 0901 	subs.w	r9, r9, #1
 80062c6:	d505      	bpl.n	80062d4 <_fwalk_reent+0x24>
 80062c8:	6824      	ldr	r4, [r4, #0]
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	d1f7      	bne.n	80062be <_fwalk_reent+0xe>
 80062ce:	4638      	mov	r0, r7
 80062d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d4:	89ab      	ldrh	r3, [r5, #12]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d907      	bls.n	80062ea <_fwalk_reent+0x3a>
 80062da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062de:	3301      	adds	r3, #1
 80062e0:	d003      	beq.n	80062ea <_fwalk_reent+0x3a>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4630      	mov	r0, r6
 80062e6:	47c0      	blx	r8
 80062e8:	4307      	orrs	r7, r0
 80062ea:	3568      	adds	r5, #104	; 0x68
 80062ec:	e7e9      	b.n	80062c2 <_fwalk_reent+0x12>

080062ee <__retarget_lock_init_recursive>:
 80062ee:	4770      	bx	lr

080062f0 <__retarget_lock_acquire_recursive>:
 80062f0:	4770      	bx	lr

080062f2 <__retarget_lock_release_recursive>:
 80062f2:	4770      	bx	lr

080062f4 <__swhatbuf_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460e      	mov	r6, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	4614      	mov	r4, r2
 80062fe:	2900      	cmp	r1, #0
 8006300:	461d      	mov	r5, r3
 8006302:	b096      	sub	sp, #88	; 0x58
 8006304:	da08      	bge.n	8006318 <__swhatbuf_r+0x24>
 8006306:	2200      	movs	r2, #0
 8006308:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	061a      	lsls	r2, r3, #24
 8006310:	d410      	bmi.n	8006334 <__swhatbuf_r+0x40>
 8006312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006316:	e00e      	b.n	8006336 <__swhatbuf_r+0x42>
 8006318:	466a      	mov	r2, sp
 800631a:	f000 f915 	bl	8006548 <_fstat_r>
 800631e:	2800      	cmp	r0, #0
 8006320:	dbf1      	blt.n	8006306 <__swhatbuf_r+0x12>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800632c:	425a      	negs	r2, r3
 800632e:	415a      	adcs	r2, r3
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	e7ee      	b.n	8006312 <__swhatbuf_r+0x1e>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	2000      	movs	r0, #0
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	b016      	add	sp, #88	; 0x58
 800633c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006340 <__smakebuf_r>:
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006344:	079d      	lsls	r5, r3, #30
 8006346:	4606      	mov	r6, r0
 8006348:	460c      	mov	r4, r1
 800634a:	d507      	bpl.n	800635c <__smakebuf_r+0x1c>
 800634c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	2301      	movs	r3, #1
 8006356:	6163      	str	r3, [r4, #20]
 8006358:	b002      	add	sp, #8
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	466a      	mov	r2, sp
 800635e:	ab01      	add	r3, sp, #4
 8006360:	f7ff ffc8 	bl	80062f4 <__swhatbuf_r>
 8006364:	9900      	ldr	r1, [sp, #0]
 8006366:	4605      	mov	r5, r0
 8006368:	4630      	mov	r0, r6
 800636a:	f7ff f9d3 	bl	8005714 <_malloc_r>
 800636e:	b948      	cbnz	r0, 8006384 <__smakebuf_r+0x44>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d4ef      	bmi.n	8006358 <__smakebuf_r+0x18>
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7e3      	b.n	800634c <__smakebuf_r+0xc>
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <__smakebuf_r+0x7c>)
 8006386:	62b3      	str	r3, [r6, #40]	; 0x28
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	6020      	str	r0, [r4, #0]
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	6120      	str	r0, [r4, #16]
 8006396:	6163      	str	r3, [r4, #20]
 8006398:	9b01      	ldr	r3, [sp, #4]
 800639a:	b15b      	cbz	r3, 80063b4 <__smakebuf_r+0x74>
 800639c:	4630      	mov	r0, r6
 800639e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a2:	f000 f8e3 	bl	800656c <_isatty_r>
 80063a6:	b128      	cbz	r0, 80063b4 <__smakebuf_r+0x74>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	89a0      	ldrh	r0, [r4, #12]
 80063b6:	4305      	orrs	r5, r0
 80063b8:	81a5      	strh	r5, [r4, #12]
 80063ba:	e7cd      	b.n	8006358 <__smakebuf_r+0x18>
 80063bc:	0800614d 	.word	0x0800614d

080063c0 <memchr>:
 80063c0:	4603      	mov	r3, r0
 80063c2:	b510      	push	{r4, lr}
 80063c4:	b2c9      	uxtb	r1, r1
 80063c6:	4402      	add	r2, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	d101      	bne.n	80063d2 <memchr+0x12>
 80063ce:	2000      	movs	r0, #0
 80063d0:	e003      	b.n	80063da <memchr+0x1a>
 80063d2:	7804      	ldrb	r4, [r0, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	428c      	cmp	r4, r1
 80063d8:	d1f6      	bne.n	80063c8 <memchr+0x8>
 80063da:	bd10      	pop	{r4, pc}

080063dc <__malloc_lock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_lock+0x8>)
 80063de:	f7ff bf87 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 80063e2:	bf00      	nop
 80063e4:	200002c4 	.word	0x200002c4

080063e8 <__malloc_unlock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__malloc_unlock+0x8>)
 80063ea:	f7ff bf82 	b.w	80062f2 <__retarget_lock_release_recursive>
 80063ee:	bf00      	nop
 80063f0:	200002c4 	.word	0x200002c4

080063f4 <_raise_r>:
 80063f4:	291f      	cmp	r1, #31
 80063f6:	b538      	push	{r3, r4, r5, lr}
 80063f8:	4604      	mov	r4, r0
 80063fa:	460d      	mov	r5, r1
 80063fc:	d904      	bls.n	8006408 <_raise_r+0x14>
 80063fe:	2316      	movs	r3, #22
 8006400:	6003      	str	r3, [r0, #0]
 8006402:	f04f 30ff 	mov.w	r0, #4294967295
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800640a:	b112      	cbz	r2, 8006412 <_raise_r+0x1e>
 800640c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006410:	b94b      	cbnz	r3, 8006426 <_raise_r+0x32>
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f830 	bl	8006478 <_getpid_r>
 8006418:	462a      	mov	r2, r5
 800641a:	4601      	mov	r1, r0
 800641c:	4620      	mov	r0, r4
 800641e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006422:	f000 b817 	b.w	8006454 <_kill_r>
 8006426:	2b01      	cmp	r3, #1
 8006428:	d00a      	beq.n	8006440 <_raise_r+0x4c>
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	d103      	bne.n	8006436 <_raise_r+0x42>
 800642e:	2316      	movs	r3, #22
 8006430:	6003      	str	r3, [r0, #0]
 8006432:	2001      	movs	r0, #1
 8006434:	e7e7      	b.n	8006406 <_raise_r+0x12>
 8006436:	2400      	movs	r4, #0
 8006438:	4628      	mov	r0, r5
 800643a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800643e:	4798      	blx	r3
 8006440:	2000      	movs	r0, #0
 8006442:	e7e0      	b.n	8006406 <_raise_r+0x12>

08006444 <raise>:
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <raise+0xc>)
 8006446:	4601      	mov	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f7ff bfd3 	b.w	80063f4 <_raise_r>
 800644e:	bf00      	nop
 8006450:	20000010 	.word	0x20000010

08006454 <_kill_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	2300      	movs	r3, #0
 8006458:	4d06      	ldr	r5, [pc, #24]	; (8006474 <_kill_r+0x20>)
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	f7fb fa08 	bl	8001876 <_kill>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d102      	bne.n	8006470 <_kill_r+0x1c>
 800646a:	682b      	ldr	r3, [r5, #0]
 800646c:	b103      	cbz	r3, 8006470 <_kill_r+0x1c>
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	bd38      	pop	{r3, r4, r5, pc}
 8006472:	bf00      	nop
 8006474:	200002c0 	.word	0x200002c0

08006478 <_getpid_r>:
 8006478:	f7fb b9f6 	b.w	8001868 <_getpid>

0800647c <__sread>:
 800647c:	b510      	push	{r4, lr}
 800647e:	460c      	mov	r4, r1
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 f894 	bl	80065b0 <_read_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	bfab      	itete	ge
 800648c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800648e:	89a3      	ldrhlt	r3, [r4, #12]
 8006490:	181b      	addge	r3, r3, r0
 8006492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006496:	bfac      	ite	ge
 8006498:	6563      	strge	r3, [r4, #84]	; 0x54
 800649a:	81a3      	strhlt	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__swrite>:
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	461f      	mov	r7, r3
 80064a4:	898b      	ldrh	r3, [r1, #12]
 80064a6:	4605      	mov	r5, r0
 80064a8:	05db      	lsls	r3, r3, #23
 80064aa:	460c      	mov	r4, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d505      	bpl.n	80064bc <__swrite+0x1e>
 80064b0:	2302      	movs	r3, #2
 80064b2:	2200      	movs	r2, #0
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f868 	bl	800658c <_lseek_r>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	4632      	mov	r2, r6
 80064c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	4628      	mov	r0, r5
 80064c8:	463b      	mov	r3, r7
 80064ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	f000 b817 	b.w	8006504 <_write_r>

080064d6 <__sseek>:
 80064d6:	b510      	push	{r4, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 f855 	bl	800658c <_lseek_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	bf15      	itete	ne
 80064e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064f2:	81a3      	strheq	r3, [r4, #12]
 80064f4:	bf18      	it	ne
 80064f6:	81a3      	strhne	r3, [r4, #12]
 80064f8:	bd10      	pop	{r4, pc}

080064fa <__sclose>:
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 b813 	b.w	8006528 <_close_r>
	...

08006504 <_write_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4604      	mov	r4, r0
 8006508:	4608      	mov	r0, r1
 800650a:	4611      	mov	r1, r2
 800650c:	2200      	movs	r2, #0
 800650e:	4d05      	ldr	r5, [pc, #20]	; (8006524 <_write_r+0x20>)
 8006510:	602a      	str	r2, [r5, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f7fa fdda 	bl	80010cc <_write>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_write_r+0x1e>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_write_r+0x1e>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	200002c0 	.word	0x200002c0

08006528 <_close_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	2300      	movs	r3, #0
 800652c:	4d05      	ldr	r5, [pc, #20]	; (8006544 <_close_r+0x1c>)
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fb f9d6 	bl	80018e4 <_close>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_close_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_close_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	200002c0 	.word	0x200002c0

08006548 <_fstat_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	2300      	movs	r3, #0
 800654c:	4d06      	ldr	r5, [pc, #24]	; (8006568 <_fstat_r+0x20>)
 800654e:	4604      	mov	r4, r0
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	f7fb f9d0 	bl	80018fa <_fstat>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	d102      	bne.n	8006564 <_fstat_r+0x1c>
 800655e:	682b      	ldr	r3, [r5, #0]
 8006560:	b103      	cbz	r3, 8006564 <_fstat_r+0x1c>
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	bd38      	pop	{r3, r4, r5, pc}
 8006566:	bf00      	nop
 8006568:	200002c0 	.word	0x200002c0

0800656c <_isatty_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	2300      	movs	r3, #0
 8006570:	4d05      	ldr	r5, [pc, #20]	; (8006588 <_isatty_r+0x1c>)
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	f7fb f9ce 	bl	8001918 <_isatty>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_isatty_r+0x1a>
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	b103      	cbz	r3, 8006586 <_isatty_r+0x1a>
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	200002c0 	.word	0x200002c0

0800658c <_lseek_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	4611      	mov	r1, r2
 8006594:	2200      	movs	r2, #0
 8006596:	4d05      	ldr	r5, [pc, #20]	; (80065ac <_lseek_r+0x20>)
 8006598:	602a      	str	r2, [r5, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	f7fb f9c6 	bl	800192c <_lseek>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_lseek_r+0x1e>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_lseek_r+0x1e>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	200002c0 	.word	0x200002c0

080065b0 <_read_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	2200      	movs	r2, #0
 80065ba:	4d05      	ldr	r5, [pc, #20]	; (80065d0 <_read_r+0x20>)
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fb f973 	bl	80018aa <_read>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_read_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_read_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	200002c0 	.word	0x200002c0

080065d4 <_gettimeofday>:
 80065d4:	2258      	movs	r2, #88	; 0x58
 80065d6:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <_gettimeofday+0xc>)
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	4770      	bx	lr
 80065e0:	200002c0 	.word	0x200002c0

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
