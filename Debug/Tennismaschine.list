
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb8  08006cb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006cb8  08006cb8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006cb8  08006cb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000074  08006d34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08006d34  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139e  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002838  00000000  00000000  0003143b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00033c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00034c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0cd  00000000  00000000  00035af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013332  00000000  00000000  0004fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092264  00000000  00000000  00062ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f515b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c20  00000000  00000000  000f51ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f9dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f9df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b00 	.word	0x08006b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006b00 	.word	0x08006b00

0800014c <_writeCmd>:
		HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData,2, HAL_MAX_DELAY);
	}
}

// sends given command per i2c
void _writeCmd(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, &cmd, 1, HAL_MAX_DELAY);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <_writeCmd+0x2c>)
 8000158:	881b      	ldrh	r3, [r3, #0]
 800015a:	005b      	lsls	r3, r3, #1
 800015c:	b299      	uxth	r1, r3
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2301      	movs	r3, #1
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <_writeCmd+0x30>)
 800016a:	f003 f887 	bl	800327c <HAL_I2C_Master_Transmit>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000096 	.word	0x20000096
 800017c:	200000ec 	.word	0x200000ec

08000180 <_writePos>:

// sends value (mask) for specific position per i2c, if different from cached value
void _writePos(uint8_t pos, uint8_t mask) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	if (_displayCache[pos] == mask)
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <_writePos+0x58>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	79ba      	ldrb	r2, [r7, #6]
 800019a:	429a      	cmp	r2, r3
 800019c:	d017      	beq.n	80001ce <_writePos+0x4e>
		return;

	uint8_t pData[2];
	pData[0] = pos * 2;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	733b      	strb	r3, [r7, #12]
	pData[1] = mask;
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData, 2, HAL_MAX_DELAY);
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <_writePos+0x5c>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	b299      	uxth	r1, r3
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2302      	movs	r3, #2
 80001be:	4808      	ldr	r0, [pc, #32]	; (80001e0 <_writePos+0x60>)
 80001c0:	f003 f85c 	bl	800327c <HAL_I2C_Master_Transmit>
	_displayCache[pos] = mask;	// update value in cache
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4904      	ldr	r1, [pc, #16]	; (80001d8 <_writePos+0x58>)
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	54ca      	strb	r2, [r1, r3]
 80001cc:	e000      	b.n	80001d0 <_writePos+0x50>
		return;
 80001ce:	bf00      	nop
}
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000090 	.word	0x20000090
 80001dc:	20000096 	.word	0x20000096
 80001e0:	200000ec 	.word	0x200000ec

080001e4 <seg7_init>:

//##### END: I2C-WRITE-FUNCTIONS #####
//####################################
//##### BEGIN: CONTROL-FUNCTIONS #####

void seg7_init(uint16_t disp_addr) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	seg7_reset(disp_addr);
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f806 	bl	8000202 <seg7_reset>
	seg7_displayOn();
 80001f6:	f000 f835 	bl	8000264 <seg7_displayOn>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <seg7_reset>:

void seg7_reset(uint16_t disp_addr) {
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]
	seg7_displayClear(disp_addr);
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f896 	bl	8000340 <seg7_displayClear>
	seg7_clearCache();
 8000214:	f000 f80e 	bl	8000234 <seg7_clearCache>
	seg7_setBlinkRate(0);
 8000218:	2000      	movs	r0, #0
 800021a:	f000 f83f 	bl	800029c <seg7_setBlinkRate>
	seg7_setDigits(4);
 800021e:	2004      	movs	r0, #4
 8000220:	f000 f87a 	bl	8000318 <seg7_setDigits>
	seg7_setBrightness(15);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f851 	bl	80002cc <seg7_setBrightness>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <seg7_clearCache>:

void seg7_clearCache() {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 5; i++) {
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	e006      	b.n	800024e <seg7_clearCache+0x1a>
		_displayCache[i] = SEG7_NONE;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <seg7_clearCache+0x2c>)
 8000244:	2163      	movs	r1, #99	; 0x63
 8000246:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++) {
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3301      	adds	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b04      	cmp	r3, #4
 8000252:	d9f5      	bls.n	8000240 <seg7_clearCache+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000090 	.word	0x20000090

08000264 <seg7_displayOn>:

void seg7_refresh() {
	_refresh();
}

void seg7_displayOn() {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_ON);
 8000268:	2021      	movs	r0, #33	; 0x21
 800026a:	f7ff ff6f 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_DISPLAYON);
 800026e:	2081      	movs	r0, #129	; 0x81
 8000270:	f7ff ff6c 	bl	800014c <_writeCmd>
	seg7_setBrightness(_bright);
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <seg7_displayOn+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f826 	bl	80002cc <seg7_setBrightness>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000001 	.word	0x20000001

08000288 <seg7_displayOff>:

void seg7_displayOff() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_DISPLAYOFF);
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	f7ff ff5d 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_STANDBY);
 8000292:	2020      	movs	r0, #32
 8000294:	f7ff ff5a 	bl	800014c <_writeCmd>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <seg7_setBlinkRate>:

void seg7_setBlinkRate(uint8_t value) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	if (value > 0x03) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d901      	bls.n	80002b0 <seg7_setBlinkRate+0x14>
		value = 0x00;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

	_writeCmd(HT16K33_BLINKOFF | (value << 1));
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff44 	bl	800014c <_writeCmd>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <seg7_setBrightness>:

void seg7_setBrightness(uint8_t value) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (value == _bright)
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <seg7_setBrightness+0x48>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d014      	beq.n	800030c <seg7_setBrightness+0x40>
		return;

	_bright = value;
 80002e2:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <seg7_setBrightness+0x48>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	7013      	strb	r3, [r2, #0]

	if (_bright > 0x0F)
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <seg7_setBrightness+0x48>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b0f      	cmp	r3, #15
 80002f0:	d902      	bls.n	80002f8 <seg7_setBrightness+0x2c>
		_bright = 0x0F;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <seg7_setBrightness+0x48>)
 80002f4:	220f      	movs	r2, #15
 80002f6:	701a      	strb	r2, [r3, #0]

	_writeCmd(HT16K33_BRIGHTNESS | _bright);
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <seg7_setBrightness+0x48>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f063 031f 	orn	r3, r3, #31
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff21 	bl	800014c <_writeCmd>
 800030a:	e000      	b.n	800030e <seg7_setBrightness+0x42>
		return;
 800030c:	bf00      	nop
}
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000001 	.word	0x20000001

08000318 <seg7_setDigits>:

void seg7_setDigits(uint8_t value) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	_digits = (value > 4) ? 4 : value;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	bf28      	it	cs
 8000328:	2304      	movcs	r3, #4
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <seg7_setDigits+0x24>)
 800032e:	701a      	strb	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000

08000340 <seg7_displayClear>:

//#####  END: CONTROL-FUNCTIONS  #####
//####################################
//##### BEGIN: DISPLAY-FUNCTIONS #####

void seg7_displayClear(uint16_t disp_addr) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	uint8_t arr[4] = { SEG7_SPACE, SEG7_SPACE, SEG7_SPACE, SEG7_SPACE };
 800034a:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 800034e:	60fb      	str	r3, [r7, #12]
	seg7_display(arr, disp_addr);
 8000350:	88fa      	ldrh	r2, [r7, #6]
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4611      	mov	r1, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8a1 	bl	80004a0 <seg7_display>
	seg7_displayColon(0);
 800035e:	2000      	movs	r0, #0
 8000360:	f000 f8f2 	bl	8000548 <seg7_displayColon>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <seg7_displayInt>:

int seg7_displayInt(int n, uint16_t disp_addr) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
	int inRange = ((-1000 < n) && (n < 10000));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800037e:	dd06      	ble.n	800038e <seg7_displayInt+0x22>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f242 720f 	movw	r2, #9999	; 0x270f
 8000386:	4293      	cmp	r3, r2
 8000388:	dc01      	bgt.n	800038e <seg7_displayInt+0x22>
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <seg7_displayInt+0x24>
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
	int neg = (n < 0);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	0fdb      	lsrs	r3, r3, #31
 8000396:	b2db      	uxtb	r3, r3
 8000398:	617b      	str	r3, [r7, #20]

	uint8_t arr[4], h, l;

	if (neg)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <seg7_displayInt+0x3a>
		n = -n;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	425b      	negs	r3, r3
 80003a4:	607b      	str	r3, [r7, #4]

	h = n / 100;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <seg7_displayInt+0x128>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1152      	asrs	r2, r2, #5
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	74fb      	strb	r3, [r7, #19]
	l = n - h * 100;
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	461a      	mov	r2, r3
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	441a      	add	r2, r3
 80003be:	00d2      	lsls	r2, r2, #3
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	74bb      	strb	r3, [r7, #18]
	arr[0] = h / 10;
 80003ce:	7cfb      	ldrb	r3, [r7, #19]
 80003d0:	4a31      	ldr	r2, [pc, #196]	; (8000498 <seg7_displayInt+0x12c>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	08db      	lsrs	r3, r3, #3
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	733b      	strb	r3, [r7, #12]
	arr[1] = h - arr[0] * 10;
 80003dc:	7b3b      	ldrb	r3, [r7, #12]
 80003de:	461a      	mov	r2, r3
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	1ad2      	subs	r2, r2, r3
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	7cfb      	ldrb	r3, [r7, #19]
 80003ee:	4413      	add	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	737b      	strb	r3, [r7, #13]
	arr[2] = l / 10;
 80003f4:	7cbb      	ldrb	r3, [r7, #18]
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <seg7_displayInt+0x12c>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	73bb      	strb	r3, [r7, #14]
	arr[3] = l - arr[2] * 10;
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	461a      	mov	r2, r3
 8000406:	0152      	lsls	r2, r2, #5
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	b2da      	uxtb	r2, r3
 8000412:	7cbb      	ldrb	r3, [r7, #18]
 8000414:	4413      	add	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	73fb      	strb	r3, [r7, #15]

	if (neg) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d02d      	beq.n	800047c <seg7_displayInt+0x110>
		if (_digits >= 3) {
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <seg7_displayInt+0x130>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b02      	cmp	r3, #2
 8000428:	d902      	bls.n	8000430 <seg7_displayInt+0xc4>
			arr[0] = SEG7_MINUS;
 800042a:	2311      	movs	r3, #17
 800042c:	733b      	strb	r3, [r7, #12]
 800042e:	e025      	b.n	800047c <seg7_displayInt+0x110>
		} else {
			int i = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < (4 - _digits); i++) {
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
 8000438:	e00f      	b.n	800045a <seg7_displayInt+0xee>
				if (arr[i] != 0) {
 800043a:	f107 020c 	add.w	r2, r7, #12
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <seg7_displayInt+0x100>
					break;
				}
				arr[i] = SEG7_SPACE;
 8000448:	f107 020c 	add.w	r2, r7, #12
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	4413      	add	r3, r2
 8000450:	2210      	movs	r2, #16
 8000452:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (4 - _digits); i++) {
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	3301      	adds	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <seg7_displayInt+0x130>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f1c3 0304 	rsb	r3, r3, #4
 8000464:	69fa      	ldr	r2, [r7, #28]
 8000466:	429a      	cmp	r2, r3
 8000468:	dbe7      	blt.n	800043a <seg7_displayInt+0xce>
 800046a:	e000      	b.n	800046e <seg7_displayInt+0x102>
					break;
 800046c:	bf00      	nop
			}
			arr[i - 1] = SEG7_MINUS;
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3b01      	subs	r3, #1
 8000472:	3320      	adds	r3, #32
 8000474:	443b      	add	r3, r7
 8000476:	2211      	movs	r2, #17
 8000478:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
	}

	seg7_display(arr, disp_addr);
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f80b 	bl	80004a0 <seg7_display>

	return inRange;
 800048a:	69bb      	ldr	r3, [r7, #24]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	51eb851f 	.word	0x51eb851f
 8000498:	cccccccd 	.word	0xcccccccd
 800049c:	20000000 	.word	0x20000000

080004a0 <seg7_display>:
	seg7_displayColon(colon);

	return inRange;
}

void seg7_display(uint8_t *array, uint16_t disp_addr) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
	seg7_setDispAddr(disp_addr);
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f85e 	bl	8000570 <seg7_setDispAddr>

	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e00d      	b.n	80004d6 <seg7_display+0x36>
		if (array[i] != 0) {
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d110      	bne.n	80004e8 <seg7_display+0x48>
			break;
		}
		array[i] = SEG7_SPACE;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	2210      	movs	r2, #16
 80004ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	3301      	adds	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	7bfa      	ldrb	r2, [r7, #15]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <seg7_display+0xa0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f1c3 0304 	rsb	r3, r3, #4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbe9      	blt.n	80004ba <seg7_display+0x1a>
 80004e6:	e000      	b.n	80004ea <seg7_display+0x4a>
			break;
 80004e8:	bf00      	nop
	}

	_writePos(0, charmap[array[0]]);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <seg7_display+0xa4>)
 80004f2:	5c9b      	ldrb	r3, [r3, r2]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fe42 	bl	8000180 <_writePos>
	_writePos(1, charmap[array[1]]);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <seg7_display+0xa4>)
 8000506:	5c9b      	ldrb	r3, [r3, r2]
 8000508:	4619      	mov	r1, r3
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff fe38 	bl	8000180 <_writePos>
	_writePos(3, charmap[array[2]]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <seg7_display+0xa4>)
 800051a:	5c9b      	ldrb	r3, [r3, r2]
 800051c:	4619      	mov	r1, r3
 800051e:	2003      	movs	r0, #3
 8000520:	f7ff fe2e 	bl	8000180 <_writePos>
	_writePos(4, charmap[array[3]]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3303      	adds	r3, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <seg7_display+0xa4>)
 800052e:	5c9b      	ldrb	r3, [r3, r2]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f7ff fe24 	bl	8000180 <_writePos>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	08006b18 	.word	0x08006b18

08000548 <seg7_displayColon>:
	_writePosPoint(1, charmap[array[1]], point == 1);
	_writePosPoint(3, charmap[array[2]], point == 2);
	_writePosPoint(4, charmap[array[3]], point == 3);
}

void seg7_displayColon(uint8_t on) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	_writePos(2, on ? 2 : 0);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <seg7_displayColon+0x14>
 8000558:	2302      	movs	r3, #2
 800055a:	e000      	b.n	800055e <seg7_displayColon+0x16>
 800055c:	2300      	movs	r3, #0
 800055e:	4619      	mov	r1, r3
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff fe0d 	bl	8000180 <_writePos>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <seg7_setDispAddr>:
	_writePos(3, array[2]);
	_writePos(4, array[3]);
	_writePos(2, colon ? 255 : 0);
}

void seg7_setDispAddr(uint16_t addr){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	disp_addr = addr;
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <seg7_setDispAddr+0x1c>)
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	8013      	strh	r3, [r2, #0]
	seg7_clearCache();
 8000580:	f7ff fe58 	bl	8000234 <seg7_clearCache>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000096 	.word	0x20000096

08000590 <seg7_displayOnOffMulti>:

void seg7_displayOnOffMulti(uint8_t display){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	seg7_setDispAddr(SPEED_ADDR);
 800059a:	2070      	movs	r0, #112	; 0x70
 800059c:	f7ff ffe8 	bl	8000570 <seg7_setDispAddr>
	(display & SPEED) ? seg7_displayOn() : seg7_displayOff();
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <seg7_displayOnOffMulti+0x20>
 80005aa:	f7ff fe5b 	bl	8000264 <seg7_displayOn>
 80005ae:	e001      	b.n	80005b4 <seg7_displayOnOffMulti+0x24>
 80005b0:	f7ff fe6a 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(SPIN_ADDR);
 80005b4:	2071      	movs	r0, #113	; 0x71
 80005b6:	f7ff ffdb 	bl	8000570 <seg7_setDispAddr>
	(display & SPIN) ? seg7_displayOn() : seg7_displayOff();
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <seg7_displayOnOffMulti+0x3a>
 80005c4:	f7ff fe4e 	bl	8000264 <seg7_displayOn>
 80005c8:	e001      	b.n	80005ce <seg7_displayOnOffMulti+0x3e>
 80005ca:	f7ff fe5d 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(ANGLE_ADDR);
 80005ce:	2072      	movs	r0, #114	; 0x72
 80005d0:	f7ff ffce 	bl	8000570 <seg7_setDispAddr>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <seg7_displayOnOffMulti+0x54>
 80005de:	f7ff fe41 	bl	8000264 <seg7_displayOn>
}
 80005e2:	e001      	b.n	80005e8 <seg7_displayOnOffMulti+0x58>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005e4:	f7ff fe50 	bl	8000288 <seg7_displayOff>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <pgm_stop>:
 * @param: none
 *
 * @returns: int 0 = success
 */

int pgm_stop(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

	if(mainDrvRunning){
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <pgm_stop+0x64>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00a      	beq.n	8000614 <pgm_stop+0x24>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80005fe:	2100      	movs	r1, #0
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <pgm_stop+0x68>)
 8000602:	f004 f8c5 	bl	8004790 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000606:	2104      	movs	r1, #4
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <pgm_stop+0x68>)
 800060a:	f004 f8c1 	bl	8004790 <HAL_TIM_PWM_Stop>

		mainDrvRunning = RESET;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <pgm_stop+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	}

	uint8_t text_off[] = {SEG7_0, SEG7_F, SEG7_F, SEG7_SPACE};
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <pgm_stop+0x6c>)
 8000616:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffb9 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_off, SPEED_ADDR);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2170      	movs	r1, #112	; 0x70
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff3c 	bl	80004a0 <seg7_display>

	if((HAL_GetTick() - last_blink_tick) > BLINK_INT_MS){
 8000628:	f001 fdd4 	bl	80021d4 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <pgm_stop+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000638:	d907      	bls.n	800064a <pgm_stop+0x5a>

			Toggle_Led_Output(GREEN);
 800063a:	2001      	movs	r0, #1
 800063c:	f001 f850 	bl	80016e0 <Toggle_Led_Output>

			last_blink_tick = HAL_GetTick();
 8000640:	f001 fdc8 	bl	80021d4 <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <pgm_stop+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000410 	.word	0x20000410
 8000658:	20000140 	.word	0x20000140
 800065c:	100f0f00 	.word	0x100f0f00
 8000660:	200000b0 	.word	0x200000b0

08000664 <pgm_manual>:
 * @param: none
 *
 * @returns: int 0 if success
 */

int pgm_manual(void){
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	b0ad      	sub	sp, #180	; 0xb4
 8000668:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 800066a:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <pgm_manual+0x150>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d005      	beq.n	800067e <pgm_manual+0x1a>
		Set_Led_Output(GREEN);
 8000672:	2001      	movs	r0, #1
 8000674:	f001 f80a 	bl	800168c <Set_Led_Output>
		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 8000678:	2007      	movs	r0, #7
 800067a:	f7ff ff89 	bl	8000590 <seg7_displayOnOffMulti>
	}

	get_adc_values(adc_result);
 800067e:	484e      	ldr	r0, [pc, #312]	; (80007b8 <pgm_manual+0x154>)
 8000680:	f000 f9e4 	bl	8000a4c <get_adc_values>

	speed_percent = adc_result[0]*100/MAX_ADC_VALUE;
 8000684:	4b4c      	ldr	r3, [pc, #304]	; (80007b8 <pgm_manual+0x154>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	fb02 f303 	mul.w	r3, r2, r3
 8000690:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <pgm_manual+0x158>)
 8000692:	fb82 1203 	smull	r1, r2, r2, r3
 8000696:	1292      	asrs	r2, r2, #10
 8000698:	17db      	asrs	r3, r3, #31
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b48      	ldr	r3, [pc, #288]	; (80007c0 <pgm_manual+0x15c>)
 80006a0:	801a      	strh	r2, [r3, #0]
	spin_percent = (adc_result[1]*100/MAX_ADC_VALUE)-50;
 80006a2:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <pgm_manual+0x154>)
 80006a4:	885b      	ldrh	r3, [r3, #2]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2364      	movs	r3, #100	; 0x64
 80006aa:	fb02 f303 	mul.w	r3, r2, r3
 80006ae:	4a43      	ldr	r2, [pc, #268]	; (80007bc <pgm_manual+0x158>)
 80006b0:	fb82 1203 	smull	r1, r2, r2, r3
 80006b4:	1292      	asrs	r2, r2, #10
 80006b6:	17db      	asrs	r3, r3, #31
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b32      	subs	r3, #50	; 0x32
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <pgm_manual+0x160>)
 80006c4:	801a      	strh	r2, [r3, #0]
	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <pgm_manual+0x154>)
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	461a      	mov	r2, r3
 80006cc:	235a      	movs	r3, #90	; 0x5a
 80006ce:	fb02 f303 	mul.w	r3, r2, r3
 80006d2:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <pgm_manual+0x158>)
 80006d4:	fb82 1203 	smull	r1, r2, r2, r3
 80006d8:	1292      	asrs	r2, r2, #10
 80006da:	17db      	asrs	r3, r3, #31
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <pgm_manual+0x164>)
 80006e2:	801a      	strh	r2, [r3, #0]

	if(
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <pgm_manual+0x168>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b33      	ldr	r3, [pc, #204]	; (80007b8 <pgm_manual+0x154>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bfb8      	it	lt
 80006f4:	425b      	neglt	r3, r3
 80006f6:	2b32      	cmp	r3, #50	; 0x32
 80006f8:	bfcc      	ite	gt
 80006fa:	2301      	movgt	r3, #1
 80006fc:	2300      	movle	r3, #0
 80006fe:	b2da      	uxtb	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA) |
 8000700:	4b32      	ldr	r3, [pc, #200]	; (80007cc <pgm_manual+0x168>)
 8000702:	885b      	ldrh	r3, [r3, #2]
 8000704:	4619      	mov	r1, r3
 8000706:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <pgm_manual+0x154>)
 8000708:	885b      	ldrh	r3, [r3, #2]
 800070a:	1acb      	subs	r3, r1, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	bfb8      	it	lt
 8000710:	425b      	neglt	r3, r3
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 8000712:	2b32      	cmp	r3, #50	; 0x32
 8000714:	bfcc      	ite	gt
 8000716:	2301      	movgt	r3, #1
 8000718:	2300      	movle	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4313      	orrs	r3, r2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA) |
 8000722:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <pgm_manual+0x150>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4313      	orrs	r3, r2
	if(
 8000728:	2b00      	cmp	r3, #0
 800072a:	d028      	beq.n	800077e <pgm_manual+0x11a>
		pgmChanged){

			last_adc[0] = adc_result[0];
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <pgm_manual+0x154>)
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <pgm_manual+0x168>)
 8000732:	801a      	strh	r2, [r3, #0]
			last_adc[1] = adc_result[1];
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <pgm_manual+0x154>)
 8000736:	885a      	ldrh	r2, [r3, #2]
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <pgm_manual+0x168>)
 800073a:	805a      	strh	r2, [r3, #2]
			seg7_displayInt((int16_t)speed_percent, SPEED_ADDR);
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <pgm_manual+0x15c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	b21b      	sxth	r3, r3
 8000742:	2170      	movs	r1, #112	; 0x70
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe11 	bl	800036c <seg7_displayInt>
			seg7_displayInt(spin_percent, SPIN_ADDR);
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <pgm_manual+0x160>)
 800074c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000750:	2171      	movs	r1, #113	; 0x71
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fe0a 	bl	800036c <seg7_displayInt>
			set_pwm_maindrv(speed_percent, spin_percent, htim1);
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <pgm_manual+0x15c>)
 800075a:	881d      	ldrh	r5, [r3, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <pgm_manual+0x160>)
 800075e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000762:	4c1b      	ldr	r4, [pc, #108]	; (80007d0 <pgm_manual+0x16c>)
 8000764:	4668      	mov	r0, sp
 8000766:	f104 0308 	add.w	r3, r4, #8
 800076a:	22ac      	movs	r2, #172	; 0xac
 800076c:	4619      	mov	r1, r3
 800076e:	f005 f911 	bl	8005994 <memcpy>
 8000772:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000776:	4631      	mov	r1, r6
 8000778:	4628      	mov	r0, r5
 800077a:	f000 ffe3 	bl	8001744 <set_pwm_maindrv>
		}

	handle_angle_change(adc_result[2], &last_adc[2]);
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <pgm_manual+0x154>)
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	4914      	ldr	r1, [pc, #80]	; (80007d4 <pgm_manual+0x170>)
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f987 	bl	8000a98 <handle_angle_change>

	if(!mainDrvRunning){
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <pgm_manual+0x174>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d10a      	bne.n	80007a8 <pgm_manual+0x144>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	480e      	ldr	r0, [pc, #56]	; (80007d0 <pgm_manual+0x16c>)
 8000796:	f003 ff59 	bl	800464c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800079a:	2104      	movs	r1, #4
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <pgm_manual+0x16c>)
 800079e:	f003 ff55 	bl	800464c <HAL_TIM_PWM_Start>

		mainDrvRunning = SET;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <pgm_manual+0x174>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3704      	adds	r7, #4
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000003 	.word	0x20000003
 80007b8:	20000098 	.word	0x20000098
 80007bc:	413e0e87 	.word	0x413e0e87
 80007c0:	2000009e 	.word	0x2000009e
 80007c4:	200000a0 	.word	0x200000a0
 80007c8:	200000a2 	.word	0x200000a2
 80007cc:	200000a4 	.word	0x200000a4
 80007d0:	20000140 	.word	0x20000140
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	20000410 	.word	0x20000410

080007dc <pgm_auto_speed>:
 * @parm: none
 *
 * @returns: int 0 if success
 */

int pgm_auto_speed(void){
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	b0af      	sub	sp, #188	; 0xbc
 80007e0:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 80007e2:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <pgm_auto_speed+0x114>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <pgm_auto_speed+0x32>
		Set_Led_Output(GREEN);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 ff4e 	bl	800168c <Set_Led_Output>
		uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 80007f0:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <pgm_auto_speed+0x118>)
 80007f2:	603b      	str	r3, [r7, #0]

		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 80007f4:	2007      	movs	r0, #7
 80007f6:	f7ff fecb 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_auto, SPEED_ADDR);
 80007fa:	463b      	mov	r3, r7
 80007fc:	2170      	movs	r1, #112	; 0x70
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fe4e 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, SPIN_ADDR);
 8000804:	463b      	mov	r3, r7
 8000806:	2171      	movs	r1, #113	; 0x71
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fe49 	bl	80004a0 <seg7_display>
	}

	get_adc_values(adc_result);
 800080e:	483a      	ldr	r0, [pc, #232]	; (80008f8 <pgm_auto_speed+0x11c>)
 8000810:	f000 f91c 	bl	8000a4c <get_adc_values>

	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <pgm_auto_speed+0x11c>)
 8000816:	889b      	ldrh	r3, [r3, #4]
 8000818:	461a      	mov	r2, r3
 800081a:	235a      	movs	r3, #90	; 0x5a
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	4a36      	ldr	r2, [pc, #216]	; (80008fc <pgm_auto_speed+0x120>)
 8000822:	fb82 1203 	smull	r1, r2, r2, r3
 8000826:	1292      	asrs	r2, r2, #10
 8000828:	17db      	asrs	r3, r3, #31
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b29a      	uxth	r2, r3
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <pgm_auto_speed+0x124>)
 8000830:	801a      	strh	r2, [r3, #0]

	handle_angle_change(adc_result[2], &last_adc[2]);
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <pgm_auto_speed+0x11c>)
 8000834:	889b      	ldrh	r3, [r3, #4]
 8000836:	4933      	ldr	r1, [pc, #204]	; (8000904 <pgm_auto_speed+0x128>)
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f92d 	bl	8000a98 <handle_angle_change>

	if(((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000) |
 800083e:	f001 fcc9 	bl	80021d4 <HAL_GetTick>
 8000842:	4602      	mov	r2, r0
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <pgm_auto_speed+0x12c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	f242 7210 	movw	r2, #10000	; 0x2710
 800084e:	4293      	cmp	r3, r2
 8000850:	bf8c      	ite	hi
 8000852:	2301      	movhi	r3, #1
 8000854:	2300      	movls	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <pgm_auto_speed+0x114>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4313      	orrs	r3, r2
 8000860:	2b00      	cmp	r3, #0
 8000862:	d040      	beq.n	80008e6 <pgm_auto_speed+0x10a>
			pgmChanged){

			uint16_t rand_speed = (rand() % (101 - AUTO_SPEED_MIN)) + AUTO_SPEED_MIN;
 8000864:	f005 f8da 	bl	8005a1c <rand>
 8000868:	4602      	mov	r2, r0
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <pgm_auto_speed+0x130>)
 800086c:	fb83 1302 	smull	r1, r3, r3, r2
 8000870:	10d9      	asrs	r1, r3, #3
 8000872:	17d3      	asrs	r3, r2, #31
 8000874:	1ac9      	subs	r1, r1, r3
 8000876:	460b      	mov	r3, r1
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	440b      	add	r3, r1
 800087c:	00d9      	lsls	r1, r3, #3
 800087e:	440b      	add	r3, r1
 8000880:	1ad1      	subs	r1, r2, r3
 8000882:	b28b      	uxth	r3, r1
 8000884:	3314      	adds	r3, #20
 8000886:	80fb      	strh	r3, [r7, #6]
			int16_t rand_spin = (rand() % 101) -50;
 8000888:	f005 f8c8 	bl	8005a1c <rand>
 800088c:	4603      	mov	r3, r0
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <pgm_auto_speed+0x134>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	1111      	asrs	r1, r2, #4
 8000896:	17da      	asrs	r2, r3, #31
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	2165      	movs	r1, #101	; 0x65
 800089c:	fb01 f202 	mul.w	r2, r1, r2
 80008a0:	1a9a      	subs	r2, r3, r2
 80008a2:	b293      	uxth	r3, r2
 80008a4:	3b32      	subs	r3, #50	; 0x32
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	80bb      	strh	r3, [r7, #4]

			set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80008aa:	4c1a      	ldr	r4, [pc, #104]	; (8000914 <pgm_auto_speed+0x138>)
 80008ac:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80008b0:	88fd      	ldrh	r5, [r7, #6]
 80008b2:	4668      	mov	r0, sp
 80008b4:	f104 0308 	add.w	r3, r4, #8
 80008b8:	22ac      	movs	r2, #172	; 0xac
 80008ba:	4619      	mov	r1, r3
 80008bc:	f005 f86a 	bl	8005994 <memcpy>
 80008c0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80008c4:	4631      	mov	r1, r6
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 ff3c 	bl	8001744 <set_pwm_maindrv>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	4811      	ldr	r0, [pc, #68]	; (8000914 <pgm_auto_speed+0x138>)
 80008d0:	f003 febc 	bl	800464c <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008d4:	2104      	movs	r1, #4
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <pgm_auto_speed+0x138>)
 80008d8:	f003 feb8 	bl	800464c <HAL_TIM_PWM_Start>

			last_rand_tick = HAL_GetTick();
 80008dc:	f001 fc7a 	bl	80021d4 <HAL_GetTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <pgm_auto_speed+0x12c>)
 80008e4:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	20000003 	.word	0x20000003
 80008f4:	0014160a 	.word	0x0014160a
 80008f8:	20000098 	.word	0x20000098
 80008fc:	413e0e87 	.word	0x413e0e87
 8000900:	200000a2 	.word	0x200000a2
 8000904:	200000a8 	.word	0x200000a8
 8000908:	200000ac 	.word	0x200000ac
 800090c:	1948b0fd 	.word	0x1948b0fd
 8000910:	288df0cb 	.word	0x288df0cb
 8000914:	20000140 	.word	0x20000140

08000918 <pgm_auto>:
 * @param: none
 *
 * @returns: int 0 if success
 */

int pgm_auto(void){
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	b0b1      	sub	sp, #196	; 0xc4
 800091c:	af2c      	add	r7, sp, #176	; 0xb0

	if(pgmChanged){
 800091e:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <pgm_auto+0x118>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d016      	beq.n	8000954 <pgm_auto+0x3c>
		Set_Led_Output(GREEN);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 feb0 	bl	800168c <Set_Led_Output>

		uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 800092c:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <pgm_auto+0x11c>)
 800092e:	607b      	str	r3, [r7, #4]

		seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 8000930:	2007      	movs	r0, #7
 8000932:	f7ff fe2d 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_auto, SPEED_ADDR);
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2170      	movs	r1, #112	; 0x70
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fdb0 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, SPIN_ADDR);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2171      	movs	r1, #113	; 0x71
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fdab 	bl	80004a0 <seg7_display>
		seg7_display(text_auto, ANGLE_ADDR);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2172      	movs	r1, #114	; 0x72
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fda6 	bl	80004a0 <seg7_display>
	}

	if(((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000) |
 8000954:	f001 fc3e 	bl	80021d4 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	4b37      	ldr	r3, [pc, #220]	; (8000a38 <pgm_auto+0x120>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	f242 7210 	movw	r2, #10000	; 0x2710
 8000964:	4293      	cmp	r3, r2
 8000966:	bf8c      	ite	hi
 8000968:	2301      	movhi	r3, #1
 800096a:	2300      	movls	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <pgm_auto+0x118>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4313      	orrs	r3, r2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d054      	beq.n	8000a24 <pgm_auto+0x10c>
			pgmChanged){

		uint16_t rand_speed = (rand() % (101 - AUTO_SPEED_MIN)) + AUTO_SPEED_MIN;
 800097a:	f005 f84f 	bl	8005a1c <rand>
 800097e:	4602      	mov	r2, r0
 8000980:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <pgm_auto+0x124>)
 8000982:	fb83 1302 	smull	r1, r3, r3, r2
 8000986:	10d9      	asrs	r1, r3, #3
 8000988:	17d3      	asrs	r3, r2, #31
 800098a:	1ac9      	subs	r1, r1, r3
 800098c:	460b      	mov	r3, r1
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	440b      	add	r3, r1
 8000992:	00d9      	lsls	r1, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	1ad1      	subs	r1, r2, r3
 8000998:	b28b      	uxth	r3, r1
 800099a:	3314      	adds	r3, #20
 800099c:	81fb      	strh	r3, [r7, #14]
		int16_t rand_spin = (rand() % 101) -50;
 800099e:	f005 f83d 	bl	8005a1c <rand>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a26      	ldr	r2, [pc, #152]	; (8000a40 <pgm_auto+0x128>)
 80009a6:	fb82 1203 	smull	r1, r2, r2, r3
 80009aa:	1111      	asrs	r1, r2, #4
 80009ac:	17da      	asrs	r2, r3, #31
 80009ae:	1a8a      	subs	r2, r1, r2
 80009b0:	2165      	movs	r1, #101	; 0x65
 80009b2:	fb01 f202 	mul.w	r2, r1, r2
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	b293      	uxth	r3, r2
 80009ba:	3b32      	subs	r3, #50	; 0x32
 80009bc:	b29b      	uxth	r3, r3
 80009be:	81bb      	strh	r3, [r7, #12]
		uint16_t rand_angle = rand() % 91;
 80009c0:	f005 f82c 	bl	8005a1c <rand>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <pgm_auto+0x12c>)
 80009c8:	fb82 1203 	smull	r1, r2, r2, r3
 80009cc:	441a      	add	r2, r3
 80009ce:	1191      	asrs	r1, r2, #6
 80009d0:	17da      	asrs	r2, r3, #31
 80009d2:	1a8a      	subs	r2, r1, r2
 80009d4:	215b      	movs	r1, #91	; 0x5b
 80009d6:	fb01 f202 	mul.w	r2, r1, r2
 80009da:	1a9a      	subs	r2, r3, r2
 80009dc:	4613      	mov	r3, r2
 80009de:	817b      	strh	r3, [r7, #10]

		set_pwm_maindrv(rand_speed, rand_spin, htim1);
 80009e0:	4c19      	ldr	r4, [pc, #100]	; (8000a48 <pgm_auto+0x130>)
 80009e2:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 80009e6:	89fd      	ldrh	r5, [r7, #14]
 80009e8:	4668      	mov	r0, sp
 80009ea:	f104 0308 	add.w	r3, r4, #8
 80009ee:	22ac      	movs	r2, #172	; 0xac
 80009f0:	4619      	mov	r1, r3
 80009f2:	f004 ffcf 	bl	8005994 <memcpy>
 80009f6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80009fa:	4631      	mov	r1, r6
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 fea1 	bl	8001744 <set_pwm_maindrv>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a02:	2100      	movs	r1, #0
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <pgm_auto+0x130>)
 8000a06:	f003 fe21 	bl	800464c <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <pgm_auto+0x130>)
 8000a0e:	f003 fe1d 	bl	800464c <HAL_TIM_PWM_Start>
		set_pos_posdrv(rand_angle);
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 ff55 	bl	80018c4 <set_pos_posdrv>

		last_rand_tick = HAL_GetTick();
 8000a1a:	f001 fbdb 	bl	80021d4 <HAL_GetTick>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <pgm_auto+0x120>)
 8000a22:	6013      	str	r3, [r2, #0]
	}

	return EXIT_SUCCESS;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000003 	.word	0x20000003
 8000a34:	0014160a 	.word	0x0014160a
 8000a38:	200000ac 	.word	0x200000ac
 8000a3c:	1948b0fd 	.word	0x1948b0fd
 8000a40:	288df0cb 	.word	0x288df0cb
 8000a44:	b40b40b5 	.word	0xb40b40b5
 8000a48:	20000140 	.word	0x20000140

08000a4c <get_adc_values>:
 * @param: uint16_t* array size 3 to store ADC readings
 *
 * @returns: int 0 on success
 */

int get_adc_values(uint16_t* adc_result){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++){
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e013      	b.n	8000a82 <get_adc_values+0x36>
			HAL_ADC_Start(&hadc1);
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <get_adc_values+0x48>)
 8000a5c:	f001 fc9c 	bl	8002398 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 8000a60:	2101      	movs	r1, #1
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <get_adc_values+0x48>)
 8000a64:	f001 fd46 	bl	80024f4 <HAL_ADC_PollForConversion>
			adc_result[i] = HAL_ADC_GetValue(&hadc1);
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <get_adc_values+0x48>)
 8000a6a:	f001 fe49 	bl	8002700 <HAL_ADC_GetValue>
 8000a6e:	4601      	mov	r1, r0
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	b28a      	uxth	r2, r1
 8000a7a:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	dde8      	ble.n	8000a5a <get_adc_values+0xe>
		}

	return EXIT_SUCCESS;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000bc 	.word	0x200000bc

08000a98 <handle_angle_change>:
 *
 * @param: uint16_t* last set position
 *
 * @returns: int 0 on success
 */
int handle_angle_change(uint16_t adc_result, uint16_t* last_adc){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	80fb      	strh	r3, [r7, #6]

	static uint32_t last_angle_change = 0;	//Timestamp for last change of angle target value
	static FlagStatus AngleChanged = RESET; 	//Set if the target value has changed

	if(
		(abs(*last_adc - adc_result) > MIN_ANGLE_DELTA) |
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bfb8      	it	lt
 8000ab2:	425b      	neglt	r3, r3
 8000ab4:	2b64      	cmp	r3, #100	; 0x64
 8000ab6:	bfcc      	ite	gt
 8000ab8:	2301      	movgt	r3, #1
 8000aba:	2300      	movle	r3, #0
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <handle_angle_change+0xac>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4313      	orrs	r3, r2
	if(
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d017      	beq.n	8000afa <handle_angle_change+0x62>
		pgmChanged){
			*last_adc = adc_result;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	88fa      	ldrh	r2, [r7, #6]
 8000ace:	801a      	strh	r2, [r3, #0]
			seg7_displayInt((int16_t)angle_degree, ANGLE_ADDR);
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <handle_angle_change+0xb0>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	2172      	movs	r1, #114	; 0x72
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fc47 	bl	800036c <seg7_displayInt>
			seg7_setDispAddr(ANGLE_ADDR);
 8000ade:	2072      	movs	r0, #114	; 0x72
 8000ae0:	f7ff fd46 	bl	8000570 <seg7_setDispAddr>
			seg7_setBlinkRate(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fbd9 	bl	800029c <seg7_setBlinkRate>
			AngleChanged = SET;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <handle_angle_change+0xb4>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
			last_angle_change = HAL_GetTick();
 8000af0:	f001 fb70 	bl	80021d4 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <handle_angle_change+0xb8>)
 8000af8:	6013      	str	r3, [r2, #0]
	}

	if(((HAL_GetTick() - last_angle_change) > ANGLE_SET_DELAY) & AngleChanged){
 8000afa:	f001 fb6b 	bl	80021d4 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <handle_angle_change+0xb8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b0a:	bf8c      	ite	hi
 8000b0c:	2301      	movhi	r3, #1
 8000b0e:	2300      	movls	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <handle_angle_change+0xb4>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00d      	beq.n	8000b3a <handle_angle_change+0xa2>
		seg7_setDispAddr(ANGLE_ADDR);
 8000b1e:	2072      	movs	r0, #114	; 0x72
 8000b20:	f7ff fd26 	bl	8000570 <seg7_setDispAddr>
		seg7_setBlinkRate(0);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fbb9 	bl	800029c <seg7_setBlinkRate>
		set_pos_posdrv(angle_degree);
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <handle_angle_change+0xb0>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fec8 	bl	80018c4 <set_pos_posdrv>
		AngleChanged = RESET;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <handle_angle_change+0xb4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000003 	.word	0x20000003
 8000b48:	200000a2 	.word	0x200000a2
 8000b4c:	200000b4 	.word	0x200000b4
 8000b50:	200000b8 	.word	0x200000b8

08000b54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b7c:	e000      	b.n	8000b80 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b7e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0f9      	beq.n	8000b7e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba6:	f001 fabd 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000baa:	f000 f923 	bl	8000df4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ADC_CR2_REG |= (1<<2); //Start calibration of ADCs after power on
 8000bae:	4b81      	ldr	r3, [pc, #516]	; (8000db4 <main+0x214>)
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4a7f      	ldr	r2, [pc, #508]	; (8000db4 <main+0x214>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	8013      	strh	r3, [r2, #0]

  while(ADC_CR2_REG & (1<<2)){
 8000bbe:	bf00      	nop
 8000bc0:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <main+0x214>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f8      	bne.n	8000bc0 <main+0x20>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bce:	f000 fbeb 	bl	80013a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000bd2:	f000 f95f 	bl	8000e94 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000bd6:	f000 f9bb 	bl	8000f50 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000bda:	f000 f9e7 	bl	8000fac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bde:	f000 fa93 	bl	8001108 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000be2:	f000 fb5f 	bl	80012a4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000be6:	f000 fb0f 	bl	8001208 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  seg7_init(SPEED_ADDR);
 8000bea:	2070      	movs	r0, #112	; 0x70
 8000bec:	f7ff fafa 	bl	80001e4 <seg7_init>
  seg7_init(SPIN_ADDR);
 8000bf0:	2071      	movs	r0, #113	; 0x71
 8000bf2:	f7ff faf7 	bl	80001e4 <seg7_init>
  seg7_init(ANGLE_ADDR);
 8000bf6:	2072      	movs	r0, #114	; 0x72
 8000bf8:	f7ff faf4 	bl	80001e4 <seg7_init>

  HAL_TIM_RegisterCallback(&htim3, HAL_TIM_PERIOD_ELAPSED_CB_ID, CheckSWCallback);
 8000bfc:	4a6e      	ldr	r2, [pc, #440]	; (8000db8 <main+0x218>)
 8000bfe:	210e      	movs	r1, #14
 8000c00:	486e      	ldr	r0, [pc, #440]	; (8000dbc <main+0x21c>)
 8000c02:	f004 f99d 	bl	8004f40 <HAL_TIM_RegisterCallback>

  //Set position signal of main drives
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0c:	486c      	ldr	r0, [pc, #432]	; (8000dc0 <main+0x220>)
 8000c0e:	f002 f9c0 	bl	8002f92 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	486a      	ldr	r0, [pc, #424]	; (8000dc4 <main+0x224>)
 8000c1a:	f002 f9ba 	bl	8002f92 <HAL_GPIO_WritePin>

  eStop = !HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin); 	//Get initial state of emergency stop
 8000c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c22:	4867      	ldr	r0, [pc, #412]	; (8000dc0 <main+0x220>)
 8000c24:	f002 f99e 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2301      	moveq	r3, #1
 8000c30:	2300      	movne	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b64      	ldr	r3, [pc, #400]	; (8000dc8 <main+0x228>)
 8000c38:	701a      	strb	r2, [r3, #0]
  startPos = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);	//Check if start position is reached
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4863      	ldr	r0, [pc, #396]	; (8000dcc <main+0x22c>)
 8000c3e:	f002 f991 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <main+0x230>)
 8000c52:	701a      	strb	r2, [r3, #0]
  endPos = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);		//Check if end position is reached
 8000c54:	2101      	movs	r1, #1
 8000c56:	485a      	ldr	r0, [pc, #360]	; (8000dc0 <main+0x220>)
 8000c58:	f002 f984 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf0c      	ite	eq
 8000c62:	2301      	moveq	r3, #1
 8000c64:	2300      	movne	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <main+0x234>)
 8000c6c:	701a      	strb	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim3);
 8000c6e:	4853      	ldr	r0, [pc, #332]	; (8000dbc <main+0x21c>)
 8000c70:	f003 fc34 	bl	80044dc <HAL_TIM_Base_Start_IT>

  Set_Led_Output(YELLOW);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f000 fd09 	bl	800168c <Set_Led_Output>

  uint8_t pgm_state = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t prevPgmState = 0;				//Previous program state
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71bb      	strb	r3, [r7, #6]

  srand(time(NULL)); //Seed the random int generator for auto programs
 8000c82:	2000      	movs	r0, #0
 8000c84:	f004 ff08 	bl	8005a98 <time>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fe96 	bl	80059c0 <srand>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//if(eStop) E_Stop_Call(); //Call emergency stop routine

	uint8_t text_pos[] = {SEG7_P, SEG7_0, SEG7_5, SEG7_SPACE};
 8000c94:	4b50      	ldr	r3, [pc, #320]	; (8000dd8 <main+0x238>)
 8000c96:	603b      	str	r3, [r7, #0]

	if(initHomingComplete == RESET){
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <main+0x23c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10d      	bne.n	8000cbc <main+0x11c>
		seg7_displayOnOffMulti(SPEED);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fc75 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_pos, SPEED_ADDR);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2170      	movs	r1, #112	; 0x70
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fbf8 	bl	80004a0 <seg7_display>
		init_home_pos_drive();
 8000cb0:	f000 fee2 	bl	8001a78 <init_home_pos_drive>
		Set_Led_Output(GREEN);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 fce9 	bl	800168c <Set_Led_Output>
 8000cba:	e010      	b.n	8000cde <main+0x13e>
	}
	else if (homingComplete == RESET){
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <main+0x240>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10c      	bne.n	8000cde <main+0x13e>
		seg7_displayOnOffMulti(SPEED);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fc63 	bl	8000590 <seg7_displayOnOffMulti>
		seg7_display(text_pos, SPEED_ADDR);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2170      	movs	r1, #112	; 0x70
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fbe6 	bl	80004a0 <seg7_display>
		home_pos_drive();
 8000cd4:	f000 ff46 	bl	8001b64 <home_pos_drive>
		Set_Led_Output(GREEN);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 fcd7 	bl	800168c <Set_Led_Output>
	}

	if(startPos){
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <main+0x230>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <main+0x154>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	483e      	ldr	r0, [pc, #248]	; (8000de4 <main+0x244>)
 8000cea:	f003 fd51 	bl	8004790 <HAL_TIM_PWM_Stop>
		TIM4->CNT = 0;
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <main+0x248>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(endPos){
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <main+0x234>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <main+0x16c>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	483b      	ldr	r0, [pc, #236]	; (8000dec <main+0x24c>)
 8000d00:	f003 fd46 	bl	8004790 <HAL_TIM_PWM_Stop>
		TIM2->CNT = 0;
 8000d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	prevPgmState = pgm_state;
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	71bb      	strb	r3, [r7, #6]

	/*The mode switch is read as bitpattern PGM_1_Pin = LSB PGM_3_Pin = MSB
	 *if pattern is not valid, machine turns of --> pgm_stop
	 */
	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	482b      	ldr	r0, [pc, #172]	; (8000dc4 <main+0x224>)
 8000d16:	f002 f925 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	4825      	ldr	r0, [pc, #148]	; (8000dc4 <main+0x224>)
 8000d2e:	f002 f919 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <main+0x19c>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e000      	b.n	8000d3e <main+0x19e>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <main+0x224>)
 8000d48:	f002 f90c 	bl	8002f64 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <main+0x1b6>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e000      	b.n	8000d58 <main+0x1b8>
 8000d56:	2300      	movs	r3, #0
 8000d58:	4323      	orrs	r3, r4
 8000d5a:	b25b      	sxtb	r3, r3
	pgm_state =
 8000d5c:	71fb      	strb	r3, [r7, #7]

	(prevPgmState == pgm_state) ? (pgmChanged = RESET) : (pgmChanged = SET);
 8000d5e:	79ba      	ldrb	r2, [r7, #6]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d103      	bne.n	8000d6e <main+0x1ce>
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <main+0x250>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	e002      	b.n	8000d74 <main+0x1d4>
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <main+0x250>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]

	switch(pgm_state){
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d818      	bhi.n	8000dac <main+0x20c>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <main+0x1e0>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000d95 	.word	0x08000d95
 8000d84:	08000d9b 	.word	0x08000d9b
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000dad 	.word	0x08000dad
 8000d90:	08000da7 	.word	0x08000da7
	case 0:
		pgm_stop();
 8000d94:	f7ff fc2c 	bl	80005f0 <pgm_stop>
		break;
 8000d98:	e00b      	b.n	8000db2 <main+0x212>
	case 1:
		pgm_manual();
 8000d9a:	f7ff fc63 	bl	8000664 <pgm_manual>
		break;
 8000d9e:	e008      	b.n	8000db2 <main+0x212>
	case 2:
		pgm_auto_speed();
 8000da0:	f7ff fd1c 	bl	80007dc <pgm_auto_speed>
		break;
 8000da4:	e005      	b.n	8000db2 <main+0x212>
	case 4:
		pgm_auto();
 8000da6:	f7ff fdb7 	bl	8000918 <pgm_auto>
		break;
 8000daa:	e002      	b.n	8000db2 <main+0x212>
	default:
		pgm_stop();
 8000dac:	f7ff fc20 	bl	80005f0 <pgm_stop>
		break;
 8000db0:	bf00      	nop
  {
 8000db2:	e76f      	b.n	8000c94 <main+0xf4>
 8000db4:	40012400 	.word	0x40012400
 8000db8:	0800153d 	.word	0x0800153d
 8000dbc:	200002a8 	.word	0x200002a8
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40011000 	.word	0x40011000
 8000dc8:	20000002 	.word	0x20000002
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	20000413 	.word	0x20000413
 8000dd4:	20000414 	.word	0x20000414
 8000dd8:	10050015 	.word	0x10050015
 8000ddc:	20000411 	.word	0x20000411
 8000de0:	20000412 	.word	0x20000412
 8000de4:	2000035c 	.word	0x2000035c
 8000de8:	40000800 	.word	0x40000800
 8000dec:	200001f4 	.word	0x200001f4
 8000df0:	20000003 	.word	0x20000003

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fdd4 	bl	80059b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fd77 	bl	800392c <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e44:	f000 fc76 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 ffe4 	bl	8003e30 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e6e:	f000 fc61 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e72:	2302      	movs	r3, #2
 8000e74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f965 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e88:	f000 fc54 	bl	8001734 <Error_Handler>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3750      	adds	r7, #80	; 0x50
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000ea6:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <MX_ADC1_Init+0xb8>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000ec6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000eca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed8:	481b      	ldr	r0, [pc, #108]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000eda:	f001 f985 	bl	80021e8 <HAL_ADC_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000ee4:	f000 fc26 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ee8:	230a      	movs	r3, #10
 8000eea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000efa:	f001 fc0d 	bl	8002718 <HAL_ADC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000f04:	f000 fc16 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f08:	230b      	movs	r3, #11
 8000f0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000f16:	f001 fbff 	bl	8002718 <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f20:	f000 fc08 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f24:	230c      	movs	r3, #12
 8000f26:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_ADC1_Init+0xb4>)
 8000f32:	f001 fbf1 	bl	8002718 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f3c:	f000 fbfa 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000bc 	.word	0x200000bc
 8000f4c:	40012400 	.word	0x40012400

08000f50 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	; (8000fa4 <MX_I2C2_Init+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f5c:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_I2C2_Init+0x58>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_I2C2_Init+0x50>)
 8000f8e:	f002 f831 	bl	8002ff4 <HAL_I2C_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f98:	f000 fbcc 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200000ec 	.word	0x200000ec
 8000fa4:	40005800 	.word	0x40005800
 8000fa8:	000186a0 	.word	0x000186a0

08000fac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b096      	sub	sp, #88	; 0x58
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f004 fce3 	bl	80059b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <MX_TIM1_Init+0x154>)
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <MX_TIM1_Init+0x158>)
 8000fee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000ff0:	4b43      	ldr	r3, [pc, #268]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b42      	ldr	r3, [pc, #264]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <MX_TIM1_Init+0x154>)
 8000ffe:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001002:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MX_TIM1_Init+0x154>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800100a:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <MX_TIM1_Init+0x154>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <MX_TIM1_Init+0x154>)
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001016:	483a      	ldr	r0, [pc, #232]	; (8001100 <MX_TIM1_Init+0x154>)
 8001018:	f003 fa04 	bl	8004424 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001022:	f000 fb87 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001030:	4619      	mov	r1, r3
 8001032:	4833      	ldr	r0, [pc, #204]	; (8001100 <MX_TIM1_Init+0x154>)
 8001034:	f003 fe62 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800103e:	f000 fb79 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001042:	482f      	ldr	r0, [pc, #188]	; (8001100 <MX_TIM1_Init+0x154>)
 8001044:	f003 fa9c 	bl	8004580 <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800104e:	f000 fb71 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <MX_TIM1_Init+0x154>)
 8001062:	f004 fba3 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800106c:	f000 fb62 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 450;
 8001074:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800107a:	2302      	movs	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	2200      	movs	r2, #0
 8001094:	4619      	mov	r1, r3
 8001096:	481a      	ldr	r0, [pc, #104]	; (8001100 <MX_TIM1_Init+0x154>)
 8001098:	f003 fd6e 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80010a2:	f000 fb47 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	2204      	movs	r2, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_TIM1_Init+0x154>)
 80010b0:	f003 fd62 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80010ba:	f000 fb3b 	bl	8001734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	; (8001100 <MX_TIM1_Init+0x154>)
 80010e2:	f004 fbc1 	bl	8005868 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80010ec:	f000 fb22 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <MX_TIM1_Init+0x154>)
 80010f2:	f000 fe8d 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 80010f6:	bf00      	nop
 80010f8:	3758      	adds	r7, #88	; 0x58
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000140 	.word	0x20000140
 8001104:	40012c00 	.word	0x40012c00

08001108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08e      	sub	sp, #56	; 0x38
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	615a      	str	r2, [r3, #20]
 8001136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <MX_TIM2_Init+0xfc>)
 800113a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001142:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001146:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <MX_TIM2_Init+0xfc>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001150:	f242 7210 	movw	r2, #10000	; 0x2710
 8001154:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_TIM2_Init+0xfc>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001162:	4828      	ldr	r0, [pc, #160]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001164:	f003 f95e 	bl	8004424 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800116e:	f000 fae1 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4619      	mov	r1, r3
 800117e:	4821      	ldr	r0, [pc, #132]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001180:	f003 fdbc 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800118a:	f000 fad3 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800118e:	481d      	ldr	r0, [pc, #116]	; (8001204 <MX_TIM2_Init+0xfc>)
 8001190:	f003 f9f6 	bl	8004580 <HAL_TIM_PWM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 facb 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800119e:	2108      	movs	r1, #8
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011a2:	f003 fb59 	bl	8004858 <HAL_TIM_OnePulse_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80011ac:	f000 fac2 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011c0:	f004 faf4 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80011ca:	f000 fab3 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011ce:	2370      	movs	r3, #112	; 0x70
 80011d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2204      	movs	r2, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011e8:	f003 fcc6 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80011f2:	f000 fa9f 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM2_Init+0xfc>)
 80011f8:	f000 fe0a 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 80011fc:	bf00      	nop
 80011fe:	3738      	adds	r7, #56	; 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001f4 	.word	0x200001f4

08001208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM3_Init+0x94>)
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <MX_TIM3_Init+0x98>)
 8001228:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7000;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM3_Init+0x94>)
 800122c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001230:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM3_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM3_Init+0x94>)
 800123a:	220a      	movs	r2, #10
 800123c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_TIM3_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM3_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_TIM3_Init+0x94>)
 800124c:	f003 f8ea 	bl	8004424 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 fa6d 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM3_Init+0x94>)
 8001268:	f003 fd48 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 fa5f 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM3_Init+0x94>)
 8001284:	f004 fa92 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800128e:	f000 fa51 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200002a8 	.word	0x200002a8
 80012a0:	40000400 	.word	0x40000400

080012a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012d6:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <MX_TIM4_Init+0x100>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7000;
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012dc:	f641 3258 	movw	r2, #7000	; 0x1b58
 80012e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012fc:	4828      	ldr	r0, [pc, #160]	; (80013a0 <MX_TIM4_Init+0xfc>)
 80012fe:	f003 f891 	bl	8004424 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001308:	f000 fa14 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001316:	4619      	mov	r1, r3
 8001318:	4821      	ldr	r0, [pc, #132]	; (80013a0 <MX_TIM4_Init+0xfc>)
 800131a:	f003 fcef 	bl	8004cfc <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001324:	f000 fa06 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <MX_TIM4_Init+0xfc>)
 800132a:	f003 f929 	bl	8004580 <HAL_TIM_PWM_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001334:	f000 f9fe 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001338:	2108      	movs	r1, #8
 800133a:	4819      	ldr	r0, [pc, #100]	; (80013a0 <MX_TIM4_Init+0xfc>)
 800133c:	f003 fa8c 	bl	8004858 <HAL_TIM_OnePulse_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8001346:	f000 f9f5 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	4619      	mov	r1, r3
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_TIM4_Init+0xfc>)
 800135a:	f004 fa27 	bl	80057ac <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 8001364:	f000 f9e6 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001368:	2370      	movs	r3, #112	; 0x70
 800136a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2204      	movs	r2, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM4_Init+0xfc>)
 8001382:	f003 fbf9 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800138c:	f000 f9d2 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM4_Init+0xfc>)
 8001392:	f000 fd3d 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 8001396:	bf00      	nop
 8001398:	3738      	adds	r7, #56	; 0x38
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000035c 	.word	0x2000035c
 80013a4:	40000800 	.word	0x40000800

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a4b      	ldr	r2, [pc, #300]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a3f      	ldr	r2, [pc, #252]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MX_GPIO_Init+0x148>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 800140a:	483a      	ldr	r0, [pc, #232]	; (80014f4 <MX_GPIO_Init+0x14c>)
 800140c:	f001 fdc1 	bl	8002f92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001416:	4838      	ldr	r0, [pc, #224]	; (80014f8 <MX_GPIO_Init+0x150>)
 8001418:	f001 fdbb 	bl	8002f92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	4836      	ldr	r0, [pc, #216]	; (80014fc <MX_GPIO_Init+0x154>)
 8001424:	f001 fdb5 	bl	8002f92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 8001428:	2310      	movs	r3, #16
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	482e      	ldr	r0, [pc, #184]	; (80014f4 <MX_GPIO_Init+0x14c>)
 800143c:	f001 fc0e 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8001440:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	; (80014f4 <MX_GPIO_Init+0x14c>)
 800145a:	f001 fbff 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 800145e:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 8001462:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4821      	ldr	r0, [pc, #132]	; (80014f8 <MX_GPIO_Init+0x150>)
 8001474:	f001 fbf2 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	481c      	ldr	r0, [pc, #112]	; (80014fc <MX_GPIO_Init+0x154>)
 800148c:	f001 fbe6 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 8001490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2302      	movs	r3, #2
 80014a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	4813      	ldr	r0, [pc, #76]	; (80014f8 <MX_GPIO_Init+0x150>)
 80014aa:	f001 fbd7 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = TDRV_DIR_Pin;
 80014ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_GPIO_Init+0x154>)
 80014c8:	f001 fbc8 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : E_STOP_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 80014cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_GPIO_Init+0x154>)
 80014e2:	f001 fbbb 	bl	8002c5c <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40010c00 	.word	0x40010c00

08001500 <_write>:

/* USER CODE BEGIN 4 */

//Overwrite _write for ITM_Console
int _write(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  int i=0;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e009      	b.n	800152a <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	60ba      	str	r2, [r7, #8]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb18 	bl	8000b54 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbf1      	blt.n	8001516 <_write+0x16>
  return len;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <CheckSWCallback>:
 * 			RED, YELLOW, GREEN
 * 			1 = on, 0 = off
 * @return: 0 on success
 */

void CheckSWCallback(TIM_HandleTypeDef *htim){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	volatile uint8_t SW1_State = HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8001544:	2110      	movs	r1, #16
 8001546:	4845      	ldr	r0, [pc, #276]	; (800165c <CheckSWCallback+0x120>)
 8001548:	f001 fd0c 	bl	8002f64 <HAL_GPIO_ReadPin>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
	volatile uint8_t SW2_State = HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8001550:	2101      	movs	r1, #1
 8001552:	4843      	ldr	r0, [pc, #268]	; (8001660 <CheckSWCallback+0x124>)
 8001554:	f001 fd06 	bl	8002f64 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
	volatile uint8_t EStop_State = HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 800155c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001560:	483f      	ldr	r0, [pc, #252]	; (8001660 <CheckSWCallback+0x124>)
 8001562:	f001 fcff 	bl	8002f64 <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	737b      	strb	r3, [r7, #13]

	if(SW1_State == SW1PrevState){
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <CheckSWCallback+0x128>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d11b      	bne.n	80015ae <CheckSWCallback+0x72>
		SW1Count++;
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <CheckSWCallback+0x12c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <CheckSWCallback+0x12c>)
 8001580:	801a      	strh	r2, [r3, #0]
		if(SW1Count == DEBOUNCE_CHECK){
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <CheckSWCallback+0x12c>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d114      	bne.n	80015b4 <CheckSWCallback+0x78>
			startPos = !SW1_State;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	4b34      	ldr	r3, [pc, #208]	; (800166c <CheckSWCallback+0x130>)
 800159c:	701a      	strb	r2, [r3, #0]
			if(startPos) actualPosdDeg = 0;
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <CheckSWCallback+0x130>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <CheckSWCallback+0x78>
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <CheckSWCallback+0x134>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	e002      	b.n	80015b4 <CheckSWCallback+0x78>
		}
	}
	else
	{
		SW1Count = 0;
 80015ae:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <CheckSWCallback+0x12c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
	}

	SW1PrevState = SW1_State;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <CheckSWCallback+0x128>)
 80015ba:	701a      	strb	r2, [r3, #0]

	if(SW2_State == SW2PrevState){
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <CheckSWCallback+0x138>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d11c      	bne.n	8001602 <CheckSWCallback+0xc6>
		SW2Count++;
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <CheckSWCallback+0x13c>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <CheckSWCallback+0x13c>)
 80015d2:	801a      	strh	r2, [r3, #0]
		if(SW2Count == DEBOUNCE_CHECK){
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <CheckSWCallback+0x13c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d115      	bne.n	8001608 <CheckSWCallback+0xcc>
			endPos = !SW2_State;
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <CheckSWCallback+0x140>)
 80015ee:	701a      	strb	r2, [r3, #0]
			if(endPos) actualPosdDeg = 900;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <CheckSWCallback+0x140>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <CheckSWCallback+0xcc>
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <CheckSWCallback+0x134>)
 80015fa:	f44f 7261 	mov.w	r2, #900	; 0x384
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	e002      	b.n	8001608 <CheckSWCallback+0xcc>
		}
	}
	else
	{
		SW2Count = 0;
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <CheckSWCallback+0x13c>)
 8001604:	2200      	movs	r2, #0
 8001606:	801a      	strh	r2, [r3, #0]
	}

	SW2PrevState = SW2_State;
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <CheckSWCallback+0x138>)
 800160e:	701a      	strb	r2, [r3, #0]

	if(EStop_State == EStopPrevState){
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <CheckSWCallback+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d114      	bne.n	8001646 <CheckSWCallback+0x10a>
		EStopCount++;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <CheckSWCallback+0x148>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <CheckSWCallback+0x148>)
 8001626:	801a      	strh	r2, [r3, #0]
		if(EStopCount == ES_DEBOUNCE_CHECK){
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <CheckSWCallback+0x148>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d10d      	bne.n	800164c <CheckSWCallback+0x110>
			eStop = !EStop_State;
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <CheckSWCallback+0x14c>)
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e002      	b.n	800164c <CheckSWCallback+0x110>
		}
	}
	else
	{
		EStopCount = 0;
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <CheckSWCallback+0x148>)
 8001648:	2200      	movs	r2, #0
 800164a:	801a      	strh	r2, [r3, #0]
	}

	EStopPrevState = EStop_State;
 800164c:	7b7b      	ldrb	r3, [r7, #13]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <CheckSWCallback+0x144>)
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	20000415 	.word	0x20000415
 8001668:	20000418 	.word	0x20000418
 800166c:	20000413 	.word	0x20000413
 8001670:	2000041e 	.word	0x2000041e
 8001674:	20000416 	.word	0x20000416
 8001678:	2000041a 	.word	0x2000041a
 800167c:	20000414 	.word	0x20000414
 8001680:	20000417 	.word	0x20000417
 8001684:	2000041c 	.word	0x2000041c
 8001688:	20000002 	.word	0x20000002

0800168c <Set_Led_Output>:

int Set_Led_Output(uint8_t led_mask){
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_mask & RED);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <Set_Led_Output+0x50>)
 80016a4:	f001 fc75 	bl	8002f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, led_mask & YELLOW);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <Set_Led_Output+0x50>)
 80016b8:	f001 fc6b 	bl	8002f92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_mask & GREEN);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <Set_Led_Output+0x50>)
 80016cc:	f001 fc61 	bl	8002f92 <HAL_GPIO_WritePin>

	return EXIT_SUCCESS;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40010800 	.word	0x40010800

080016e0 <Toggle_Led_Output>:
 * @param:  bitpattern representing LEDs to toggle:
 * 			RED, YELLOW, GREEN
 * 			1 = toggle, 0 = do nothing
 * @return: 0 on success
 */
int Toggle_Led_Output(uint8_t led_mask){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
	if(led_mask & RED) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <Toggle_Led_Output+0x1c>
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <Toggle_Led_Output+0x50>)
 80016f8:	f001 fc63 	bl	8002fc2 <HAL_GPIO_TogglePin>
	if(led_mask & YELLOW)HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <Toggle_Led_Output+0x30>
 8001706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <Toggle_Led_Output+0x50>)
 800170c:	f001 fc59 	bl	8002fc2 <HAL_GPIO_TogglePin>
	if(led_mask & GREEN)HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <Toggle_Led_Output+0x44>
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <Toggle_Led_Output+0x50>)
 8001720:	f001 fc4f 	bl	8002fc2 <HAL_GPIO_TogglePin>

	return EXIT_SUCCESS;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40010800 	.word	0x40010800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Set_Led_Output(RED | YELLOW);
 800173c:	2006      	movs	r0, #6
 800173e:	f7ff ffa5 	bl	800168c <Set_Led_Output>
 8001742:	e7fb      	b.n	800173c <Error_Handler+0x8>

08001744 <set_pwm_maindrv>:
 *	 	 	Calculate absolute value for max duty cycle. Calculate the absolute target speed value based on input argument
 *	 	 	speed_percent. Set the compare registers for the main drives.
 */


int set_pwm_maindrv(uint16_t speed_percent, int16_t spin_percent, TIM_HandleTypeDef htim){
 8001744:	b082      	sub	sp, #8
 8001746:	b580      	push	{r7, lr}
 8001748:	b08a      	sub	sp, #40	; 0x28
 800174a:	af02      	add	r7, sp, #8
 800174c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8001750:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001754:	4603      	mov	r3, r0
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	460b      	mov	r3, r1
 800175a:	80bb      	strh	r3, [r7, #4]

	/*Calculate the range from min to max duty cycle. Calculate the absolute value for min duty cycle = offset.
	 * Calculate absolute value for max duty cycle. Calculate the absolute target speed value based on input argument
	 * speed_percent. Set the compare registers for the main drives.*/

	uint32_t speed_range = htim.Init.Period*(MAIN_DRV_MAX_DUTY - MAIN_DRV_MIN_DUTY)/100;
 800175c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	011a      	lsls	r2, r3, #4
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <set_pwm_maindrv+0xa0>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	61fb      	str	r3, [r7, #28]
	uint32_t speed_offset = htim.Init.Period*MAIN_DRV_MIN_DUTY/100;
 8001772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <set_pwm_maindrv+0xa0>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	61bb      	str	r3, [r7, #24]
	uint32_t speed_max = speed_offset + speed_range;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	4413      	add	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
	uint32_t speed_absolute = speed_offset+(speed_range*speed_percent/100);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <set_pwm_maindrv+0xa0>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4413      	add	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]

	uint32_t speed_top = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
	uint32_t speed_bottom = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]

	calc_drv_dutycycle(speed_offset, speed_max, speed_absolute, spin_percent, &speed_top, &speed_bottom);
 80017aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	6979      	ldr	r1, [r7, #20]
 80017c0:	69b8      	ldr	r0, [r7, #24]
 80017c2:	f000 f813 	bl	80017ec <calc_drv_dutycycle>

	TIM1->CCR1 = speed_top;
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <set_pwm_maindrv+0xa4>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_bottom;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <set_pwm_maindrv+0xa4>)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6393      	str	r3, [r2, #56]	; 0x38

	return EXIT_SUCCESS;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017de:	b002      	add	sp, #8
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	51eb851f 	.word	0x51eb851f
 80017e8:	40012c00 	.word	0x40012c00

080017ec <calc_drv_dutycycle>:
		uint32_t max_speed,
		uint32_t abs_speed,
		int16_t spin_percent,
		uint32_t* top_drv,
		uint32_t* bottom_drv
		){
 80017ec:	b480      	push	{r7}
 80017ee:	b08b      	sub	sp, #44	; 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	807b      	strh	r3, [r7, #2]

	uint32_t speed_dif = (max_speed-min_speed)*abs(spin_percent)/100;
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001804:	2a00      	cmp	r2, #0
 8001806:	bfb8      	it	lt
 8001808:	4252      	neglt	r2, r2
 800180a:	b292      	uxth	r2, r2
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <calc_drv_dutycycle+0xd4>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	61fb      	str	r3, [r7, #28]
	uint32_t top_margin = max_speed - abs_speed;
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	61bb      	str	r3, [r7, #24]
	uint32_t bottom_margin = abs_speed - min_speed;
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]

	uint32_t* faster_drv;
	uint32_t* slower_drv;

	(spin_percent > 0) ? (faster_drv = top_drv) : (faster_drv = bottom_drv);
 800182a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	dd02      	ble.n	8001838 <calc_drv_dutycycle+0x4c>
 8001832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
 8001836:	e001      	b.n	800183c <calc_drv_dutycycle+0x50>
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
	(spin_percent < 0) ? (slower_drv = top_drv) : (slower_drv = bottom_drv);
 800183c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001840:	2b00      	cmp	r3, #0
 8001842:	da02      	bge.n	800184a <calc_drv_dutycycle+0x5e>
 8001844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	e001      	b.n	800184e <calc_drv_dutycycle+0x62>
 800184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184c:	623b      	str	r3, [r7, #32]

	if(speed_dif == 0){
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <calc_drv_dutycycle+0x7a>
		*top_drv = *bottom_drv = abs_speed;
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001860:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 8001862:	2300      	movs	r3, #0
 8001864:	e026      	b.n	80018b4 <calc_drv_dutycycle+0xc8>
	}

	if(top_margin < speed_dif){
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	429a      	cmp	r2, r3
 800186c:	d209      	bcs.n	8001882 <calc_drv_dutycycle+0x96>
		*faster_drv = max_speed;
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	601a      	str	r2, [r3, #0]
		*slower_drv = max_speed - 2*speed_dif;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	1ad2      	subs	r2, r2, r3
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e017      	b.n	80018b2 <calc_drv_dutycycle+0xc6>
	}
	else if(bottom_margin < speed_dif){
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	429a      	cmp	r2, r3
 8001888:	d209      	bcs.n	800189e <calc_drv_dutycycle+0xb2>
		*slower_drv = min_speed;
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	601a      	str	r2, [r3, #0]
		*faster_drv = min_speed + 2*speed_dif;
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005a      	lsls	r2, r3, #1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	441a      	add	r2, r3
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e009      	b.n	80018b2 <calc_drv_dutycycle+0xc6>
	}
	else {
		*faster_drv = abs_speed + speed_dif;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	441a      	add	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	601a      	str	r2, [r3, #0]
		*slower_drv = abs_speed - speed_dif;
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	601a      	str	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 80018b2:	2300      	movs	r3, #0

}
 80018b4:	4618      	mov	r0, r3
 80018b6:	372c      	adds	r7, #44	; 0x2c
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	51eb851f 	.word	0x51eb851f

080018c4 <set_pos_posdrv>:
 * @detail: if drive is running, the drive is stopped and the remaining time of the pulse is calculated.
 * Based on the direction, the actual position is corrected. Pulse duration is calculated and written to the register.
 * Drive is started in desired direction an new actual position is set.
 */

int set_pos_posdrv(uint16_t angle_degree){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]

	static enum drvDir posDrvDir = stop;
	static int16_t lastPosdDeg = 0;

	if(posDrvDir == cw){
 80018ce:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <set_pos_posdrv+0x18c>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d11f      	bne.n	8001918 <set_pos_posdrv+0x54>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80018d8:	2104      	movs	r1, #4
 80018da:	485e      	ldr	r0, [pc, #376]	; (8001a54 <set_pos_posdrv+0x190>)
 80018dc:	f002 ff58 	bl	8004790 <HAL_TIM_PWM_Stop>
		if(TIM2->CNT != 0){
 80018e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d038      	beq.n	800195c <set_pos_posdrv+0x98>
			actualPosdDeg = lastPosdDeg + (int16_t)((TIM2->CNT - PULSE_DELAY)/msPerdDegCw);
 80018ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	3b0a      	subs	r3, #10
 80018f2:	4a59      	ldr	r2, [pc, #356]	; (8001a58 <set_pos_posdrv+0x194>)
 80018f4:	8812      	ldrh	r2, [r2, #0]
 80018f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <set_pos_posdrv+0x198>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29b      	uxth	r3, r3
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <set_pos_posdrv+0x19c>)
 800190c:	801a      	strh	r2, [r3, #0]
			TIM2->CNT = 0;
 800190e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
 8001916:	e021      	b.n	800195c <set_pos_posdrv+0x98>
		}
	}
	else if(posDrvDir == ccw){
 8001918:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <set_pos_posdrv+0x18c>)
 800191a:	f993 3000 	ldrsb.w	r3, [r3]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d11b      	bne.n	800195c <set_pos_posdrv+0x98>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001924:	2104      	movs	r1, #4
 8001926:	484f      	ldr	r0, [pc, #316]	; (8001a64 <set_pos_posdrv+0x1a0>)
 8001928:	f002 ff32 	bl	8004790 <HAL_TIM_PWM_Stop>
		if(TIM4->CNT != 0){
 800192c:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <set_pos_posdrv+0x1a4>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <set_pos_posdrv+0x98>
			actualPosdDeg = lastPosdDeg - (int16_t)((TIM4->CNT - PULSE_DELAY)/msPerdDegCcw);
 8001934:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <set_pos_posdrv+0x198>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <set_pos_posdrv+0x1a4>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	3b0a      	subs	r3, #10
 8001942:	494a      	ldr	r1, [pc, #296]	; (8001a6c <set_pos_posdrv+0x1a8>)
 8001944:	8809      	ldrh	r1, [r1, #0]
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	b29b      	uxth	r3, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <set_pos_posdrv+0x19c>)
 8001954:	801a      	strh	r2, [r3, #0]
			TIM4->CNT = 0;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <set_pos_posdrv+0x1a4>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	int16_t deltadDeg = (angle_degree*10) - actualPosdDeg;
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	461a      	mov	r2, r3
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4413      	add	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <set_pos_posdrv+0x19c>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	b29b      	uxth	r3, r3
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	81fb      	strh	r3, [r7, #14]
	if(angle_degree < 1) deltadDeg = -1000;
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <set_pos_posdrv+0xbe>
 800197c:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8001980:	81fb      	strh	r3, [r7, #14]
	if(angle_degree > 89) deltadDeg = 1000;
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b59      	cmp	r3, #89	; 0x59
 8001986:	d902      	bls.n	800198e <set_pos_posdrv+0xca>
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	81fb      	strh	r3, [r7, #14]

	if(deltadDeg == 0) return EXIT_SUCCESS;
 800198e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <set_pos_posdrv+0xd6>
 8001996:	2300      	movs	r3, #0
 8001998:	e056      	b.n	8001a48 <set_pos_posdrv+0x184>

	if(deltadDeg > 0){
 800199a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	dd20      	ble.n	80019e4 <set_pos_posdrv+0x120>
		if(endPos) return EXIT_FAILURE;
 80019a2:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <set_pos_posdrv+0x1ac>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <set_pos_posdrv+0xea>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e04c      	b.n	8001a48 <set_pos_posdrv+0x184>
		TIM2->CNT = 0;
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CCR2 = PULSE_DELAY;
 80019b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ba:	220a      	movs	r2, #10
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->ARR = (deltadDeg*msPerdDegCw) + PULSE_DELAY;
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <set_pos_posdrv+0x194>)
 80019c4:	8812      	ldrh	r2, [r2, #0]
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	f103 020a 	add.w	r2, r3, #10
 80019ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	481f      	ldr	r0, [pc, #124]	; (8001a54 <set_pos_posdrv+0x190>)
 80019d8:	f002 fe38 	bl	800464c <HAL_TIM_PWM_Start>
		posDrvDir = cw;
 80019dc:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <set_pos_posdrv+0x18c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e021      	b.n	8001a28 <set_pos_posdrv+0x164>
	}
	else {
		if(startPos) return EXIT_FAILURE;
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <set_pos_posdrv+0x1b0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <set_pos_posdrv+0x12c>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e02b      	b.n	8001a48 <set_pos_posdrv+0x184>
		TIM4->CNT = 0;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <set_pos_posdrv+0x1a4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM4->CCR2 = PULSE_DELAY;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <set_pos_posdrv+0x1a4>)
 80019f8:	220a      	movs	r2, #10
 80019fa:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->ARR = abs(deltadDeg)*msPerdDegCcw + PULSE_DELAY;
 80019fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfb8      	it	lt
 8001a04:	425b      	neglt	r3, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <set_pos_posdrv+0x1a8>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	f103 020a 	add.w	r2, r3, #10
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <set_pos_posdrv+0x1a4>)
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <set_pos_posdrv+0x1a0>)
 8001a1e:	f002 fe15 	bl	800464c <HAL_TIM_PWM_Start>
		posDrvDir = ccw;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <set_pos_posdrv+0x18c>)
 8001a24:	22ff      	movs	r2, #255	; 0xff
 8001a26:	701a      	strb	r2, [r3, #0]
	}

	lastPosdDeg = actualPosdDeg;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <set_pos_posdrv+0x19c>)
 8001a2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <set_pos_posdrv+0x198>)
 8001a30:	801a      	strh	r2, [r3, #0]
	actualPosdDeg += deltadDeg;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <set_pos_posdrv+0x19c>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <set_pos_posdrv+0x19c>)
 8001a44:	801a      	strh	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000424 	.word	0x20000424
 8001a54:	200001f4 	.word	0x200001f4
 8001a58:	20000420 	.word	0x20000420
 8001a5c:	20000426 	.word	0x20000426
 8001a60:	2000041e 	.word	0x2000041e
 8001a64:	2000035c 	.word	0x2000035c
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	20000422 	.word	0x20000422
 8001a70:	20000414 	.word	0x20000414
 8001a74:	20000413 	.word	0x20000413

08001a78 <init_home_pos_drive>:
 * @return: int 0 on success
 *
 * @detail: Simple homing is performed first. Drive moves clockwise and then counterclockwise.
 * Time of both movements is stopped then the movement time for one tenth of a degree is calulated.
 */
int init_home_pos_drive(){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

	uint16_t cwTimeMs;
	uint16_t ccwTimeMs;

	home_pos_drive();
 8001a7e:	f000 f871 	bl	8001b64 <home_pos_drive>

	TIM2->ARR = HOME_TIMEOUT;
 8001a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a86:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = PULSE_DELAY;
 8001a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a90:	220a      	movs	r2, #10
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t startTime = HAL_GetTick();
 8001a94:	f000 fb9e 	bl	80021d4 <HAL_GetTick>
 8001a98:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	4828      	ldr	r0, [pc, #160]	; (8001b40 <init_home_pos_drive+0xc8>)
 8001a9e:	f002 fdd5 	bl	800464c <HAL_TIM_PWM_Start>

	while(!endPos){
 8001aa2:	bf00      	nop
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <init_home_pos_drive+0xcc>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0fb      	beq.n	8001aa4 <init_home_pos_drive+0x2c>
		//Wait until SW2 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001aac:	2104      	movs	r1, #4
 8001aae:	4824      	ldr	r0, [pc, #144]	; (8001b40 <init_home_pos_drive+0xc8>)
 8001ab0:	f002 fe6e 	bl	8004790 <HAL_TIM_PWM_Stop>
	cwTimeMs = HAL_GetTick() - startTime;
 8001ab4:	f000 fb8e 	bl	80021d4 <HAL_GetTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	807b      	strh	r3, [r7, #2]

	TIM4->ARR = HOME_TIMEOUT;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <init_home_pos_drive+0xd0>)
 8001ac6:	f247 5230 	movw	r2, #30000	; 0x7530
 8001aca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <init_home_pos_drive+0xd0>)
 8001ace:	220a      	movs	r2, #10
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
	startTime = HAL_GetTick();
 8001ad2:	f000 fb7f 	bl	80021d4 <HAL_GetTick>
 8001ad6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ad8:	2104      	movs	r1, #4
 8001ada:	481c      	ldr	r0, [pc, #112]	; (8001b4c <init_home_pos_drive+0xd4>)
 8001adc:	f002 fdb6 	bl	800464c <HAL_TIM_PWM_Start>

	while(!startPos){
 8001ae0:	bf00      	nop
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <init_home_pos_drive+0xd8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0fb      	beq.n	8001ae2 <init_home_pos_drive+0x6a>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001aea:	2104      	movs	r1, #4
 8001aec:	4817      	ldr	r0, [pc, #92]	; (8001b4c <init_home_pos_drive+0xd4>)
 8001aee:	f002 fe4f 	bl	8004790 <HAL_TIM_PWM_Stop>
	ccwTimeMs = HAL_GetTick() - startTime;
 8001af2:	f000 fb6f 	bl	80021d4 <HAL_GetTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	803b      	strh	r3, [r7, #0]

	msPerdDegCw = cwTimeMs/900;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <init_home_pos_drive+0xdc>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0a5b      	lsrs	r3, r3, #9
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <init_home_pos_drive+0xe0>)
 8001b10:	801a      	strh	r2, [r3, #0]
	msPerdDegCcw = ccwTimeMs/900;
 8001b12:	883b      	ldrh	r3, [r7, #0]
 8001b14:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <init_home_pos_drive+0xdc>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	0a5b      	lsrs	r3, r3, #9
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <init_home_pos_drive+0xe4>)
 8001b20:	801a      	strh	r2, [r3, #0]
	initHomingComplete = SET;
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <init_home_pos_drive+0xe8>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 8001b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <init_home_pos_drive+0xd0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

	return EXIT_SUCCESS;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200001f4 	.word	0x200001f4
 8001b44:	20000414 	.word	0x20000414
 8001b48:	40000800 	.word	0x40000800
 8001b4c:	2000035c 	.word	0x2000035c
 8001b50:	20000413 	.word	0x20000413
 8001b54:	91a2b3c5 	.word	0x91a2b3c5
 8001b58:	20000420 	.word	0x20000420
 8001b5c:	20000422 	.word	0x20000422
 8001b60:	20000411 	.word	0x20000411

08001b64 <home_pos_drive>:
 * @return: int 0 on success
 *
 * @detail: Move drive counterclockwise to start position. Used to get the initial position of the drive
 * either after power up as part of initial homing or after a emergency stop event happened.
 */
int home_pos_drive(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

	if(startPos){
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <home_pos_drive+0x5c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <home_pos_drive+0x1c>
		actualPosdDeg = 0;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <home_pos_drive+0x60>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]
		homingComplete = SET;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <home_pos_drive+0x64>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
		return EXIT_SUCCESS;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e01d      	b.n	8001bbc <home_pos_drive+0x58>
	}

	TIM4->ARR = HOME_TIMEOUT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <home_pos_drive+0x68>)
 8001b82:	f247 5230 	movw	r2, #30000	; 0x7530
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <home_pos_drive+0x68>)
 8001b8a:	220a      	movs	r2, #10
 8001b8c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b8e:	2104      	movs	r1, #4
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <home_pos_drive+0x6c>)
 8001b92:	f002 fd5b 	bl	800464c <HAL_TIM_PWM_Start>

	while(!startPos){
 8001b96:	bf00      	nop
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <home_pos_drive+0x5c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0fb      	beq.n	8001b98 <home_pos_drive+0x34>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <home_pos_drive+0x6c>)
 8001ba4:	f002 fdf4 	bl	8004790 <HAL_TIM_PWM_Stop>
	TIM4->CNT = 0;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <home_pos_drive+0x68>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
	actualPosdDeg = 0;
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <home_pos_drive+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
	homingComplete = SET;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <home_pos_drive+0x64>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000413 	.word	0x20000413
 8001bc4:	2000041e 	.word	0x2000041e
 8001bc8:	20000412 	.word	0x20000412
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	2000035c 	.word	0x2000035c

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_MspInit+0x5c>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_MspInit+0x5c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6193      	str	r3, [r2, #24]
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_MspInit+0x5c>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x5c>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_MspInit+0x5c>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_MspInit+0x5c>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_MspInit+0x60>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_MspInit+0x60>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40010000 	.word	0x40010000

08001c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <HAL_ADC_MspInit+0x6c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d121      	bne.n	8001c9c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c70:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c76:	f043 0310 	orr.w	r3, r3, #16
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_ADC_MspInit+0x70>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_ADC_MspInit+0x74>)
 8001c98:	f000 ffe0 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40012400 	.word	0x40012400
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40011000 	.word	0x40011000

08001cb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_I2C_MspInit+0x74>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d124      	bne.n	8001d1a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a14      	ldr	r2, [pc, #80]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ce8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cee:	2312      	movs	r3, #18
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0310 	add.w	r3, r7, #16
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_I2C_MspInit+0x7c>)
 8001cfe:	f000 ffad 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0c:	61d3      	str	r3, [r2, #28]
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_I2C_MspInit+0x78>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005800 	.word	0x40005800
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_TIM_Base_MspInit+0xd0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10c      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a2f      	ldr	r2, [pc, #188]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d5a:	e04c      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d64:	d114      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	61d3      	str	r3, [r2, #28]
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201c      	movs	r0, #28
 8001d84:	f000 ff33 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d88:	201c      	movs	r0, #28
 8001d8a:	f000 ff4c 	bl	8002c26 <HAL_NVIC_EnableIRQ>
}
 8001d8e:	e032      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_TIM_Base_MspInit+0xd8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d114      	bne.n	8001dc4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	61d3      	str	r3, [r2, #28]
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	201d      	movs	r0, #29
 8001db8:	f000 ff19 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dbc:	201d      	movs	r0, #29
 8001dbe:	f000 ff32 	bl	8002c26 <HAL_NVIC_EnableIRQ>
}
 8001dc2:	e018      	b.n	8001df6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a10      	ldr	r2, [pc, #64]	; (8001e0c <HAL_TIM_Base_MspInit+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d113      	bne.n	8001df6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_TIM_Base_MspInit+0xd4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	201e      	movs	r0, #30
 8001dec:	f000 feff 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001df0:	201e      	movs	r0, #30
 8001df2:	f000 ff18 	bl	8002c26 <HAL_NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2e      	ldr	r2, [pc, #184]	; (8001ee4 <HAL_TIM_MspPostInit+0xd4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d119      	bne.n	8001e64 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 8001e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0318 	add.w	r3, r7, #24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4823      	ldr	r0, [pc, #140]	; (8001eec <HAL_TIM_MspPostInit+0xdc>)
 8001e5e:	f000 fefd 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e62:	e03a      	b.n	8001eda <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d118      	bne.n	8001ea0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = POS_CW_Pin;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CW_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	4619      	mov	r1, r3
 8001e98:	4814      	ldr	r0, [pc, #80]	; (8001eec <HAL_TIM_MspPostInit+0xdc>)
 8001e9a:	f000 fedf 	bl	8002c5c <HAL_GPIO_Init>
}
 8001e9e:	e01c      	b.n	8001eda <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_TIM_MspPostInit+0xe0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d117      	bne.n	8001eda <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	6193      	str	r3, [r2, #24]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_TIM_MspPostInit+0xd8>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POS_CCW_Pin;
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CCW_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <HAL_TIM_MspPostInit+0xe4>)
 8001ed6:	f000 fec1 	bl	8002c5c <HAL_GPIO_Init>
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3e:	f000 f937 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <TIM2_IRQHandler+0x10>)
 8001f4e:	f002 fcea 	bl	8004926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200001f4 	.word	0x200001f4

08001f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM3_IRQHandler+0x10>)
 8001f62:	f002 fce0 	bl	8004926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200002a8 	.word	0x200002a8

08001f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM4_IRQHandler+0x10>)
 8001f76:	f002 fcd6 	bl	8004926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000035c 	.word	0x2000035c

08001f84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return 1;
 8001f88:	2301      	movs	r3, #1
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_kill>:

int _kill(int pid, int sig)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f9c:	f003 fcd0 	bl	8005940 <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2216      	movs	r2, #22
 8001fa4:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_exit>:

void _exit (int status)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fba:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ffe7 	bl	8001f92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc4:	e7fe      	b.n	8001fc4 <_exit+0x12>

08001fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	e00a      	b.n	8001fee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd8:	f3af 8000 	nop.w
 8001fdc:	4601      	mov	r1, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	b2ca      	uxtb	r2, r1
 8001fe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	dbf0      	blt.n	8001fd8 <_read+0x12>
  }

  return len;
 8001ff6:	687b      	ldr	r3, [r7, #4]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	605a      	str	r2, [r3, #4]
  return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <_isatty>:

int _isatty(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800203c:	2301      	movs	r3, #1
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f003 fc56 	bl	8005940 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20005000 	.word	0x20005000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	20000428 	.word	0x20000428
 80020c8:	20000440 	.word	0x20000440

080020cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d8:	f7ff fff8 	bl	80020cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020de:	490c      	ldr	r1, [pc, #48]	; (8002110 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020e0:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020f4:	4c09      	ldr	r4, [pc, #36]	; (800211c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002102:	f003 fc23 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002106:	f7fe fd4b 	bl	8000ba0 <main>
  bx lr
 800210a:	4770      	bx	lr
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002114:	08006cc0 	.word	0x08006cc0
  ldr r2, =_sbss
 8002118:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800211c:	20000440 	.word	0x20000440

08002120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC1_2_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_Init+0x28>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_Init+0x28>)
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 fd4f 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	200f      	movs	r0, #15
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fd48 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fd67 	bl	8002c42 <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 fd2f 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000004 	.word	0x20000004
 80021a8:	2000000c 	.word	0x2000000c
 80021ac:	20000008 	.word	0x20000008

080021b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_IncTick+0x1c>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_IncTick+0x20>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_IncTick+0x20>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	2000042c 	.word	0x2000042c

080021d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <HAL_GetTick+0x10>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	2000042c 	.word	0x2000042c

080021e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0be      	b.n	8002388 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fd06 	bl	8001c38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fbc5 	bl	80029bc <ADC_ConversionStop_Disable>
 8002232:	4603      	mov	r3, r0
 8002234:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 8099 	bne.w	8002376 <HAL_ADC_Init+0x18e>
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 8095 	bne.w	8002376 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002254:	f023 0302 	bic.w	r3, r3, #2
 8002258:	f043 0202 	orr.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002268:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b1b      	ldrb	r3, [r3, #12]
 800226e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002270:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	4313      	orrs	r3, r2
 8002276:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d003      	beq.n	800228a <HAL_ADC_Init+0xa2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d102      	bne.n	8002290 <HAL_ADC_Init+0xa8>
 800228a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228e:	e000      	b.n	8002292 <HAL_ADC_Init+0xaa>
 8002290:	2300      	movs	r3, #0
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7d1b      	ldrb	r3, [r3, #20]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d119      	bne.n	80022d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7b1b      	ldrb	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	035a      	lsls	r2, r3, #13
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e00b      	b.n	80022d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_ADC_Init+0x1a8>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002304:	d003      	beq.n	800230e <HAL_ADC_Init+0x126>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d104      	bne.n	8002318 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	3b01      	subs	r3, #1
 8002314:	051b      	lsls	r3, r3, #20
 8002316:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	430a      	orrs	r2, r1
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_ADC_Init+0x1ac>)
 8002334:	4013      	ands	r3, r2
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002352:	e018      	b.n	8002386 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	f023 0312 	bic.w	r3, r3, #18
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	ffe1f7fd 	.word	0xffe1f7fd
 8002394:	ff1f0efe 	.word	0xff1f0efe

08002398 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Start+0x1a>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e098      	b.n	80024e4 <HAL_ADC_Start+0x14c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 faa4 	bl	8002908 <ADC_Enable>
 80023c0:	4603      	mov	r3, r0
 80023c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8087 	bne.w	80024da <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a41      	ldr	r2, [pc, #260]	; (80024ec <HAL_ADC_Start+0x154>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_Start+0x5e>
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_ADC_Start+0x158>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d026      	beq.n	800245e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002420:	e01d      	b.n	800245e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <HAL_ADC_Start+0x158>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d004      	beq.n	8002442 <HAL_ADC_Start+0xaa>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <HAL_ADC_Start+0x154>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_ADC_Start+0xc6>
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_ADC_Start+0x158>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f023 0206 	bic.w	r2, r3, #6
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
 8002476:	e002      	b.n	800247e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0202 	mvn.w	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800249a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800249e:	d113      	bne.n	80024c8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_ADC_Start+0x154>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_ADC_Start+0x158>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	e00c      	b.n	80024e2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e003      	b.n	80024e2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40012800 	.word	0x40012800
 80024f0:	40012400 	.word	0x40012400

080024f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800250a:	f7ff fe63 	bl	80021d4 <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0d3      	b.n	80026de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d131      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d12a      	bne.n	80025a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002552:	e021      	b.n	8002598 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255a:	d01d      	beq.n	8002598 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_ADC_PollForConversion+0x7e>
 8002562:	f7ff fe37 	bl	80021d4 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d212      	bcs.n	8002598 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f043 0204 	orr.w	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0a2      	b.n	80026de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0d6      	beq.n	8002554 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025a6:	e070      	b.n	800268a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_ADC_PollForConversion+0x1f4>)
 80025aa:	681c      	ldr	r4, [r3, #0]
 80025ac:	2002      	movs	r0, #2
 80025ae:	f001 fe83 	bl	80042b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80025b2:	4603      	mov	r3, r0
 80025b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <HAL_ADC_PollForConversion+0x1f8>)
 80025c0:	400b      	ands	r3, r1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d118      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x104>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68d9      	ldr	r1, [r3, #12]
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_ADC_PollForConversion+0x1fc>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <HAL_ADC_PollForConversion+0x104>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6919      	ldr	r1, [r3, #16]
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_ADC_PollForConversion+0x200>)
 80025dc:	400b      	ands	r3, r1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d108      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x100>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_ADC_PollForConversion+0x204>)
 80025ea:	400b      	ands	r3, r1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x100>
 80025f0:	2314      	movs	r3, #20
 80025f2:	e020      	b.n	8002636 <HAL_ADC_PollForConversion+0x142>
 80025f4:	2329      	movs	r3, #41	; 0x29
 80025f6:	e01e      	b.n	8002636 <HAL_ADC_PollForConversion+0x142>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6919      	ldr	r1, [r3, #16]
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_ADC_PollForConversion+0x200>)
 8002600:	400b      	ands	r3, r1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_ADC_PollForConversion+0x120>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_ADC_PollForConversion+0x204>)
 800260e:	400b      	ands	r3, r1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_ADC_PollForConversion+0x13c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6919      	ldr	r1, [r3, #16]
 800261a:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_ADC_PollForConversion+0x208>)
 800261c:	400b      	ands	r3, r1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <HAL_ADC_PollForConversion+0x140>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68d9      	ldr	r1, [r3, #12]
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_ADC_PollForConversion+0x208>)
 800262a:	400b      	ands	r3, r1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_ADC_PollForConversion+0x140>
 8002630:	2354      	movs	r3, #84	; 0x54
 8002632:	e000      	b.n	8002636 <HAL_ADC_PollForConversion+0x142>
 8002634:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800263c:	e021      	b.n	8002682 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d01a      	beq.n	800267c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_ADC_PollForConversion+0x168>
 800264c:	f7ff fdc2 	bl	80021d4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d20f      	bcs.n	800267c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d90b      	bls.n	800267c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	f043 0204 	orr.w	r2, r3, #4
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e030      	b.n	80026de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3301      	adds	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	429a      	cmp	r2, r3
 8002688:	d8d9      	bhi.n	800263e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f06f 0212 	mvn.w	r2, #18
 8002692:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ae:	d115      	bne.n	80026dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000004 	.word	0x20000004
 80026ec:	24924924 	.word	0x24924924
 80026f0:	00924924 	.word	0x00924924
 80026f4:	12492492 	.word	0x12492492
 80026f8:	00492492 	.word	0x00492492
 80026fc:	00249249 	.word	0x00249249

08002700 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x20>
 8002734:	2302      	movs	r3, #2
 8002736:	e0dc      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1da>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d81c      	bhi.n	8002782 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	3b05      	subs	r3, #5
 800275a:	221f      	movs	r2, #31
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	4019      	ands	r1, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b05      	subs	r3, #5
 8002774:	fa00 f203 	lsl.w	r2, r0, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	635a      	str	r2, [r3, #52]	; 0x34
 8002780:	e03c      	b.n	80027fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d81c      	bhi.n	80027c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	3b23      	subs	r3, #35	; 0x23
 800279c:	221f      	movs	r2, #31
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4019      	ands	r1, r3
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	3b23      	subs	r3, #35	; 0x23
 80027b6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
 80027c2:	e01b      	b.n	80027fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3b41      	subs	r3, #65	; 0x41
 80027d6:	221f      	movs	r2, #31
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	4019      	ands	r1, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b41      	subs	r3, #65	; 0x41
 80027f0:	fa00 f203 	lsl.w	r2, r0, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d91c      	bls.n	800283e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	3b1e      	subs	r3, #30
 8002816:	2207      	movs	r2, #7
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	4019      	ands	r1, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6898      	ldr	r0, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	3b1e      	subs	r3, #30
 8002830:	fa00 f203 	lsl.w	r2, r0, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	e019      	b.n	8002872 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6919      	ldr	r1, [r3, #16]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	2207      	movs	r2, #7
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	4019      	ands	r1, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6898      	ldr	r0, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b10      	cmp	r3, #16
 8002878:	d003      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800287e:	2b11      	cmp	r3, #17
 8002880:	d132      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a1d      	ldr	r2, [pc, #116]	; (80028fc <HAL_ADC_ConfigChannel+0x1e4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d125      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d126      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b10      	cmp	r3, #16
 80028b0:	d11a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_ADC_ConfigChannel+0x1e8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_ADC_ConfigChannel+0x1ec>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	0c9a      	lsrs	r2, r3, #18
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028c8:	e002      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f9      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x1b2>
 80028d6:	e007      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40012400 	.word	0x40012400
 8002900:	20000004 	.word	0x20000004
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d040      	beq.n	80029a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002936:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <ADC_Enable+0xac>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <ADC_Enable+0xb0>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	0c9b      	lsrs	r3, r3, #18
 8002942:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002944:	e002      	b.n	800294c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	3b01      	subs	r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f9      	bne.n	8002946 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002952:	f7ff fc3f 	bl	80021d4 <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002958:	e01f      	b.n	800299a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800295a:	f7ff fc3b 	bl	80021d4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d918      	bls.n	800299a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d011      	beq.n	800299a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e007      	b.n	80029aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d1d8      	bne.n	800295a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000004 	.word	0x20000004
 80029b8:	431bde83 	.word	0x431bde83

080029bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d12e      	bne.n	8002a34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029e6:	f7ff fbf5 	bl	80021d4 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029ec:	e01b      	b.n	8002a26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029ee:	f7ff fbf1 	bl	80021d4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d914      	bls.n	8002a26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10d      	bne.n	8002a26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e007      	b.n	8002a36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d0dc      	beq.n	80029ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <__NVIC_SetPriorityGrouping>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4906      	ldr	r1, [pc, #24]	; (8002ad8 <__NVIC_EnableIRQ+0x34>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Config>:
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff90 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff2d 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff42 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff35 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa2 	bl	8002b94 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	e169      	b.n	8002f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c70:	2201      	movs	r2, #1
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8158 	bne.w	8002f3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a9a      	ldr	r2, [pc, #616]	; (8002efc <HAL_GPIO_Init+0x2a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d05e      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002c98:	4a98      	ldr	r2, [pc, #608]	; (8002efc <HAL_GPIO_Init+0x2a0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d875      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002c9e:	4a98      	ldr	r2, [pc, #608]	; (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d058      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002ca4:	4a96      	ldr	r2, [pc, #600]	; (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d86f      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002caa:	4a96      	ldr	r2, [pc, #600]	; (8002f04 <HAL_GPIO_Init+0x2a8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d052      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cb0:	4a94      	ldr	r2, [pc, #592]	; (8002f04 <HAL_GPIO_Init+0x2a8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d869      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cb6:	4a94      	ldr	r2, [pc, #592]	; (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d04c      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cbc:	4a92      	ldr	r2, [pc, #584]	; (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d863      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cc2:	4a92      	ldr	r2, [pc, #584]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d046      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cc8:	4a90      	ldr	r2, [pc, #576]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d85d      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d82a      	bhi.n	8002d28 <HAL_GPIO_Init+0xcc>
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d859      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_GPIO_Init+0x80>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d57 	.word	0x08002d57
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d43 	.word	0x08002d43
 8002ce8:	08002d85 	.word	0x08002d85
 8002cec:	08002d8b 	.word	0x08002d8b
 8002cf0:	08002d8b 	.word	0x08002d8b
 8002cf4:	08002d8b 	.word	0x08002d8b
 8002cf8:	08002d8b 	.word	0x08002d8b
 8002cfc:	08002d8b 	.word	0x08002d8b
 8002d00:	08002d8b 	.word	0x08002d8b
 8002d04:	08002d8b 	.word	0x08002d8b
 8002d08:	08002d8b 	.word	0x08002d8b
 8002d0c:	08002d8b 	.word	0x08002d8b
 8002d10:	08002d8b 	.word	0x08002d8b
 8002d14:	08002d8b 	.word	0x08002d8b
 8002d18:	08002d8b 	.word	0x08002d8b
 8002d1c:	08002d8b 	.word	0x08002d8b
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	4a79      	ldr	r2, [pc, #484]	; (8002f10 <HAL_GPIO_Init+0x2b4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2e:	e02c      	b.n	8002d8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e029      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	623b      	str	r3, [r7, #32]
          break;
 8002d40:	e024      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	3308      	adds	r3, #8
 8002d48:	623b      	str	r3, [r7, #32]
          break;
 8002d4a:	e01f      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	330c      	adds	r3, #12
 8002d52:	623b      	str	r3, [r7, #32]
          break;
 8002d54:	e01a      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e013      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	611a      	str	r2, [r3, #16]
          break;
 8002d76:	e009      	b.n	8002d8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	615a      	str	r2, [r3, #20]
          break;
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          break;
 8002d8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d801      	bhi.n	8002d96 <HAL_GPIO_Init+0x13a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_Init+0x13e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2bff      	cmp	r3, #255	; 0xff
 8002da0:	d802      	bhi.n	8002da8 <HAL_GPIO_Init+0x14c>
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x152>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	3b08      	subs	r3, #8
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	210f      	movs	r1, #15
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80b1 	beq.w	8002f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	; (8002f14 <HAL_GPIO_Init+0x2b8>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <HAL_GPIO_Init+0x2b8>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <HAL_GPIO_Init+0x2b8>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df4:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <HAL_GPIO_Init+0x2bc>)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a40      	ldr	r2, [pc, #256]	; (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_GPIO_Init+0x1ec>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <HAL_GPIO_Init+0x2c4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <HAL_GPIO_Init+0x1e8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3e      	ldr	r2, [pc, #248]	; (8002f24 <HAL_GPIO_Init+0x2c8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <HAL_GPIO_Init+0x1e4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3d      	ldr	r2, [pc, #244]	; (8002f28 <HAL_GPIO_Init+0x2cc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_GPIO_Init+0x1e0>
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e006      	b.n	8002e4a <HAL_GPIO_Init+0x1ee>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	e004      	b.n	8002e4a <HAL_GPIO_Init+0x1ee>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e002      	b.n	8002e4a <HAL_GPIO_Init+0x1ee>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_GPIO_Init+0x1ee>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	f002 0203 	and.w	r2, r2, #3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4093      	lsls	r3, r2
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e5a:	492f      	ldr	r1, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x2bc>)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	492c      	ldr	r1, [pc, #176]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	4928      	ldr	r1, [pc, #160]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4922      	ldr	r1, [pc, #136]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60cb      	str	r3, [r1, #12]
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	491e      	ldr	r1, [pc, #120]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4918      	ldr	r1, [pc, #96]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	4914      	ldr	r1, [pc, #80]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d021      	beq.n	8002f30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_GPIO_Init+0x2d0>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	600b      	str	r3, [r1, #0]
 8002ef8:	e021      	b.n	8002f3e <HAL_GPIO_Init+0x2e2>
 8002efa:	bf00      	nop
 8002efc:	10320000 	.word	0x10320000
 8002f00:	10310000 	.word	0x10310000
 8002f04:	10220000 	.word	0x10220000
 8002f08:	10210000 	.word	0x10210000
 8002f0c:	10120000 	.word	0x10120000
 8002f10:	10110000 	.word	0x10110000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40010800 	.word	0x40010800
 8002f20:	40010c00 	.word	0x40010c00
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	4909      	ldr	r1, [pc, #36]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	3301      	adds	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f47f ae8e 	bne.w	8002c70 <HAL_GPIO_Init+0x14>
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	372c      	adds	r7, #44	; 0x2c
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40010400 	.word	0x40010400

08002f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e001      	b.n	8002f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	807b      	strh	r3, [r7, #2]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fa2:	787b      	ldrb	r3, [r7, #1]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa8:	887a      	ldrh	r2, [r7, #2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fae:	e003      	b.n	8002fb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	041a      	lsls	r2, r3, #16
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	611a      	str	r2, [r3, #16]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	041a      	lsls	r2, r3, #16
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	611a      	str	r2, [r3, #16]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e12b      	b.n	800325e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe fe48 	bl	8001cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2224      	movs	r2, #36	; 0x24
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003058:	f001 f832 	bl	80040c0 <HAL_RCC_GetPCLK1Freq>
 800305c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a81      	ldr	r2, [pc, #516]	; (8003268 <HAL_I2C_Init+0x274>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d807      	bhi.n	8003078 <HAL_I2C_Init+0x84>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a80      	ldr	r2, [pc, #512]	; (800326c <HAL_I2C_Init+0x278>)
 800306c:	4293      	cmp	r3, r2
 800306e:	bf94      	ite	ls
 8003070:	2301      	movls	r3, #1
 8003072:	2300      	movhi	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e006      	b.n	8003086 <HAL_I2C_Init+0x92>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a7d      	ldr	r2, [pc, #500]	; (8003270 <HAL_I2C_Init+0x27c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0e7      	b.n	800325e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a78      	ldr	r2, [pc, #480]	; (8003274 <HAL_I2C_Init+0x280>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	0c9b      	lsrs	r3, r3, #18
 8003098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a6a      	ldr	r2, [pc, #424]	; (8003268 <HAL_I2C_Init+0x274>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d802      	bhi.n	80030c8 <HAL_I2C_Init+0xd4>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	3301      	adds	r3, #1
 80030c6:	e009      	b.n	80030dc <HAL_I2C_Init+0xe8>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	4a69      	ldr	r2, [pc, #420]	; (8003278 <HAL_I2C_Init+0x284>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	3301      	adds	r3, #1
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	495c      	ldr	r1, [pc, #368]	; (8003268 <HAL_I2C_Init+0x274>)
 80030f8:	428b      	cmp	r3, r1
 80030fa:	d819      	bhi.n	8003130 <HAL_I2C_Init+0x13c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e59      	subs	r1, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fbb1 f3f3 	udiv	r3, r1, r3
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003110:	400b      	ands	r3, r1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_I2C_Init+0x138>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e59      	subs	r1, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fbb1 f3f3 	udiv	r3, r1, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312a:	e051      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 800312c:	2304      	movs	r3, #4
 800312e:	e04f      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <HAL_I2C_Init+0x168>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e58      	subs	r0, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e012      	b.n	8003182 <HAL_I2C_Init+0x18e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1e58      	subs	r0, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	0099      	lsls	r1, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Init+0x196>
 8003186:	2301      	movs	r3, #1
 8003188:	e022      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <HAL_I2C_Init+0x1bc>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1e58      	subs	r0, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	440b      	add	r3, r1
 80031a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ae:	e00f      	b.n	80031d0 <HAL_I2C_Init+0x1dc>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1e58      	subs	r0, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6859      	ldr	r1, [r3, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	0099      	lsls	r1, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	6809      	ldr	r1, [r1, #0]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6911      	ldr	r1, [r2, #16]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68d2      	ldr	r2, [r2, #12]
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	430b      	orrs	r3, r1
 8003212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	000186a0 	.word	0x000186a0
 800326c:	001e847f 	.word	0x001e847f
 8003270:	003d08ff 	.word	0x003d08ff
 8003274:	431bde83 	.word	0x431bde83
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	461a      	mov	r2, r3
 8003288:	460b      	mov	r3, r1
 800328a:	817b      	strh	r3, [r7, #10]
 800328c:	4613      	mov	r3, r2
 800328e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7fe ffa0 	bl	80021d4 <HAL_GetTick>
 8003294:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	f040 80e0 	bne.w	8003464 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2319      	movs	r3, #25
 80032aa:	2201      	movs	r2, #1
 80032ac:	4970      	ldr	r1, [pc, #448]	; (8003470 <HAL_I2C_Master_Transmit+0x1f4>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f964 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
 80032bc:	e0d3      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x50>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0cc      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d007      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003300:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	; 0x21
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2210      	movs	r2, #16
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	893a      	ldrh	r2, [r7, #8]
 8003322:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a50      	ldr	r2, [pc, #320]	; (8003474 <HAL_I2C_Master_Transmit+0x1f8>)
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003334:	8979      	ldrh	r1, [r7, #10]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f89c 	bl	8003478 <I2C_MasterRequestWrite>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e08d      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003360:	e066      	b.n	8003430 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6a39      	ldr	r1, [r7, #32]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fa22 	bl	80037b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00d      	beq.n	800338e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003388:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d11b      	bne.n	8003404 <HAL_I2C_Master_Transmit+0x188>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d017      	beq.n	8003404 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	6a39      	ldr	r1, [r7, #32]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fa19 	bl	8003840 <I2C_WaitOnBTFFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2b04      	cmp	r3, #4
 800341a:	d107      	bne.n	800342c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e01a      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d194      	bne.n	8003362 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	00100002 	.word	0x00100002
 8003474:	ffff0000 	.word	0xffff0000

08003478 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607a      	str	r2, [r7, #4]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d006      	beq.n	80034a2 <I2C_MasterRequestWrite+0x2a>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d003      	beq.n	80034a2 <I2C_MasterRequestWrite+0x2a>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a0:	d108      	bne.n	80034b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00b      	b.n	80034cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	2b12      	cmp	r3, #18
 80034ba:	d107      	bne.n	80034cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f84f 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d103      	bne.n	80034fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e035      	b.n	800356c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003508:	d108      	bne.n	800351c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	e01b      	b.n	8003554 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800351c:	897b      	ldrh	r3, [r7, #10]
 800351e:	11db      	asrs	r3, r3, #7
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f063 030f 	orn	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	490e      	ldr	r1, [pc, #56]	; (8003574 <I2C_MasterRequestWrite+0xfc>)
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 f898 	bl	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e010      	b.n	800356c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4907      	ldr	r1, [pc, #28]	; (8003578 <I2C_MasterRequestWrite+0x100>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f888 	bl	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	00010008 	.word	0x00010008
 8003578:	00010002 	.word	0x00010002

0800357c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	e048      	b.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d044      	beq.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fe1d 	bl	80021d4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d139      	bne.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10d      	bne.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	e00c      	b.n	80035ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	43da      	mvns	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e023      	b.n	8003668 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10d      	bne.n	8003646 <I2C_WaitOnFlagUntilTimeout+0xca>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	43da      	mvns	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	e00c      	b.n	8003660 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	43da      	mvns	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	4013      	ands	r3, r2
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	429a      	cmp	r2, r3
 8003664:	d093      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367e:	e071      	b.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368e:	d123      	bne.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e067      	b.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d041      	beq.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e0:	f7fe fd78 	bl	80021d4 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d302      	bcc.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d136      	bne.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d10c      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	43da      	mvns	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4013      	ands	r3, r2
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e00b      	b.n	8003732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e021      	b.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0c1b      	lsrs	r3, r3, #16
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d10c      	bne.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	43da      	mvns	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e00b      	b.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4013      	ands	r3, r2
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f47f af6d 	bne.w	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037bc:	e034      	b.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f886 	bl	80038d0 <I2C_IsAcknowledgeFailed>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e034      	b.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d028      	beq.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d6:	f7fe fcfd 	bl	80021d4 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d302      	bcc.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11d      	bne.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d016      	beq.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e007      	b.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d1c3      	bne.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800384c:	e034      	b.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f83e 	bl	80038d0 <I2C_IsAcknowledgeFailed>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e034      	b.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d028      	beq.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fe fcb5 	bl	80021d4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11d      	bne.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d016      	beq.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e007      	b.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d1c3      	bne.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e6:	d11b      	bne.n	8003920 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0204 	orr.w	r2, r3, #4
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e272      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8087 	beq.w	8003a5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394c:	4b92      	ldr	r3, [pc, #584]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b04      	cmp	r3, #4
 8003956:	d00c      	beq.n	8003972 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003958:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d112      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
 8003964:	4b8c      	ldr	r3, [pc, #560]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d10b      	bne.n	800398a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d06c      	beq.n	8003a58 <HAL_RCC_OscConfig+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d168      	bne.n	8003a58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e24c      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x76>
 8003994:	4b80      	ldr	r3, [pc, #512]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7f      	ldr	r2, [pc, #508]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 800399a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e02e      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x98>
 80039aa:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a7a      	ldr	r2, [pc, #488]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a77      	ldr	r2, [pc, #476]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0xbc>
 80039ce:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a71      	ldr	r2, [pc, #452]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6e      	ldr	r2, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xd4>
 80039e8:	4b6b      	ldr	r3, [pc, #428]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a67      	ldr	r2, [pc, #412]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fbe4 	bl	80021d4 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fe fbe0 	bl	80021d4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e200      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe4>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fbd0 	bl	80021d4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fe fbcc 	bl	80021d4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1ec      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x10c>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d063      	beq.n	8003b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a66:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a72:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x18c>
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x176>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1c0      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4939      	ldr	r1, [pc, #228]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e03a      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCC_OscConfig+0x270>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fb85 	bl	80021d4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fe fb81 	bl	80021d4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1a1      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4927      	ldr	r1, [pc, #156]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <HAL_RCC_OscConfig+0x270>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fe fb64 	bl	80021d4 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe fb60 	bl	80021d4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e180      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d03a      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d019      	beq.n	8003b76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fe fb44 	bl	80021d4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fe fb40 	bl	80021d4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e160      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f000 face 	bl	8004110 <RCC_Delay>
 8003b74:	e01c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_OscConfig+0x274>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fb2a 	bl	80021d4 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b82:	e00f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fe fb26 	bl	80021d4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d908      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e146      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	42420000 	.word	0x42420000
 8003ba0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	4b92      	ldr	r3, [pc, #584]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e9      	bne.n	8003b84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a6 	beq.w	8003d0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc2:	4b8b      	ldr	r3, [pc, #556]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	4b88      	ldr	r3, [pc, #544]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4a87      	ldr	r2, [pc, #540]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	61d3      	str	r3, [r2, #28]
 8003bda:	4b85      	ldr	r3, [pc, #532]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_OscConfig+0x4c8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <HAL_RCC_OscConfig+0x4c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7e      	ldr	r2, [pc, #504]	; (8003df4 <HAL_RCC_OscConfig+0x4c8>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fae7 	bl	80021d4 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fae3 	bl	80021d4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e103      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <HAL_RCC_OscConfig+0x4c8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x312>
 8003c30:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	4a6e      	ldr	r2, [pc, #440]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6213      	str	r3, [r2, #32]
 8003c3c:	e02d      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x334>
 8003c46:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6213      	str	r3, [r2, #32]
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4a66      	ldr	r2, [pc, #408]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	6213      	str	r3, [r2, #32]
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x356>
 8003c68:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4a60      	ldr	r2, [pc, #384]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	6213      	str	r3, [r2, #32]
 8003c74:	4b5e      	ldr	r3, [pc, #376]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	e00b      	b.n	8003c9a <HAL_RCC_OscConfig+0x36e>
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	4a5a      	ldr	r2, [pc, #360]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6213      	str	r3, [r2, #32]
 8003c8e:	4b58      	ldr	r3, [pc, #352]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a57      	ldr	r2, [pc, #348]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 0304 	bic.w	r3, r3, #4
 8003c98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d015      	beq.n	8003cce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe fa97 	bl	80021d4 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	e00a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fe fa93 	bl	80021d4 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e0b1      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	4b4b      	ldr	r3, [pc, #300]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ee      	beq.n	8003caa <HAL_RCC_OscConfig+0x37e>
 8003ccc:	e014      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fe fa81 	bl	80021d4 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fe fa7d 	bl	80021d4 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e09b      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cec:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ee      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d105      	bne.n	8003d0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfe:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8087 	beq.w	8003e22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d061      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d146      	bne.n	8003db6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d28:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_RCC_OscConfig+0x4cc>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fa51 	bl	80021d4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fe fa4d 	bl	80021d4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e06d      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d108      	bne.n	8003d70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4921      	ldr	r1, [pc, #132]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a19      	ldr	r1, [r3, #32]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	430b      	orrs	r3, r1
 8003d82:	491b      	ldr	r1, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x4cc>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fa21 	bl	80021d4 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe fa1d 	bl	80021d4 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e03d      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCC_OscConfig+0x46a>
 8003db4:	e035      	b.n	8003e22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fa0a 	bl	80021d4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe fa06 	bl	80021d4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e026      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x498>
 8003de2:	e01e      	b.n	8003e22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e019      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40007000 	.word	0x40007000
 8003df8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_OscConfig+0x500>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d0      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b67      	ldr	r3, [pc, #412]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4965      	ldr	r1, [pc, #404]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a58      	ldr	r2, [pc, #352]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d040      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d115      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e073      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06b      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f023 0203 	bic.w	r2, r3, #3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4936      	ldr	r1, [pc, #216]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f20:	f7fe f958 	bl	80021d4 <HAL_GetTick>
 8003f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f28:	f7fe f954 	bl	80021d4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e053      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 020c 	and.w	r2, r3, #12
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1eb      	bne.n	8003f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d210      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	490a      	ldr	r1, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	5ccb      	ldrb	r3, [r1, r3]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1cc>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe f8b6 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40022000 	.word	0x40022000
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	08006b30 	.word	0x08006b30
 8003ffc:	20000004 	.word	0x20000004
 8004000:	20000008 	.word	0x20000008

08004004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800401e:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCC_GetSysClockFreq+0x94>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b04      	cmp	r3, #4
 800402c:	d002      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x30>
 800402e:	2b08      	cmp	r3, #8
 8004030:	d003      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x36>
 8004032:	e027      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004036:	613b      	str	r3, [r7, #16]
      break;
 8004038:	e027      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d010      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004052:	4b11      	ldr	r3, [pc, #68]	; (8004098 <HAL_RCC_GetSysClockFreq+0x94>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	0c5b      	lsrs	r3, r3, #17
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004066:	fb03 f202 	mul.w	r2, r3, r2
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e004      	b.n	800407e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004078:	fb02 f303 	mul.w	r3, r2, r3
 800407c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	613b      	str	r3, [r7, #16]
      break;
 8004082:	e002      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetSysClockFreq+0x98>)
 8004086:	613b      	str	r3, [r7, #16]
      break;
 8004088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800408a:	693b      	ldr	r3, [r7, #16]
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	007a1200 	.word	0x007a1200
 80040a0:	08006b48 	.word	0x08006b48
 80040a4:	08006b58 	.word	0x08006b58
 80040a8:	003d0900 	.word	0x003d0900

080040ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b0:	4b02      	ldr	r3, [pc, #8]	; (80040bc <HAL_RCC_GetHCLKFreq+0x10>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	20000004 	.word	0x20000004

080040c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c4:	f7ff fff2 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d6:	5ccb      	ldrb	r3, [r1, r3]
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08006b40 	.word	0x08006b40

080040e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ec:	f7ff ffde 	bl	80040ac <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	; (800410c <HAL_RCC_GetPCLK2Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	08006b40 	.word	0x08006b40

08004110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <RCC_Delay+0x34>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0a      	ldr	r2, [pc, #40]	; (8004148 <RCC_Delay+0x38>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0a5b      	lsrs	r3, r3, #9
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	fb02 f303 	mul.w	r3, r2, r3
 800412a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800412c:	bf00      	nop
  }
  while (Delay --);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e5a      	subs	r2, r3, #1
 8004132:	60fa      	str	r2, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f9      	bne.n	800412c <RCC_Delay+0x1c>
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr
 8004144:	20000004 	.word	0x20000004
 8004148:	10624dd3 	.word	0x10624dd3

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d07d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	61d3      	str	r3, [r2, #28]
 8004184:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004190:	2301      	movs	r3, #1
 8004192:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	4b46      	ldr	r3, [pc, #280]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d118      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a0:	4b43      	ldr	r3, [pc, #268]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a42      	ldr	r2, [pc, #264]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ac:	f7fe f812 	bl	80021d4 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b2:	e008      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fe f80e 	bl	80021d4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e06d      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02e      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d027      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041fa:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004200:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004206:	4a29      	ldr	r2, [pc, #164]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d014      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fd ffdd 	bl	80021d4 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd ffd9 	bl	80021d4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e036      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4917      	ldr	r1, [pc, #92]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	4313      	orrs	r3, r2
 8004250:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4a13      	ldr	r2, [pc, #76]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004262:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	490b      	ldr	r1, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	4313      	orrs	r3, r2
 8004280:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	42420440 	.word	0x42420440

080042b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b10      	cmp	r3, #16
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b10      	cmp	r3, #16
 80042de:	f200 808a 	bhi.w	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d045      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d075      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042ee:	e082      	b.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80042f0:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042f6:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d07b      	beq.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0c9b      	lsrs	r3, r3, #18
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	4a41      	ldr	r2, [pc, #260]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	0c5b      	lsrs	r3, r3, #17
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004326:	5cd3      	ldrb	r3, [r2, r3]
 8004328:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004334:	4a38      	ldr	r2, [pc, #224]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fbb2 f2f3 	udiv	r2, r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e004      	b.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d102      	bne.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	61bb      	str	r3, [r7, #24]
      break;
 8004362:	e04a      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
      break;
 8004372:	e042      	b.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004374:	4b25      	ldr	r3, [pc, #148]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004384:	d108      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	e01f      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a2:	d109      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80043b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e00f      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c2:	d11c      	bne.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80043d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043d4:	61bb      	str	r3, [r7, #24]
      break;
 80043d6:	e012      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80043d8:	e011      	b.n	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043da:	f7ff fe85 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0b9b      	lsrs	r3, r3, #14
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	61bb      	str	r3, [r7, #24]
      break;
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80043fe:	bf00      	nop
    }
  }
  return (frequency);
 8004400:	69bb      	ldr	r3, [r7, #24]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40021000 	.word	0x40021000
 8004410:	08006b5c 	.word	0x08006b5c
 8004414:	08006b6c 	.word	0x08006b6c
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900
 8004420:	aaaaaaab 	.word	0xaaaaaaab

08004424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e04c      	b.n	80044d0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d111      	bne.n	8004466 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f001 f956 	bl	80056fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a1f      	ldr	r2, [pc, #124]	; (80044d8 <HAL_TIM_Base_Init+0xb4>)
 800445c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3304      	adds	r3, #4
 8004476:	4619      	mov	r1, r3
 8004478:	4610      	mov	r0, r2
 800447a:	f000 fe9b 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	08001d31 	.word	0x08001d31

080044dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e03a      	b.n	800456a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_TIM_Base_Start_IT+0x98>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x58>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d009      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x58>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <HAL_TIM_Base_Start_IT+0x9c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x58>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <HAL_TIM_Base_Start_IT+0xa0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d111      	bne.n	8004558 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b06      	cmp	r3, #6
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0201 	orr.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	e007      	b.n	8004568 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e04c      	b.n	800462c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d111      	bne.n	80045c2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f8a8 	bl	80056fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <HAL_TIM_PWM_Init+0xb4>)
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fded 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	08004639 	.word	0x08004639

08004638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_TIM_PWM_Start+0x24>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e022      	b.n	80046b6 <HAL_TIM_PWM_Start+0x6a>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b04      	cmp	r3, #4
 8004674:	d109      	bne.n	800468a <HAL_TIM_PWM_Start+0x3e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b01      	cmp	r3, #1
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	e015      	b.n	80046b6 <HAL_TIM_PWM_Start+0x6a>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x58>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e008      	b.n	80046b6 <HAL_TIM_PWM_Start+0x6a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e05e      	b.n	800477c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0x82>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046cc:	e013      	b.n	80046f6 <HAL_TIM_PWM_Start+0xaa>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0x92>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046dc:	e00b      	b.n	80046f6 <HAL_TIM_PWM_Start+0xaa>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xa2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	e003      	b.n	80046f6 <HAL_TIM_PWM_Start+0xaa>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ffd8 	bl	80056b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_TIM_PWM_Start+0x138>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d107      	bne.n	800471e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a18      	ldr	r2, [pc, #96]	; (8004784 <HAL_TIM_PWM_Start+0x138>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIM_PWM_Start+0xfa>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d009      	beq.n	8004746 <HAL_TIM_PWM_Start+0xfa>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_TIM_PWM_Start+0x13c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIM_PWM_Start+0xfa>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_TIM_PWM_Start+0x140>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d111      	bne.n	800476a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d010      	beq.n	800477a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004768:	e007      	b.n	800477a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800

08004790 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 ff86 	bl	80056b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a29      	ldr	r2, [pc, #164]	; (8004854 <HAL_TIM_PWM_Stop+0xc4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d117      	bne.n	80047e2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <HAL_TIM_PWM_Stop+0x52>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	f240 4344 	movw	r3, #1092	; 0x444
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_TIM_PWM_Stop+0x52>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1a      	ldr	r2, [r3, #32]
 80047e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_TIM_PWM_Stop+0x82>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	f240 4344 	movw	r3, #1092	; 0x444
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d107      	bne.n	8004812 <HAL_TIM_PWM_Stop+0x82>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Stop+0x92>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004820:	e013      	b.n	800484a <HAL_TIM_PWM_Stop+0xba>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Stop+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	e00b      	b.n	800484a <HAL_TIM_PWM_Stop+0xba>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d104      	bne.n	8004842 <HAL_TIM_PWM_Stop+0xb2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004840:	e003      	b.n	800484a <HAL_TIM_PWM_Stop+0xba>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40012c00 	.word	0x40012c00

08004858 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e04c      	b.n	8004906 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d111      	bne.n	800489c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 ff3b 	bl	80056fc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_TIM_OnePulse_Init+0xb8>)
 8004892:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fc80 	bl	80051b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0208 	bic.w	r2, r2, #8
 80048c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6819      	ldr	r1, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	08004915 	.word	0x08004915

08004914 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d128      	bne.n	800498e <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d121      	bne.n	800498e <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0202 	mvn.w	r2, #2
 8004952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
 8004972:	e009      	b.n	8004988 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b04      	cmp	r3, #4
 800499a:	d128      	bne.n	80049ee <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d121      	bne.n	80049ee <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0204 	mvn.w	r2, #4
 80049b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
 80049d2:	e009      	b.n	80049e8 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d128      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d121      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0208 	mvn.w	r2, #8
 8004a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2204      	movs	r2, #4
 8004a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	4798      	blx	r3
 8004a32:	e009      	b.n	8004a48 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d128      	bne.n	8004aae <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d121      	bne.n	8004aae <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0210 	mvn.w	r2, #16
 8004a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2208      	movs	r2, #8
 8004a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
 8004a92:	e009      	b.n	8004aa8 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d110      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d109      	bne.n	8004ade <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f06f 0201 	mvn.w	r2, #1
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d110      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d109      	bne.n	8004b0e <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d110      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d109      	bne.n	8004b3e <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d110      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d109      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f06f 0220 	mvn.w	r2, #32
 8004b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e0ae      	b.n	8004cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	f200 809f 	bhi.w	8004ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004ce5 	.word	0x08004ce5
 8004bb4:	08004ce5 	.word	0x08004ce5
 8004bb8:	08004ce5 	.word	0x08004ce5
 8004bbc:	08004c21 	.word	0x08004c21
 8004bc0:	08004ce5 	.word	0x08004ce5
 8004bc4:	08004ce5 	.word	0x08004ce5
 8004bc8:	08004ce5 	.word	0x08004ce5
 8004bcc:	08004c63 	.word	0x08004c63
 8004bd0:	08004ce5 	.word	0x08004ce5
 8004bd4:	08004ce5 	.word	0x08004ce5
 8004bd8:	08004ce5 	.word	0x08004ce5
 8004bdc:	08004ca3 	.word	0x08004ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fb46 	bl	8005278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0204 	bic.w	r2, r2, #4
 8004c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6999      	ldr	r1, [r3, #24]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	619a      	str	r2, [r3, #24]
      break;
 8004c1e:	e064      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fb8c 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6999      	ldr	r1, [r3, #24]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	021a      	lsls	r2, r3, #8
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	619a      	str	r2, [r3, #24]
      break;
 8004c60:	e043      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fbd5 	bl	8005418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0208 	orr.w	r2, r2, #8
 8004c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0204 	bic.w	r2, r2, #4
 8004c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69d9      	ldr	r1, [r3, #28]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	61da      	str	r2, [r3, #28]
      break;
 8004ca0:	e023      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fc1f 	bl	80054ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69d9      	ldr	r1, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	021a      	lsls	r2, r3, #8
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	61da      	str	r2, [r3, #28]
      break;
 8004ce2:	e002      	b.n	8004cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x1c>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0b4      	b.n	8004e82 <HAL_TIM_ConfigClockSource+0x186>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d50:	d03e      	beq.n	8004dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	f200 8087 	bhi.w	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5e:	f000 8086 	beq.w	8004e6e <HAL_TIM_ConfigClockSource+0x172>
 8004d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d66:	d87f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b70      	cmp	r3, #112	; 0x70
 8004d6a:	d01a      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d6c:	2b70      	cmp	r3, #112	; 0x70
 8004d6e:	d87b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d70:	2b60      	cmp	r3, #96	; 0x60
 8004d72:	d050      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0x11a>
 8004d74:	2b60      	cmp	r3, #96	; 0x60
 8004d76:	d877      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d78:	2b50      	cmp	r3, #80	; 0x50
 8004d7a:	d03c      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d7c:	2b50      	cmp	r3, #80	; 0x50
 8004d7e:	d873      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d058      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x13a>
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d86f      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b30      	cmp	r3, #48	; 0x30
 8004d8a:	d064      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d86b      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d060      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d867      	bhi.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05c      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d05a      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x15a>
 8004da0:	e062      	b.n	8004e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6899      	ldr	r1, [r3, #8]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f000 fc60 	bl	8005676 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	609a      	str	r2, [r3, #8]
      break;
 8004dce:	e04f      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 fc49 	bl	8005676 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df2:	609a      	str	r2, [r3, #8]
      break;
 8004df4:	e03c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 fbc0 	bl	8005588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2150      	movs	r1, #80	; 0x50
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fc17 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e14:	e02c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 fbde 	bl	80055e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2160      	movs	r1, #96	; 0x60
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fc07 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e01c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 fba0 	bl	8005588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fbf7 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e54:	e00c      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 fbee 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8004e66:	e003      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e000      	b.n	8004e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e125      	b.n	80051a8 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	f040 80b9 	bne.w	80050dc <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	2b1a      	cmp	r3, #26
 8004f6e:	f200 80b2 	bhi.w	80050d6 <HAL_TIM_RegisterCallback+0x196>
 8004f72:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <HAL_TIM_RegisterCallback+0x38>)
 8004f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f78:	08004fe5 	.word	0x08004fe5
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004ff5 	.word	0x08004ff5
 8004f84:	08004ffd 	.word	0x08004ffd
 8004f88:	08005005 	.word	0x08005005
 8004f8c:	0800500d 	.word	0x0800500d
 8004f90:	08005015 	.word	0x08005015
 8004f94:	0800501d 	.word	0x0800501d
 8004f98:	08005025 	.word	0x08005025
 8004f9c:	0800502d 	.word	0x0800502d
 8004fa0:	08005035 	.word	0x08005035
 8004fa4:	0800503d 	.word	0x0800503d
 8004fa8:	08005045 	.word	0x08005045
 8004fac:	0800504d 	.word	0x0800504d
 8004fb0:	08005055 	.word	0x08005055
 8004fb4:	0800505f 	.word	0x0800505f
 8004fb8:	08005069 	.word	0x08005069
 8004fbc:	08005073 	.word	0x08005073
 8004fc0:	0800507d 	.word	0x0800507d
 8004fc4:	08005087 	.word	0x08005087
 8004fc8:	08005091 	.word	0x08005091
 8004fcc:	0800509b 	.word	0x0800509b
 8004fd0:	080050a5 	.word	0x080050a5
 8004fd4:	080050af 	.word	0x080050af
 8004fd8:	080050b9 	.word	0x080050b9
 8004fdc:	080050c3 	.word	0x080050c3
 8004fe0:	080050cd 	.word	0x080050cd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004fea:	e0dc      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004ff2:	e0d8      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004ffa:	e0d4      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005002:	e0d0      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800500a:	e0cc      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8005012:	e0c8      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800501a:	e0c4      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8005022:	e0c0      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800502a:	e0bc      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005032:	e0b8      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800503a:	e0b4      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8005042:	e0b0      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800504a:	e0ac      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8005052:	e0a8      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800505c:	e0a3      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8005066:	e09e      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005070:	e099      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800507a:	e094      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8005084:	e08f      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800508e:	e08a      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8005098:	e085      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80050a2:	e080      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80050ac:	e07b      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80050b6:	e076      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80050c0:	e071      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80050ca:	e06c      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80050d4:	e067      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
        break;
 80050da:	e064      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d15c      	bne.n	80051a2 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	2b0d      	cmp	r3, #13
 80050ec:	d856      	bhi.n	800519c <HAL_TIM_RegisterCallback+0x25c>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <HAL_TIM_RegisterCallback+0x1b4>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	08005135 	.word	0x08005135
 80050fc:	0800513d 	.word	0x0800513d
 8005100:	08005145 	.word	0x08005145
 8005104:	0800514d 	.word	0x0800514d
 8005108:	08005155 	.word	0x08005155
 800510c:	0800515d 	.word	0x0800515d
 8005110:	08005165 	.word	0x08005165
 8005114:	0800516d 	.word	0x0800516d
 8005118:	08005175 	.word	0x08005175
 800511c:	0800517d 	.word	0x0800517d
 8005120:	08005185 	.word	0x08005185
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005195 	.word	0x08005195
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005132:	e038      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800513a:	e034      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005142:	e030      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800514a:	e02c      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005152:	e028      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800515a:	e024      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005162:	e020      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800516a:	e01c      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005172:	e018      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800517a:	e014      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005182:	e010      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800518a:	e00c      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005192:	e008      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800519a:	e004      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	75fb      	strb	r3, [r7, #23]
        break;
 80051a0:	e001      	b.n	80051a6 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a29      	ldr	r2, [pc, #164]	; (800526c <TIM_Base_SetConfig+0xb8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x30>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x30>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a26      	ldr	r2, [pc, #152]	; (8005270 <TIM_Base_SetConfig+0xbc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x30>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a25      	ldr	r2, [pc, #148]	; (8005274 <TIM_Base_SetConfig+0xc0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <TIM_Base_SetConfig+0xb8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00b      	beq.n	8005216 <TIM_Base_SetConfig+0x62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d007      	beq.n	8005216 <TIM_Base_SetConfig+0x62>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a19      	ldr	r2, [pc, #100]	; (8005270 <TIM_Base_SetConfig+0xbc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d003      	beq.n	8005216 <TIM_Base_SetConfig+0x62>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a18      	ldr	r2, [pc, #96]	; (8005274 <TIM_Base_SetConfig+0xc0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d108      	bne.n	8005228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <TIM_Base_SetConfig+0xb8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d103      	bne.n	800525c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	615a      	str	r2, [r3, #20]
}
 8005262:	bf00      	nop
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800

08005278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 0201 	bic.w	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0303 	bic.w	r3, r3, #3
 80052ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 0302 	bic.w	r3, r3, #2
 80052c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a1c      	ldr	r2, [pc, #112]	; (8005340 <TIM_OC1_SetConfig+0xc8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d10c      	bne.n	80052ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0308 	bic.w	r3, r3, #8
 80052da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0304 	bic.w	r3, r3, #4
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <TIM_OC1_SetConfig+0xc8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d111      	bne.n	800531a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0320 	bic.w	r3, r3, #32
 800538e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_OC2_SetConfig+0xd0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10d      	bne.n	80053c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a14      	ldr	r2, [pc, #80]	; (8005414 <TIM_OC2_SetConfig+0xd0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d113      	bne.n	80053f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00

08005418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <TIM_OC3_SetConfig+0xd0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10d      	bne.n	8005492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <TIM_OC3_SetConfig+0xd0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d113      	bne.n	80054c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00

080054ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a0f      	ldr	r2, [pc, #60]	; (8005584 <TIM_OC4_SetConfig+0x98>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d109      	bne.n	8005560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	019b      	lsls	r3, r3, #6
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00

08005588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f023 0201 	bic.w	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 030a 	bic.w	r3, r3, #10
 80055c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0210 	bic.w	r2, r3, #16
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	021a      	lsls	r2, r3, #8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	431a      	orrs	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4313      	orrs	r3, r2
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	609a      	str	r2, [r3, #8]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2201      	movs	r2, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1a      	ldr	r2, [r3, #32]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	401a      	ands	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <TIM_ResetCallback+0x7c>)
 8005708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <TIM_ResetCallback+0x80>)
 8005710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1a      	ldr	r2, [pc, #104]	; (8005780 <TIM_ResetCallback+0x84>)
 8005718:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a19      	ldr	r2, [pc, #100]	; (8005784 <TIM_ResetCallback+0x88>)
 8005720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <TIM_ResetCallback+0x8c>)
 8005728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <TIM_ResetCallback+0x90>)
 8005730:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a16      	ldr	r2, [pc, #88]	; (8005790 <TIM_ResetCallback+0x94>)
 8005738:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a15      	ldr	r2, [pc, #84]	; (8005794 <TIM_ResetCallback+0x98>)
 8005740:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <TIM_ResetCallback+0x9c>)
 8005748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a13      	ldr	r2, [pc, #76]	; (800579c <TIM_ResetCallback+0xa0>)
 8005750:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a12      	ldr	r2, [pc, #72]	; (80057a0 <TIM_ResetCallback+0xa4>)
 8005758:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <TIM_ResetCallback+0xa8>)
 8005760:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <TIM_ResetCallback+0xac>)
 8005768:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	08004e8b 	.word	0x08004e8b
 800577c:	08004e9d 	.word	0x08004e9d
 8005780:	08004f09 	.word	0x08004f09
 8005784:	08004f1b 	.word	0x08004f1b
 8005788:	08004ec1 	.word	0x08004ec1
 800578c:	08004ed3 	.word	0x08004ed3
 8005790:	08004eaf 	.word	0x08004eaf
 8005794:	08004ee5 	.word	0x08004ee5
 8005798:	08004ef7 	.word	0x08004ef7
 800579c:	08004f2d 	.word	0x08004f2d
 80057a0:	0800590b 	.word	0x0800590b
 80057a4:	0800591d 	.word	0x0800591d
 80057a8:	0800592f 	.word	0x0800592f

080057ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e046      	b.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a16      	ldr	r2, [pc, #88]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d009      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a10      	ldr	r2, [pc, #64]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10c      	bne.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40000400 	.word	0x40000400
 8005864:	40000800 	.word	0x40000800

08005868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005880:	2302      	movs	r3, #2
 8005882:	e03d      	b.n	8005900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <__errno>:
 8005940:	4b01      	ldr	r3, [pc, #4]	; (8005948 <__errno+0x8>)
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	2600      	movs	r6, #0
 8005950:	4d0c      	ldr	r5, [pc, #48]	; (8005984 <__libc_init_array+0x38>)
 8005952:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	f001 f8d0 	bl	8006b00 <_init>
 8005960:	2600      	movs	r6, #0
 8005962:	4d0a      	ldr	r5, [pc, #40]	; (800598c <__libc_init_array+0x40>)
 8005964:	4c0a      	ldr	r4, [pc, #40]	; (8005990 <__libc_init_array+0x44>)
 8005966:	1b64      	subs	r4, r4, r5
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	08006cb8 	.word	0x08006cb8
 8005988:	08006cb8 	.word	0x08006cb8
 800598c:	08006cb8 	.word	0x08006cb8
 8005990:	08006cbc 	.word	0x08006cbc

08005994 <memcpy>:
 8005994:	440a      	add	r2, r1
 8005996:	4291      	cmp	r1, r2
 8005998:	f100 33ff 	add.w	r3, r0, #4294967295
 800599c:	d100      	bne.n	80059a0 <memcpy+0xc>
 800599e:	4770      	bx	lr
 80059a0:	b510      	push	{r4, lr}
 80059a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a6:	4291      	cmp	r1, r2
 80059a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ac:	d1f9      	bne.n	80059a2 <memcpy+0xe>
 80059ae:	bd10      	pop	{r4, pc}

080059b0 <memset>:
 80059b0:	4603      	mov	r3, r0
 80059b2:	4402      	add	r2, r0
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d100      	bne.n	80059ba <memset+0xa>
 80059b8:	4770      	bx	lr
 80059ba:	f803 1b01 	strb.w	r1, [r3], #1
 80059be:	e7f9      	b.n	80059b4 <memset+0x4>

080059c0 <srand>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <srand+0x44>)
 80059c4:	4604      	mov	r4, r0
 80059c6:	681d      	ldr	r5, [r3, #0]
 80059c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80059ca:	b9b3      	cbnz	r3, 80059fa <srand+0x3a>
 80059cc:	2018      	movs	r0, #24
 80059ce:	f000 f8bf 	bl	8005b50 <malloc>
 80059d2:	4602      	mov	r2, r0
 80059d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80059d6:	b920      	cbnz	r0, 80059e2 <srand+0x22>
 80059d8:	2142      	movs	r1, #66	; 0x42
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <srand+0x48>)
 80059dc:	480b      	ldr	r0, [pc, #44]	; (8005a0c <srand+0x4c>)
 80059de:	f000 f875 	bl	8005acc <__assert_func>
 80059e2:	490b      	ldr	r1, [pc, #44]	; (8005a10 <srand+0x50>)
 80059e4:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <srand+0x54>)
 80059e6:	e9c0 1300 	strd	r1, r3, [r0]
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <srand+0x58>)
 80059ec:	2100      	movs	r1, #0
 80059ee:	6083      	str	r3, [r0, #8]
 80059f0:	230b      	movs	r3, #11
 80059f2:	8183      	strh	r3, [r0, #12]
 80059f4:	2001      	movs	r0, #1
 80059f6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80059fa:	2200      	movs	r2, #0
 80059fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80059fe:	611c      	str	r4, [r3, #16]
 8005a00:	615a      	str	r2, [r3, #20]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20000010 	.word	0x20000010
 8005a08:	08006b74 	.word	0x08006b74
 8005a0c:	08006b8b 	.word	0x08006b8b
 8005a10:	abcd330e 	.word	0xabcd330e
 8005a14:	e66d1234 	.word	0xe66d1234
 8005a18:	0005deec 	.word	0x0005deec

08005a1c <rand>:
 8005a1c:	4b16      	ldr	r3, [pc, #88]	; (8005a78 <rand+0x5c>)
 8005a1e:	b510      	push	{r4, lr}
 8005a20:	681c      	ldr	r4, [r3, #0]
 8005a22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a24:	b9b3      	cbnz	r3, 8005a54 <rand+0x38>
 8005a26:	2018      	movs	r0, #24
 8005a28:	f000 f892 	bl	8005b50 <malloc>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	63a0      	str	r0, [r4, #56]	; 0x38
 8005a30:	b920      	cbnz	r0, 8005a3c <rand+0x20>
 8005a32:	214e      	movs	r1, #78	; 0x4e
 8005a34:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <rand+0x60>)
 8005a36:	4812      	ldr	r0, [pc, #72]	; (8005a80 <rand+0x64>)
 8005a38:	f000 f848 	bl	8005acc <__assert_func>
 8005a3c:	4911      	ldr	r1, [pc, #68]	; (8005a84 <rand+0x68>)
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <rand+0x6c>)
 8005a40:	e9c0 1300 	strd	r1, r3, [r0]
 8005a44:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <rand+0x70>)
 8005a46:	2100      	movs	r1, #0
 8005a48:	6083      	str	r3, [r0, #8]
 8005a4a:	230b      	movs	r3, #11
 8005a4c:	8183      	strh	r3, [r0, #12]
 8005a4e:	2001      	movs	r0, #1
 8005a50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005a54:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005a56:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <rand+0x74>)
 8005a58:	6920      	ldr	r0, [r4, #16]
 8005a5a:	6963      	ldr	r3, [r4, #20]
 8005a5c:	4342      	muls	r2, r0
 8005a5e:	490d      	ldr	r1, [pc, #52]	; (8005a94 <rand+0x78>)
 8005a60:	fb01 2203 	mla	r2, r1, r3, r2
 8005a64:	fba0 0101 	umull	r0, r1, r0, r1
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	eb42 0001 	adc.w	r0, r2, r1
 8005a6e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005a72:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005a76:	bd10      	pop	{r4, pc}
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	08006b74 	.word	0x08006b74
 8005a80:	08006b8b 	.word	0x08006b8b
 8005a84:	abcd330e 	.word	0xabcd330e
 8005a88:	e66d1234 	.word	0xe66d1234
 8005a8c:	0005deec 	.word	0x0005deec
 8005a90:	5851f42d 	.word	0x5851f42d
 8005a94:	4c957f2d 	.word	0x4c957f2d

08005a98 <time>:
 8005a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <time+0x30>)
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4669      	mov	r1, sp
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	f000 f842 	bl	8005b2c <_gettimeofday_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	da05      	bge.n	8005ab8 <time+0x20>
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	e9cd 2300 	strd	r2, r3, [sp]
 8005ab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005abc:	b10c      	cbz	r4, 8005ac2 <time+0x2a>
 8005abe:	e9c4 0100 	strd	r0, r1, [r4]
 8005ac2:	b004      	add	sp, #16
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000010 	.word	0x20000010

08005acc <__assert_func>:
 8005acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ace:	4614      	mov	r4, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <__assert_func+0x2c>)
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68d8      	ldr	r0, [r3, #12]
 8005ada:	b14c      	cbz	r4, 8005af0 <__assert_func+0x24>
 8005adc:	4b07      	ldr	r3, [pc, #28]	; (8005afc <__assert_func+0x30>)
 8005ade:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ae2:	9100      	str	r1, [sp, #0]
 8005ae4:	462b      	mov	r3, r5
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <__assert_func+0x34>)
 8005ae8:	f000 f80e 	bl	8005b08 <fiprintf>
 8005aec:	f000 fcd2 	bl	8006494 <abort>
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <__assert_func+0x38>)
 8005af2:	461c      	mov	r4, r3
 8005af4:	e7f3      	b.n	8005ade <__assert_func+0x12>
 8005af6:	bf00      	nop
 8005af8:	20000010 	.word	0x20000010
 8005afc:	08006be6 	.word	0x08006be6
 8005b00:	08006bf3 	.word	0x08006bf3
 8005b04:	08006c21 	.word	0x08006c21

08005b08 <fiprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	b503      	push	{r0, r1, lr}
 8005b0c:	4601      	mov	r1, r0
 8005b0e:	ab03      	add	r3, sp, #12
 8005b10:	4805      	ldr	r0, [pc, #20]	; (8005b28 <fiprintf+0x20>)
 8005b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b16:	6800      	ldr	r0, [r0, #0]
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	f000 f925 	bl	8005d68 <_vfiprintf_r>
 8005b1e:	b002      	add	sp, #8
 8005b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b24:	b003      	add	sp, #12
 8005b26:	4770      	bx	lr
 8005b28:	20000010 	.word	0x20000010

08005b2c <_gettimeofday_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	2300      	movs	r3, #0
 8005b30:	4d06      	ldr	r5, [pc, #24]	; (8005b4c <_gettimeofday_r+0x20>)
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	f000 ffd9 	bl	8006af0 <_gettimeofday>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d102      	bne.n	8005b48 <_gettimeofday_r+0x1c>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	b103      	cbz	r3, 8005b48 <_gettimeofday_r+0x1c>
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000438 	.word	0x20000438

08005b50 <malloc>:
 8005b50:	4b02      	ldr	r3, [pc, #8]	; (8005b5c <malloc+0xc>)
 8005b52:	4601      	mov	r1, r0
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	f000 b86b 	b.w	8005c30 <_malloc_r>
 8005b5a:	bf00      	nop
 8005b5c:	20000010 	.word	0x20000010

08005b60 <_free_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4605      	mov	r5, r0
 8005b64:	2900      	cmp	r1, #0
 8005b66:	d040      	beq.n	8005bea <_free_r+0x8a>
 8005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6c:	1f0c      	subs	r4, r1, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfb8      	it	lt
 8005b72:	18e4      	addlt	r4, r4, r3
 8005b74:	f000 fec0 	bl	80068f8 <__malloc_lock>
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <_free_r+0x8c>)
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	b933      	cbnz	r3, 8005b8c <_free_r+0x2c>
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	6014      	str	r4, [r2, #0]
 8005b82:	4628      	mov	r0, r5
 8005b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b88:	f000 bebc 	b.w	8006904 <__malloc_unlock>
 8005b8c:	42a3      	cmp	r3, r4
 8005b8e:	d908      	bls.n	8005ba2 <_free_r+0x42>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	1821      	adds	r1, r4, r0
 8005b94:	428b      	cmp	r3, r1
 8005b96:	bf01      	itttt	eq
 8005b98:	6819      	ldreq	r1, [r3, #0]
 8005b9a:	685b      	ldreq	r3, [r3, #4]
 8005b9c:	1809      	addeq	r1, r1, r0
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	e7ed      	b.n	8005b7e <_free_r+0x1e>
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b10b      	cbz	r3, 8005bac <_free_r+0x4c>
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d9fa      	bls.n	8005ba2 <_free_r+0x42>
 8005bac:	6811      	ldr	r1, [r2, #0]
 8005bae:	1850      	adds	r0, r2, r1
 8005bb0:	42a0      	cmp	r0, r4
 8005bb2:	d10b      	bne.n	8005bcc <_free_r+0x6c>
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	4401      	add	r1, r0
 8005bb8:	1850      	adds	r0, r2, r1
 8005bba:	4283      	cmp	r3, r0
 8005bbc:	6011      	str	r1, [r2, #0]
 8005bbe:	d1e0      	bne.n	8005b82 <_free_r+0x22>
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4401      	add	r1, r0
 8005bc6:	6011      	str	r1, [r2, #0]
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	e7da      	b.n	8005b82 <_free_r+0x22>
 8005bcc:	d902      	bls.n	8005bd4 <_free_r+0x74>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	602b      	str	r3, [r5, #0]
 8005bd2:	e7d6      	b.n	8005b82 <_free_r+0x22>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	1821      	adds	r1, r4, r0
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	bf01      	itttt	eq
 8005bdc:	6819      	ldreq	r1, [r3, #0]
 8005bde:	685b      	ldreq	r3, [r3, #4]
 8005be0:	1809      	addeq	r1, r1, r0
 8005be2:	6021      	streq	r1, [r4, #0]
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	6054      	str	r4, [r2, #4]
 8005be8:	e7cb      	b.n	8005b82 <_free_r+0x22>
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000430 	.word	0x20000430

08005bf0 <sbrk_aligned>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4e0e      	ldr	r6, [pc, #56]	; (8005c2c <sbrk_aligned+0x3c>)
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	6831      	ldr	r1, [r6, #0]
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	b911      	cbnz	r1, 8005c02 <sbrk_aligned+0x12>
 8005bfc:	f000 fb7a 	bl	80062f4 <_sbrk_r>
 8005c00:	6030      	str	r0, [r6, #0]
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 fb75 	bl	80062f4 <_sbrk_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	d00a      	beq.n	8005c24 <sbrk_aligned+0x34>
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d007      	beq.n	8005c28 <sbrk_aligned+0x38>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fb6a 	bl	80062f4 <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d101      	bne.n	8005c28 <sbrk_aligned+0x38>
 8005c24:	f04f 34ff 	mov.w	r4, #4294967295
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	20000434 	.word	0x20000434

08005c30 <_malloc_r>:
 8005c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c34:	1ccd      	adds	r5, r1, #3
 8005c36:	f025 0503 	bic.w	r5, r5, #3
 8005c3a:	3508      	adds	r5, #8
 8005c3c:	2d0c      	cmp	r5, #12
 8005c3e:	bf38      	it	cc
 8005c40:	250c      	movcc	r5, #12
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	4607      	mov	r7, r0
 8005c46:	db01      	blt.n	8005c4c <_malloc_r+0x1c>
 8005c48:	42a9      	cmp	r1, r5
 8005c4a:	d905      	bls.n	8005c58 <_malloc_r+0x28>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	2600      	movs	r6, #0
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4630      	mov	r0, r6
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	4e2e      	ldr	r6, [pc, #184]	; (8005d14 <_malloc_r+0xe4>)
 8005c5a:	f000 fe4d 	bl	80068f8 <__malloc_lock>
 8005c5e:	6833      	ldr	r3, [r6, #0]
 8005c60:	461c      	mov	r4, r3
 8005c62:	bb34      	cbnz	r4, 8005cb2 <_malloc_r+0x82>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4638      	mov	r0, r7
 8005c68:	f7ff ffc2 	bl	8005bf0 <sbrk_aligned>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	4604      	mov	r4, r0
 8005c70:	d14d      	bne.n	8005d0e <_malloc_r+0xde>
 8005c72:	6834      	ldr	r4, [r6, #0]
 8005c74:	4626      	mov	r6, r4
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	d140      	bne.n	8005cfc <_malloc_r+0xcc>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4638      	mov	r0, r7
 8005c80:	eb04 0803 	add.w	r8, r4, r3
 8005c84:	f000 fb36 	bl	80062f4 <_sbrk_r>
 8005c88:	4580      	cmp	r8, r0
 8005c8a:	d13a      	bne.n	8005d02 <_malloc_r+0xd2>
 8005c8c:	6821      	ldr	r1, [r4, #0]
 8005c8e:	3503      	adds	r5, #3
 8005c90:	1a6d      	subs	r5, r5, r1
 8005c92:	f025 0503 	bic.w	r5, r5, #3
 8005c96:	3508      	adds	r5, #8
 8005c98:	2d0c      	cmp	r5, #12
 8005c9a:	bf38      	it	cc
 8005c9c:	250c      	movcc	r5, #12
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	f7ff ffa5 	bl	8005bf0 <sbrk_aligned>
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d02b      	beq.n	8005d02 <_malloc_r+0xd2>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	442b      	add	r3, r5
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	e00e      	b.n	8005cd0 <_malloc_r+0xa0>
 8005cb2:	6822      	ldr	r2, [r4, #0]
 8005cb4:	1b52      	subs	r2, r2, r5
 8005cb6:	d41e      	bmi.n	8005cf6 <_malloc_r+0xc6>
 8005cb8:	2a0b      	cmp	r2, #11
 8005cba:	d916      	bls.n	8005cea <_malloc_r+0xba>
 8005cbc:	1961      	adds	r1, r4, r5
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	bf18      	it	ne
 8005cc4:	6059      	strne	r1, [r3, #4]
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	bf08      	it	eq
 8005cca:	6031      	streq	r1, [r6, #0]
 8005ccc:	5162      	str	r2, [r4, r5]
 8005cce:	604b      	str	r3, [r1, #4]
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f104 060b 	add.w	r6, r4, #11
 8005cd6:	f000 fe15 	bl	8006904 <__malloc_unlock>
 8005cda:	f026 0607 	bic.w	r6, r6, #7
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	1af2      	subs	r2, r6, r3
 8005ce2:	d0b6      	beq.n	8005c52 <_malloc_r+0x22>
 8005ce4:	1b9b      	subs	r3, r3, r6
 8005ce6:	50a3      	str	r3, [r4, r2]
 8005ce8:	e7b3      	b.n	8005c52 <_malloc_r+0x22>
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	bf0c      	ite	eq
 8005cf0:	6032      	streq	r2, [r6, #0]
 8005cf2:	605a      	strne	r2, [r3, #4]
 8005cf4:	e7ec      	b.n	8005cd0 <_malloc_r+0xa0>
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	6864      	ldr	r4, [r4, #4]
 8005cfa:	e7b2      	b.n	8005c62 <_malloc_r+0x32>
 8005cfc:	4634      	mov	r4, r6
 8005cfe:	6876      	ldr	r6, [r6, #4]
 8005d00:	e7b9      	b.n	8005c76 <_malloc_r+0x46>
 8005d02:	230c      	movs	r3, #12
 8005d04:	4638      	mov	r0, r7
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	f000 fdfc 	bl	8006904 <__malloc_unlock>
 8005d0c:	e7a1      	b.n	8005c52 <_malloc_r+0x22>
 8005d0e:	6025      	str	r5, [r4, #0]
 8005d10:	e7de      	b.n	8005cd0 <_malloc_r+0xa0>
 8005d12:	bf00      	nop
 8005d14:	20000430 	.word	0x20000430

08005d18 <__sfputc_r>:
 8005d18:	6893      	ldr	r3, [r2, #8]
 8005d1a:	b410      	push	{r4}
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	6093      	str	r3, [r2, #8]
 8005d22:	da07      	bge.n	8005d34 <__sfputc_r+0x1c>
 8005d24:	6994      	ldr	r4, [r2, #24]
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	db01      	blt.n	8005d2e <__sfputc_r+0x16>
 8005d2a:	290a      	cmp	r1, #10
 8005d2c:	d102      	bne.n	8005d34 <__sfputc_r+0x1c>
 8005d2e:	bc10      	pop	{r4}
 8005d30:	f000 baf0 	b.w	8006314 <__swbuf_r>
 8005d34:	6813      	ldr	r3, [r2, #0]
 8005d36:	1c58      	adds	r0, r3, #1
 8005d38:	6010      	str	r0, [r2, #0]
 8005d3a:	7019      	strb	r1, [r3, #0]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	bc10      	pop	{r4}
 8005d40:	4770      	bx	lr

08005d42 <__sfputs_r>:
 8005d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d44:	4606      	mov	r6, r0
 8005d46:	460f      	mov	r7, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	18d5      	adds	r5, r2, r3
 8005d4c:	42ac      	cmp	r4, r5
 8005d4e:	d101      	bne.n	8005d54 <__sfputs_r+0x12>
 8005d50:	2000      	movs	r0, #0
 8005d52:	e007      	b.n	8005d64 <__sfputs_r+0x22>
 8005d54:	463a      	mov	r2, r7
 8005d56:	4630      	mov	r0, r6
 8005d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d5c:	f7ff ffdc 	bl	8005d18 <__sfputc_r>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d1f3      	bne.n	8005d4c <__sfputs_r+0xa>
 8005d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d68 <_vfiprintf_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	4614      	mov	r4, r2
 8005d70:	4698      	mov	r8, r3
 8005d72:	4606      	mov	r6, r0
 8005d74:	b09d      	sub	sp, #116	; 0x74
 8005d76:	b118      	cbz	r0, 8005d80 <_vfiprintf_r+0x18>
 8005d78:	6983      	ldr	r3, [r0, #24]
 8005d7a:	b90b      	cbnz	r3, 8005d80 <_vfiprintf_r+0x18>
 8005d7c:	f000 fca8 	bl	80066d0 <__sinit>
 8005d80:	4b89      	ldr	r3, [pc, #548]	; (8005fa8 <_vfiprintf_r+0x240>)
 8005d82:	429d      	cmp	r5, r3
 8005d84:	d11b      	bne.n	8005dbe <_vfiprintf_r+0x56>
 8005d86:	6875      	ldr	r5, [r6, #4]
 8005d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d8a:	07d9      	lsls	r1, r3, #31
 8005d8c:	d405      	bmi.n	8005d9a <_vfiprintf_r+0x32>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	059a      	lsls	r2, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_vfiprintf_r+0x32>
 8005d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d96:	f000 fd39 	bl	800680c <__retarget_lock_acquire_recursive>
 8005d9a:	89ab      	ldrh	r3, [r5, #12]
 8005d9c:	071b      	lsls	r3, r3, #28
 8005d9e:	d501      	bpl.n	8005da4 <_vfiprintf_r+0x3c>
 8005da0:	692b      	ldr	r3, [r5, #16]
 8005da2:	b9eb      	cbnz	r3, 8005de0 <_vfiprintf_r+0x78>
 8005da4:	4629      	mov	r1, r5
 8005da6:	4630      	mov	r0, r6
 8005da8:	f000 fb06 	bl	80063b8 <__swsetup_r>
 8005dac:	b1c0      	cbz	r0, 8005de0 <_vfiprintf_r+0x78>
 8005dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005db0:	07dc      	lsls	r4, r3, #31
 8005db2:	d50e      	bpl.n	8005dd2 <_vfiprintf_r+0x6a>
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	b01d      	add	sp, #116	; 0x74
 8005dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbe:	4b7b      	ldr	r3, [pc, #492]	; (8005fac <_vfiprintf_r+0x244>)
 8005dc0:	429d      	cmp	r5, r3
 8005dc2:	d101      	bne.n	8005dc8 <_vfiprintf_r+0x60>
 8005dc4:	68b5      	ldr	r5, [r6, #8]
 8005dc6:	e7df      	b.n	8005d88 <_vfiprintf_r+0x20>
 8005dc8:	4b79      	ldr	r3, [pc, #484]	; (8005fb0 <_vfiprintf_r+0x248>)
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	bf08      	it	eq
 8005dce:	68f5      	ldreq	r5, [r6, #12]
 8005dd0:	e7da      	b.n	8005d88 <_vfiprintf_r+0x20>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	0598      	lsls	r0, r3, #22
 8005dd6:	d4ed      	bmi.n	8005db4 <_vfiprintf_r+0x4c>
 8005dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dda:	f000 fd18 	bl	800680e <__retarget_lock_release_recursive>
 8005dde:	e7e9      	b.n	8005db4 <_vfiprintf_r+0x4c>
 8005de0:	2300      	movs	r3, #0
 8005de2:	9309      	str	r3, [sp, #36]	; 0x24
 8005de4:	2320      	movs	r3, #32
 8005de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dea:	2330      	movs	r3, #48	; 0x30
 8005dec:	f04f 0901 	mov.w	r9, #1
 8005df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fb4 <_vfiprintf_r+0x24c>
 8005df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	469a      	mov	sl, r3
 8005e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e04:	b10a      	cbz	r2, 8005e0a <_vfiprintf_r+0xa2>
 8005e06:	2a25      	cmp	r2, #37	; 0x25
 8005e08:	d1f9      	bne.n	8005dfe <_vfiprintf_r+0x96>
 8005e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e0e:	d00b      	beq.n	8005e28 <_vfiprintf_r+0xc0>
 8005e10:	465b      	mov	r3, fp
 8005e12:	4622      	mov	r2, r4
 8005e14:	4629      	mov	r1, r5
 8005e16:	4630      	mov	r0, r6
 8005e18:	f7ff ff93 	bl	8005d42 <__sfputs_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f000 80aa 	beq.w	8005f76 <_vfiprintf_r+0x20e>
 8005e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e24:	445a      	add	r2, fp
 8005e26:	9209      	str	r2, [sp, #36]	; 0x24
 8005e28:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80a2 	beq.w	8005f76 <_vfiprintf_r+0x20e>
 8005e32:	2300      	movs	r3, #0
 8005e34:	f04f 32ff 	mov.w	r2, #4294967295
 8005e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e3c:	f10a 0a01 	add.w	sl, sl, #1
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	9307      	str	r3, [sp, #28]
 8005e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e48:	931a      	str	r3, [sp, #104]	; 0x68
 8005e4a:	4654      	mov	r4, sl
 8005e4c:	2205      	movs	r2, #5
 8005e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e52:	4858      	ldr	r0, [pc, #352]	; (8005fb4 <_vfiprintf_r+0x24c>)
 8005e54:	f000 fd42 	bl	80068dc <memchr>
 8005e58:	9a04      	ldr	r2, [sp, #16]
 8005e5a:	b9d8      	cbnz	r0, 8005e94 <_vfiprintf_r+0x12c>
 8005e5c:	06d1      	lsls	r1, r2, #27
 8005e5e:	bf44      	itt	mi
 8005e60:	2320      	movmi	r3, #32
 8005e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e66:	0713      	lsls	r3, r2, #28
 8005e68:	bf44      	itt	mi
 8005e6a:	232b      	movmi	r3, #43	; 0x2b
 8005e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e70:	f89a 3000 	ldrb.w	r3, [sl]
 8005e74:	2b2a      	cmp	r3, #42	; 0x2a
 8005e76:	d015      	beq.n	8005ea4 <_vfiprintf_r+0x13c>
 8005e78:	4654      	mov	r4, sl
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f04f 0c0a 	mov.w	ip, #10
 8005e80:	9a07      	ldr	r2, [sp, #28]
 8005e82:	4621      	mov	r1, r4
 8005e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e88:	3b30      	subs	r3, #48	; 0x30
 8005e8a:	2b09      	cmp	r3, #9
 8005e8c:	d94e      	bls.n	8005f2c <_vfiprintf_r+0x1c4>
 8005e8e:	b1b0      	cbz	r0, 8005ebe <_vfiprintf_r+0x156>
 8005e90:	9207      	str	r2, [sp, #28]
 8005e92:	e014      	b.n	8005ebe <_vfiprintf_r+0x156>
 8005e94:	eba0 0308 	sub.w	r3, r0, r8
 8005e98:	fa09 f303 	lsl.w	r3, r9, r3
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	46a2      	mov	sl, r4
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	e7d2      	b.n	8005e4a <_vfiprintf_r+0xe2>
 8005ea4:	9b03      	ldr	r3, [sp, #12]
 8005ea6:	1d19      	adds	r1, r3, #4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	9103      	str	r1, [sp, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bfbb      	ittet	lt
 8005eb0:	425b      	neglt	r3, r3
 8005eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb6:	9307      	strge	r3, [sp, #28]
 8005eb8:	9307      	strlt	r3, [sp, #28]
 8005eba:	bfb8      	it	lt
 8005ebc:	9204      	strlt	r2, [sp, #16]
 8005ebe:	7823      	ldrb	r3, [r4, #0]
 8005ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec2:	d10c      	bne.n	8005ede <_vfiprintf_r+0x176>
 8005ec4:	7863      	ldrb	r3, [r4, #1]
 8005ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec8:	d135      	bne.n	8005f36 <_vfiprintf_r+0x1ce>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	3402      	adds	r4, #2
 8005ece:	1d1a      	adds	r2, r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	9203      	str	r2, [sp, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bfb8      	it	lt
 8005ed8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005edc:	9305      	str	r3, [sp, #20]
 8005ede:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005fb8 <_vfiprintf_r+0x250>
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	7821      	ldrb	r1, [r4, #0]
 8005ee8:	f000 fcf8 	bl	80068dc <memchr>
 8005eec:	b140      	cbz	r0, 8005f00 <_vfiprintf_r+0x198>
 8005eee:	2340      	movs	r3, #64	; 0x40
 8005ef0:	eba0 000a 	sub.w	r0, r0, sl
 8005ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ef8:	9b04      	ldr	r3, [sp, #16]
 8005efa:	3401      	adds	r4, #1
 8005efc:	4303      	orrs	r3, r0
 8005efe:	9304      	str	r3, [sp, #16]
 8005f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f04:	2206      	movs	r2, #6
 8005f06:	482d      	ldr	r0, [pc, #180]	; (8005fbc <_vfiprintf_r+0x254>)
 8005f08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f0c:	f000 fce6 	bl	80068dc <memchr>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d03f      	beq.n	8005f94 <_vfiprintf_r+0x22c>
 8005f14:	4b2a      	ldr	r3, [pc, #168]	; (8005fc0 <_vfiprintf_r+0x258>)
 8005f16:	bb1b      	cbnz	r3, 8005f60 <_vfiprintf_r+0x1f8>
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	3307      	adds	r3, #7
 8005f1c:	f023 0307 	bic.w	r3, r3, #7
 8005f20:	3308      	adds	r3, #8
 8005f22:	9303      	str	r3, [sp, #12]
 8005f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f26:	443b      	add	r3, r7
 8005f28:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2a:	e767      	b.n	8005dfc <_vfiprintf_r+0x94>
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	2001      	movs	r0, #1
 8005f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f34:	e7a5      	b.n	8005e82 <_vfiprintf_r+0x11a>
 8005f36:	2300      	movs	r3, #0
 8005f38:	f04f 0c0a 	mov.w	ip, #10
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	3401      	adds	r4, #1
 8005f40:	9305      	str	r3, [sp, #20]
 8005f42:	4620      	mov	r0, r4
 8005f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f48:	3a30      	subs	r2, #48	; 0x30
 8005f4a:	2a09      	cmp	r2, #9
 8005f4c:	d903      	bls.n	8005f56 <_vfiprintf_r+0x1ee>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d0c5      	beq.n	8005ede <_vfiprintf_r+0x176>
 8005f52:	9105      	str	r1, [sp, #20]
 8005f54:	e7c3      	b.n	8005ede <_vfiprintf_r+0x176>
 8005f56:	4604      	mov	r4, r0
 8005f58:	2301      	movs	r3, #1
 8005f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f5e:	e7f0      	b.n	8005f42 <_vfiprintf_r+0x1da>
 8005f60:	ab03      	add	r3, sp, #12
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	462a      	mov	r2, r5
 8005f66:	4630      	mov	r0, r6
 8005f68:	4b16      	ldr	r3, [pc, #88]	; (8005fc4 <_vfiprintf_r+0x25c>)
 8005f6a:	a904      	add	r1, sp, #16
 8005f6c:	f3af 8000 	nop.w
 8005f70:	4607      	mov	r7, r0
 8005f72:	1c78      	adds	r0, r7, #1
 8005f74:	d1d6      	bne.n	8005f24 <_vfiprintf_r+0x1bc>
 8005f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f78:	07d9      	lsls	r1, r3, #31
 8005f7a:	d405      	bmi.n	8005f88 <_vfiprintf_r+0x220>
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	059a      	lsls	r2, r3, #22
 8005f80:	d402      	bmi.n	8005f88 <_vfiprintf_r+0x220>
 8005f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f84:	f000 fc43 	bl	800680e <__retarget_lock_release_recursive>
 8005f88:	89ab      	ldrh	r3, [r5, #12]
 8005f8a:	065b      	lsls	r3, r3, #25
 8005f8c:	f53f af12 	bmi.w	8005db4 <_vfiprintf_r+0x4c>
 8005f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f92:	e711      	b.n	8005db8 <_vfiprintf_r+0x50>
 8005f94:	ab03      	add	r3, sp, #12
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <_vfiprintf_r+0x25c>)
 8005f9e:	a904      	add	r1, sp, #16
 8005fa0:	f000 f882 	bl	80060a8 <_printf_i>
 8005fa4:	e7e4      	b.n	8005f70 <_vfiprintf_r+0x208>
 8005fa6:	bf00      	nop
 8005fa8:	08006c78 	.word	0x08006c78
 8005fac:	08006c98 	.word	0x08006c98
 8005fb0:	08006c58 	.word	0x08006c58
 8005fb4:	08006c22 	.word	0x08006c22
 8005fb8:	08006c28 	.word	0x08006c28
 8005fbc:	08006c2c 	.word	0x08006c2c
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	08005d43 	.word	0x08005d43

08005fc8 <_printf_common>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	4616      	mov	r6, r2
 8005fce:	4699      	mov	r9, r3
 8005fd0:	688a      	ldr	r2, [r1, #8]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	bfb8      	it	lt
 8005fda:	4613      	movlt	r3, r2
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fe8:	b10a      	cbz	r2, 8005fee <_printf_common+0x26>
 8005fea:	3301      	adds	r3, #1
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	0699      	lsls	r1, r3, #26
 8005ff2:	bf42      	ittt	mi
 8005ff4:	6833      	ldrmi	r3, [r6, #0]
 8005ff6:	3302      	addmi	r3, #2
 8005ff8:	6033      	strmi	r3, [r6, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d106      	bne.n	8006010 <_printf_common+0x48>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	6832      	ldr	r2, [r6, #0]
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc28      	bgt.n	8006062 <_printf_common+0x9a>
 8006010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006014:	1e13      	subs	r3, r2, #0
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	2301      	movne	r3, #1
 800601c:	0692      	lsls	r2, r2, #26
 800601e:	d42d      	bmi.n	800607c <_printf_common+0xb4>
 8006020:	4649      	mov	r1, r9
 8006022:	4638      	mov	r0, r7
 8006024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006028:	47c0      	blx	r8
 800602a:	3001      	adds	r0, #1
 800602c:	d020      	beq.n	8006070 <_printf_common+0xa8>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	68e5      	ldr	r5, [r4, #12]
 8006032:	f003 0306 	and.w	r3, r3, #6
 8006036:	2b04      	cmp	r3, #4
 8006038:	bf18      	it	ne
 800603a:	2500      	movne	r5, #0
 800603c:	6832      	ldr	r2, [r6, #0]
 800603e:	f04f 0600 	mov.w	r6, #0
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	bf08      	it	eq
 8006046:	1aad      	subeq	r5, r5, r2
 8006048:	6922      	ldr	r2, [r4, #16]
 800604a:	bf08      	it	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	4293      	cmp	r3, r2
 8006052:	bfc4      	itt	gt
 8006054:	1a9b      	subgt	r3, r3, r2
 8006056:	18ed      	addgt	r5, r5, r3
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xcc>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xac>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4649      	mov	r1, r9
 8006068:	4638      	mov	r0, r7
 800606a:	47c0      	blx	r8
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xb0>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c4      	b.n	8006006 <_printf_common+0x3e>
 800607c:	2030      	movs	r0, #48	; 0x30
 800607e:	18e1      	adds	r1, r4, r3
 8006080:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800608a:	4422      	add	r2, r4
 800608c:	3302      	adds	r3, #2
 800608e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006092:	e7c5      	b.n	8006020 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4649      	mov	r1, r9
 800609a:	4638      	mov	r0, r7
 800609c:	47c0      	blx	r8
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa8>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x92>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	7e0f      	ldrb	r7, [r1, #24]
 80060ae:	4691      	mov	r9, r2
 80060b0:	2f78      	cmp	r7, #120	; 0x78
 80060b2:	4680      	mov	r8, r0
 80060b4:	460c      	mov	r4, r1
 80060b6:	469a      	mov	sl, r3
 80060b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	; 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d9 	beq.w	800627c <_printf_i+0x1d4>
 80060ca:	2f58      	cmp	r7, #88	; 0x58
 80060cc:	f000 80a4 	beq.w	8006218 <_printf_i+0x170>
 80060d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a101      	add	r1, pc, #4	; (adr r1, 80060e8 <_printf_i+0x40>)
 80060e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006263 	.word	0x08006263
 8006118:	08006185 	.word	0x08006185
 800611c:	08006245 	.word	0x08006245
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	08006285 	.word	0x08006285
 800612c:	080060d1 	.word	0x080060d1
 8006130:	08006185 	.word	0x08006185
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	0800624d 	.word	0x0800624d
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	602a      	str	r2, [r5, #0]
 8006148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e0a4      	b.n	800629e <_printf_i+0x1f6>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	6829      	ldr	r1, [r5, #0]
 8006158:	0606      	lsls	r6, r0, #24
 800615a:	f101 0304 	add.w	r3, r1, #4
 800615e:	d50a      	bpl.n	8006176 <_printf_i+0xce>
 8006160:	680e      	ldr	r6, [r1, #0]
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	2e00      	cmp	r6, #0
 8006166:	da03      	bge.n	8006170 <_printf_i+0xc8>
 8006168:	232d      	movs	r3, #45	; 0x2d
 800616a:	4276      	negs	r6, r6
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006170:	230a      	movs	r3, #10
 8006172:	485e      	ldr	r0, [pc, #376]	; (80062ec <_printf_i+0x244>)
 8006174:	e019      	b.n	80061aa <_printf_i+0x102>
 8006176:	680e      	ldr	r6, [r1, #0]
 8006178:	f010 0f40 	tst.w	r0, #64	; 0x40
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	bf18      	it	ne
 8006180:	b236      	sxthne	r6, r6
 8006182:	e7ef      	b.n	8006164 <_printf_i+0xbc>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	1d19      	adds	r1, r3, #4
 800618a:	6029      	str	r1, [r5, #0]
 800618c:	0601      	lsls	r1, r0, #24
 800618e:	d501      	bpl.n	8006194 <_printf_i+0xec>
 8006190:	681e      	ldr	r6, [r3, #0]
 8006192:	e002      	b.n	800619a <_printf_i+0xf2>
 8006194:	0646      	lsls	r6, r0, #25
 8006196:	d5fb      	bpl.n	8006190 <_printf_i+0xe8>
 8006198:	881e      	ldrh	r6, [r3, #0]
 800619a:	2f6f      	cmp	r7, #111	; 0x6f
 800619c:	bf0c      	ite	eq
 800619e:	2308      	moveq	r3, #8
 80061a0:	230a      	movne	r3, #10
 80061a2:	4852      	ldr	r0, [pc, #328]	; (80062ec <_printf_i+0x244>)
 80061a4:	2100      	movs	r1, #0
 80061a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061aa:	6865      	ldr	r5, [r4, #4]
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	bfa8      	it	ge
 80061b0:	6821      	ldrge	r1, [r4, #0]
 80061b2:	60a5      	str	r5, [r4, #8]
 80061b4:	bfa4      	itt	ge
 80061b6:	f021 0104 	bicge.w	r1, r1, #4
 80061ba:	6021      	strge	r1, [r4, #0]
 80061bc:	b90e      	cbnz	r6, 80061c2 <_printf_i+0x11a>
 80061be:	2d00      	cmp	r5, #0
 80061c0:	d04d      	beq.n	800625e <_printf_i+0x1b6>
 80061c2:	4615      	mov	r5, r2
 80061c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80061c8:	fb03 6711 	mls	r7, r3, r1, r6
 80061cc:	5dc7      	ldrb	r7, [r0, r7]
 80061ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061d2:	4637      	mov	r7, r6
 80061d4:	42bb      	cmp	r3, r7
 80061d6:	460e      	mov	r6, r1
 80061d8:	d9f4      	bls.n	80061c4 <_printf_i+0x11c>
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d10b      	bne.n	80061f6 <_printf_i+0x14e>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	07de      	lsls	r6, r3, #31
 80061e2:	d508      	bpl.n	80061f6 <_printf_i+0x14e>
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	6861      	ldr	r1, [r4, #4]
 80061e8:	4299      	cmp	r1, r3
 80061ea:	bfde      	ittt	le
 80061ec:	2330      	movle	r3, #48	; 0x30
 80061ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f6:	1b52      	subs	r2, r2, r5
 80061f8:	6122      	str	r2, [r4, #16]
 80061fa:	464b      	mov	r3, r9
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f8cd a000 	str.w	sl, [sp]
 8006204:	aa03      	add	r2, sp, #12
 8006206:	f7ff fedf 	bl	8005fc8 <_printf_common>
 800620a:	3001      	adds	r0, #1
 800620c:	d14c      	bne.n	80062a8 <_printf_i+0x200>
 800620e:	f04f 30ff 	mov.w	r0, #4294967295
 8006212:	b004      	add	sp, #16
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	4834      	ldr	r0, [pc, #208]	; (80062ec <_printf_i+0x244>)
 800621a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800621e:	6829      	ldr	r1, [r5, #0]
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	f851 6b04 	ldr.w	r6, [r1], #4
 8006226:	6029      	str	r1, [r5, #0]
 8006228:	061d      	lsls	r5, r3, #24
 800622a:	d514      	bpl.n	8006256 <_printf_i+0x1ae>
 800622c:	07df      	lsls	r7, r3, #31
 800622e:	bf44      	itt	mi
 8006230:	f043 0320 	orrmi.w	r3, r3, #32
 8006234:	6023      	strmi	r3, [r4, #0]
 8006236:	b91e      	cbnz	r6, 8006240 <_printf_i+0x198>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	2310      	movs	r3, #16
 8006242:	e7af      	b.n	80061a4 <_printf_i+0xfc>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f043 0320 	orr.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	2378      	movs	r3, #120	; 0x78
 800624e:	4828      	ldr	r0, [pc, #160]	; (80062f0 <_printf_i+0x248>)
 8006250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006254:	e7e3      	b.n	800621e <_printf_i+0x176>
 8006256:	0659      	lsls	r1, r3, #25
 8006258:	bf48      	it	mi
 800625a:	b2b6      	uxthmi	r6, r6
 800625c:	e7e6      	b.n	800622c <_printf_i+0x184>
 800625e:	4615      	mov	r5, r2
 8006260:	e7bb      	b.n	80061da <_printf_i+0x132>
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	6826      	ldr	r6, [r4, #0]
 8006266:	1d18      	adds	r0, r3, #4
 8006268:	6961      	ldr	r1, [r4, #20]
 800626a:	6028      	str	r0, [r5, #0]
 800626c:	0635      	lsls	r5, r6, #24
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	d501      	bpl.n	8006276 <_printf_i+0x1ce>
 8006272:	6019      	str	r1, [r3, #0]
 8006274:	e002      	b.n	800627c <_printf_i+0x1d4>
 8006276:	0670      	lsls	r0, r6, #25
 8006278:	d5fb      	bpl.n	8006272 <_printf_i+0x1ca>
 800627a:	8019      	strh	r1, [r3, #0]
 800627c:	2300      	movs	r3, #0
 800627e:	4615      	mov	r5, r2
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	e7ba      	b.n	80061fa <_printf_i+0x152>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2100      	movs	r1, #0
 8006288:	1d1a      	adds	r2, r3, #4
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	681d      	ldr	r5, [r3, #0]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	4628      	mov	r0, r5
 8006292:	f000 fb23 	bl	80068dc <memchr>
 8006296:	b108      	cbz	r0, 800629c <_printf_i+0x1f4>
 8006298:	1b40      	subs	r0, r0, r5
 800629a:	6060      	str	r0, [r4, #4]
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	6123      	str	r3, [r4, #16]
 80062a0:	2300      	movs	r3, #0
 80062a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a6:	e7a8      	b.n	80061fa <_printf_i+0x152>
 80062a8:	462a      	mov	r2, r5
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	47d0      	blx	sl
 80062b2:	3001      	adds	r0, #1
 80062b4:	d0ab      	beq.n	800620e <_printf_i+0x166>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	079b      	lsls	r3, r3, #30
 80062ba:	d413      	bmi.n	80062e4 <_printf_i+0x23c>
 80062bc:	68e0      	ldr	r0, [r4, #12]
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	4298      	cmp	r0, r3
 80062c2:	bfb8      	it	lt
 80062c4:	4618      	movlt	r0, r3
 80062c6:	e7a4      	b.n	8006212 <_printf_i+0x16a>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4632      	mov	r2, r6
 80062cc:	4649      	mov	r1, r9
 80062ce:	4640      	mov	r0, r8
 80062d0:	47d0      	blx	sl
 80062d2:	3001      	adds	r0, #1
 80062d4:	d09b      	beq.n	800620e <_printf_i+0x166>
 80062d6:	3501      	adds	r5, #1
 80062d8:	68e3      	ldr	r3, [r4, #12]
 80062da:	9903      	ldr	r1, [sp, #12]
 80062dc:	1a5b      	subs	r3, r3, r1
 80062de:	42ab      	cmp	r3, r5
 80062e0:	dcf2      	bgt.n	80062c8 <_printf_i+0x220>
 80062e2:	e7eb      	b.n	80062bc <_printf_i+0x214>
 80062e4:	2500      	movs	r5, #0
 80062e6:	f104 0619 	add.w	r6, r4, #25
 80062ea:	e7f5      	b.n	80062d8 <_printf_i+0x230>
 80062ec:	08006c33 	.word	0x08006c33
 80062f0:	08006c44 	.word	0x08006c44

080062f4 <_sbrk_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	2300      	movs	r3, #0
 80062f8:	4d05      	ldr	r5, [pc, #20]	; (8006310 <_sbrk_r+0x1c>)
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	f7fb feae 	bl	8002060 <_sbrk>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_sbrk_r+0x1a>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_sbrk_r+0x1a>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	20000438 	.word	0x20000438

08006314 <__swbuf_r>:
 8006314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006316:	460e      	mov	r6, r1
 8006318:	4614      	mov	r4, r2
 800631a:	4605      	mov	r5, r0
 800631c:	b118      	cbz	r0, 8006326 <__swbuf_r+0x12>
 800631e:	6983      	ldr	r3, [r0, #24]
 8006320:	b90b      	cbnz	r3, 8006326 <__swbuf_r+0x12>
 8006322:	f000 f9d5 	bl	80066d0 <__sinit>
 8006326:	4b21      	ldr	r3, [pc, #132]	; (80063ac <__swbuf_r+0x98>)
 8006328:	429c      	cmp	r4, r3
 800632a:	d12b      	bne.n	8006384 <__swbuf_r+0x70>
 800632c:	686c      	ldr	r4, [r5, #4]
 800632e:	69a3      	ldr	r3, [r4, #24]
 8006330:	60a3      	str	r3, [r4, #8]
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	071a      	lsls	r2, r3, #28
 8006336:	d52f      	bpl.n	8006398 <__swbuf_r+0x84>
 8006338:	6923      	ldr	r3, [r4, #16]
 800633a:	b36b      	cbz	r3, 8006398 <__swbuf_r+0x84>
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	6820      	ldr	r0, [r4, #0]
 8006340:	b2f6      	uxtb	r6, r6
 8006342:	1ac0      	subs	r0, r0, r3
 8006344:	6963      	ldr	r3, [r4, #20]
 8006346:	4637      	mov	r7, r6
 8006348:	4283      	cmp	r3, r0
 800634a:	dc04      	bgt.n	8006356 <__swbuf_r+0x42>
 800634c:	4621      	mov	r1, r4
 800634e:	4628      	mov	r0, r5
 8006350:	f000 f92a 	bl	80065a8 <_fflush_r>
 8006354:	bb30      	cbnz	r0, 80063a4 <__swbuf_r+0x90>
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	3001      	adds	r0, #1
 800635a:	3b01      	subs	r3, #1
 800635c:	60a3      	str	r3, [r4, #8]
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	701e      	strb	r6, [r3, #0]
 8006366:	6963      	ldr	r3, [r4, #20]
 8006368:	4283      	cmp	r3, r0
 800636a:	d004      	beq.n	8006376 <__swbuf_r+0x62>
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	07db      	lsls	r3, r3, #31
 8006370:	d506      	bpl.n	8006380 <__swbuf_r+0x6c>
 8006372:	2e0a      	cmp	r6, #10
 8006374:	d104      	bne.n	8006380 <__swbuf_r+0x6c>
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f000 f915 	bl	80065a8 <_fflush_r>
 800637e:	b988      	cbnz	r0, 80063a4 <__swbuf_r+0x90>
 8006380:	4638      	mov	r0, r7
 8006382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <__swbuf_r+0x9c>)
 8006386:	429c      	cmp	r4, r3
 8006388:	d101      	bne.n	800638e <__swbuf_r+0x7a>
 800638a:	68ac      	ldr	r4, [r5, #8]
 800638c:	e7cf      	b.n	800632e <__swbuf_r+0x1a>
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <__swbuf_r+0xa0>)
 8006390:	429c      	cmp	r4, r3
 8006392:	bf08      	it	eq
 8006394:	68ec      	ldreq	r4, [r5, #12]
 8006396:	e7ca      	b.n	800632e <__swbuf_r+0x1a>
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f80c 	bl	80063b8 <__swsetup_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d0cb      	beq.n	800633c <__swbuf_r+0x28>
 80063a4:	f04f 37ff 	mov.w	r7, #4294967295
 80063a8:	e7ea      	b.n	8006380 <__swbuf_r+0x6c>
 80063aa:	bf00      	nop
 80063ac:	08006c78 	.word	0x08006c78
 80063b0:	08006c98 	.word	0x08006c98
 80063b4:	08006c58 	.word	0x08006c58

080063b8 <__swsetup_r>:
 80063b8:	4b32      	ldr	r3, [pc, #200]	; (8006484 <__swsetup_r+0xcc>)
 80063ba:	b570      	push	{r4, r5, r6, lr}
 80063bc:	681d      	ldr	r5, [r3, #0]
 80063be:	4606      	mov	r6, r0
 80063c0:	460c      	mov	r4, r1
 80063c2:	b125      	cbz	r5, 80063ce <__swsetup_r+0x16>
 80063c4:	69ab      	ldr	r3, [r5, #24]
 80063c6:	b913      	cbnz	r3, 80063ce <__swsetup_r+0x16>
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 f981 	bl	80066d0 <__sinit>
 80063ce:	4b2e      	ldr	r3, [pc, #184]	; (8006488 <__swsetup_r+0xd0>)
 80063d0:	429c      	cmp	r4, r3
 80063d2:	d10f      	bne.n	80063f4 <__swsetup_r+0x3c>
 80063d4:	686c      	ldr	r4, [r5, #4]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063dc:	0719      	lsls	r1, r3, #28
 80063de:	d42c      	bmi.n	800643a <__swsetup_r+0x82>
 80063e0:	06dd      	lsls	r5, r3, #27
 80063e2:	d411      	bmi.n	8006408 <__swsetup_r+0x50>
 80063e4:	2309      	movs	r3, #9
 80063e6:	6033      	str	r3, [r6, #0]
 80063e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	81a3      	strh	r3, [r4, #12]
 80063f2:	e03e      	b.n	8006472 <__swsetup_r+0xba>
 80063f4:	4b25      	ldr	r3, [pc, #148]	; (800648c <__swsetup_r+0xd4>)
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d101      	bne.n	80063fe <__swsetup_r+0x46>
 80063fa:	68ac      	ldr	r4, [r5, #8]
 80063fc:	e7eb      	b.n	80063d6 <__swsetup_r+0x1e>
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <__swsetup_r+0xd8>)
 8006400:	429c      	cmp	r4, r3
 8006402:	bf08      	it	eq
 8006404:	68ec      	ldreq	r4, [r5, #12]
 8006406:	e7e6      	b.n	80063d6 <__swsetup_r+0x1e>
 8006408:	0758      	lsls	r0, r3, #29
 800640a:	d512      	bpl.n	8006432 <__swsetup_r+0x7a>
 800640c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640e:	b141      	cbz	r1, 8006422 <__swsetup_r+0x6a>
 8006410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006414:	4299      	cmp	r1, r3
 8006416:	d002      	beq.n	800641e <__swsetup_r+0x66>
 8006418:	4630      	mov	r0, r6
 800641a:	f7ff fba1 	bl	8005b60 <_free_r>
 800641e:	2300      	movs	r3, #0
 8006420:	6363      	str	r3, [r4, #52]	; 0x34
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	2300      	movs	r3, #0
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f043 0308 	orr.w	r3, r3, #8
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	b94b      	cbnz	r3, 8006452 <__swsetup_r+0x9a>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d003      	beq.n	8006452 <__swsetup_r+0x9a>
 800644a:	4621      	mov	r1, r4
 800644c:	4630      	mov	r0, r6
 800644e:	f000 fa05 	bl	800685c <__smakebuf_r>
 8006452:	89a0      	ldrh	r0, [r4, #12]
 8006454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006458:	f010 0301 	ands.w	r3, r0, #1
 800645c:	d00a      	beq.n	8006474 <__swsetup_r+0xbc>
 800645e:	2300      	movs	r3, #0
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	6963      	ldr	r3, [r4, #20]
 8006464:	425b      	negs	r3, r3
 8006466:	61a3      	str	r3, [r4, #24]
 8006468:	6923      	ldr	r3, [r4, #16]
 800646a:	b943      	cbnz	r3, 800647e <__swsetup_r+0xc6>
 800646c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006470:	d1ba      	bne.n	80063e8 <__swsetup_r+0x30>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	0781      	lsls	r1, r0, #30
 8006476:	bf58      	it	pl
 8006478:	6963      	ldrpl	r3, [r4, #20]
 800647a:	60a3      	str	r3, [r4, #8]
 800647c:	e7f4      	b.n	8006468 <__swsetup_r+0xb0>
 800647e:	2000      	movs	r0, #0
 8006480:	e7f7      	b.n	8006472 <__swsetup_r+0xba>
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010
 8006488:	08006c78 	.word	0x08006c78
 800648c:	08006c98 	.word	0x08006c98
 8006490:	08006c58 	.word	0x08006c58

08006494 <abort>:
 8006494:	2006      	movs	r0, #6
 8006496:	b508      	push	{r3, lr}
 8006498:	f000 fa62 	bl	8006960 <raise>
 800649c:	2001      	movs	r0, #1
 800649e:	f7fb fd88 	bl	8001fb2 <_exit>
	...

080064a4 <__sflush_r>:
 80064a4:	898a      	ldrh	r2, [r1, #12]
 80064a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a8:	4605      	mov	r5, r0
 80064aa:	0710      	lsls	r0, r2, #28
 80064ac:	460c      	mov	r4, r1
 80064ae:	d457      	bmi.n	8006560 <__sflush_r+0xbc>
 80064b0:	684b      	ldr	r3, [r1, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc04      	bgt.n	80064c0 <__sflush_r+0x1c>
 80064b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dc01      	bgt.n	80064c0 <__sflush_r+0x1c>
 80064bc:	2000      	movs	r0, #0
 80064be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	d0fa      	beq.n	80064bc <__sflush_r+0x18>
 80064c6:	2300      	movs	r3, #0
 80064c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064cc:	682f      	ldr	r7, [r5, #0]
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	d032      	beq.n	8006538 <__sflush_r+0x94>
 80064d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	075a      	lsls	r2, r3, #29
 80064d8:	d505      	bpl.n	80064e6 <__sflush_r+0x42>
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	1ac0      	subs	r0, r0, r3
 80064de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064e0:	b10b      	cbz	r3, 80064e6 <__sflush_r+0x42>
 80064e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064e4:	1ac0      	subs	r0, r0, r3
 80064e6:	2300      	movs	r3, #0
 80064e8:	4602      	mov	r2, r0
 80064ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ec:	4628      	mov	r0, r5
 80064ee:	6a21      	ldr	r1, [r4, #32]
 80064f0:	47b0      	blx	r6
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	89a3      	ldrh	r3, [r4, #12]
 80064f6:	d106      	bne.n	8006506 <__sflush_r+0x62>
 80064f8:	6829      	ldr	r1, [r5, #0]
 80064fa:	291d      	cmp	r1, #29
 80064fc:	d82c      	bhi.n	8006558 <__sflush_r+0xb4>
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <__sflush_r+0x100>)
 8006500:	40ca      	lsrs	r2, r1
 8006502:	07d6      	lsls	r6, r2, #31
 8006504:	d528      	bpl.n	8006558 <__sflush_r+0xb4>
 8006506:	2200      	movs	r2, #0
 8006508:	6062      	str	r2, [r4, #4]
 800650a:	6922      	ldr	r2, [r4, #16]
 800650c:	04d9      	lsls	r1, r3, #19
 800650e:	6022      	str	r2, [r4, #0]
 8006510:	d504      	bpl.n	800651c <__sflush_r+0x78>
 8006512:	1c42      	adds	r2, r0, #1
 8006514:	d101      	bne.n	800651a <__sflush_r+0x76>
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	b903      	cbnz	r3, 800651c <__sflush_r+0x78>
 800651a:	6560      	str	r0, [r4, #84]	; 0x54
 800651c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800651e:	602f      	str	r7, [r5, #0]
 8006520:	2900      	cmp	r1, #0
 8006522:	d0cb      	beq.n	80064bc <__sflush_r+0x18>
 8006524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006528:	4299      	cmp	r1, r3
 800652a:	d002      	beq.n	8006532 <__sflush_r+0x8e>
 800652c:	4628      	mov	r0, r5
 800652e:	f7ff fb17 	bl	8005b60 <_free_r>
 8006532:	2000      	movs	r0, #0
 8006534:	6360      	str	r0, [r4, #52]	; 0x34
 8006536:	e7c2      	b.n	80064be <__sflush_r+0x1a>
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	2301      	movs	r3, #1
 800653c:	4628      	mov	r0, r5
 800653e:	47b0      	blx	r6
 8006540:	1c41      	adds	r1, r0, #1
 8006542:	d1c7      	bne.n	80064d4 <__sflush_r+0x30>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0c4      	beq.n	80064d4 <__sflush_r+0x30>
 800654a:	2b1d      	cmp	r3, #29
 800654c:	d001      	beq.n	8006552 <__sflush_r+0xae>
 800654e:	2b16      	cmp	r3, #22
 8006550:	d101      	bne.n	8006556 <__sflush_r+0xb2>
 8006552:	602f      	str	r7, [r5, #0]
 8006554:	e7b2      	b.n	80064bc <__sflush_r+0x18>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	e7ae      	b.n	80064be <__sflush_r+0x1a>
 8006560:	690f      	ldr	r7, [r1, #16]
 8006562:	2f00      	cmp	r7, #0
 8006564:	d0aa      	beq.n	80064bc <__sflush_r+0x18>
 8006566:	0793      	lsls	r3, r2, #30
 8006568:	bf18      	it	ne
 800656a:	2300      	movne	r3, #0
 800656c:	680e      	ldr	r6, [r1, #0]
 800656e:	bf08      	it	eq
 8006570:	694b      	ldreq	r3, [r1, #20]
 8006572:	1bf6      	subs	r6, r6, r7
 8006574:	600f      	str	r7, [r1, #0]
 8006576:	608b      	str	r3, [r1, #8]
 8006578:	2e00      	cmp	r6, #0
 800657a:	dd9f      	ble.n	80064bc <__sflush_r+0x18>
 800657c:	4633      	mov	r3, r6
 800657e:	463a      	mov	r2, r7
 8006580:	4628      	mov	r0, r5
 8006582:	6a21      	ldr	r1, [r4, #32]
 8006584:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006588:	47e0      	blx	ip
 800658a:	2800      	cmp	r0, #0
 800658c:	dc06      	bgt.n	800659c <__sflush_r+0xf8>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	f04f 30ff 	mov.w	r0, #4294967295
 8006594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006598:	81a3      	strh	r3, [r4, #12]
 800659a:	e790      	b.n	80064be <__sflush_r+0x1a>
 800659c:	4407      	add	r7, r0
 800659e:	1a36      	subs	r6, r6, r0
 80065a0:	e7ea      	b.n	8006578 <__sflush_r+0xd4>
 80065a2:	bf00      	nop
 80065a4:	20400001 	.word	0x20400001

080065a8 <_fflush_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	690b      	ldr	r3, [r1, #16]
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	b913      	cbnz	r3, 80065b8 <_fflush_r+0x10>
 80065b2:	2500      	movs	r5, #0
 80065b4:	4628      	mov	r0, r5
 80065b6:	bd38      	pop	{r3, r4, r5, pc}
 80065b8:	b118      	cbz	r0, 80065c2 <_fflush_r+0x1a>
 80065ba:	6983      	ldr	r3, [r0, #24]
 80065bc:	b90b      	cbnz	r3, 80065c2 <_fflush_r+0x1a>
 80065be:	f000 f887 	bl	80066d0 <__sinit>
 80065c2:	4b14      	ldr	r3, [pc, #80]	; (8006614 <_fflush_r+0x6c>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d11b      	bne.n	8006600 <_fflush_r+0x58>
 80065c8:	686c      	ldr	r4, [r5, #4]
 80065ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0ef      	beq.n	80065b2 <_fflush_r+0xa>
 80065d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065d4:	07d0      	lsls	r0, r2, #31
 80065d6:	d404      	bmi.n	80065e2 <_fflush_r+0x3a>
 80065d8:	0599      	lsls	r1, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_fflush_r+0x3a>
 80065dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065de:	f000 f915 	bl	800680c <__retarget_lock_acquire_recursive>
 80065e2:	4628      	mov	r0, r5
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7ff ff5d 	bl	80064a4 <__sflush_r>
 80065ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ec:	4605      	mov	r5, r0
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d4e0      	bmi.n	80065b4 <_fflush_r+0xc>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	059b      	lsls	r3, r3, #22
 80065f6:	d4dd      	bmi.n	80065b4 <_fflush_r+0xc>
 80065f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065fa:	f000 f908 	bl	800680e <__retarget_lock_release_recursive>
 80065fe:	e7d9      	b.n	80065b4 <_fflush_r+0xc>
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <_fflush_r+0x70>)
 8006602:	429c      	cmp	r4, r3
 8006604:	d101      	bne.n	800660a <_fflush_r+0x62>
 8006606:	68ac      	ldr	r4, [r5, #8]
 8006608:	e7df      	b.n	80065ca <_fflush_r+0x22>
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <_fflush_r+0x74>)
 800660c:	429c      	cmp	r4, r3
 800660e:	bf08      	it	eq
 8006610:	68ec      	ldreq	r4, [r5, #12]
 8006612:	e7da      	b.n	80065ca <_fflush_r+0x22>
 8006614:	08006c78 	.word	0x08006c78
 8006618:	08006c98 	.word	0x08006c98
 800661c:	08006c58 	.word	0x08006c58

08006620 <std>:
 8006620:	2300      	movs	r3, #0
 8006622:	b510      	push	{r4, lr}
 8006624:	4604      	mov	r4, r0
 8006626:	e9c0 3300 	strd	r3, r3, [r0]
 800662a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800662e:	6083      	str	r3, [r0, #8]
 8006630:	8181      	strh	r1, [r0, #12]
 8006632:	6643      	str	r3, [r0, #100]	; 0x64
 8006634:	81c2      	strh	r2, [r0, #14]
 8006636:	6183      	str	r3, [r0, #24]
 8006638:	4619      	mov	r1, r3
 800663a:	2208      	movs	r2, #8
 800663c:	305c      	adds	r0, #92	; 0x5c
 800663e:	f7ff f9b7 	bl	80059b0 <memset>
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <std+0x38>)
 8006644:	6224      	str	r4, [r4, #32]
 8006646:	6263      	str	r3, [r4, #36]	; 0x24
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <std+0x3c>)
 800664a:	62a3      	str	r3, [r4, #40]	; 0x28
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <std+0x40>)
 800664e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <std+0x44>)
 8006652:	6323      	str	r3, [r4, #48]	; 0x30
 8006654:	bd10      	pop	{r4, pc}
 8006656:	bf00      	nop
 8006658:	08006999 	.word	0x08006999
 800665c:	080069bb 	.word	0x080069bb
 8006660:	080069f3 	.word	0x080069f3
 8006664:	08006a17 	.word	0x08006a17

08006668 <_cleanup_r>:
 8006668:	4901      	ldr	r1, [pc, #4]	; (8006670 <_cleanup_r+0x8>)
 800666a:	f000 b8af 	b.w	80067cc <_fwalk_reent>
 800666e:	bf00      	nop
 8006670:	080065a9 	.word	0x080065a9

08006674 <__sfmoreglue>:
 8006674:	2268      	movs	r2, #104	; 0x68
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	1e4d      	subs	r5, r1, #1
 800667a:	4355      	muls	r5, r2
 800667c:	460e      	mov	r6, r1
 800667e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006682:	f7ff fad5 	bl	8005c30 <_malloc_r>
 8006686:	4604      	mov	r4, r0
 8006688:	b140      	cbz	r0, 800669c <__sfmoreglue+0x28>
 800668a:	2100      	movs	r1, #0
 800668c:	e9c0 1600 	strd	r1, r6, [r0]
 8006690:	300c      	adds	r0, #12
 8006692:	60a0      	str	r0, [r4, #8]
 8006694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006698:	f7ff f98a 	bl	80059b0 <memset>
 800669c:	4620      	mov	r0, r4
 800669e:	bd70      	pop	{r4, r5, r6, pc}

080066a0 <__sfp_lock_acquire>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__sfp_lock_acquire+0x8>)
 80066a2:	f000 b8b3 	b.w	800680c <__retarget_lock_acquire_recursive>
 80066a6:	bf00      	nop
 80066a8:	2000043d 	.word	0x2000043d

080066ac <__sfp_lock_release>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sfp_lock_release+0x8>)
 80066ae:	f000 b8ae 	b.w	800680e <__retarget_lock_release_recursive>
 80066b2:	bf00      	nop
 80066b4:	2000043d 	.word	0x2000043d

080066b8 <__sinit_lock_acquire>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sinit_lock_acquire+0x8>)
 80066ba:	f000 b8a7 	b.w	800680c <__retarget_lock_acquire_recursive>
 80066be:	bf00      	nop
 80066c0:	2000043e 	.word	0x2000043e

080066c4 <__sinit_lock_release>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__sinit_lock_release+0x8>)
 80066c6:	f000 b8a2 	b.w	800680e <__retarget_lock_release_recursive>
 80066ca:	bf00      	nop
 80066cc:	2000043e 	.word	0x2000043e

080066d0 <__sinit>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	f7ff fff0 	bl	80066b8 <__sinit_lock_acquire>
 80066d8:	69a3      	ldr	r3, [r4, #24]
 80066da:	b11b      	cbz	r3, 80066e4 <__sinit+0x14>
 80066dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e0:	f7ff bff0 	b.w	80066c4 <__sinit_lock_release>
 80066e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066e8:	6523      	str	r3, [r4, #80]	; 0x50
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <__sinit+0x68>)
 80066ec:	4a13      	ldr	r2, [pc, #76]	; (800673c <__sinit+0x6c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	bf08      	it	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	4620      	mov	r0, r4
 80066fa:	bf08      	it	eq
 80066fc:	61a3      	streq	r3, [r4, #24]
 80066fe:	f000 f81f 	bl	8006740 <__sfp>
 8006702:	6060      	str	r0, [r4, #4]
 8006704:	4620      	mov	r0, r4
 8006706:	f000 f81b 	bl	8006740 <__sfp>
 800670a:	60a0      	str	r0, [r4, #8]
 800670c:	4620      	mov	r0, r4
 800670e:	f000 f817 	bl	8006740 <__sfp>
 8006712:	2200      	movs	r2, #0
 8006714:	2104      	movs	r1, #4
 8006716:	60e0      	str	r0, [r4, #12]
 8006718:	6860      	ldr	r0, [r4, #4]
 800671a:	f7ff ff81 	bl	8006620 <std>
 800671e:	2201      	movs	r2, #1
 8006720:	2109      	movs	r1, #9
 8006722:	68a0      	ldr	r0, [r4, #8]
 8006724:	f7ff ff7c 	bl	8006620 <std>
 8006728:	2202      	movs	r2, #2
 800672a:	2112      	movs	r1, #18
 800672c:	68e0      	ldr	r0, [r4, #12]
 800672e:	f7ff ff77 	bl	8006620 <std>
 8006732:	2301      	movs	r3, #1
 8006734:	61a3      	str	r3, [r4, #24]
 8006736:	e7d1      	b.n	80066dc <__sinit+0xc>
 8006738:	08006b70 	.word	0x08006b70
 800673c:	08006669 	.word	0x08006669

08006740 <__sfp>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	4607      	mov	r7, r0
 8006744:	f7ff ffac 	bl	80066a0 <__sfp_lock_acquire>
 8006748:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <__sfp+0x84>)
 800674a:	681e      	ldr	r6, [r3, #0]
 800674c:	69b3      	ldr	r3, [r6, #24]
 800674e:	b913      	cbnz	r3, 8006756 <__sfp+0x16>
 8006750:	4630      	mov	r0, r6
 8006752:	f7ff ffbd 	bl	80066d0 <__sinit>
 8006756:	3648      	adds	r6, #72	; 0x48
 8006758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800675c:	3b01      	subs	r3, #1
 800675e:	d503      	bpl.n	8006768 <__sfp+0x28>
 8006760:	6833      	ldr	r3, [r6, #0]
 8006762:	b30b      	cbz	r3, 80067a8 <__sfp+0x68>
 8006764:	6836      	ldr	r6, [r6, #0]
 8006766:	e7f7      	b.n	8006758 <__sfp+0x18>
 8006768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800676c:	b9d5      	cbnz	r5, 80067a4 <__sfp+0x64>
 800676e:	4b16      	ldr	r3, [pc, #88]	; (80067c8 <__sfp+0x88>)
 8006770:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006774:	60e3      	str	r3, [r4, #12]
 8006776:	6665      	str	r5, [r4, #100]	; 0x64
 8006778:	f000 f847 	bl	800680a <__retarget_lock_init_recursive>
 800677c:	f7ff ff96 	bl	80066ac <__sfp_lock_release>
 8006780:	2208      	movs	r2, #8
 8006782:	4629      	mov	r1, r5
 8006784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800678c:	6025      	str	r5, [r4, #0]
 800678e:	61a5      	str	r5, [r4, #24]
 8006790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006794:	f7ff f90c 	bl	80059b0 <memset>
 8006798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800679c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067a0:	4620      	mov	r0, r4
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a4:	3468      	adds	r4, #104	; 0x68
 80067a6:	e7d9      	b.n	800675c <__sfp+0x1c>
 80067a8:	2104      	movs	r1, #4
 80067aa:	4638      	mov	r0, r7
 80067ac:	f7ff ff62 	bl	8006674 <__sfmoreglue>
 80067b0:	4604      	mov	r4, r0
 80067b2:	6030      	str	r0, [r6, #0]
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d1d5      	bne.n	8006764 <__sfp+0x24>
 80067b8:	f7ff ff78 	bl	80066ac <__sfp_lock_release>
 80067bc:	230c      	movs	r3, #12
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	e7ee      	b.n	80067a0 <__sfp+0x60>
 80067c2:	bf00      	nop
 80067c4:	08006b70 	.word	0x08006b70
 80067c8:	ffff0001 	.word	0xffff0001

080067cc <_fwalk_reent>:
 80067cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d0:	4606      	mov	r6, r0
 80067d2:	4688      	mov	r8, r1
 80067d4:	2700      	movs	r7, #0
 80067d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067de:	f1b9 0901 	subs.w	r9, r9, #1
 80067e2:	d505      	bpl.n	80067f0 <_fwalk_reent+0x24>
 80067e4:	6824      	ldr	r4, [r4, #0]
 80067e6:	2c00      	cmp	r4, #0
 80067e8:	d1f7      	bne.n	80067da <_fwalk_reent+0xe>
 80067ea:	4638      	mov	r0, r7
 80067ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f0:	89ab      	ldrh	r3, [r5, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d907      	bls.n	8006806 <_fwalk_reent+0x3a>
 80067f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067fa:	3301      	adds	r3, #1
 80067fc:	d003      	beq.n	8006806 <_fwalk_reent+0x3a>
 80067fe:	4629      	mov	r1, r5
 8006800:	4630      	mov	r0, r6
 8006802:	47c0      	blx	r8
 8006804:	4307      	orrs	r7, r0
 8006806:	3568      	adds	r5, #104	; 0x68
 8006808:	e7e9      	b.n	80067de <_fwalk_reent+0x12>

0800680a <__retarget_lock_init_recursive>:
 800680a:	4770      	bx	lr

0800680c <__retarget_lock_acquire_recursive>:
 800680c:	4770      	bx	lr

0800680e <__retarget_lock_release_recursive>:
 800680e:	4770      	bx	lr

08006810 <__swhatbuf_r>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	460e      	mov	r6, r1
 8006814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006818:	4614      	mov	r4, r2
 800681a:	2900      	cmp	r1, #0
 800681c:	461d      	mov	r5, r3
 800681e:	b096      	sub	sp, #88	; 0x58
 8006820:	da08      	bge.n	8006834 <__swhatbuf_r+0x24>
 8006822:	2200      	movs	r2, #0
 8006824:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	061a      	lsls	r2, r3, #24
 800682c:	d410      	bmi.n	8006850 <__swhatbuf_r+0x40>
 800682e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006832:	e00e      	b.n	8006852 <__swhatbuf_r+0x42>
 8006834:	466a      	mov	r2, sp
 8006836:	f000 f915 	bl	8006a64 <_fstat_r>
 800683a:	2800      	cmp	r0, #0
 800683c:	dbf1      	blt.n	8006822 <__swhatbuf_r+0x12>
 800683e:	9a01      	ldr	r2, [sp, #4]
 8006840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006848:	425a      	negs	r2, r3
 800684a:	415a      	adcs	r2, r3
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	e7ee      	b.n	800682e <__swhatbuf_r+0x1e>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	2000      	movs	r0, #0
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	b016      	add	sp, #88	; 0x58
 8006858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800685c <__smakebuf_r>:
 800685c:	898b      	ldrh	r3, [r1, #12]
 800685e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006860:	079d      	lsls	r5, r3, #30
 8006862:	4606      	mov	r6, r0
 8006864:	460c      	mov	r4, r1
 8006866:	d507      	bpl.n	8006878 <__smakebuf_r+0x1c>
 8006868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	6123      	str	r3, [r4, #16]
 8006870:	2301      	movs	r3, #1
 8006872:	6163      	str	r3, [r4, #20]
 8006874:	b002      	add	sp, #8
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	466a      	mov	r2, sp
 800687a:	ab01      	add	r3, sp, #4
 800687c:	f7ff ffc8 	bl	8006810 <__swhatbuf_r>
 8006880:	9900      	ldr	r1, [sp, #0]
 8006882:	4605      	mov	r5, r0
 8006884:	4630      	mov	r0, r6
 8006886:	f7ff f9d3 	bl	8005c30 <_malloc_r>
 800688a:	b948      	cbnz	r0, 80068a0 <__smakebuf_r+0x44>
 800688c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006890:	059a      	lsls	r2, r3, #22
 8006892:	d4ef      	bmi.n	8006874 <__smakebuf_r+0x18>
 8006894:	f023 0303 	bic.w	r3, r3, #3
 8006898:	f043 0302 	orr.w	r3, r3, #2
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	e7e3      	b.n	8006868 <__smakebuf_r+0xc>
 80068a0:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <__smakebuf_r+0x7c>)
 80068a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068a4:	89a3      	ldrh	r3, [r4, #12]
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	9b00      	ldr	r3, [sp, #0]
 80068b0:	6120      	str	r0, [r4, #16]
 80068b2:	6163      	str	r3, [r4, #20]
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	b15b      	cbz	r3, 80068d0 <__smakebuf_r+0x74>
 80068b8:	4630      	mov	r0, r6
 80068ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068be:	f000 f8e3 	bl	8006a88 <_isatty_r>
 80068c2:	b128      	cbz	r0, 80068d0 <__smakebuf_r+0x74>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	81a3      	strh	r3, [r4, #12]
 80068d0:	89a0      	ldrh	r0, [r4, #12]
 80068d2:	4305      	orrs	r5, r0
 80068d4:	81a5      	strh	r5, [r4, #12]
 80068d6:	e7cd      	b.n	8006874 <__smakebuf_r+0x18>
 80068d8:	08006669 	.word	0x08006669

080068dc <memchr>:
 80068dc:	4603      	mov	r3, r0
 80068de:	b510      	push	{r4, lr}
 80068e0:	b2c9      	uxtb	r1, r1
 80068e2:	4402      	add	r2, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	d101      	bne.n	80068ee <memchr+0x12>
 80068ea:	2000      	movs	r0, #0
 80068ec:	e003      	b.n	80068f6 <memchr+0x1a>
 80068ee:	7804      	ldrb	r4, [r0, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	428c      	cmp	r4, r1
 80068f4:	d1f6      	bne.n	80068e4 <memchr+0x8>
 80068f6:	bd10      	pop	{r4, pc}

080068f8 <__malloc_lock>:
 80068f8:	4801      	ldr	r0, [pc, #4]	; (8006900 <__malloc_lock+0x8>)
 80068fa:	f7ff bf87 	b.w	800680c <__retarget_lock_acquire_recursive>
 80068fe:	bf00      	nop
 8006900:	2000043c 	.word	0x2000043c

08006904 <__malloc_unlock>:
 8006904:	4801      	ldr	r0, [pc, #4]	; (800690c <__malloc_unlock+0x8>)
 8006906:	f7ff bf82 	b.w	800680e <__retarget_lock_release_recursive>
 800690a:	bf00      	nop
 800690c:	2000043c 	.word	0x2000043c

08006910 <_raise_r>:
 8006910:	291f      	cmp	r1, #31
 8006912:	b538      	push	{r3, r4, r5, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	460d      	mov	r5, r1
 8006918:	d904      	bls.n	8006924 <_raise_r+0x14>
 800691a:	2316      	movs	r3, #22
 800691c:	6003      	str	r3, [r0, #0]
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006926:	b112      	cbz	r2, 800692e <_raise_r+0x1e>
 8006928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800692c:	b94b      	cbnz	r3, 8006942 <_raise_r+0x32>
 800692e:	4620      	mov	r0, r4
 8006930:	f000 f830 	bl	8006994 <_getpid_r>
 8006934:	462a      	mov	r2, r5
 8006936:	4601      	mov	r1, r0
 8006938:	4620      	mov	r0, r4
 800693a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800693e:	f000 b817 	b.w	8006970 <_kill_r>
 8006942:	2b01      	cmp	r3, #1
 8006944:	d00a      	beq.n	800695c <_raise_r+0x4c>
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	d103      	bne.n	8006952 <_raise_r+0x42>
 800694a:	2316      	movs	r3, #22
 800694c:	6003      	str	r3, [r0, #0]
 800694e:	2001      	movs	r0, #1
 8006950:	e7e7      	b.n	8006922 <_raise_r+0x12>
 8006952:	2400      	movs	r4, #0
 8006954:	4628      	mov	r0, r5
 8006956:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800695a:	4798      	blx	r3
 800695c:	2000      	movs	r0, #0
 800695e:	e7e0      	b.n	8006922 <_raise_r+0x12>

08006960 <raise>:
 8006960:	4b02      	ldr	r3, [pc, #8]	; (800696c <raise+0xc>)
 8006962:	4601      	mov	r1, r0
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	f7ff bfd3 	b.w	8006910 <_raise_r>
 800696a:	bf00      	nop
 800696c:	20000010 	.word	0x20000010

08006970 <_kill_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	2300      	movs	r3, #0
 8006974:	4d06      	ldr	r5, [pc, #24]	; (8006990 <_kill_r+0x20>)
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	4611      	mov	r1, r2
 800697c:	602b      	str	r3, [r5, #0]
 800697e:	f7fb fb08 	bl	8001f92 <_kill>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	d102      	bne.n	800698c <_kill_r+0x1c>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	b103      	cbz	r3, 800698c <_kill_r+0x1c>
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	bd38      	pop	{r3, r4, r5, pc}
 800698e:	bf00      	nop
 8006990:	20000438 	.word	0x20000438

08006994 <_getpid_r>:
 8006994:	f7fb baf6 	b.w	8001f84 <_getpid>

08006998 <__sread>:
 8006998:	b510      	push	{r4, lr}
 800699a:	460c      	mov	r4, r1
 800699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a0:	f000 f894 	bl	8006acc <_read_r>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	bfab      	itete	ge
 80069a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069aa:	89a3      	ldrhlt	r3, [r4, #12]
 80069ac:	181b      	addge	r3, r3, r0
 80069ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069b2:	bfac      	ite	ge
 80069b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80069b6:	81a3      	strhlt	r3, [r4, #12]
 80069b8:	bd10      	pop	{r4, pc}

080069ba <__swrite>:
 80069ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069be:	461f      	mov	r7, r3
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	4605      	mov	r5, r0
 80069c4:	05db      	lsls	r3, r3, #23
 80069c6:	460c      	mov	r4, r1
 80069c8:	4616      	mov	r6, r2
 80069ca:	d505      	bpl.n	80069d8 <__swrite+0x1e>
 80069cc:	2302      	movs	r3, #2
 80069ce:	2200      	movs	r2, #0
 80069d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d4:	f000 f868 	bl	8006aa8 <_lseek_r>
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	4632      	mov	r2, r6
 80069dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e0:	81a3      	strh	r3, [r4, #12]
 80069e2:	4628      	mov	r0, r5
 80069e4:	463b      	mov	r3, r7
 80069e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	f000 b817 	b.w	8006a20 <_write_r>

080069f2 <__sseek>:
 80069f2:	b510      	push	{r4, lr}
 80069f4:	460c      	mov	r4, r1
 80069f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fa:	f000 f855 	bl	8006aa8 <_lseek_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	bf15      	itete	ne
 8006a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a0e:	81a3      	strheq	r3, [r4, #12]
 8006a10:	bf18      	it	ne
 8006a12:	81a3      	strhne	r3, [r4, #12]
 8006a14:	bd10      	pop	{r4, pc}

08006a16 <__sclose>:
 8006a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1a:	f000 b813 	b.w	8006a44 <_close_r>
	...

08006a20 <_write_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4d05      	ldr	r5, [pc, #20]	; (8006a40 <_write_r+0x20>)
 8006a2c:	602a      	str	r2, [r5, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f7fa fd66 	bl	8001500 <_write>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_write_r+0x1e>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_write_r+0x1e>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000438 	.word	0x20000438

08006a44 <_close_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4d05      	ldr	r5, [pc, #20]	; (8006a60 <_close_r+0x1c>)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fb fad6 	bl	8002000 <_close>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_close_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_close_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000438 	.word	0x20000438

08006a64 <_fstat_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	2300      	movs	r3, #0
 8006a68:	4d06      	ldr	r5, [pc, #24]	; (8006a84 <_fstat_r+0x20>)
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	f7fb fad0 	bl	8002016 <_fstat>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d102      	bne.n	8006a80 <_fstat_r+0x1c>
 8006a7a:	682b      	ldr	r3, [r5, #0]
 8006a7c:	b103      	cbz	r3, 8006a80 <_fstat_r+0x1c>
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	bd38      	pop	{r3, r4, r5, pc}
 8006a82:	bf00      	nop
 8006a84:	20000438 	.word	0x20000438

08006a88 <_isatty_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4d05      	ldr	r5, [pc, #20]	; (8006aa4 <_isatty_r+0x1c>)
 8006a8e:	4604      	mov	r4, r0
 8006a90:	4608      	mov	r0, r1
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	f7fb face 	bl	8002034 <_isatty>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_isatty_r+0x1a>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_isatty_r+0x1a>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	20000438 	.word	0x20000438

08006aa8 <_lseek_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4604      	mov	r4, r0
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4d05      	ldr	r5, [pc, #20]	; (8006ac8 <_lseek_r+0x20>)
 8006ab4:	602a      	str	r2, [r5, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f7fb fac6 	bl	8002048 <_lseek>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_lseek_r+0x1e>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_lseek_r+0x1e>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	20000438 	.word	0x20000438

08006acc <_read_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4d05      	ldr	r5, [pc, #20]	; (8006aec <_read_r+0x20>)
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f7fb fa73 	bl	8001fc6 <_read>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_read_r+0x1e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_read_r+0x1e>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20000438 	.word	0x20000438

08006af0 <_gettimeofday>:
 8006af0:	2258      	movs	r2, #88	; 0x58
 8006af2:	4b02      	ldr	r3, [pc, #8]	; (8006afc <_gettimeofday+0xc>)
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	4770      	bx	lr
 8006afc:	20000438 	.word	0x20000438

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
