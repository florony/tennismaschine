
Tennismaschine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000691c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc8  08006bc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006bc8  08006bc8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bc8  08006bc8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000074  08006c44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006c44  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113fb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b4  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00034d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0f6  00000000  00000000  00035be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001322f  00000000  00000000  0004fcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009226c  00000000  00000000  00062f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  000f51c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000f9dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f9e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a10 	.word	0x08006a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006a10 	.word	0x08006a10

0800014c <_writeCmd>:
		HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData,2, HAL_MAX_DELAY);
	}
}

// sends given command per i2c
void _writeCmd(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, &cmd, 1, HAL_MAX_DELAY);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <_writeCmd+0x2c>)
 8000158:	881b      	ldrh	r3, [r3, #0]
 800015a:	005b      	lsls	r3, r3, #1
 800015c:	b299      	uxth	r1, r3
 800015e:	1dfa      	adds	r2, r7, #7
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	9300      	str	r3, [sp, #0]
 8000166:	2301      	movs	r3, #1
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <_writeCmd+0x30>)
 800016a:	f002 ffaf 	bl	80030cc <HAL_I2C_Master_Transmit>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000096 	.word	0x20000096
 800017c:	200000ec 	.word	0x200000ec

08000180 <_writePos>:

// sends value (mask) for specific position per i2c, if different from cached value
void _writePos(uint8_t pos, uint8_t mask) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b086      	sub	sp, #24
 8000184:	af02      	add	r7, sp, #8
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	if (_displayCache[pos] == mask)
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a11      	ldr	r2, [pc, #68]	; (80001d8 <_writePos+0x58>)
 8000194:	5cd3      	ldrb	r3, [r2, r3]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	79ba      	ldrb	r2, [r7, #6]
 800019a:	429a      	cmp	r2, r3
 800019c:	d017      	beq.n	80001ce <_writePos+0x4e>
		return;

	uint8_t pData[2];
	pData[0] = pos * 2;
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	733b      	strb	r3, [r7, #12]
	pData[1] = mask;
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&HT16K33_I2C_PORT, disp_addr << 1, pData, 2, HAL_MAX_DELAY);
 80001aa:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <_writePos+0x5c>)
 80001ac:	881b      	ldrh	r3, [r3, #0]
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	b299      	uxth	r1, r3
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2302      	movs	r3, #2
 80001be:	4808      	ldr	r0, [pc, #32]	; (80001e0 <_writePos+0x60>)
 80001c0:	f002 ff84 	bl	80030cc <HAL_I2C_Master_Transmit>
	_displayCache[pos] = mask;	// update value in cache
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4904      	ldr	r1, [pc, #16]	; (80001d8 <_writePos+0x58>)
 80001c8:	79ba      	ldrb	r2, [r7, #6]
 80001ca:	54ca      	strb	r2, [r1, r3]
 80001cc:	e000      	b.n	80001d0 <_writePos+0x50>
		return;
 80001ce:	bf00      	nop
}
 80001d0:	3710      	adds	r7, #16
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	20000090 	.word	0x20000090
 80001dc:	20000096 	.word	0x20000096
 80001e0:	200000ec 	.word	0x200000ec

080001e4 <seg7_init>:

//##### END: I2C-WRITE-FUNCTIONS #####
//####################################
//##### BEGIN: CONTROL-FUNCTIONS #####

void seg7_init(uint16_t disp_addr) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
	seg7_reset(disp_addr);
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f806 	bl	8000202 <seg7_reset>
	seg7_displayOn();
 80001f6:	f000 f835 	bl	8000264 <seg7_displayOn>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <seg7_reset>:

void seg7_reset(uint16_t disp_addr) {
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]
	seg7_displayClear(disp_addr);
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f896 	bl	8000340 <seg7_displayClear>
	seg7_clearCache();
 8000214:	f000 f80e 	bl	8000234 <seg7_clearCache>
	seg7_setBlinkRate(0);
 8000218:	2000      	movs	r0, #0
 800021a:	f000 f83f 	bl	800029c <seg7_setBlinkRate>
	seg7_setDigits(4);
 800021e:	2004      	movs	r0, #4
 8000220:	f000 f87a 	bl	8000318 <seg7_setDigits>
	seg7_setBrightness(15);
 8000224:	200f      	movs	r0, #15
 8000226:	f000 f851 	bl	80002cc <seg7_setBrightness>
}
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <seg7_clearCache>:

void seg7_clearCache() {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 5; i++) {
 800023a:	2300      	movs	r3, #0
 800023c:	71fb      	strb	r3, [r7, #7]
 800023e:	e006      	b.n	800024e <seg7_clearCache+0x1a>
		_displayCache[i] = SEG7_NONE;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <seg7_clearCache+0x2c>)
 8000244:	2163      	movs	r1, #99	; 0x63
 8000246:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++) {
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	3301      	adds	r3, #1
 800024c:	71fb      	strb	r3, [r7, #7]
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b04      	cmp	r3, #4
 8000252:	d9f5      	bls.n	8000240 <seg7_clearCache+0xc>
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000090 	.word	0x20000090

08000264 <seg7_displayOn>:

void seg7_refresh() {
	_refresh();
}

void seg7_displayOn() {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_ON);
 8000268:	2021      	movs	r0, #33	; 0x21
 800026a:	f7ff ff6f 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_DISPLAYON);
 800026e:	2081      	movs	r0, #129	; 0x81
 8000270:	f7ff ff6c 	bl	800014c <_writeCmd>
	seg7_setBrightness(_bright);
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <seg7_displayOn+0x20>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f826 	bl	80002cc <seg7_setBrightness>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000001 	.word	0x20000001

08000288 <seg7_displayOff>:

void seg7_displayOff() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	_writeCmd(HT16K33_DISPLAYOFF);
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	f7ff ff5d 	bl	800014c <_writeCmd>
	_writeCmd(HT16K33_STANDBY);
 8000292:	2020      	movs	r0, #32
 8000294:	f7ff ff5a 	bl	800014c <_writeCmd>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <seg7_setBlinkRate>:

void seg7_setBlinkRate(uint8_t value) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	if (value > 0x03) {
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d901      	bls.n	80002b0 <seg7_setBlinkRate+0x14>
		value = 0x00;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]
	}

	_writeCmd(HT16K33_BLINKOFF | (value << 1));
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	f063 037e 	orn	r3, r3, #126	; 0x7e
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff44 	bl	800014c <_writeCmd>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <seg7_setBrightness>:

void seg7_setBrightness(uint8_t value) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	if (value == _bright)
 80002d6:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <seg7_setBrightness+0x48>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d014      	beq.n	800030c <seg7_setBrightness+0x40>
		return;

	_bright = value;
 80002e2:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <seg7_setBrightness+0x48>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	7013      	strb	r3, [r2, #0]

	if (_bright > 0x0F)
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <seg7_setBrightness+0x48>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b0f      	cmp	r3, #15
 80002f0:	d902      	bls.n	80002f8 <seg7_setBrightness+0x2c>
		_bright = 0x0F;
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <seg7_setBrightness+0x48>)
 80002f4:	220f      	movs	r2, #15
 80002f6:	701a      	strb	r2, [r3, #0]

	_writeCmd(HT16K33_BRIGHTNESS | _bright);
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <seg7_setBrightness+0x48>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f063 031f 	orn	r3, r3, #31
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff21 	bl	800014c <_writeCmd>
 800030a:	e000      	b.n	800030e <seg7_setBrightness+0x42>
		return;
 800030c:	bf00      	nop
}
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000001 	.word	0x20000001

08000318 <seg7_setDigits>:

void seg7_setDigits(uint8_t value) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	_digits = (value > 4) ? 4 : value;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b04      	cmp	r3, #4
 8000326:	bf28      	it	cs
 8000328:	2304      	movcs	r3, #4
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <seg7_setDigits+0x24>)
 800032e:	701a      	strb	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000000 	.word	0x20000000

08000340 <seg7_displayClear>:

//#####  END: CONTROL-FUNCTIONS  #####
//####################################
//##### BEGIN: DISPLAY-FUNCTIONS #####

void seg7_displayClear(uint16_t disp_addr) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	uint8_t arr[4] = { SEG7_SPACE, SEG7_SPACE, SEG7_SPACE, SEG7_SPACE };
 800034a:	f04f 3310 	mov.w	r3, #269488144	; 0x10101010
 800034e:	60fb      	str	r3, [r7, #12]
	seg7_display(arr, disp_addr);
 8000350:	88fa      	ldrh	r2, [r7, #6]
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4611      	mov	r1, r2
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8a1 	bl	80004a0 <seg7_display>
	seg7_displayColon(0);
 800035e:	2000      	movs	r0, #0
 8000360:	f000 f8f2 	bl	8000548 <seg7_displayColon>
}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <seg7_displayInt>:

int seg7_displayInt(int n, uint16_t disp_addr) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b088      	sub	sp, #32
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	807b      	strh	r3, [r7, #2]
	int inRange = ((-1000 < n) && (n < 10000));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800037e:	dd06      	ble.n	800038e <seg7_displayInt+0x22>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f242 720f 	movw	r2, #9999	; 0x270f
 8000386:	4293      	cmp	r3, r2
 8000388:	dc01      	bgt.n	800038e <seg7_displayInt+0x22>
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <seg7_displayInt+0x24>
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
	int neg = (n < 0);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	0fdb      	lsrs	r3, r3, #31
 8000396:	b2db      	uxtb	r3, r3
 8000398:	617b      	str	r3, [r7, #20]

	uint8_t arr[4], h, l;

	if (neg)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <seg7_displayInt+0x3a>
		n = -n;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	425b      	negs	r3, r3
 80003a4:	607b      	str	r3, [r7, #4]

	h = n / 100;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a3a      	ldr	r2, [pc, #232]	; (8000494 <seg7_displayInt+0x128>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1152      	asrs	r2, r2, #5
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	74fb      	strb	r3, [r7, #19]
	l = n - h * 100;
 80003b6:	7cfb      	ldrb	r3, [r7, #19]
 80003b8:	461a      	mov	r2, r3
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	441a      	add	r2, r3
 80003be:	00d2      	lsls	r2, r2, #3
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	74bb      	strb	r3, [r7, #18]
	arr[0] = h / 10;
 80003ce:	7cfb      	ldrb	r3, [r7, #19]
 80003d0:	4a31      	ldr	r2, [pc, #196]	; (8000498 <seg7_displayInt+0x12c>)
 80003d2:	fba2 2303 	umull	r2, r3, r2, r3
 80003d6:	08db      	lsrs	r3, r3, #3
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	733b      	strb	r3, [r7, #12]
	arr[1] = h - arr[0] * 10;
 80003dc:	7b3b      	ldrb	r3, [r7, #12]
 80003de:	461a      	mov	r2, r3
 80003e0:	0152      	lsls	r2, r2, #5
 80003e2:	1ad2      	subs	r2, r2, r3
 80003e4:	0092      	lsls	r2, r2, #2
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	7cfb      	ldrb	r3, [r7, #19]
 80003ee:	4413      	add	r3, r2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	737b      	strb	r3, [r7, #13]
	arr[2] = l / 10;
 80003f4:	7cbb      	ldrb	r3, [r7, #18]
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <seg7_displayInt+0x12c>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	73bb      	strb	r3, [r7, #14]
	arr[3] = l - arr[2] * 10;
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	461a      	mov	r2, r3
 8000406:	0152      	lsls	r2, r2, #5
 8000408:	1ad2      	subs	r2, r2, r3
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	b2da      	uxtb	r2, r3
 8000412:	7cbb      	ldrb	r3, [r7, #18]
 8000414:	4413      	add	r3, r2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	73fb      	strb	r3, [r7, #15]

	if (neg) {
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d02d      	beq.n	800047c <seg7_displayInt+0x110>
		if (_digits >= 3) {
 8000420:	4b1e      	ldr	r3, [pc, #120]	; (800049c <seg7_displayInt+0x130>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b02      	cmp	r3, #2
 8000428:	d902      	bls.n	8000430 <seg7_displayInt+0xc4>
			arr[0] = SEG7_MINUS;
 800042a:	2311      	movs	r3, #17
 800042c:	733b      	strb	r3, [r7, #12]
 800042e:	e025      	b.n	800047c <seg7_displayInt+0x110>
		} else {
			int i = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < (4 - _digits); i++) {
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
 8000438:	e00f      	b.n	800045a <seg7_displayInt+0xee>
				if (arr[i] != 0) {
 800043a:	f107 020c 	add.w	r2, r7, #12
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d111      	bne.n	800046c <seg7_displayInt+0x100>
					break;
				}
				arr[i] = SEG7_SPACE;
 8000448:	f107 020c 	add.w	r2, r7, #12
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	4413      	add	r3, r2
 8000450:	2210      	movs	r2, #16
 8000452:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < (4 - _digits); i++) {
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	3301      	adds	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	4b10      	ldr	r3, [pc, #64]	; (800049c <seg7_displayInt+0x130>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	f1c3 0304 	rsb	r3, r3, #4
 8000464:	69fa      	ldr	r2, [r7, #28]
 8000466:	429a      	cmp	r2, r3
 8000468:	dbe7      	blt.n	800043a <seg7_displayInt+0xce>
 800046a:	e000      	b.n	800046e <seg7_displayInt+0x102>
					break;
 800046c:	bf00      	nop
			}
			arr[i - 1] = SEG7_MINUS;
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3b01      	subs	r3, #1
 8000472:	3320      	adds	r3, #32
 8000474:	443b      	add	r3, r7
 8000476:	2211      	movs	r2, #17
 8000478:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
	}

	seg7_display(arr, disp_addr);
 800047c:	887a      	ldrh	r2, [r7, #2]
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	4611      	mov	r1, r2
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f80b 	bl	80004a0 <seg7_display>

	return inRange;
 800048a:	69bb      	ldr	r3, [r7, #24]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	51eb851f 	.word	0x51eb851f
 8000498:	cccccccd 	.word	0xcccccccd
 800049c:	20000000 	.word	0x20000000

080004a0 <seg7_display>:
	seg7_displayColon(colon);

	return inRange;
}

void seg7_display(uint8_t *array, uint16_t disp_addr) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	460b      	mov	r3, r1
 80004aa:	807b      	strh	r3, [r7, #2]
	seg7_setDispAddr(disp_addr);
 80004ac:	887b      	ldrh	r3, [r7, #2]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f85e 	bl	8000570 <seg7_setDispAddr>

	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	e00d      	b.n	80004d6 <seg7_display+0x36>
		if (array[i] != 0) {
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d110      	bne.n	80004e8 <seg7_display+0x48>
			break;
		}
		array[i] = SEG7_SPACE;
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	2210      	movs	r2, #16
 80004ce:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < (4 - _digits); i++) {
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	3301      	adds	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
 80004d6:	7bfa      	ldrb	r2, [r7, #15]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <seg7_display+0xa0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f1c3 0304 	rsb	r3, r3, #4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbe9      	blt.n	80004ba <seg7_display+0x1a>
 80004e6:	e000      	b.n	80004ea <seg7_display+0x4a>
			break;
 80004e8:	bf00      	nop
	}

	_writePos(0, charmap[array[0]]);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <seg7_display+0xa4>)
 80004f2:	5c9b      	ldrb	r3, [r3, r2]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fe42 	bl	8000180 <_writePos>
	_writePos(1, charmap[array[1]]);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3301      	adds	r3, #1
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <seg7_display+0xa4>)
 8000506:	5c9b      	ldrb	r3, [r3, r2]
 8000508:	4619      	mov	r1, r3
 800050a:	2001      	movs	r0, #1
 800050c:	f7ff fe38 	bl	8000180 <_writePos>
	_writePos(3, charmap[array[2]]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <seg7_display+0xa4>)
 800051a:	5c9b      	ldrb	r3, [r3, r2]
 800051c:	4619      	mov	r1, r3
 800051e:	2003      	movs	r0, #3
 8000520:	f7ff fe2e 	bl	8000180 <_writePos>
	_writePos(4, charmap[array[3]]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3303      	adds	r3, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <seg7_display+0xa4>)
 800052e:	5c9b      	ldrb	r3, [r3, r2]
 8000530:	4619      	mov	r1, r3
 8000532:	2004      	movs	r0, #4
 8000534:	f7ff fe24 	bl	8000180 <_writePos>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	08006a28 	.word	0x08006a28

08000548 <seg7_displayColon>:
	_writePosPoint(1, charmap[array[1]], point == 1);
	_writePosPoint(3, charmap[array[2]], point == 2);
	_writePosPoint(4, charmap[array[3]], point == 3);
}

void seg7_displayColon(uint8_t on) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	_writePos(2, on ? 2 : 0);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <seg7_displayColon+0x14>
 8000558:	2302      	movs	r3, #2
 800055a:	e000      	b.n	800055e <seg7_displayColon+0x16>
 800055c:	2300      	movs	r3, #0
 800055e:	4619      	mov	r1, r3
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff fe0d 	bl	8000180 <_writePos>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <seg7_setDispAddr>:
	_writePos(3, array[2]);
	_writePos(4, array[3]);
	_writePos(2, colon ? 255 : 0);
}

void seg7_setDispAddr(uint16_t addr){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	disp_addr = addr;
 800057a:	4a04      	ldr	r2, [pc, #16]	; (800058c <seg7_setDispAddr+0x1c>)
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	8013      	strh	r3, [r2, #0]
	seg7_clearCache();
 8000580:	f7ff fe58 	bl	8000234 <seg7_clearCache>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000096 	.word	0x20000096

08000590 <seg7_displayOnOffMulti>:

void seg7_displayOnOffMulti(uint8_t display){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	seg7_setDispAddr(SPEED_ADDR);
 800059a:	2070      	movs	r0, #112	; 0x70
 800059c:	f7ff ffe8 	bl	8000570 <seg7_setDispAddr>
	(display & SPEED) ? seg7_displayOn() : seg7_displayOff();
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <seg7_displayOnOffMulti+0x20>
 80005aa:	f7ff fe5b 	bl	8000264 <seg7_displayOn>
 80005ae:	e001      	b.n	80005b4 <seg7_displayOnOffMulti+0x24>
 80005b0:	f7ff fe6a 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(SPIN_ADDR);
 80005b4:	2071      	movs	r0, #113	; 0x71
 80005b6:	f7ff ffdb 	bl	8000570 <seg7_setDispAddr>
	(display & SPIN) ? seg7_displayOn() : seg7_displayOff();
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <seg7_displayOnOffMulti+0x3a>
 80005c4:	f7ff fe4e 	bl	8000264 <seg7_displayOn>
 80005c8:	e001      	b.n	80005ce <seg7_displayOnOffMulti+0x3e>
 80005ca:	f7ff fe5d 	bl	8000288 <seg7_displayOff>

	seg7_setDispAddr(ANGLE_ADDR);
 80005ce:	2072      	movs	r0, #114	; 0x72
 80005d0:	f7ff ffce 	bl	8000570 <seg7_setDispAddr>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <seg7_displayOnOffMulti+0x54>
 80005de:	f7ff fe41 	bl	8000264 <seg7_displayOn>
}
 80005e2:	e001      	b.n	80005e8 <seg7_displayOnOffMulti+0x58>
	(display & ANGLE) ? seg7_displayOn() : seg7_displayOff();
 80005e4:	f7ff fe50 	bl	8000288 <seg7_displayOff>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <pgm_stop>:
static uint32_t last_blink_tick;	//Timestamp for blinking LED

uint32_t last_angle_change;
FlagStatus AngleChanged = RESET;

int pgm_stop(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

	if(mainDrvRunning){
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <pgm_stop+0x64>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d00a      	beq.n	8000614 <pgm_stop+0x24>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80005fe:	2100      	movs	r1, #0
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <pgm_stop+0x68>)
 8000602:	f003 ff9b 	bl	800453c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000606:	2104      	movs	r1, #4
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <pgm_stop+0x68>)
 800060a:	f003 ff97 	bl	800453c <HAL_TIM_PWM_Stop>

		mainDrvRunning = RESET;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <pgm_stop+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
	}

	uint8_t text_off[] = {SEG7_0, SEG7_F, SEG7_F, SEG7_SPACE};
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <pgm_stop+0x6c>)
 8000616:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff ffb9 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_off, SPEED_ADDR);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2170      	movs	r1, #112	; 0x70
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff3c 	bl	80004a0 <seg7_display>

	if((HAL_GetTick() - last_blink_tick) > BLINK_INT_MS){
 8000628:	f001 fce4 	bl	8001ff4 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <pgm_stop+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000638:	d907      	bls.n	800064a <pgm_stop+0x5a>

			Toggle_Led_Output(GREEN);
 800063a:	2001      	movs	r0, #1
 800063c:	f000 ff74 	bl	8001528 <Toggle_Led_Output>

			last_blink_tick = HAL_GetTick();
 8000640:	f001 fcd8 	bl	8001ff4 <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <pgm_stop+0x70>)
 8000648:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 800064a:	2300      	movs	r3, #0
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000035c 	.word	0x2000035c
 8000658:	20000140 	.word	0x20000140
 800065c:	100f0f00 	.word	0x100f0f00
 8000660:	200000b0 	.word	0x200000b0

08000664 <pgm_manual>:

int pgm_manual(void){
 8000664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000666:	b0ad      	sub	sp, #180	; 0xb4
 8000668:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 800066a:	2001      	movs	r0, #1
 800066c:	f000 ff32 	bl	80014d4 <Set_Led_Output>
	seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 8000670:	2007      	movs	r0, #7
 8000672:	f7ff ff8d 	bl	8000590 <seg7_displayOnOffMulti>

	get_adc_values(adc_result);
 8000676:	486b      	ldr	r0, [pc, #428]	; (8000824 <pgm_manual+0x1c0>)
 8000678:	f000 fa1a 	bl	8000ab0 <get_adc_values>

	speed_percent = adc_result[0]*100/MAX_ADC_VALUE;
 800067c:	4b69      	ldr	r3, [pc, #420]	; (8000824 <pgm_manual+0x1c0>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	2364      	movs	r3, #100	; 0x64
 8000684:	fb02 f303 	mul.w	r3, r2, r3
 8000688:	4a67      	ldr	r2, [pc, #412]	; (8000828 <pgm_manual+0x1c4>)
 800068a:	fb82 1203 	smull	r1, r2, r2, r3
 800068e:	441a      	add	r2, r3
 8000690:	12d2      	asrs	r2, r2, #11
 8000692:	17db      	asrs	r3, r3, #31
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29a      	uxth	r2, r3
 8000698:	4b64      	ldr	r3, [pc, #400]	; (800082c <pgm_manual+0x1c8>)
 800069a:	801a      	strh	r2, [r3, #0]
	spin_percent = (adc_result[1]*100/MAX_ADC_VALUE)-50;
 800069c:	4b61      	ldr	r3, [pc, #388]	; (8000824 <pgm_manual+0x1c0>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	461a      	mov	r2, r3
 80006a2:	2364      	movs	r3, #100	; 0x64
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	4a5f      	ldr	r2, [pc, #380]	; (8000828 <pgm_manual+0x1c4>)
 80006aa:	fb82 1203 	smull	r1, r2, r2, r3
 80006ae:	441a      	add	r2, r3
 80006b0:	12d2      	asrs	r2, r2, #11
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3b32      	subs	r3, #50	; 0x32
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b21a      	sxth	r2, r3
 80006be:	4b5c      	ldr	r3, [pc, #368]	; (8000830 <pgm_manual+0x1cc>)
 80006c0:	801a      	strh	r2, [r3, #0]
	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 80006c2:	4b58      	ldr	r3, [pc, #352]	; (8000824 <pgm_manual+0x1c0>)
 80006c4:	889b      	ldrh	r3, [r3, #4]
 80006c6:	461a      	mov	r2, r3
 80006c8:	235a      	movs	r3, #90	; 0x5a
 80006ca:	fb02 f303 	mul.w	r3, r2, r3
 80006ce:	4a56      	ldr	r2, [pc, #344]	; (8000828 <pgm_manual+0x1c4>)
 80006d0:	fb82 1203 	smull	r1, r2, r2, r3
 80006d4:	441a      	add	r2, r3
 80006d6:	12d2      	asrs	r2, r2, #11
 80006d8:	17db      	asrs	r3, r3, #31
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b55      	ldr	r3, [pc, #340]	; (8000834 <pgm_manual+0x1d0>)
 80006e0:	801a      	strh	r2, [r3, #0]

	if(
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 80006e2:	4b55      	ldr	r3, [pc, #340]	; (8000838 <pgm_manual+0x1d4>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <pgm_manual+0x1c0>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	bfb8      	it	lt
 80006f2:	425b      	neglt	r3, r3
 80006f4:	2b32      	cmp	r3, #50	; 0x32
 80006f6:	bfcc      	ite	gt
 80006f8:	2301      	movgt	r3, #1
 80006fa:	2300      	movle	r3, #0
 80006fc:	b2da      	uxtb	r2, r3
		(abs(last_adc[1] - adc_result[1]) > MIN_SPEED_DELTA)){
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <pgm_manual+0x1d4>)
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	4619      	mov	r1, r3
 8000704:	4b47      	ldr	r3, [pc, #284]	; (8000824 <pgm_manual+0x1c0>)
 8000706:	885b      	ldrh	r3, [r3, #2]
 8000708:	1acb      	subs	r3, r1, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	bfb8      	it	lt
 800070e:	425b      	neglt	r3, r3
		(abs(last_adc[0] - adc_result[0]) > MIN_SPEED_DELTA) |
 8000710:	2b32      	cmp	r3, #50	; 0x32
 8000712:	bfcc      	ite	gt
 8000714:	2301      	movgt	r3, #1
 8000716:	2300      	movle	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	4313      	orrs	r3, r2
 800071c:	b2db      	uxtb	r3, r3
	if(
 800071e:	2b00      	cmp	r3, #0
 8000720:	d028      	beq.n	8000774 <pgm_manual+0x110>

			last_adc[0] = adc_result[0];
 8000722:	4b40      	ldr	r3, [pc, #256]	; (8000824 <pgm_manual+0x1c0>)
 8000724:	881a      	ldrh	r2, [r3, #0]
 8000726:	4b44      	ldr	r3, [pc, #272]	; (8000838 <pgm_manual+0x1d4>)
 8000728:	801a      	strh	r2, [r3, #0]
			last_adc[1] = adc_result[1];
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <pgm_manual+0x1c0>)
 800072c:	885a      	ldrh	r2, [r3, #2]
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <pgm_manual+0x1d4>)
 8000730:	805a      	strh	r2, [r3, #2]
			seg7_displayInt((int16_t)speed_percent, SPEED_ADDR);
 8000732:	4b3e      	ldr	r3, [pc, #248]	; (800082c <pgm_manual+0x1c8>)
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b21b      	sxth	r3, r3
 8000738:	2170      	movs	r1, #112	; 0x70
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe16 	bl	800036c <seg7_displayInt>
			seg7_displayInt((int16_t)spin_percent, SPIN_ADDR);
 8000740:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <pgm_manual+0x1cc>)
 8000742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000746:	2171      	movs	r1, #113	; 0x71
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe0f 	bl	800036c <seg7_displayInt>
			set_pwm_maindrv(speed_percent, spin_percent, htim1);
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <pgm_manual+0x1c8>)
 8000750:	881d      	ldrh	r5, [r3, #0]
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <pgm_manual+0x1cc>)
 8000754:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000758:	4c38      	ldr	r4, [pc, #224]	; (800083c <pgm_manual+0x1d8>)
 800075a:	4668      	mov	r0, sp
 800075c:	f104 0308 	add.w	r3, r4, #8
 8000760:	22ac      	movs	r2, #172	; 0xac
 8000762:	4619      	mov	r1, r3
 8000764:	f005 f89e 	bl	80058a4 <memcpy>
 8000768:	e894 000c 	ldmia.w	r4, {r2, r3}
 800076c:	4631      	mov	r1, r6
 800076e:	4628      	mov	r0, r5
 8000770:	f000 ff46 	bl	8001600 <set_pwm_maindrv>
		}

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <pgm_manual+0x1d4>)
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	461a      	mov	r2, r3
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <pgm_manual+0x1c0>)
 800077c:	889b      	ldrh	r3, [r3, #4]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	bfb8      	it	lt
 8000784:	425b      	neglt	r3, r3
 8000786:	2b32      	cmp	r3, #50	; 0x32
 8000788:	dd18      	ble.n	80007bc <pgm_manual+0x158>
		last_adc[2] = adc_result[2];
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <pgm_manual+0x1c0>)
 800078c:	889a      	ldrh	r2, [r3, #4]
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <pgm_manual+0x1d4>)
 8000790:	809a      	strh	r2, [r3, #4]
		seg7_displayInt((int16_t)angle_degree, ANGLE_ADDR);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <pgm_manual+0x1d0>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	b21b      	sxth	r3, r3
 8000798:	2172      	movs	r1, #114	; 0x72
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fde6 	bl	800036c <seg7_displayInt>
		seg7_setDispAddr(ANGLE_ADDR);
 80007a0:	2072      	movs	r0, #114	; 0x72
 80007a2:	f7ff fee5 	bl	8000570 <seg7_setDispAddr>
		seg7_setBlinkRate(3);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff fd78 	bl	800029c <seg7_setBlinkRate>
		AngleChanged = SET;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <pgm_manual+0x1dc>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
		last_angle_change = HAL_GetTick();
 80007b2:	f001 fc1f 	bl	8001ff4 <HAL_GetTick>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a22      	ldr	r2, [pc, #136]	; (8000844 <pgm_manual+0x1e0>)
 80007ba:	6013      	str	r3, [r2, #0]

	}

	if(((HAL_GetTick() - last_angle_change) > ANGLE_SET_DELAY) & AngleChanged){
 80007bc:	f001 fc1a 	bl	8001ff4 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	4b20      	ldr	r3, [pc, #128]	; (8000844 <pgm_manual+0x1e0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007cc:	bf8c      	ite	hi
 80007ce:	2301      	movhi	r3, #1
 80007d0:	2300      	movls	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <pgm_manual+0x1dc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4013      	ands	r3, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00d      	beq.n	80007fc <pgm_manual+0x198>
		seg7_setDispAddr(ANGLE_ADDR);
 80007e0:	2072      	movs	r0, #114	; 0x72
 80007e2:	f7ff fec5 	bl	8000570 <seg7_setDispAddr>
		seg7_setBlinkRate(0);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fd58 	bl	800029c <seg7_setBlinkRate>
		set_pos_posdrv(angle_degree);
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <pgm_manual+0x1d0>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 ffc5 	bl	8001780 <set_pos_posdrv>
		AngleChanged = RESET;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <pgm_manual+0x1dc>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	}

	if(!mainDrvRunning){
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <pgm_manual+0x1e4>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d10a      	bne.n	800081a <pgm_manual+0x1b6>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <pgm_manual+0x1d8>)
 8000808:	f003 fdf6 	bl	80043f8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800080c:	2104      	movs	r1, #4
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <pgm_manual+0x1d8>)
 8000810:	f003 fdf2 	bl	80043f8 <HAL_TIM_PWM_Start>

		mainDrvRunning = SET;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <pgm_manual+0x1e4>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3704      	adds	r7, #4
 8000820:	46bd      	mov	sp, r7
 8000822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000824:	20000098 	.word	0x20000098
 8000828:	825ae461 	.word	0x825ae461
 800082c:	2000009e 	.word	0x2000009e
 8000830:	200000a0 	.word	0x200000a0
 8000834:	200000a2 	.word	0x200000a2
 8000838:	200000a4 	.word	0x200000a4
 800083c:	20000140 	.word	0x20000140
 8000840:	200000b8 	.word	0x200000b8
 8000844:	200000b4 	.word	0x200000b4
 8000848:	2000035c 	.word	0x2000035c

0800084c <pgm_auto_speed>:

int pgm_auto_speed(void){
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	b0af      	sub	sp, #188	; 0xbc
 8000850:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fe3e 	bl	80014d4 <Set_Led_Output>

	uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <pgm_auto_speed+0x144>)
 800085a:	603b      	str	r3, [r7, #0]

	seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 800085c:	2007      	movs	r0, #7
 800085e:	f7ff fe97 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_auto, SPEED_ADDR);
 8000862:	463b      	mov	r3, r7
 8000864:	2170      	movs	r1, #112	; 0x70
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe1a 	bl	80004a0 <seg7_display>
	seg7_display(text_auto, SPIN_ADDR);
 800086c:	463b      	mov	r3, r7
 800086e:	2171      	movs	r1, #113	; 0x71
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe15 	bl	80004a0 <seg7_display>

	get_adc_values(adc_result);
 8000876:	4847      	ldr	r0, [pc, #284]	; (8000994 <pgm_auto_speed+0x148>)
 8000878:	f000 f91a 	bl	8000ab0 <get_adc_values>

	angle_degree = (adc_result[2]*90/MAX_ADC_VALUE);
 800087c:	4b45      	ldr	r3, [pc, #276]	; (8000994 <pgm_auto_speed+0x148>)
 800087e:	889b      	ldrh	r3, [r3, #4]
 8000880:	461a      	mov	r2, r3
 8000882:	235a      	movs	r3, #90	; 0x5a
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	4a43      	ldr	r2, [pc, #268]	; (8000998 <pgm_auto_speed+0x14c>)
 800088a:	fb82 1203 	smull	r1, r2, r2, r3
 800088e:	441a      	add	r2, r3
 8000890:	12d2      	asrs	r2, r2, #11
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b40      	ldr	r3, [pc, #256]	; (800099c <pgm_auto_speed+0x150>)
 800089a:	801a      	strh	r2, [r3, #0]

	if(abs(last_adc[2] - adc_result[2]) > MIN_ANGLE_DELTA){
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <pgm_auto_speed+0x154>)
 800089e:	889b      	ldrh	r3, [r3, #4]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <pgm_auto_speed+0x148>)
 80008a4:	889b      	ldrh	r3, [r3, #4]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	bfb8      	it	lt
 80008ac:	425b      	neglt	r3, r3
 80008ae:	2b32      	cmp	r3, #50	; 0x32
 80008b0:	dd14      	ble.n	80008dc <pgm_auto_speed+0x90>
		last_adc[2] = adc_result[2];
 80008b2:	4b38      	ldr	r3, [pc, #224]	; (8000994 <pgm_auto_speed+0x148>)
 80008b4:	889a      	ldrh	r2, [r3, #4]
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <pgm_auto_speed+0x154>)
 80008b8:	809a      	strh	r2, [r3, #4]
		seg7_displayInt((uint16_t) angle_degree, ANGLE_ADDR);
 80008ba:	4b38      	ldr	r3, [pc, #224]	; (800099c <pgm_auto_speed+0x150>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	2172      	movs	r1, #114	; 0x72
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fd53 	bl	800036c <seg7_displayInt>
		seg7_setDispAddr(ANGLE_ADDR);
 80008c6:	2072      	movs	r0, #114	; 0x72
 80008c8:	f7ff fe52 	bl	8000570 <seg7_setDispAddr>
		seg7_setBlinkRate(3);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff fce5 	bl	800029c <seg7_setBlinkRate>
		last_angle_change = HAL_GetTick();
 80008d2:	f001 fb8f 	bl	8001ff4 <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <pgm_auto_speed+0x158>)
 80008da:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - last_angle_change > ANGLE_SET_DELAY){
 80008dc:	f001 fb8a 	bl	8001ff4 <HAL_GetTick>
 80008e0:	4602      	mov	r2, r0
 80008e2:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <pgm_auto_speed+0x158>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008ec:	d90a      	bls.n	8000904 <pgm_auto_speed+0xb8>
			seg7_setDispAddr(ANGLE_ADDR);
 80008ee:	2072      	movs	r0, #114	; 0x72
 80008f0:	f7ff fe3e 	bl	8000570 <seg7_setDispAddr>
			seg7_setBlinkRate(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fcd1 	bl	800029c <seg7_setBlinkRate>
			set_pos_posdrv(angle_degree);
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <pgm_auto_speed+0x150>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 ff3e 	bl	8001780 <set_pos_posdrv>
	}

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 8000904:	f001 fb76 	bl	8001ff4 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <pgm_auto_speed+0x15c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	f242 7210 	movw	r2, #10000	; 0x2710
 8000914:	4293      	cmp	r3, r2
 8000916:	d935      	bls.n	8000984 <pgm_auto_speed+0x138>

			uint16_t rand_speed = rand() % 101;
 8000918:	f005 f808 	bl	800592c <rand>
 800091c:	4603      	mov	r3, r0
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <pgm_auto_speed+0x160>)
 8000920:	fb82 1203 	smull	r1, r2, r2, r3
 8000924:	1111      	asrs	r1, r2, #4
 8000926:	17da      	asrs	r2, r3, #31
 8000928:	1a8a      	subs	r2, r1, r2
 800092a:	2165      	movs	r1, #101	; 0x65
 800092c:	fb01 f202 	mul.w	r2, r1, r2
 8000930:	1a9a      	subs	r2, r3, r2
 8000932:	4613      	mov	r3, r2
 8000934:	80fb      	strh	r3, [r7, #6]
			int16_t rand_spin = (rand() % 101) -50;
 8000936:	f004 fff9 	bl	800592c <rand>
 800093a:	4603      	mov	r3, r0
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <pgm_auto_speed+0x160>)
 800093e:	fb82 1203 	smull	r1, r2, r2, r3
 8000942:	1111      	asrs	r1, r2, #4
 8000944:	17da      	asrs	r2, r3, #31
 8000946:	1a8a      	subs	r2, r1, r2
 8000948:	2165      	movs	r1, #101	; 0x65
 800094a:	fb01 f202 	mul.w	r2, r1, r2
 800094e:	1a9a      	subs	r2, r3, r2
 8000950:	b293      	uxth	r3, r2
 8000952:	3b32      	subs	r3, #50	; 0x32
 8000954:	b29b      	uxth	r3, r3
 8000956:	80bb      	strh	r3, [r7, #4]

			set_pwm_maindrv(rand_speed, rand_spin, htim1);
 8000958:	4c15      	ldr	r4, [pc, #84]	; (80009b0 <pgm_auto_speed+0x164>)
 800095a:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800095e:	88fd      	ldrh	r5, [r7, #6]
 8000960:	4668      	mov	r0, sp
 8000962:	f104 0308 	add.w	r3, r4, #8
 8000966:	22ac      	movs	r2, #172	; 0xac
 8000968:	4619      	mov	r1, r3
 800096a:	f004 ff9b 	bl	80058a4 <memcpy>
 800096e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000972:	4631      	mov	r1, r6
 8000974:	4628      	mov	r0, r5
 8000976:	f000 fe43 	bl	8001600 <set_pwm_maindrv>

			last_rand_tick = HAL_GetTick();
 800097a:	f001 fb3b 	bl	8001ff4 <HAL_GetTick>
 800097e:	4603      	mov	r3, r0
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <pgm_auto_speed+0x15c>)
 8000982:	6013      	str	r3, [r2, #0]
		}

	return EXIT_SUCCESS;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098e:	bf00      	nop
 8000990:	0014160a 	.word	0x0014160a
 8000994:	20000098 	.word	0x20000098
 8000998:	825ae461 	.word	0x825ae461
 800099c:	200000a2 	.word	0x200000a2
 80009a0:	200000a4 	.word	0x200000a4
 80009a4:	200000b4 	.word	0x200000b4
 80009a8:	200000ac 	.word	0x200000ac
 80009ac:	288df0cb 	.word	0x288df0cb
 80009b0:	20000140 	.word	0x20000140

080009b4 <pgm_auto>:

int pgm_auto(void){
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b0b1      	sub	sp, #196	; 0xc4
 80009b8:	af2c      	add	r7, sp, #176	; 0xb0

	Set_Led_Output(GREEN);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fd8a 	bl	80014d4 <Set_Led_Output>

	uint8_t text_auto[] = {SEG7_A, SEG7_U, SEG7_T, SEG7_0};
 80009c0:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <pgm_auto+0xe8>)
 80009c2:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED | SPIN | ANGLE);
 80009c4:	2007      	movs	r0, #7
 80009c6:	f7ff fde3 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_auto, SPEED_ADDR);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2170      	movs	r1, #112	; 0x70
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fd66 	bl	80004a0 <seg7_display>
	seg7_display(text_auto, SPIN_ADDR);
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2171      	movs	r1, #113	; 0x71
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd61 	bl	80004a0 <seg7_display>
	seg7_display(text_auto, ANGLE_ADDR);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2172      	movs	r1, #114	; 0x72
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd5c 	bl	80004a0 <seg7_display>

	if((HAL_GetTick() - last_rand_tick) > AUTO_DELAY * 1000){
 80009e8:	f001 fb04 	bl	8001ff4 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <pgm_auto+0xec>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d949      	bls.n	8000a90 <pgm_auto+0xdc>

		uint16_t rand_speed = rand() % 101;
 80009fc:	f004 ff96 	bl	800592c <rand>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <pgm_auto+0xf0>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	1111      	asrs	r1, r2, #4
 8000a0a:	17da      	asrs	r2, r3, #31
 8000a0c:	1a8a      	subs	r2, r1, r2
 8000a0e:	2165      	movs	r1, #101	; 0x65
 8000a10:	fb01 f202 	mul.w	r2, r1, r2
 8000a14:	1a9a      	subs	r2, r3, r2
 8000a16:	4613      	mov	r3, r2
 8000a18:	81fb      	strh	r3, [r7, #14]
		int16_t rand_spin = (rand() % 101) -50;
 8000a1a:	f004 ff87 	bl	800592c <rand>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <pgm_auto+0xf0>)
 8000a22:	fb82 1203 	smull	r1, r2, r2, r3
 8000a26:	1111      	asrs	r1, r2, #4
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	1a8a      	subs	r2, r1, r2
 8000a2c:	2165      	movs	r1, #101	; 0x65
 8000a2e:	fb01 f202 	mul.w	r2, r1, r2
 8000a32:	1a9a      	subs	r2, r3, r2
 8000a34:	b293      	uxth	r3, r2
 8000a36:	3b32      	subs	r3, #50	; 0x32
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	81bb      	strh	r3, [r7, #12]
		uint16_t rand_angle = rand() % 91;
 8000a3c:	f004 ff76 	bl	800592c <rand>
 8000a40:	4603      	mov	r3, r0
 8000a42:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <pgm_auto+0xf4>)
 8000a44:	fb82 1203 	smull	r1, r2, r2, r3
 8000a48:	441a      	add	r2, r3
 8000a4a:	1191      	asrs	r1, r2, #6
 8000a4c:	17da      	asrs	r2, r3, #31
 8000a4e:	1a8a      	subs	r2, r1, r2
 8000a50:	215b      	movs	r1, #91	; 0x5b
 8000a52:	fb01 f202 	mul.w	r2, r1, r2
 8000a56:	1a9a      	subs	r2, r3, r2
 8000a58:	4613      	mov	r3, r2
 8000a5a:	817b      	strh	r3, [r7, #10]

		set_pwm_maindrv(rand_speed, rand_spin, htim1);
 8000a5c:	4c13      	ldr	r4, [pc, #76]	; (8000aac <pgm_auto+0xf8>)
 8000a5e:	f9b7 600c 	ldrsh.w	r6, [r7, #12]
 8000a62:	89fd      	ldrh	r5, [r7, #14]
 8000a64:	4668      	mov	r0, sp
 8000a66:	f104 0308 	add.w	r3, r4, #8
 8000a6a:	22ac      	movs	r2, #172	; 0xac
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f004 ff19 	bl	80058a4 <memcpy>
 8000a72:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000a76:	4631      	mov	r1, r6
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f000 fdc1 	bl	8001600 <set_pwm_maindrv>
		set_pos_posdrv(rand_angle);
 8000a7e:	897b      	ldrh	r3, [r7, #10]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fe7d 	bl	8001780 <set_pos_posdrv>

		last_rand_tick = HAL_GetTick();
 8000a86:	f001 fab5 	bl	8001ff4 <HAL_GetTick>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <pgm_auto+0xec>)
 8000a8e:	6013      	str	r3, [r2, #0]
	}

	return EXIT_SUCCESS;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0014160a 	.word	0x0014160a
 8000aa0:	200000ac 	.word	0x200000ac
 8000aa4:	288df0cb 	.word	0x288df0cb
 8000aa8:	b40b40b5 	.word	0xb40b40b5
 8000aac:	20000140 	.word	0x20000140

08000ab0 <get_adc_values>:

int get_adc_values(uint16_t* adc_result){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	for(int i = 0; i < 3; i++){
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e013      	b.n	8000ae6 <get_adc_values+0x36>
			HAL_ADC_Start(&hadc1);
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <get_adc_values+0x48>)
 8000ac0:	f001 fb7a 	bl	80021b8 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <get_adc_values+0x48>)
 8000ac8:	f001 fc24 	bl	8002314 <HAL_ADC_PollForConversion>
			adc_result[i] = HAL_ADC_GetValue(&hadc1);
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <get_adc_values+0x48>)
 8000ace:	f001 fd27 	bl	8002520 <HAL_ADC_GetValue>
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	b28a      	uxth	r2, r1
 8000ade:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	dde8      	ble.n	8000abe <get_adc_values+0xe>
		}

	return EXIT_SUCCESS;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4e:	f001 f9f9 	bl	8001f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b52:	f000 f8e9 	bl	8000d28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ADC_CR2_REG |= (1<<2); //Start calibration of ADCs after power on
 8000b56:	4b68      	ldr	r3, [pc, #416]	; (8000cf8 <main+0x1b0>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4a66      	ldr	r2, [pc, #408]	; (8000cf8 <main+0x1b0>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	8013      	strh	r3, [r2, #0]

  while(ADC_CR2_REG & (1<<2)){
 8000b66:	bf00      	nop
 8000b68:	4b63      	ldr	r3, [pc, #396]	; (8000cf8 <main+0x1b0>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1f8      	bne.n	8000b68 <main+0x20>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b76:	f000 fb63 	bl	8001240 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b7a:	f000 f925 	bl	8000dc8 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000b7e:	f000 f981 	bl	8000e84 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000b82:	f000 f9ad 	bl	8000ee0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b86:	f000 fa59 	bl	800103c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000b8a:	f000 fad7 	bl	800113c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, POS_PulseFinishedCallback);
 8000b8e:	4a5b      	ldr	r2, [pc, #364]	; (8000cfc <main+0x1b4>)
 8000b90:	210e      	movs	r1, #14
 8000b92:	485b      	ldr	r0, [pc, #364]	; (8000d00 <main+0x1b8>)
 8000b94:	f004 f95c 	bl	8004e50 <HAL_TIM_RegisterCallback>
  HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, POS_PulseFinishedCallback);
 8000b98:	4a58      	ldr	r2, [pc, #352]	; (8000cfc <main+0x1b4>)
 8000b9a:	210e      	movs	r1, #14
 8000b9c:	4859      	ldr	r0, [pc, #356]	; (8000d04 <main+0x1bc>)
 8000b9e:	f004 f957 	bl	8004e50 <HAL_TIM_RegisterCallback>

  seg7_init(SPEED_ADDR);
 8000ba2:	2070      	movs	r0, #112	; 0x70
 8000ba4:	f7ff fb1e 	bl	80001e4 <seg7_init>
  seg7_init(SPIN_ADDR);
 8000ba8:	2071      	movs	r0, #113	; 0x71
 8000baa:	f7ff fb1b 	bl	80001e4 <seg7_init>
  seg7_init(ANGLE_ADDR);
 8000bae:	2072      	movs	r0, #114	; 0x72
 8000bb0:	f7ff fb18 	bl	80001e4 <seg7_init>

  //Set position signal of main drives
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bba:	4853      	ldr	r0, [pc, #332]	; (8000d08 <main+0x1c0>)
 8000bbc:	f002 f8f9 	bl	8002db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, MAIN_DRV_DIR_POLARITY ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc6:	4851      	ldr	r0, [pc, #324]	; (8000d0c <main+0x1c4>)
 8000bc8:	f002 f8f3 	bl	8002db2 <HAL_GPIO_WritePin>

  eStop = !HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin); //Get initial state of emergency stop
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	484d      	ldr	r0, [pc, #308]	; (8000d08 <main+0x1c0>)
 8000bd2:	f002 f8d7 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bf0c      	ite	eq
 8000bdc:	2301      	moveq	r3, #1
 8000bde:	2300      	movne	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b4a      	ldr	r3, [pc, #296]	; (8000d10 <main+0x1c8>)
 8000be6:	701a      	strb	r2, [r3, #0]
  startPos = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8000be8:	2110      	movs	r1, #16
 8000bea:	484a      	ldr	r0, [pc, #296]	; (8000d14 <main+0x1cc>)
 8000bec:	f002 f8ca 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <main+0x1d0>)
 8000c00:	701a      	strb	r2, [r3, #0]
  endPos = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 8000c02:	2101      	movs	r1, #1
 8000c04:	4840      	ldr	r0, [pc, #256]	; (8000d08 <main+0x1c0>)
 8000c06:	f002 f8bd 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	bf0c      	ite	eq
 8000c10:	2301      	moveq	r3, #1
 8000c12:	2300      	movne	r3, #0
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <main+0x1d4>)
 8000c1a:	701a      	strb	r2, [r3, #0]

  Set_Led_Output(YELLOW);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f000 fc59 	bl	80014d4 <Set_Led_Output>

  uint8_t pgm_state = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	71fb      	strb	r3, [r7, #7]

  srand(time(NULL)); //Seed the random int generator for auto programms
 8000c26:	2000      	movs	r0, #0
 8000c28:	f004 febe 	bl	80059a8 <time>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4613      	mov	r3, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 fe4c 	bl	80058d0 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(eStop) E_Stop_Call(); //Call emergency stop routine
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <main+0x1c8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <main+0xfc>
 8000c40:	f000 fc9c 	bl	800157c <E_Stop_Call>

	if(initHomingComplete == RESET){
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <main+0x1d8>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d105      	bne.n	8000c58 <main+0x110>
		init_home_pos_drive();
 8000c4c:	f000 fe3c 	bl	80018c8 <init_home_pos_drive>
		Set_Led_Output(GREEN);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fc3f 	bl	80014d4 <Set_Led_Output>
 8000c56:	e008      	b.n	8000c6a <main+0x122>
	}
	else if (homingComplete == RESET){
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <main+0x1dc>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <main+0x122>
		home_pos_drive();
 8000c60:	f000 fea8 	bl	80019b4 <home_pos_drive>
		Set_Led_Output(GREEN);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 fc35 	bl	80014d4 <Set_Led_Output>
	}

	pgm_state = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]

	/*The mode switch is read as bitpattern PGM_1_Pin = LSB PGM_3_Pin = MSB
	 *if pattern is not valid, machine turns of --> pgm_stop
	 */
	pgm_state =
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	4826      	ldr	r0, [pc, #152]	; (8000d0c <main+0x1c4>)
 8000c74:	f002 f886 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	4820      	ldr	r0, [pc, #128]	; (8000d0c <main+0x1c4>)
 8000c8c:	f002 f87a 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_1_Pin) << 0)|
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <main+0x152>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e000      	b.n	8000c9c <main+0x154>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	b25c      	sxtb	r4, r3
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_3_Pin) << 2);
 8000ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca4:	4819      	ldr	r0, [pc, #100]	; (8000d0c <main+0x1c4>)
 8000ca6:	f002 f86d 	bl	8002d84 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
			(!HAL_GPIO_ReadPin(GPIOC ,PGM_2_Pin) << 1)|
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <main+0x16c>
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	e000      	b.n	8000cb6 <main+0x16e>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4323      	orrs	r3, r4
 8000cb8:	b25b      	sxtb	r3, r3
	pgm_state =
 8000cba:	71fb      	strb	r3, [r7, #7]

	switch(pgm_state){
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d8ba      	bhi.n	8000c38 <main+0xf0>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <main+0x180>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000cdd 	.word	0x08000cdd
 8000ccc:	08000ce3 	.word	0x08000ce3
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000c39 	.word	0x08000c39
 8000cd8:	08000cef 	.word	0x08000cef
	case 0:
		pgm_stop();
 8000cdc:	f7ff fc88 	bl	80005f0 <pgm_stop>
		break;
 8000ce0:	e008      	b.n	8000cf4 <main+0x1ac>
	case 1:
		pgm_manual();
 8000ce2:	f7ff fcbf 	bl	8000664 <pgm_manual>
		break;
 8000ce6:	e005      	b.n	8000cf4 <main+0x1ac>
	case 2:
		pgm_auto_speed();
 8000ce8:	f7ff fdb0 	bl	800084c <pgm_auto_speed>
		break;
 8000cec:	e002      	b.n	8000cf4 <main+0x1ac>
	case 4:
		pgm_auto();
 8000cee:	f7ff fe61 	bl	80009b4 <pgm_auto>
		break;
 8000cf2:	bf00      	nop
	if(eStop) E_Stop_Call(); //Call emergency stop routine
 8000cf4:	e7a0      	b.n	8000c38 <main+0xf0>
 8000cf6:	bf00      	nop
 8000cf8:	40012400 	.word	0x40012400
 8000cfc:	0800140d 	.word	0x0800140d
 8000d00:	200001f4 	.word	0x200001f4
 8000d04:	200002a8 	.word	0x200002a8
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	20000002 	.word	0x20000002
 8000d14:	40010800 	.word	0x40010800
 8000d18:	20000360 	.word	0x20000360
 8000d1c:	20000361 	.word	0x20000361
 8000d20:	2000035e 	.word	0x2000035e
 8000d24:	2000035f 	.word	0x2000035f

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 fdc2 	bl	80058c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d60:	2310      	movs	r3, #16
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fd05 	bl	800377c <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000d78:	f000 fc3a 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 ff72 	bl	8003c80 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000da2:	f000 fc25 	bl	80015f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000da6:	2302      	movs	r3, #2
 8000da8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 f8f3 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dbc:	f000 fc18 	bl	80015f0 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	; 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000dda:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <MX_ADC1_Init+0xb8>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000dfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e08:	2203      	movs	r2, #3
 8000e0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0c:	481b      	ldr	r0, [pc, #108]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e0e:	f001 f8fb 	bl	8002008 <HAL_ADC_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000e18:	f000 fbea 	bl	80015f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000e24:	2303      	movs	r3, #3
 8000e26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4813      	ldr	r0, [pc, #76]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e2e:	f001 fb83 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000e38:	f000 fbda 	bl	80015f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e4a:	f001 fb75 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f000 fbcc 	bl	80015f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e58:	230c      	movs	r3, #12
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_ADC1_Init+0xb4>)
 8000e66:	f001 fb67 	bl	8002538 <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e70:	f000 fbbe 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200000bc 	.word	0x200000bc
 8000e80:	40012400 	.word	0x40012400

08000e84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <MX_I2C2_Init+0x54>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_I2C2_Init+0x58>)
 8000e92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_I2C2_Init+0x50>)
 8000ec2:	f001 ffbf 	bl	8002e44 <HAL_I2C_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ecc:	f000 fb90 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000ec 	.word	0x200000ec
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b096      	sub	sp, #88	; 0x58
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fcd1 	bl	80058c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f20:	4a45      	ldr	r2, [pc, #276]	; (8001038 <MX_TIM1_Init+0x158>)
 8000f22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000f24:	4b43      	ldr	r3, [pc, #268]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f26:	220a      	movs	r2, #10
 8000f28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 700;
 8000f30:	4b40      	ldr	r3, [pc, #256]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f32:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000f36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f44:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f46:	2280      	movs	r2, #128	; 0x80
 8000f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4a:	483a      	ldr	r0, [pc, #232]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f4c:	f003 f992 	bl	8004274 <HAL_TIM_Base_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f56:	f000 fb4b 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f64:	4619      	mov	r1, r3
 8000f66:	4833      	ldr	r0, [pc, #204]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f68:	f003 fe50 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f72:	f000 fb3d 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f76:	482f      	ldr	r0, [pc, #188]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f78:	f003 f9d8 	bl	800432c <HAL_TIM_PWM_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f82:	f000 fb35 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f92:	4619      	mov	r1, r3
 8000f94:	4827      	ldr	r0, [pc, #156]	; (8001034 <MX_TIM1_Init+0x154>)
 8000f96:	f004 fb91 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fa0:	f000 fb26 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa4:	2360      	movs	r3, #96	; 0x60
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 450;
 8000fa8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481a      	ldr	r0, [pc, #104]	; (8001034 <MX_TIM1_Init+0x154>)
 8000fcc:	f003 fd5c 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000fd6:	f000 fb0b 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	2204      	movs	r2, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_TIM1_Init+0x154>)
 8000fe4:	f003 fd50 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000fee:	f000 faff 	bl	80015f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <MX_TIM1_Init+0x154>)
 8001016:	f004 fbaf 	bl	8005778 <HAL_TIMEx_ConfigBreakDeadTime>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001020:	f000 fae6 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001024:	4803      	ldr	r0, [pc, #12]	; (8001034 <MX_TIM1_Init+0x154>)
 8001026:	f000 fdf7 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3758      	adds	r7, #88	; 0x58
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000140 	.word	0x20000140
 8001038:	40012c00 	.word	0x40012c00

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_TIM2_Init+0xfc>)
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7000;
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_TIM2_Init+0xfc>)
 8001076:	f641 3258 	movw	r2, #7000	; 0x1b58
 800107a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_TIM2_Init+0xfc>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_TIM2_Init+0xfc>)
 8001084:	f242 7210 	movw	r2, #10000	; 0x2710
 8001088:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <MX_TIM2_Init+0xfc>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_TIM2_Init+0xfc>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001096:	4828      	ldr	r0, [pc, #160]	; (8001138 <MX_TIM2_Init+0xfc>)
 8001098:	f003 f8ec 	bl	8004274 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 faa5 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4821      	ldr	r0, [pc, #132]	; (8001138 <MX_TIM2_Init+0xfc>)
 80010b4:	f003 fdaa 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010be:	f000 fa97 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010c2:	481d      	ldr	r0, [pc, #116]	; (8001138 <MX_TIM2_Init+0xfc>)
 80010c4:	f003 f932 	bl	800432c <HAL_TIM_PWM_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010ce:	f000 fa8f 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80010d2:	2108      	movs	r1, #8
 80010d4:	4818      	ldr	r0, [pc, #96]	; (8001138 <MX_TIM2_Init+0xfc>)
 80010d6:	f003 fb47 	bl	8004768 <HAL_TIM_OnePulse_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80010e0:	f000 fa86 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_TIM2_Init+0xfc>)
 80010f4:	f004 fae2 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80010fe:	f000 fa77 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001102:	2370      	movs	r3, #112	; 0x70
 8001104:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2204      	movs	r2, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_TIM2_Init+0xfc>)
 800111c:	f003 fcb4 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001126:	f000 fa63 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <MX_TIM2_Init+0xfc>)
 800112c:	f000 fd74 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f4 	.word	0x200001f4

0800113c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	f107 0320 	add.w	r3, r7, #32
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <MX_TIM4_Init+0xfc>)
 800116e:	4a33      	ldr	r2, [pc, #204]	; (800123c <MX_TIM4_Init+0x100>)
 8001170:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7000;
 8001172:	4b31      	ldr	r3, [pc, #196]	; (8001238 <MX_TIM4_Init+0xfc>)
 8001174:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001178:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MX_TIM4_Init+0xfc>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_TIM4_Init+0xfc>)
 8001182:	f242 7210 	movw	r2, #10000	; 0x2710
 8001186:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <MX_TIM4_Init+0xfc>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_TIM4_Init+0xfc>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001194:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_TIM4_Init+0xfc>)
 8001196:	f003 f86d 	bl	8004274 <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80011a0:	f000 fa26 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <MX_TIM4_Init+0xfc>)
 80011b2:	f003 fd2b 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80011bc:	f000 fa18 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011c0:	481d      	ldr	r0, [pc, #116]	; (8001238 <MX_TIM4_Init+0xfc>)
 80011c2:	f003 f8b3 	bl	800432c <HAL_TIM_PWM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80011cc:	f000 fa10 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 80011d0:	2108      	movs	r1, #8
 80011d2:	4819      	ldr	r0, [pc, #100]	; (8001238 <MX_TIM4_Init+0xfc>)
 80011d4:	f003 fac8 	bl	8004768 <HAL_TIM_OnePulse_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 80011de:	f000 fa07 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4619      	mov	r1, r3
 80011f0:	4811      	ldr	r0, [pc, #68]	; (8001238 <MX_TIM4_Init+0xfc>)
 80011f2:	f004 fa63 	bl	80056bc <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80011fc:	f000 f9f8 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001200:	2370      	movs	r3, #112	; 0x70
 8001202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2204      	movs	r2, #4
 8001216:	4619      	mov	r1, r3
 8001218:	4807      	ldr	r0, [pc, #28]	; (8001238 <MX_TIM4_Init+0xfc>)
 800121a:	f003 fc35 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001224:	f000 f9e4 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <MX_TIM4_Init+0xfc>)
 800122a:	f000 fcf5 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002a8 	.word	0x200002a8
 800123c:	40000800 	.word	0x40000800

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <MX_GPIO_Init+0x178>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <MX_GPIO_Init+0x178>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <MX_GPIO_Init+0x178>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <MX_GPIO_Init+0x178>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a51      	ldr	r2, [pc, #324]	; (80013b8 <MX_GPIO_Init+0x178>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <MX_GPIO_Init+0x178>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b4c      	ldr	r3, [pc, #304]	; (80013b8 <MX_GPIO_Init+0x178>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <MX_GPIO_Init+0x178>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b49      	ldr	r3, [pc, #292]	; (80013b8 <MX_GPIO_Init+0x178>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80012a2:	4846      	ldr	r0, [pc, #280]	; (80013bc <MX_GPIO_Init+0x17c>)
 80012a4:	f001 fd85 	bl	8002db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BDRV_DIR_GPIO_Port, BDRV_DIR_Pin, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	4844      	ldr	r0, [pc, #272]	; (80013c0 <MX_GPIO_Init+0x180>)
 80012b0:	f001 fd7f 	bl	8002db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDRV_DIR_GPIO_Port, TDRV_DIR_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	4842      	ldr	r0, [pc, #264]	; (80013c4 <MX_GPIO_Init+0x184>)
 80012bc:	f001 fd79 	bl	8002db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_1_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <MX_GPIO_Init+0x188>)
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_1_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	483a      	ldr	r0, [pc, #232]	; (80013bc <MX_GPIO_Init+0x17c>)
 80012d4:	f001 fbd2 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80012d8:	f44f 53c4 	mov.w	r3, #6272	; 0x1880
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	4832      	ldr	r0, [pc, #200]	; (80013bc <MX_GPIO_Init+0x17c>)
 80012f2:	f001 fbc3 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_1_Pin BDRV_FAIL_Pin TDRV_FAIL_Pin PGM_1_Pin
                           PGM_3_Pin PGM_2_Pin */
  GPIO_InitStruct.Pin = Input_1_Pin|BDRV_FAIL_Pin|TDRV_FAIL_Pin|PGM_1_Pin
 80012f6:	f44f 53eb 	mov.w	r3, #7520	; 0x1d60
 80012fa:	613b      	str	r3, [r7, #16]
                          |PGM_3_Pin|PGM_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	482d      	ldr	r0, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x180>)
 800130c:	f001 fbb6 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_GPIO_Init+0x188>)
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4828      	ldr	r0, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x184>)
 8001324:	f001 fbaa 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BDRV_DIR_Pin */
  GPIO_InitStruct.Pin = BDRV_DIR_Pin;
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2302      	movs	r3, #2
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <MX_GPIO_Init+0x180>)
 8001342:	f001 fb9b 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TDRV_DIR_Pin */
  GPIO_InitStruct.Pin = TDRV_DIR_Pin;
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2302      	movs	r3, #2
 8001356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TDRV_DIR_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4819      	ldr	r0, [pc, #100]	; (80013c4 <MX_GPIO_Init+0x184>)
 8001360:	f001 fb8c 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : E_STOP_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin;
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_GPIO_Init+0x18c>)
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_STOP_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	4812      	ldr	r0, [pc, #72]	; (80013c4 <MX_GPIO_Init+0x184>)
 800137a:	f001 fb7f 	bl	8002a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2006      	movs	r0, #6
 8001384:	f001 fb43 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001388:	2006      	movs	r0, #6
 800138a:	f001 fb5c 	bl	8002a46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200a      	movs	r0, #10
 8001394:	f001 fb3b 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001398:	200a      	movs	r0, #10
 800139a:	f001 fb54 	bl	8002a46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2017      	movs	r0, #23
 80013a4:	f001 fb33 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013a8:	2017      	movs	r0, #23
 80013aa:	f001 fb4c 	bl	8002a46 <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40011000 	.word	0x40011000
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10210000 	.word	0x10210000

080013d0 <_write>:

/* USER CODE BEGIN 4 */

//Overwrite _write for ITM_Console
int _write(int file, char *ptr, int len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  int i=0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e009      	b.n	80013fa <_write+0x2a>
    ITM_SendChar((*ptr++));
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	60ba      	str	r2, [r7, #8]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fb84 	bl	8000afc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbf1      	blt.n	80013e6 <_write+0x16>
  return len;
 8001402:	687b      	ldr	r3, [r7, #4]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <POS_PulseFinishedCallback>:

/*Callback after pulse finished*/
void POS_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	posDrvRunning = RESET;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <POS_PulseFinishedCallback+0x18>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	2000035d 	.word	0x2000035d

08001428 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == E_STOP_Pin) {
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d103      	bne.n	8001442 <HAL_GPIO_EXTI_Callback+0x1a>
    eStop = SET;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	e000      	b.n	8001444 <HAL_GPIO_EXTI_Callback+0x1c>
  } else {
      __NOP();
 8001442:	bf00      	nop
  }

  if(GPIO_Pin == SW_1_Pin) {
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d114      	bne.n	8001474 <HAL_GPIO_EXTI_Callback+0x4c>
	  	  HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 800144a:	2104      	movs	r1, #4
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x90>)
 800144e:	f003 f8d9 	bl	8004604 <HAL_TIM_PWM_Stop_IT>
	  	  actualPosdDeg = 0;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_EXTI_Callback+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	801a      	strh	r2, [r3, #0]
	  	  startPos = !HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin);
 8001458:	2110      	movs	r1, #16
 800145a:	4819      	ldr	r0, [pc, #100]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x98>)
 800145c:	f001 fc92 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e000      	b.n	8001476 <HAL_GPIO_EXTI_Callback+0x4e>
      } else {
          __NOP();
 8001474:	bf00      	nop
      }

  if(GPIO_Pin == SW_2_Pin) {
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d115      	bne.n	80014a8 <HAL_GPIO_EXTI_Callback+0x80>
	  	  HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 800147c:	2104      	movs	r1, #4
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001480:	f003 f8c0 	bl	8004604 <HAL_TIM_PWM_Stop_IT>
	  	  actualPosdDeg = 900;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_GPIO_EXTI_Callback+0x94>)
 8001486:	f44f 7261 	mov.w	r2, #900	; 0x384
 800148a:	801a      	strh	r2, [r3, #0]
	  	  endPos = !HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin);
 800148c:	2101      	movs	r1, #1
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_GPIO_EXTI_Callback+0xa4>)
 8001490:	f001 fc78 	bl	8002d84 <HAL_GPIO_ReadPin>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_GPIO_EXTI_Callback+0xa8>)
 80014a4:	701a      	strb	r2, [r3, #0]
    } else {
        __NOP();
    }
}
 80014a6:	e000      	b.n	80014aa <HAL_GPIO_EXTI_Callback+0x82>
        __NOP();
 80014a8:	bf00      	nop
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000002 	.word	0x20000002
 80014b8:	200002a8 	.word	0x200002a8
 80014bc:	20000364 	.word	0x20000364
 80014c0:	40010800 	.word	0x40010800
 80014c4:	20000360 	.word	0x20000360
 80014c8:	200001f4 	.word	0x200001f4
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	20000361 	.word	0x20000361

080014d4 <Set_Led_Output>:
 * @param:  bitpattern representing LED state:
 * 			RED, YELLOW, GREEN
 * 			1 = on, 0 = off
 * @return: 0 on success
 */
int Set_Led_Output(uint8_t led_mask){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, led_mask & RED);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <Set_Led_Output+0x50>)
 80014ec:	f001 fc61 	bl	8002db2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, led_mask & YELLOW);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <Set_Led_Output+0x50>)
 8001500:	f001 fc57 	bl	8002db2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, led_mask & GREEN);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <Set_Led_Output+0x50>)
 8001514:	f001 fc4d 	bl	8002db2 <HAL_GPIO_WritePin>

	return EXIT_SUCCESS;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40010800 	.word	0x40010800

08001528 <Toggle_Led_Output>:
 * @param:  bitpattern representing LEDs to toggle:
 * 			RED, YELLOW, GREEN
 * 			1 = toggle, 0 = do nothing
 * @return: 0 on success
 */
int Toggle_Led_Output(uint8_t led_mask){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	if(led_mask & RED) HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <Toggle_Led_Output+0x1c>
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <Toggle_Led_Output+0x50>)
 8001540:	f001 fc4f 	bl	8002de2 <HAL_GPIO_TogglePin>
	if(led_mask & YELLOW)HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <Toggle_Led_Output+0x30>
 800154e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <Toggle_Led_Output+0x50>)
 8001554:	f001 fc45 	bl	8002de2 <HAL_GPIO_TogglePin>
	if(led_mask & GREEN)HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <Toggle_Led_Output+0x44>
 8001562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <Toggle_Led_Output+0x50>)
 8001568:	f001 fc3b 	bl	8002de2 <HAL_GPIO_TogglePin>

	return EXIT_SUCCESS;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010800 	.word	0x40010800

0800157c <E_Stop_Call>:

//Emergency stop routine
int E_Stop_Call(void){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

	Set_Led_Output(RED);
 8001582:	2004      	movs	r0, #4
 8001584:	f7ff ffa6 	bl	80014d4 <Set_Led_Output>
	homingComplete = RESET; //Reset homing because drive could be moved
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <E_Stop_Call+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]

	uint8_t text_stop[] = {SEG7_5, SEG7_T, SEG7_0, SEG7_P};
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <E_Stop_Call+0x68>)
 8001590:	607b      	str	r3, [r7, #4]

	seg7_displayOnOffMulti(SPEED);
 8001592:	2001      	movs	r0, #1
 8001594:	f7fe fffc 	bl	8000590 <seg7_displayOnOffMulti>
	seg7_display(text_stop, SPEED_ADDR);
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2170      	movs	r1, #112	; 0x70
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff7f 	bl	80004a0 <seg7_display>

	while(eStop){
 80015a2:	e00d      	b.n	80015c0 <E_Stop_Call+0x44>
			//Poll until emergency stop is disabled
			eStop = !HAL_GPIO_ReadPin(E_STOP_GPIO_Port, E_STOP_Pin);
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <E_Stop_Call+0x6c>)
 80015aa:	f001 fbeb 	bl	8002d84 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <E_Stop_Call+0x70>)
 80015be:	701a      	strb	r2, [r3, #0]
	while(eStop){
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <E_Stop_Call+0x70>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1ed      	bne.n	80015a4 <E_Stop_Call+0x28>
		}

	eStop = RESET;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <E_Stop_Call+0x70>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
	Set_Led_Output(YELLOW);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ff80 	bl	80014d4 <Set_Led_Output>

	return EXIT_SUCCESS;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000035f 	.word	0x2000035f
 80015e4:	15001405 	.word	0x15001405
 80015e8:	40010c00 	.word	0x40010c00
 80015ec:	20000002 	.word	0x20000002

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Set_Led_Output(RED | YELLOW);
 80015f8:	2006      	movs	r0, #6
 80015fa:	f7ff ff6b 	bl	80014d4 <Set_Led_Output>
 80015fe:	e7fb      	b.n	80015f8 <Error_Handler+0x8>

08001600 <set_pwm_maindrv>:
 * 			spin_percent: spin from -50 to +50%
 *
 * */


int set_pwm_maindrv(uint16_t speed_percent, int16_t spin_percent, TIM_HandleTypeDef htim){
 8001600:	b082      	sub	sp, #8
 8001602:	b580      	push	{r7, lr}
 8001604:	b08a      	sub	sp, #40	; 0x28
 8001606:	af02      	add	r7, sp, #8
 8001608:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800160c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8001610:	4603      	mov	r3, r0
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	460b      	mov	r3, r1
 8001616:	80bb      	strh	r3, [r7, #4]

	/*Calculate the range from 10 to 90 percent and the offset
	 * to 10 percent of the counter value therefore the init values
	 * of htim1 are used.*/

	uint32_t speed_range = htim.Init.Period*(MAIN_DRV_MAX_DUTY - MAIN_DRV_MIN_DUTY)/100;
 8001618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	011a      	lsls	r2, r3, #4
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <set_pwm_maindrv+0xa0>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	61fb      	str	r3, [r7, #28]
	uint32_t speed_offset = htim.Init.Period*MAIN_DRV_MIN_DUTY/100;
 800162e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <set_pwm_maindrv+0xa0>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	61bb      	str	r3, [r7, #24]
	uint32_t speed_max = speed_offset + speed_range;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
	uint32_t speed_absolute = speed_offset+(speed_range*speed_percent/100);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	fb02 f303 	mul.w	r3, r2, r3
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <set_pwm_maindrv+0xa0>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4413      	add	r3, r2
 800165c:	613b      	str	r3, [r7, #16]

	uint32_t speed_top = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
	uint32_t speed_bottom = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]

	calc_drv_dutycycle(speed_offset, speed_max, speed_absolute, spin_percent, &speed_top, &speed_bottom);
 8001666:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	69b8      	ldr	r0, [r7, #24]
 800167e:	f000 f813 	bl	80016a8 <calc_drv_dutycycle>

	TIM1->CCR1 = speed_top;
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <set_pwm_maindrv+0xa4>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = speed_bottom;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <set_pwm_maindrv+0xa4>)
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	6393      	str	r3, [r2, #56]	; 0x38

	return EXIT_SUCCESS;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800169a:	b002      	add	sp, #8
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	51eb851f 	.word	0x51eb851f
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <calc_drv_dutycycle>:
		uint32_t max_speed,
		uint32_t abs_speed,
		int16_t spin_percent,
		uint32_t* top_drv,
		uint32_t* bottom_drv
		){
 80016a8:	b480      	push	{r7}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	807b      	strh	r3, [r7, #2]

	uint32_t speed_dif = (max_speed-min_speed)*abs(spin_percent)/100;
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016c0:	2a00      	cmp	r2, #0
 80016c2:	bfb8      	it	lt
 80016c4:	4252      	neglt	r2, r2
 80016c6:	b292      	uxth	r2, r2
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <calc_drv_dutycycle+0xd4>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	61fb      	str	r3, [r7, #28]
	uint32_t top_margin = max_speed - abs_speed;
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	61bb      	str	r3, [r7, #24]
	uint32_t bottom_margin = abs_speed - min_speed;
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]

	uint32_t* faster_drv;
	uint32_t* slower_drv;

	(spin_percent > 0) ? (faster_drv = top_drv) : (faster_drv = bottom_drv);
 80016e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd02      	ble.n	80016f4 <calc_drv_dutycycle+0x4c>
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e001      	b.n	80016f8 <calc_drv_dutycycle+0x50>
 80016f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
	(spin_percent < 0) ? (slower_drv = top_drv) : (slower_drv = bottom_drv);
 80016f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da02      	bge.n	8001706 <calc_drv_dutycycle+0x5e>
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	e001      	b.n	800170a <calc_drv_dutycycle+0x62>
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	623b      	str	r3, [r7, #32]

	if(speed_dif == 0){
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d108      	bne.n	8001722 <calc_drv_dutycycle+0x7a>
		*top_drv = *bottom_drv = abs_speed;
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	601a      	str	r2, [r3, #0]
		return EXIT_SUCCESS;
 800171e:	2300      	movs	r3, #0
 8001720:	e026      	b.n	8001770 <calc_drv_dutycycle+0xc8>
	}

	if(top_margin < speed_dif){
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	429a      	cmp	r2, r3
 8001728:	d209      	bcs.n	800173e <calc_drv_dutycycle+0x96>
		*faster_drv = max_speed;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	601a      	str	r2, [r3, #0]
		*slower_drv = max_speed - 2*speed_dif;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e017      	b.n	800176e <calc_drv_dutycycle+0xc6>
	}
	else if(bottom_margin < speed_dif){
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	429a      	cmp	r2, r3
 8001744:	d209      	bcs.n	800175a <calc_drv_dutycycle+0xb2>
		*slower_drv = min_speed;
 8001746:	6a3b      	ldr	r3, [r7, #32]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]
		*faster_drv = min_speed + 2*speed_dif;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005a      	lsls	r2, r3, #1
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	441a      	add	r2, r3
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e009      	b.n	800176e <calc_drv_dutycycle+0xc6>
	}
	else {
		*faster_drv = abs_speed + speed_dif;
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	441a      	add	r2, r3
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	601a      	str	r2, [r3, #0]
		*slower_drv = abs_speed - speed_dif;
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	1ad2      	subs	r2, r2, r3
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	601a      	str	r2, [r3, #0]
	}

	return EXIT_SUCCESS;
 800176e:	2300      	movs	r3, #0

}
 8001770:	4618      	mov	r0, r3
 8001772:	372c      	adds	r7, #44	; 0x2c
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	51eb851f 	.word	0x51eb851f

08001780 <set_pos_posdrv>:

uint16_t actualPosdDeg;	//Actual pos of drive in decaDeg, relative to home
static uint16_t msPerdDegCw;	//Millisecs per degree for clockwise side
static uint16_t msPerdDegCcw;	//Millisecs per degree for counterclockwise side

int set_pos_posdrv(uint16_t angle_degree){
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	 * Calc the new target val based on target degree value.
	 * Calc new pulse duration based on target value, actual value and direction
	 * fire pulse set moving flag to true
	 * TODO add callback to reset flag
	 */
	int16_t correction_value = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	81fb      	strh	r3, [r7, #14]

	if(posDrvRunning){
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <set_pos_posdrv+0x128>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02a      	beq.n	80017ec <set_pos_posdrv+0x6c>
		if(posDrvDir == 1){
 8001796:	4b45      	ldr	r3, [pc, #276]	; (80018ac <set_pos_posdrv+0x12c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d112      	bne.n	80017c4 <set_pos_posdrv+0x44>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 800179e:	2104      	movs	r1, #4
 80017a0:	4843      	ldr	r0, [pc, #268]	; (80018b0 <set_pos_posdrv+0x130>)
 80017a2:	f002 ff2f 	bl	8004604 <HAL_TIM_PWM_Stop_IT>
			correction_value = posDrvDir*((TIM2->CNT) - PULSE_DELAY)/msPerdDegCw;
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <set_pos_posdrv+0x12c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	3b0a      	subs	r3, #10
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	4a3e      	ldr	r2, [pc, #248]	; (80018b4 <set_pos_posdrv+0x134>)
 80017ba:	8812      	ldrh	r2, [r2, #0]
 80017bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c0:	81fb      	strh	r3, [r7, #14]
 80017c2:	e010      	b.n	80017e6 <set_pos_posdrv+0x66>
		}
		else{
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 80017c4:	2104      	movs	r1, #4
 80017c6:	483c      	ldr	r0, [pc, #240]	; (80018b8 <set_pos_posdrv+0x138>)
 80017c8:	f002 ff1c 	bl	8004604 <HAL_TIM_PWM_Stop_IT>
			correction_value = posDrvDir*((TIM4->CNT) - PULSE_DELAY)/msPerdDegCcw;
 80017cc:	4b37      	ldr	r3, [pc, #220]	; (80018ac <set_pos_posdrv+0x12c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <set_pos_posdrv+0x13c>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	3b0a      	subs	r3, #10
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4a38      	ldr	r2, [pc, #224]	; (80018c0 <set_pos_posdrv+0x140>)
 80017de:	8812      	ldrh	r2, [r2, #0]
 80017e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e4:	81fb      	strh	r3, [r7, #14]
		}

		posDrvRunning = RESET;
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <set_pos_posdrv+0x128>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	}

	actualPosdDeg += correction_value;
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <set_pos_posdrv+0x144>)
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	89fb      	ldrh	r3, [r7, #14]
 80017f2:	4413      	add	r3, r2
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <set_pos_posdrv+0x144>)
 80017f8:	801a      	strh	r2, [r3, #0]
	int16_t deltadDeg = (angle_degree*10) - actualPosdDeg;
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	461a      	mov	r2, r3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <set_pos_posdrv+0x144>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	81bb      	strh	r3, [r7, #12]

	if(deltadDeg == 0) return EXIT_SUCCESS;
 8001810:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <set_pos_posdrv+0x9c>
 8001818:	2300      	movs	r3, #0
 800181a:	e040      	b.n	800189e <set_pos_posdrv+0x11e>

	if(deltadDeg > 0){
 800181c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dd1a      	ble.n	800185a <set_pos_posdrv+0xda>
		TIM2->CNT = 0;
 8001824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001828:	2200      	movs	r2, #0
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CCR2 = PULSE_DELAY;
 800182c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001830:	220a      	movs	r2, #10
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->ARR = (deltadDeg*msPerdDegCw) + PULSE_DELAY;
 8001834:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <set_pos_posdrv+0x134>)
 800183a:	8812      	ldrh	r2, [r2, #0]
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	f103 020a 	add.w	r2, r3, #10
 8001844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800184a:	2104      	movs	r1, #4
 800184c:	4818      	ldr	r0, [pc, #96]	; (80018b0 <set_pos_posdrv+0x130>)
 800184e:	f002 fdd3 	bl	80043f8 <HAL_TIM_PWM_Start>
		posDrvDir = 1;
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <set_pos_posdrv+0x12c>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e016      	b.n	8001888 <set_pos_posdrv+0x108>
	}
	else {
		TIM4->CNT = 0;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <set_pos_posdrv+0x13c>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
		TIM4->CCR2 = PULSE_DELAY;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <set_pos_posdrv+0x13c>)
 8001862:	220a      	movs	r2, #10
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->ARR = -(deltadDeg*msPerdDegCcw) + PULSE_DELAY;
 8001866:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800186a:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <set_pos_posdrv+0x140>)
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	f1c3 020a 	rsb	r2, r3, #10
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <set_pos_posdrv+0x13c>)
 8001878:	62da      	str	r2, [r3, #44]	; 0x2c
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800187a:	2104      	movs	r1, #4
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <set_pos_posdrv+0x138>)
 800187e:	f002 fdbb 	bl	80043f8 <HAL_TIM_PWM_Start>
		posDrvDir = -1;
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <set_pos_posdrv+0x12c>)
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	701a      	strb	r2, [r3, #0]
	}

	actualPosdDeg += deltadDeg;
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <set_pos_posdrv+0x144>)
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <set_pos_posdrv+0x144>)
 8001894:	801a      	strh	r2, [r3, #0]

	posDrvRunning = SET;
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <set_pos_posdrv+0x128>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000035d 	.word	0x2000035d
 80018ac:	20000362 	.word	0x20000362
 80018b0:	200001f4 	.word	0x200001f4
 80018b4:	20000366 	.word	0x20000366
 80018b8:	200002a8 	.word	0x200002a8
 80018bc:	40000800 	.word	0x40000800
 80018c0:	20000368 	.word	0x20000368
 80018c4:	20000364 	.word	0x20000364

080018c8 <init_home_pos_drive>:

int init_home_pos_drive(){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	 * TODO test EXTIS for switches SW0 and SW1
	 */
	uint16_t cwTimeMs;
	uint16_t ccwTimeMs;

	home_pos_drive();
 80018ce:	f000 f871 	bl	80019b4 <home_pos_drive>

	TIM2->ARR = 20000;
 80018d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR2 = PULSE_DELAY;
 80018dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e0:	220a      	movs	r2, #10
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
	uint32_t startTime = HAL_GetTick();
 80018e4:	f000 fb86 	bl	8001ff4 <HAL_GetTick>
 80018e8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80018ea:	2104      	movs	r1, #4
 80018ec:	4828      	ldr	r0, [pc, #160]	; (8001990 <init_home_pos_drive+0xc8>)
 80018ee:	f002 fd83 	bl	80043f8 <HAL_TIM_PWM_Start>

	while(!endPos){
 80018f2:	bf00      	nop
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <init_home_pos_drive+0xcc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0fb      	beq.n	80018f4 <init_home_pos_drive+0x2c>
		//Wait until SW2 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80018fc:	2104      	movs	r1, #4
 80018fe:	4824      	ldr	r0, [pc, #144]	; (8001990 <init_home_pos_drive+0xc8>)
 8001900:	f002 fe1c 	bl	800453c <HAL_TIM_PWM_Stop>
	cwTimeMs = HAL_GetTick() - startTime;
 8001904:	f000 fb76 	bl	8001ff4 <HAL_GetTick>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	b29b      	uxth	r3, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	807b      	strh	r3, [r7, #2]

	TIM4->ARR = 20000;
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <init_home_pos_drive+0xd0>)
 8001916:	f644 6220 	movw	r2, #20000	; 0x4e20
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <init_home_pos_drive+0xd0>)
 800191e:	220a      	movs	r2, #10
 8001920:	639a      	str	r2, [r3, #56]	; 0x38
	startTime = HAL_GetTick();
 8001922:	f000 fb67 	bl	8001ff4 <HAL_GetTick>
 8001926:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001928:	2104      	movs	r1, #4
 800192a:	481c      	ldr	r0, [pc, #112]	; (800199c <init_home_pos_drive+0xd4>)
 800192c:	f002 fd64 	bl	80043f8 <HAL_TIM_PWM_Start>

	while(!startPos){
 8001930:	bf00      	nop
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <init_home_pos_drive+0xd8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0fb      	beq.n	8001932 <init_home_pos_drive+0x6a>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	4817      	ldr	r0, [pc, #92]	; (800199c <init_home_pos_drive+0xd4>)
 800193e:	f002 fdfd 	bl	800453c <HAL_TIM_PWM_Stop>
	ccwTimeMs = HAL_GetTick() - startTime;
 8001942:	f000 fb57 	bl	8001ff4 <HAL_GetTick>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	b29b      	uxth	r3, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	803b      	strh	r3, [r7, #0]

	msPerdDegCw = cwTimeMs/900;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <init_home_pos_drive+0xdc>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <init_home_pos_drive+0xe0>)
 8001960:	801a      	strh	r2, [r3, #0]
	msPerdDegCcw = ccwTimeMs/900;
 8001962:	883b      	ldrh	r3, [r7, #0]
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <init_home_pos_drive+0xdc>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <init_home_pos_drive+0xe4>)
 8001970:	801a      	strh	r2, [r3, #0]
	initHomingComplete = SET;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <init_home_pos_drive+0xe8>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
	TIM2->CNT = 0;
 8001978:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->CNT = 0;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <init_home_pos_drive+0xd0>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

	return EXIT_SUCCESS;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001f4 	.word	0x200001f4
 8001994:	20000361 	.word	0x20000361
 8001998:	40000800 	.word	0x40000800
 800199c:	200002a8 	.word	0x200002a8
 80019a0:	20000360 	.word	0x20000360
 80019a4:	91a2b3c5 	.word	0x91a2b3c5
 80019a8:	20000366 	.word	0x20000366
 80019ac:	20000368 	.word	0x20000368
 80019b0:	2000035e 	.word	0x2000035e

080019b4 <home_pos_drive>:

int home_pos_drive(void){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

	if(startPos) return EXIT_SUCCESS;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <home_pos_drive+0x4c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <home_pos_drive+0x10>
 80019c0:	2300      	movs	r3, #0
 80019c2:	e01a      	b.n	80019fa <home_pos_drive+0x46>

	TIM4->ARR = 20000;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <home_pos_drive+0x50>)
 80019c6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = PULSE_DELAY;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <home_pos_drive+0x50>)
 80019ce:	220a      	movs	r2, #10
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019d2:	2104      	movs	r1, #4
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <home_pos_drive+0x54>)
 80019d6:	f002 fd0f 	bl	80043f8 <HAL_TIM_PWM_Start>

	while(!startPos){
 80019da:	bf00      	nop
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <home_pos_drive+0x4c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0fb      	beq.n	80019dc <home_pos_drive+0x28>
		//Wait until SW1 is reached, maybe check SW in here?
	}

	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80019e4:	2104      	movs	r1, #4
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <home_pos_drive+0x54>)
 80019e8:	f002 fda8 	bl	800453c <HAL_TIM_PWM_Stop>
	actualPosdDeg = 0;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <home_pos_drive+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
	homingComplete = SET;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <home_pos_drive+0x5c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]

	return EXIT_SUCCESS;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000360 	.word	0x20000360
 8001a04:	40000800 	.word	0x40000800
 8001a08:	200002a8 	.word	0x200002a8
 8001a0c:	20000364 	.word	0x20000364
 8001a10:	2000035f 	.word	0x2000035f

08001a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0e      	ldr	r2, [pc, #56]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_MspInit+0x5c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_MspInit+0x60>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_MspInit+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010000 	.word	0x40010000

08001a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_ADC_MspInit+0x6c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d121      	bne.n	8001adc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a98:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_ADC_MspInit+0x70>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = SPEED_Pin|SPIN_Pin|ANGLE_Pin;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <HAL_ADC_MspInit+0x74>)
 8001ad8:	f000 ffd0 	bl	8002a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40012400 	.word	0x40012400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40011000 	.word	0x40011000

08001af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_I2C_MspInit+0x74>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d124      	bne.n	8001b5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <HAL_I2C_MspInit+0x7c>)
 8001b3e:	f000 ff9d 	bl	8002a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_I2C_MspInit+0x78>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40005800 	.word	0x40005800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010c00 	.word	0x40010c00

08001b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a23      	ldr	r2, [pc, #140]	; (8001c0c <HAL_TIM_Base_MspInit+0x9c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10c      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8c:	6193      	str	r3, [r2, #24]
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b9a:	e032      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d114      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	201c      	movs	r0, #28
 8001bc4:	f000 ff23 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc8:	201c      	movs	r0, #28
 8001bca:	f000 ff3c 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 8001bce:	e018      	b.n	8001c02 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_TIM_Base_MspInit+0xa4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d113      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_TIM_Base_MspInit+0xa0>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201e      	movs	r0, #30
 8001bf8:	f000 ff09 	bl	8002a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bfc:	201e      	movs	r0, #30
 8001bfe:	f000 ff22 	bl	8002a46 <HAL_NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40000800 	.word	0x40000800

08001c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0318 	add.w	r3, r7, #24
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <HAL_TIM_MspPostInit+0xd4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d119      	bne.n	8001c6c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a2c      	ldr	r2, [pc, #176]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TDRV_PULSE_Pin|BDRV_PULSE_Pin;
 8001c50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <HAL_TIM_MspPostInit+0xdc>)
 8001c66:	f000 ff09 	bl	8002a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c6a:	e03a      	b.n	8001ce2 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d118      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	6193      	str	r3, [r2, #24]
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = POS_CW_Pin;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2302      	movs	r3, #2
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CW_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4814      	ldr	r0, [pc, #80]	; (8001cf4 <HAL_TIM_MspPostInit+0xdc>)
 8001ca2:	f000 feeb 	bl	8002a7c <HAL_GPIO_Init>
}
 8001ca6:	e01c      	b.n	8001ce2 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM4)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a12      	ldr	r2, [pc, #72]	; (8001cf8 <HAL_TIM_MspPostInit+0xe0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d117      	bne.n	8001ce2 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6193      	str	r3, [r2, #24]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_TIM_MspPostInit+0xd8>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POS_CCW_Pin;
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(POS_CCW_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <HAL_TIM_MspPostInit+0xe4>)
 8001cde:	f000 fecd 	bl	8002a7c <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	; 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40010c00 	.word	0x40010c00

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d46:	f000 f943 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f001 f85e 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8001d60:	2010      	movs	r0, #16
 8001d62:	f001 f857 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E_STOP_Pin);
 8001d6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d72:	f001 f84f 	bl	8002e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM2_IRQHandler+0x10>)
 8001d82:	f002 fd58 	bl	8004836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200001f4 	.word	0x200001f4

08001d90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <TIM4_IRQHandler+0x10>)
 8001d96:	f002 fd4e 	bl	8004836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200002a8 	.word	0x200002a8

08001da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return 1;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <_kill>:

int _kill(int pid, int sig)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dbc:	f003 fd48 	bl	8005850 <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2216      	movs	r2, #22
 8001dc4:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_exit>:

void _exit (int status)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dda:	f04f 31ff 	mov.w	r1, #4294967295
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffe7 	bl	8001db2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de4:	e7fe      	b.n	8001de4 <_exit+0x12>

08001de6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e00a      	b.n	8001e0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df8:	f3af 8000 	nop.w
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	60ba      	str	r2, [r7, #8]
 8001e04:	b2ca      	uxtb	r2, r1
 8001e06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dbf0      	blt.n	8001df8 <_read+0x12>
  }

  return len;
 8001e16:	687b      	ldr	r3, [r7, #4]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_close>:
    ITM_SendChar((*ptr++));
  return len;
}

int _close(int file)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_isatty>:

int _isatty(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f003 fcce 	bl	8005850 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20005000 	.word	0x20005000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	2000036c 	.word	0x2000036c
 8001ee8:	20000388 	.word	0x20000388

08001eec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef8:	f7ff fff8 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001efe:	490c      	ldr	r1, [pc, #48]	; (8001f30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f00:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f14:	4c09      	ldr	r4, [pc, #36]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f003 fc9b 	bl	800585c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f26:	f7fe fe0f 	bl	8000b48 <main>
  bx lr
 8001f2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f34:	08006bd0 	.word	0x08006bd0
  ldr r2, =_sbss
 8001f38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f3c:	20000384 	.word	0x20000384

08001f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_2_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_Init+0x28>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_Init+0x28>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f54:	2003      	movs	r0, #3
 8001f56:	f000 fd4f 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f000 f808 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f60:	f7ff fd58 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x54>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fd67 	bl	8002a62 <HAL_SYSTICK_Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00e      	b.n	8001fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d80a      	bhi.n	8001fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 fd2f 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb0:	4a06      	ldr	r2, [pc, #24]	; (8001fcc <HAL_InitTick+0x5c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	2000000c 	.word	0x2000000c
 8001fcc:	20000008 	.word	0x20000008

08001fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_IncTick+0x1c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	2000000c 	.word	0x2000000c
 8001ff0:	20000370 	.word	0x20000370

08001ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_GetTick+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000370 	.word	0x20000370

08002008 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0be      	b.n	80021a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fd16 	bl	8001a78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fbc5 	bl	80027dc <ADC_ConversionStop_Disable>
 8002052:	4603      	mov	r3, r0
 8002054:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 8099 	bne.w	8002196 <HAL_ADC_Init+0x18e>
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 8095 	bne.w	8002196 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002074:	f023 0302 	bic.w	r3, r3, #2
 8002078:	f043 0202 	orr.w	r2, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002088:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7b1b      	ldrb	r3, [r3, #12]
 800208e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002090:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4313      	orrs	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a0:	d003      	beq.n	80020aa <HAL_ADC_Init+0xa2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_Init+0xa8>
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_Init+0xaa>
 80020b0:	2300      	movs	r3, #0
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7d1b      	ldrb	r3, [r3, #20]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d119      	bne.n	80020f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7b1b      	ldrb	r3, [r3, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	035a      	lsls	r2, r3, #13
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e00b      	b.n	80020f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_ADC_Init+0x1a8>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	430b      	orrs	r3, r1
 800211a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002124:	d003      	beq.n	800212e <HAL_ADC_Init+0x126>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d104      	bne.n	8002138 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	3b01      	subs	r3, #1
 8002134:	051b      	lsls	r3, r3, #20
 8002136:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	430a      	orrs	r2, r1
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_ADC_Init+0x1ac>)
 8002154:	4013      	ands	r3, r2
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d10b      	bne.n	8002174 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002172:	e018      	b.n	80021a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f023 0312 	bic.w	r3, r3, #18
 800217c:	f043 0210 	orr.w	r2, r3, #16
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002194:	e007      	b.n	80021a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	ffe1f7fd 	.word	0xffe1f7fd
 80021b4:	ff1f0efe 	.word	0xff1f0efe

080021b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Start+0x1a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e098      	b.n	8002304 <HAL_ADC_Start+0x14c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 faa4 	bl	8002728 <ADC_Enable>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 8087 	bne.w	80022fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_ADC_Start+0x154>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d105      	bne.n	8002216 <HAL_ADC_Start+0x5e>
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_ADC_Start+0x158>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d115      	bne.n	8002242 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d026      	beq.n	800227e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002240:	e01d      	b.n	800227e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <HAL_ADC_Start+0x158>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d004      	beq.n	8002262 <HAL_ADC_Start+0xaa>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a2b      	ldr	r2, [pc, #172]	; (800230c <HAL_ADC_Start+0x154>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10d      	bne.n	800227e <HAL_ADC_Start+0xc6>
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_ADC_Start+0x158>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002276:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f023 0206 	bic.w	r2, r3, #6
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
 8002296:	e002      	b.n	800229e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0202 	mvn.w	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022be:	d113      	bne.n	80022e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_ADC_Start+0x154>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_ADC_Start+0x158>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	e00c      	b.n	8002302 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e003      	b.n	8002302 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40012800 	.word	0x40012800
 8002310:	40012400 	.word	0x40012400

08002314 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800232a:	f7ff fe63 	bl	8001ff4 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0d3      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d131      	bne.n	80023c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002372:	e021      	b.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d01d      	beq.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_ADC_PollForConversion+0x7e>
 8002382:	f7ff fe37 	bl	8001ff4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d212      	bcs.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0a2      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0d6      	beq.n	8002374 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023c6:	e070      	b.n	80024aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_ADC_PollForConversion+0x1f4>)
 80023ca:	681c      	ldr	r4, [r3, #0]
 80023cc:	2002      	movs	r0, #2
 80023ce:	f001 fe9b 	bl	8004108 <HAL_RCCEx_GetPeriphCLKFreq>
 80023d2:	4603      	mov	r3, r0
 80023d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_ADC_PollForConversion+0x1f8>)
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_ADC_PollForConversion+0x104>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <HAL_ADC_PollForConversion+0x1fc>)
 80023ee:	400b      	ands	r3, r1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d111      	bne.n	8002418 <HAL_ADC_PollForConversion+0x104>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6919      	ldr	r1, [r3, #16]
 80023fa:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_ADC_PollForConversion+0x200>)
 80023fc:	400b      	ands	r3, r1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d108      	bne.n	8002414 <HAL_ADC_PollForConversion+0x100>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68d9      	ldr	r1, [r3, #12]
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_ADC_PollForConversion+0x204>)
 800240a:	400b      	ands	r3, r1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_PollForConversion+0x100>
 8002410:	2314      	movs	r3, #20
 8002412:	e020      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002414:	2329      	movs	r3, #41	; 0x29
 8002416:	e01e      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_ADC_PollForConversion+0x200>)
 8002420:	400b      	ands	r3, r1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_ADC_PollForConversion+0x120>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68d9      	ldr	r1, [r3, #12]
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_ADC_PollForConversion+0x204>)
 800242e:	400b      	ands	r3, r1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_ADC_PollForConversion+0x13c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6919      	ldr	r1, [r3, #16]
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_ADC_PollForConversion+0x208>)
 800243c:	400b      	ands	r3, r1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d108      	bne.n	8002454 <HAL_ADC_PollForConversion+0x140>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68d9      	ldr	r1, [r3, #12]
 8002448:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_ADC_PollForConversion+0x208>)
 800244a:	400b      	ands	r3, r1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_ADC_PollForConversion+0x140>
 8002450:	2354      	movs	r3, #84	; 0x54
 8002452:	e000      	b.n	8002456 <HAL_ADC_PollForConversion+0x142>
 8002454:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800245c:	e021      	b.n	80024a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d01a      	beq.n	800249c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_ADC_PollForConversion+0x168>
 800246c:	f7ff fdc2 	bl	8001ff4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d20f      	bcs.n	800249c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d90b      	bls.n	800249c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e030      	b.n	80024fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	3301      	adds	r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d8d9      	bhi.n	800245e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0212 	mvn.w	r2, #18
 80024b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024ce:	d115      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	371c      	adds	r7, #28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	20000004 	.word	0x20000004
 800250c:	24924924 	.word	0x24924924
 8002510:	00924924 	.word	0x00924924
 8002514:	12492492 	.word	0x12492492
 8002518:	00492492 	.word	0x00492492
 800251c:	00249249 	.word	0x00249249

08002520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x20>
 8002554:	2302      	movs	r3, #2
 8002556:	e0dc      	b.n	8002712 <HAL_ADC_ConfigChannel+0x1da>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d81c      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b05      	subs	r3, #5
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b05      	subs	r3, #5
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
 80025a0:	e03c      	b.n	800261c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d81c      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b23      	subs	r3, #35	; 0x23
 80025bc:	221f      	movs	r2, #31
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4019      	ands	r1, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b23      	subs	r3, #35	; 0x23
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
 80025e2:	e01b      	b.n	800261c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b41      	subs	r3, #65	; 0x41
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b41      	subs	r3, #65	; 0x41
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d91c      	bls.n	800265e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	3b1e      	subs	r3, #30
 8002636:	2207      	movs	r2, #7
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	4019      	ands	r1, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6898      	ldr	r0, [r3, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	3b1e      	subs	r3, #30
 8002650:	fa00 f203 	lsl.w	r2, r0, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	e019      	b.n	8002692 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4019      	ands	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6898      	ldr	r0, [r3, #8]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	fa00 f203 	lsl.w	r2, r0, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d003      	beq.n	80026a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d132      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_ADC_ConfigChannel+0x1e4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d125      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d126      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d11a      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_ADC_ConfigChannel+0x1e8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_ADC_ConfigChannel+0x1ec>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9a      	lsrs	r2, r3, #18
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x1b2>
 80026f6:	e007      	b.n	8002708 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40012400 	.word	0x40012400
 8002720:	20000004 	.word	0x20000004
 8002724:	431bde83 	.word	0x431bde83

08002728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d040      	beq.n	80027c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <ADC_Enable+0xac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <ADC_Enable+0xb0>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002764:	e002      	b.n	800276c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002772:	f7ff fc3f 	bl	8001ff4 <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002778:	e01f      	b.n	80027ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800277a:	f7ff fc3b 	bl	8001ff4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d918      	bls.n	80027ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d011      	beq.n	80027ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d1d8      	bne.n	800277a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000004 	.word	0x20000004
 80027d8:	431bde83 	.word	0x431bde83

080027dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002806:	f7ff fbf5 	bl	8001ff4 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800280c:	e01b      	b.n	8002846 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800280e:	f7ff fbf1 	bl	8001ff4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d914      	bls.n	8002846 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	f043 0210 	orr.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e007      	b.n	8002856 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d0dc      	beq.n	800280e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <__NVIC_SetPriorityGrouping>:
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4906      	ldr	r1, [pc, #24]	; (80028f8 <__NVIC_EnableIRQ+0x34>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100

080028fc <__NVIC_SetPriority>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	db0a      	blt.n	8002926 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	490c      	ldr	r1, [pc, #48]	; (8002948 <__NVIC_SetPriority+0x4c>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	0112      	lsls	r2, r2, #4
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	440b      	add	r3, r1
 8002920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002924:	e00a      	b.n	800293c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4908      	ldr	r1, [pc, #32]	; (800294c <__NVIC_SetPriority+0x50>)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3b04      	subs	r3, #4
 8002934:	0112      	lsls	r2, r2, #4
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	440b      	add	r3, r1
 800293a:	761a      	strb	r2, [r3, #24]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <NVIC_EncodePriority>:
{
 8002950:	b480      	push	{r7}
 8002952:	b089      	sub	sp, #36	; 0x24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f1c3 0307 	rsb	r3, r3, #7
 800296a:	2b04      	cmp	r3, #4
 800296c:	bf28      	it	cs
 800296e:	2304      	movcs	r3, #4
 8002970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3304      	adds	r3, #4
 8002976:	2b06      	cmp	r3, #6
 8002978:	d902      	bls.n	8002980 <NVIC_EncodePriority+0x30>
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3b03      	subs	r3, #3
 800297e:	e000      	b.n	8002982 <NVIC_EncodePriority+0x32>
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43d9      	mvns	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	4313      	orrs	r3, r2
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Config>:
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f7ff ff90 	bl	80028fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff2d 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff42 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff90 	bl	8002950 <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5f 	bl	80028fc <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff35 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b08b      	sub	sp, #44	; 0x2c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e169      	b.n	8002d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a90:	2201      	movs	r2, #1
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8158 	bne.w	8002d5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a9a      	ldr	r2, [pc, #616]	; (8002d1c <HAL_GPIO_Init+0x2a0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d05e      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a98      	ldr	r2, [pc, #608]	; (8002d1c <HAL_GPIO_Init+0x2a0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d875      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002abe:	4a98      	ldr	r2, [pc, #608]	; (8002d20 <HAL_GPIO_Init+0x2a4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d058      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ac4:	4a96      	ldr	r2, [pc, #600]	; (8002d20 <HAL_GPIO_Init+0x2a4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d86f      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002aca:	4a96      	ldr	r2, [pc, #600]	; (8002d24 <HAL_GPIO_Init+0x2a8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d052      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ad0:	4a94      	ldr	r2, [pc, #592]	; (8002d24 <HAL_GPIO_Init+0x2a8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d869      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002ad6:	4a94      	ldr	r2, [pc, #592]	; (8002d28 <HAL_GPIO_Init+0x2ac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d04c      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002adc:	4a92      	ldr	r2, [pc, #584]	; (8002d28 <HAL_GPIO_Init+0x2ac>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d863      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002ae2:	4a92      	ldr	r2, [pc, #584]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d046      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ae8:	4a90      	ldr	r2, [pc, #576]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d85d      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002aee:	2b12      	cmp	r3, #18
 8002af0:	d82a      	bhi.n	8002b48 <HAL_GPIO_Init+0xcc>
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d859      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_GPIO_Init+0x80>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b77 	.word	0x08002b77
 8002b00:	08002b51 	.word	0x08002b51
 8002b04:	08002b63 	.word	0x08002b63
 8002b08:	08002ba5 	.word	0x08002ba5
 8002b0c:	08002bab 	.word	0x08002bab
 8002b10:	08002bab 	.word	0x08002bab
 8002b14:	08002bab 	.word	0x08002bab
 8002b18:	08002bab 	.word	0x08002bab
 8002b1c:	08002bab 	.word	0x08002bab
 8002b20:	08002bab 	.word	0x08002bab
 8002b24:	08002bab 	.word	0x08002bab
 8002b28:	08002bab 	.word	0x08002bab
 8002b2c:	08002bab 	.word	0x08002bab
 8002b30:	08002bab 	.word	0x08002bab
 8002b34:	08002bab 	.word	0x08002bab
 8002b38:	08002bab 	.word	0x08002bab
 8002b3c:	08002bab 	.word	0x08002bab
 8002b40:	08002b59 	.word	0x08002b59
 8002b44:	08002b6d 	.word	0x08002b6d
 8002b48:	4a79      	ldr	r2, [pc, #484]	; (8002d30 <HAL_GPIO_Init+0x2b4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b4e:	e02c      	b.n	8002baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	623b      	str	r3, [r7, #32]
          break;
 8002b56:	e029      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e024      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	3308      	adds	r3, #8
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e01f      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	330c      	adds	r3, #12
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e01a      	b.n	8002bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e013      	b.n	8002bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	611a      	str	r2, [r3, #16]
          break;
 8002b96:	e009      	b.n	8002bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	615a      	str	r2, [r3, #20]
          break;
 8002ba2:	e003      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x130>
          break;
 8002baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d801      	bhi.n	8002bb6 <HAL_GPIO_Init+0x13a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_Init+0x13e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2bff      	cmp	r3, #255	; 0xff
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_GPIO_Init+0x14c>
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	e002      	b.n	8002bce <HAL_GPIO_Init+0x152>
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	3b08      	subs	r3, #8
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	210f      	movs	r1, #15
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	431a      	orrs	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80b1 	beq.w	8002d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c14:	4a48      	ldr	r2, [pc, #288]	; (8002d38 <HAL_GPIO_Init+0x2bc>)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <HAL_GPIO_Init+0x2c0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <HAL_GPIO_Init+0x1ec>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a3f      	ldr	r2, [pc, #252]	; (8002d40 <HAL_GPIO_Init+0x2c4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00d      	beq.n	8002c64 <HAL_GPIO_Init+0x1e8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a3e      	ldr	r2, [pc, #248]	; (8002d44 <HAL_GPIO_Init+0x2c8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <HAL_GPIO_Init+0x1e4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3d      	ldr	r2, [pc, #244]	; (8002d48 <HAL_GPIO_Init+0x2cc>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_GPIO_Init+0x1e0>
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_Init+0x1ee>
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	e004      	b.n	8002c6a <HAL_GPIO_Init+0x1ee>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e002      	b.n	8002c6a <HAL_GPIO_Init+0x1ee>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_GPIO_Init+0x1ee>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	f002 0203 	and.w	r2, r2, #3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4093      	lsls	r3, r2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c7a:	492f      	ldr	r1, [pc, #188]	; (8002d38 <HAL_GPIO_Init+0x2bc>)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	492c      	ldr	r1, [pc, #176]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4928      	ldr	r1, [pc, #160]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	4922      	ldr	r1, [pc, #136]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	491e      	ldr	r1, [pc, #120]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ce4:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4918      	ldr	r1, [pc, #96]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
 8002cf0:	e006      	b.n	8002d00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4914      	ldr	r1, [pc, #80]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d021      	beq.n	8002d50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	490e      	ldr	r1, [pc, #56]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e021      	b.n	8002d5e <HAL_GPIO_Init+0x2e2>
 8002d1a:	bf00      	nop
 8002d1c:	10320000 	.word	0x10320000
 8002d20:	10310000 	.word	0x10310000
 8002d24:	10220000 	.word	0x10220000
 8002d28:	10210000 	.word	0x10210000
 8002d2c:	10120000 	.word	0x10120000
 8002d30:	10110000 	.word	0x10110000
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40010800 	.word	0x40010800
 8002d40:	40010c00 	.word	0x40010c00
 8002d44:	40011000 	.word	0x40011000
 8002d48:	40011400 	.word	0x40011400
 8002d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_GPIO_Init+0x304>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4909      	ldr	r1, [pc, #36]	; (8002d80 <HAL_GPIO_Init+0x304>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	3301      	adds	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f ae8e 	bne.w	8002a90 <HAL_GPIO_Init+0x14>
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	372c      	adds	r7, #44	; 0x2c
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40010400 	.word	0x40010400

08002d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	807b      	strh	r3, [r7, #2]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc2:	787b      	ldrb	r3, [r7, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc8:	887a      	ldrh	r2, [r7, #2]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dce:	e003      	b.n	8002dd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	041a      	lsls	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	611a      	str	r2, [r3, #16]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	400b      	ands	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2a:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe faf8 	bl	8001428 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40010400 	.word	0x40010400

08002e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e12b      	b.n	80030ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fe40 	bl	8001af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f001 f832 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d807      	bhi.n	8002ec8 <HAL_I2C_Init+0x84>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_I2C_Init+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e006      	b.n	8002ed6 <HAL_I2C_Init+0x92>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_I2C_Init+0x27c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e7      	b.n	80030ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a78      	ldr	r2, [pc, #480]	; (80030c4 <HAL_I2C_Init+0x280>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0c9b      	lsrs	r3, r3, #18
 8002ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d802      	bhi.n	8002f18 <HAL_I2C_Init+0xd4>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	e009      	b.n	8002f2c <HAL_I2C_Init+0xe8>
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1e:	fb02 f303 	mul.w	r3, r2, r3
 8002f22:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_I2C_Init+0x284>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	495c      	ldr	r1, [pc, #368]	; (80030b8 <HAL_I2C_Init+0x274>)
 8002f48:	428b      	cmp	r3, r1
 8002f4a:	d819      	bhi.n	8002f80 <HAL_I2C_Init+0x13c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e59      	subs	r1, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f5a:	1c59      	adds	r1, r3, #1
 8002f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_I2C_Init+0x138>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1e59      	subs	r1, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7a:	e051      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	e04f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <HAL_I2C_Init+0x168>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e012      	b.n	8002fd2 <HAL_I2C_Init+0x18e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_I2C_Init+0x196>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10e      	bne.n	8003000 <HAL_I2C_Init+0x1bc>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1e58      	subs	r0, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	440b      	add	r3, r1
 8002ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffe:	e00f      	b.n	8003020 <HAL_I2C_Init+0x1dc>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6911      	ldr	r1, [r2, #16]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	4311      	orrs	r1, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	430b      	orrs	r3, r1
 8003062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	000186a0 	.word	0x000186a0
 80030bc:	001e847f 	.word	0x001e847f
 80030c0:	003d08ff 	.word	0x003d08ff
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	461a      	mov	r2, r3
 80030d8:	460b      	mov	r3, r1
 80030da:	817b      	strh	r3, [r7, #10]
 80030dc:	4613      	mov	r3, r2
 80030de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7fe ff88 	bl	8001ff4 <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	f040 80e0 	bne.w	80032b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	4970      	ldr	r1, [pc, #448]	; (80032c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f964 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e0d3      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_I2C_Master_Transmit+0x50>
 8003118:	2302      	movs	r3, #2
 800311a:	e0cc      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d007      	beq.n	8003142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2221      	movs	r2, #33	; 0x21
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2210      	movs	r2, #16
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	893a      	ldrh	r2, [r7, #8]
 8003172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4a50      	ldr	r2, [pc, #320]	; (80032c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003184:	8979      	ldrh	r1, [r7, #10]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a3a      	ldr	r2, [r7, #32]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f89c 	bl	80032c8 <I2C_MasterRequestWrite>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e08d      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031b0:	e066      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa22 	bl	8003600 <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06b      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	781a      	ldrb	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b04      	cmp	r3, #4
 800321a:	d11b      	bne.n	8003254 <HAL_I2C_Master_Transmit+0x188>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa19 	bl	8003690 <I2C_WaitOnBTFFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e01a      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d194      	bne.n	80031b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	00100002 	.word	0x00100002
 80032c4:	ffff0000 	.word	0xffff0000

080032c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d006      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d003      	beq.n	80032f2 <I2C_MasterRequestWrite+0x2a>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f0:	d108      	bne.n	8003304 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e00b      	b.n	800331c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b12      	cmp	r3, #18
 800330a:	d107      	bne.n	800331c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f84f 	bl	80033cc <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d103      	bne.n	800334c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e035      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	e01b      	b.n	80033a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800336c:	897b      	ldrh	r3, [r7, #10]
 800336e:	11db      	asrs	r3, r3, #7
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0306 	and.w	r3, r3, #6
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f063 030f 	orn	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	490e      	ldr	r1, [pc, #56]	; (80033c4 <I2C_MasterRequestWrite+0xfc>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f898 	bl	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e010      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <I2C_MasterRequestWrite+0x100>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f888 	bl	80034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010008 	.word	0x00010008
 80033c8:	00010002 	.word	0x00010002

080033cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	4613      	mov	r3, r2
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033dc:	e048      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d044      	beq.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fe fe05 	bl	8001ff4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d139      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10d      	bne.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	e00c      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	429a      	cmp	r2, r3
 8003440:	d116      	bne.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e023      	b.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10d      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0xca>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	e00c      	b.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d093      	beq.n	80033de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ce:	e071      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034de:	d123      	bne.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e067      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d041      	beq.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fd60 	bl	8001ff4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d136      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10c      	bne.n	800356a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	43da      	mvns	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e00b      	b.n	8003582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d016      	beq.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e021      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10c      	bne.n	80035d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e00b      	b.n	80035f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f af6d 	bne.w	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360c:	e034      	b.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f886 	bl	8003720 <I2C_IsAcknowledgeFailed>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e034      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d028      	beq.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fce5 	bl	8001ff4 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11d      	bne.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e007      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d1c3      	bne.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800369c:	e034      	b.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f83e 	bl	8003720 <I2C_IsAcknowledgeFailed>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d028      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fc9d 	bl	8001ff4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d1c3      	bne.n	800369e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d11b      	bne.n	8003770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0204 	orr.w	r2, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e272      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8087 	beq.w	80038aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800379c:	4b92      	ldr	r3, [pc, #584]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d00c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037a8:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d112      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
 80037b4:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d10b      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c2:	4b89      	ldr	r3, [pc, #548]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x12c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d168      	bne.n	80038a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e24c      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x76>
 80037e4:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a7f      	ldr	r2, [pc, #508]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	e02e      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7a      	ldr	r2, [pc, #488]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a77      	ldr	r2, [pc, #476]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800380c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0xbc>
 800381e:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a71      	ldr	r2, [pc, #452]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6e      	ldr	r2, [pc, #440]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xd4>
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a67      	ldr	r2, [pc, #412]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fe fbcc 	bl	8001ff4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7fe fbc8 	bl	8001ff4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e200      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xe4>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fbb8 	bl	8001ff4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe fbb4 	bl	8001ff4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e1ec      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x10c>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d063      	beq.n	800397e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b6:	4b4c      	ldr	r3, [pc, #304]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038c2:	4b49      	ldr	r3, [pc, #292]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d11c      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
 80038ce:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d116      	bne.n	8003908 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1c0      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f2:	4b3d      	ldr	r3, [pc, #244]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4939      	ldr	r1, [pc, #228]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	e03a      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d020      	beq.n	8003952 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fb6d 	bl	8001ff4 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391e:	f7fe fb69 	bl	8001ff4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e1a1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003930:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b2a      	ldr	r3, [pc, #168]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4927      	ldr	r1, [pc, #156]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <HAL_RCC_OscConfig+0x270>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fe fb4c 	bl	8001ff4 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003960:	f7fe fb48 	bl	8001ff4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e180      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03a      	beq.n	8003a00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d019      	beq.n	80039c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003998:	f7fe fb2c 	bl	8001ff4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a0:	f7fe fb28 	bl	8001ff4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e160      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCC_OscConfig+0x26c>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f000 face 	bl	8003f60 <RCC_Delay>
 80039c4:	e01c      	b.n	8003a00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_OscConfig+0x274>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039cc:	f7fe fb12 	bl	8001ff4 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d2:	e00f      	b.n	80039f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fb0e 	bl	8001ff4 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d908      	bls.n	80039f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e146      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	42420000 	.word	0x42420000
 80039f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b92      	ldr	r3, [pc, #584]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1e9      	bne.n	80039d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a6 	beq.w	8003b5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b8b      	ldr	r3, [pc, #556]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	4b88      	ldr	r3, [pc, #544]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	4a87      	ldr	r2, [pc, #540]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a28:	61d3      	str	r3, [r2, #28]
 8003a2a:	4b85      	ldr	r3, [pc, #532]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a36:	2301      	movs	r3, #1
 8003a38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b82      	ldr	r3, [pc, #520]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d118      	bne.n	8003a78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7e      	ldr	r2, [pc, #504]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a52:	f7fe facf 	bl	8001ff4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe facb 	bl	8001ff4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b64      	cmp	r3, #100	; 0x64
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e103      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCC_OscConfig+0x4c8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d106      	bne.n	8003a8e <HAL_RCC_OscConfig+0x312>
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a6e      	ldr	r2, [pc, #440]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	e02d      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a69      	ldr	r2, [pc, #420]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	4a66      	ldr	r2, [pc, #408]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6213      	str	r3, [r2, #32]
 8003aae:	e01c      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x356>
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a60      	ldr	r2, [pc, #384]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4a5d      	ldr	r2, [pc, #372]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	f043 0301 	orr.w	r3, r3, #1
 8003ace:	6213      	str	r3, [r2, #32]
 8003ad0:	e00b      	b.n	8003aea <HAL_RCC_OscConfig+0x36e>
 8003ad2:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6213      	str	r3, [r2, #32]
 8003ade:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a57      	ldr	r2, [pc, #348]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d015      	beq.n	8003b1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fa7f 	bl	8001ff4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fa7b 	bl	8001ff4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0b1      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0ee      	beq.n	8003afa <HAL_RCC_OscConfig+0x37e>
 8003b1c:	e014      	b.n	8003b48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fa69 	bl	8001ff4 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe fa65 	bl	8001ff4 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e09b      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4a3b      	ldr	r2, [pc, #236]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8087 	beq.w	8003c72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d061      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d146      	bne.n	8003c06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b78:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fa39 	bl	8001ff4 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe fa35 	bl	8001ff4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e06d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	4921      	ldr	r1, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc0:	4b1f      	ldr	r3, [pc, #124]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a19      	ldr	r1, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	491b      	ldr	r1, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe fa09 	bl	8001ff4 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fe fa05 	bl	8001ff4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e03d      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46a>
 8003c04:	e035      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f9f2 	bl	8001ff4 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c14:	f7fe f9ee 	bl	8001ff4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e026      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x498>
 8003c32:	e01e      	b.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e019      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40007000 	.word	0x40007000
 8003c48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x500>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0d0      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 0207 	bic.w	r2, r3, #7
 8003caa:	4965      	ldr	r1, [pc, #404]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b63      	ldr	r3, [pc, #396]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0b8      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ce6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	494d      	ldr	r1, [pc, #308]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d040      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07f      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e073      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06b      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4936      	ldr	r1, [pc, #216]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f940 	bl	8001ff4 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe f93c 	bl	8001ff4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e053      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d210      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e032      	b.n	8003e36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4916      	ldr	r1, [pc, #88]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	490e      	ldr	r1, [pc, #56]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e0e:	f000 f821 	bl	8003e54 <HAL_RCC_GetSysClockFreq>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	5ccb      	ldrb	r3, [r1, r3]
 8003e22:	fa22 f303 	lsr.w	r3, r2, r3
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_RCC_ClockConfig+0x1cc>)
 8003e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_ClockConfig+0x1d0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f89e 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08006a40 	.word	0x08006a40
 8003e4c:	20000004 	.word	0x20000004
 8003e50:	20000008 	.word	0x20000008

08003e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	2300      	movs	r3, #0
 8003e68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d002      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x30>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x36>
 8003e82:	e027      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003e86:	613b      	str	r3, [r7, #16]
      break;
 8003e88:	e027      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e94:	5cd3      	ldrb	r3, [r2, r3]
 8003e96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	0c5b      	lsrs	r3, r3, #17
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003eb6:	fb03 f202 	mul.w	r2, r3, r2
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e004      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
      break;
 8003ed2:	e002      	b.n	8003eda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed6:	613b      	str	r3, [r7, #16]
      break;
 8003ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eda:	693b      	ldr	r3, [r7, #16]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	007a1200 	.word	0x007a1200
 8003ef0:	08006a58 	.word	0x08006a58
 8003ef4:	08006a68 	.word	0x08006a68
 8003ef8:	003d0900 	.word	0x003d0900

08003efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000004 	.word	0x20000004

08003f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f14:	f7ff fff2 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	; (8003f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08006a50 	.word	0x08006a50

08003f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f3c:	f7ff ffde 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	0adb      	lsrs	r3, r3, #11
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4903      	ldr	r1, [pc, #12]	; (8003f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08006a50 	.word	0x08006a50

08003f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <RCC_Delay+0x34>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <RCC_Delay+0x38>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a5b      	lsrs	r3, r3, #9
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f7c:	bf00      	nop
  }
  while (Delay --);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	60fa      	str	r2, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f9      	bne.n	8003f7c <RCC_Delay+0x1c>
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	20000004 	.word	0x20000004
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d07d      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fbc:	4b4f      	ldr	r3, [pc, #316]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	4a4b      	ldr	r2, [pc, #300]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	61d3      	str	r3, [r2, #28]
 8003fd4:	4b49      	ldr	r3, [pc, #292]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b46      	ldr	r3, [pc, #280]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d118      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ffc:	f7fd fffa 	bl	8001ff4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004004:	f7fd fff6 	bl	8001ff4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e06d      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b3a      	ldr	r3, [pc, #232]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004022:	4b36      	ldr	r3, [pc, #216]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d02e      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d027      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004050:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004056:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fd ffc5 	bl	8001ff4 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd ffc1 	bl	8001ff4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e036      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4917      	ldr	r1, [pc, #92]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d105      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	490b      	ldr	r1, [pc, #44]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4904      	ldr	r1, [pc, #16]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	40007000 	.word	0x40007000
 8004104:	42420440 	.word	0x42420440

08004108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	2300      	movs	r3, #0
 8004116:	61fb      	str	r3, [r7, #28]
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b10      	cmp	r3, #16
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b10      	cmp	r3, #16
 800412e:	f200 808a 	bhi.w	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d045      	beq.n	80041c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d075      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800413e:	e082      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004140:	4b46      	ldr	r3, [pc, #280]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004146:	4b45      	ldr	r3, [pc, #276]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d07b      	beq.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0c9b      	lsrs	r3, r3, #18
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	4a41      	ldr	r2, [pc, #260]	; (8004260 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800415c:	5cd3      	ldrb	r3, [r2, r3]
 800415e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800416a:	4b3c      	ldr	r3, [pc, #240]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	0c5b      	lsrs	r3, r3, #17
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004176:	5cd3      	ldrb	r3, [r2, r3]
 8004178:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004184:	4a38      	ldr	r2, [pc, #224]	; (8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	fbb2 f2f3 	udiv	r2, r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	fb02 f303 	mul.w	r3, r2, r3
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4a34      	ldr	r2, [pc, #208]	; (800426c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041a0:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ac:	d102      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	61bb      	str	r3, [r7, #24]
      break;
 80041b2:	e04a      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	61bb      	str	r3, [r7, #24]
      break;
 80041c2:	e042      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d108      	bne.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80041e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e01f      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d109      	bne.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80041f4:	4b19      	ldr	r3, [pc, #100]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004200:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e00f      	b.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004212:	d11c      	bne.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d016      	beq.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004220:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004224:	61bb      	str	r3, [r7, #24]
      break;
 8004226:	e012      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004228:	e011      	b.n	800424e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800422a:	f7ff fe85 	bl	8003f38 <HAL_RCC_GetPCLK2Freq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0b9b      	lsrs	r3, r3, #14
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	3301      	adds	r3, #1
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]
      break;
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800424e:	bf00      	nop
    }
  }
  return (frequency);
 8004250:	69bb      	ldr	r3, [r7, #24]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	08006a6c 	.word	0x08006a6c
 8004264:	08006a7c 	.word	0x08006a7c
 8004268:	007a1200 	.word	0x007a1200
 800426c:	003d0900 	.word	0x003d0900
 8004270:	aaaaaaab 	.word	0xaaaaaaab

08004274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e04c      	b.n	8004320 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d111      	bne.n	80042b6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 f9b6 	bl	800560c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_TIM_Base_Init+0xb4>)
 80042ac:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f000 fefb 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	08001b71 	.word	0x08001b71

0800432c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04c      	b.n	80043d8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d111      	bne.n	800436e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 f95a 	bl	800560c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIM_PWM_Init+0xb4>)
 8004364:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f000 fe9f 	bl	80050c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	080043e5 	.word	0x080043e5

080043e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr
	...

080043f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_TIM_PWM_Start+0x24>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	bf14      	ite	ne
 8004414:	2301      	movne	r3, #1
 8004416:	2300      	moveq	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	e022      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d109      	bne.n	8004436 <HAL_TIM_PWM_Start+0x3e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	bf14      	ite	ne
 800442e:	2301      	movne	r3, #1
 8004430:	2300      	moveq	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	e015      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b08      	cmp	r3, #8
 800443a:	d109      	bne.n	8004450 <HAL_TIM_PWM_Start+0x58>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b01      	cmp	r3, #1
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e008      	b.n	8004462 <HAL_TIM_PWM_Start+0x6a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e05e      	b.n	8004528 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Start+0x82>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004478:	e013      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Start+0x92>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Start+0xa2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	e003      	b.n	80044a2 <HAL_TIM_PWM_Start+0xaa>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 f88a 	bl	80055c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_PWM_Start+0x138>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d107      	bne.n	80044ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIM_PWM_Start+0x138>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00e      	beq.n	80044f2 <HAL_TIM_PWM_Start+0xfa>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d009      	beq.n	80044f2 <HAL_TIM_PWM_Start+0xfa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <HAL_TIM_PWM_Start+0x13c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <HAL_TIM_PWM_Start+0xfa>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a12      	ldr	r2, [pc, #72]	; (8004538 <HAL_TIM_PWM_Start+0x140>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b06      	cmp	r3, #6
 8004502:	d010      	beq.n	8004526 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004514:	e007      	b.n	8004526 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40012c00 	.word	0x40012c00
 8004534:	40000400 	.word	0x40000400
 8004538:	40000800 	.word	0x40000800

0800453c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f838 	bl	80055c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_TIM_PWM_Stop+0xc4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d117      	bne.n	800458e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f241 1311 	movw	r3, #4369	; 0x1111
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <HAL_TIM_PWM_Stop+0x52>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	f240 4344 	movw	r3, #1092	; 0x444
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <HAL_TIM_PWM_Stop+0x52>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	f241 1311 	movw	r3, #4369	; 0x1111
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_TIM_PWM_Stop+0x82>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a1a      	ldr	r2, [r3, #32]
 80045a4:	f240 4344 	movw	r3, #1092	; 0x444
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_TIM_PWM_Stop+0x82>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Stop+0x92>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045cc:	e013      	b.n	80045f6 <HAL_TIM_PWM_Stop+0xba>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Stop+0xa2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	e00b      	b.n	80045f6 <HAL_TIM_PWM_Stop+0xba>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Stop+0xb2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	e003      	b.n	80045f6 <HAL_TIM_PWM_Stop+0xba>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40012c00 	.word	0x40012c00

08004604 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d841      	bhi.n	800469c <HAL_TIM_PWM_Stop_IT+0x98>
 8004618:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004655 	.word	0x08004655
 8004624:	0800469d 	.word	0x0800469d
 8004628:	0800469d 	.word	0x0800469d
 800462c:	0800469d 	.word	0x0800469d
 8004630:	08004667 	.word	0x08004667
 8004634:	0800469d 	.word	0x0800469d
 8004638:	0800469d 	.word	0x0800469d
 800463c:	0800469d 	.word	0x0800469d
 8004640:	08004679 	.word	0x08004679
 8004644:	0800469d 	.word	0x0800469d
 8004648:	0800469d 	.word	0x0800469d
 800464c:	0800469d 	.word	0x0800469d
 8004650:	0800468b 	.word	0x0800468b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0202 	bic.w	r2, r2, #2
 8004662:	60da      	str	r2, [r3, #12]
      break;
 8004664:	e01d      	b.n	80046a2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	60da      	str	r2, [r3, #12]
      break;
 8004676:	e014      	b.n	80046a2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0208 	bic.w	r2, r2, #8
 8004686:	60da      	str	r2, [r3, #12]
      break;
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0210 	bic.w	r2, r2, #16
 8004698:	60da      	str	r2, [r3, #12]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2200      	movs	r2, #0
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 ff87 	bl	80055c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a2a      	ldr	r2, [pc, #168]	; (8004764 <HAL_TIM_PWM_Stop_IT+0x160>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d117      	bne.n	80046f0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <HAL_TIM_PWM_Stop_IT+0xec>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a1a      	ldr	r2, [r3, #32]
 80046d6:	f240 4344 	movw	r3, #1092	; 0x444
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_PWM_Stop_IT+0xec>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10f      	bne.n	8004720 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a1a      	ldr	r2, [r3, #32]
 8004706:	f240 4344 	movw	r3, #1092	; 0x444
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472e:	e013      	b.n	8004758 <HAL_TIM_PWM_Stop_IT+0x154>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b04      	cmp	r3, #4
 8004734:	d104      	bne.n	8004740 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800473e:	e00b      	b.n	8004758 <HAL_TIM_PWM_Stop_IT+0x154>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d104      	bne.n	8004750 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800474e:	e003      	b.n	8004758 <HAL_TIM_PWM_Stop_IT+0x154>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40012c00 	.word	0x40012c00

08004768 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04c      	b.n	8004816 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d111      	bne.n	80047ac <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 ff3b 	bl	800560c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_TIM_OnePulse_Init+0xb8>)
 80047a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 fc80 	bl	80050c4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0208 	bic.w	r2, r2, #8
 80047d2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08004825 	.word	0x08004825

08004824 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d128      	bne.n	800489e <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d121      	bne.n	800489e <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0202 	mvn.w	r2, #2
 8004862:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
 8004882:	e009      	b.n	8004898 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d128      	bne.n	80048fe <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d121      	bne.n	80048fe <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f06f 0204 	mvn.w	r2, #4
 80048c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
 80048e2:	e009      	b.n	80048f8 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d128      	bne.n	800495e <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b08      	cmp	r3, #8
 8004918:	d121      	bne.n	800495e <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f06f 0208 	mvn.w	r2, #8
 8004922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2204      	movs	r2, #4
 8004928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	e009      	b.n	8004958 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b10      	cmp	r3, #16
 800496a:	d128      	bne.n	80049be <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d121      	bne.n	80049be <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f06f 0210 	mvn.w	r2, #16
 8004982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2208      	movs	r2, #8
 8004988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
 80049a2:	e009      	b.n	80049b8 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d110      	bne.n	80049ee <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0201 	mvn.w	r2, #1
 80049e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d110      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b80      	cmp	r3, #128	; 0x80
 8004a08:	d109      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d110      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d109      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d110      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d109      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f06f 0220 	mvn.w	r2, #32
 8004a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e0ae      	b.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	f200 809f 	bhi.w	8004bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004af1 	.word	0x08004af1
 8004ac0:	08004bf5 	.word	0x08004bf5
 8004ac4:	08004bf5 	.word	0x08004bf5
 8004ac8:	08004bf5 	.word	0x08004bf5
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004bf5 	.word	0x08004bf5
 8004ad4:	08004bf5 	.word	0x08004bf5
 8004ad8:	08004bf5 	.word	0x08004bf5
 8004adc:	08004b73 	.word	0x08004b73
 8004ae0:	08004bf5 	.word	0x08004bf5
 8004ae4:	08004bf5 	.word	0x08004bf5
 8004ae8:	08004bf5 	.word	0x08004bf5
 8004aec:	08004bb3 	.word	0x08004bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fb46 	bl	8005188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0208 	orr.w	r2, r2, #8
 8004b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6999      	ldr	r1, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	619a      	str	r2, [r3, #24]
      break;
 8004b2e:	e064      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb8c 	bl	8005254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6999      	ldr	r1, [r3, #24]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	021a      	lsls	r2, r3, #8
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	619a      	str	r2, [r3, #24]
      break;
 8004b70:	e043      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fbd5 	bl	8005328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0208 	orr.w	r2, r2, #8
 8004b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0204 	bic.w	r2, r2, #4
 8004b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	61da      	str	r2, [r3, #28]
      break;
 8004bb0:	e023      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fc1f 	bl	80053fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69da      	ldr	r2, [r3, #28]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69d9      	ldr	r1, [r3, #28]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	021a      	lsls	r2, r3, #8
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	61da      	str	r2, [r3, #28]
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_ConfigClockSource+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0b4      	b.n	8004d92 <HAL_TIM_ConfigClockSource+0x186>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c60:	d03e      	beq.n	8004ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c66:	f200 8087 	bhi.w	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	f000 8086 	beq.w	8004d7e <HAL_TIM_ConfigClockSource+0x172>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d87f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b70      	cmp	r3, #112	; 0x70
 8004c7a:	d01a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d87b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b60      	cmp	r3, #96	; 0x60
 8004c82:	d050      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x11a>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d877      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d03c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0xfa>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d873      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d058      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x13a>
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d86f      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d064      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d86b      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d060      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d867      	bhi.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d05c      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d05a      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	e062      	b.n	8004d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6899      	ldr	r1, [r3, #8]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f000 fc60 	bl	8005586 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
      break;
 8004cde:	e04f      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6899      	ldr	r1, [r3, #8]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f000 fc49 	bl	8005586 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d02:	609a      	str	r2, [r3, #8]
      break;
 8004d04:	e03c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 fbc0 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2150      	movs	r1, #80	; 0x50
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fc17 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8004d24:	e02c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f000 fbde 	bl	80054f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2160      	movs	r1, #96	; 0x60
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 fc07 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8004d44:	e01c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	6859      	ldr	r1, [r3, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f000 fba0 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2140      	movs	r1, #64	; 0x40
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fbf7 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8004d64:	e00c      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f000 fbee 	bl	8005552 <TIM_ITRx_SetConfig>
      break;
 8004d76:	e003      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e125      	b.n	80050b8 <HAL_TIM_RegisterCallback+0x268>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 80b9 	bne.w	8004fec <HAL_TIM_RegisterCallback+0x19c>
  {
    switch (CallbackID)
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
 8004e7c:	2b1a      	cmp	r3, #26
 8004e7e:	f200 80b2 	bhi.w	8004fe6 <HAL_TIM_RegisterCallback+0x196>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_TIM_RegisterCallback+0x38>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004efd 	.word	0x08004efd
 8004e90:	08004f05 	.word	0x08004f05
 8004e94:	08004f0d 	.word	0x08004f0d
 8004e98:	08004f15 	.word	0x08004f15
 8004e9c:	08004f1d 	.word	0x08004f1d
 8004ea0:	08004f25 	.word	0x08004f25
 8004ea4:	08004f2d 	.word	0x08004f2d
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f3d 	.word	0x08004f3d
 8004eb0:	08004f45 	.word	0x08004f45
 8004eb4:	08004f4d 	.word	0x08004f4d
 8004eb8:	08004f55 	.word	0x08004f55
 8004ebc:	08004f5d 	.word	0x08004f5d
 8004ec0:	08004f65 	.word	0x08004f65
 8004ec4:	08004f6f 	.word	0x08004f6f
 8004ec8:	08004f79 	.word	0x08004f79
 8004ecc:	08004f83 	.word	0x08004f83
 8004ed0:	08004f8d 	.word	0x08004f8d
 8004ed4:	08004f97 	.word	0x08004f97
 8004ed8:	08004fa1 	.word	0x08004fa1
 8004edc:	08004fab 	.word	0x08004fab
 8004ee0:	08004fb5 	.word	0x08004fb5
 8004ee4:	08004fbf 	.word	0x08004fbf
 8004ee8:	08004fc9 	.word	0x08004fc9
 8004eec:	08004fd3 	.word	0x08004fd3
 8004ef0:	08004fdd 	.word	0x08004fdd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004efa:	e0dc      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004f02:	e0d8      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004f0a:	e0d4      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004f12:	e0d0      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004f1a:	e0cc      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004f22:	e0c8      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004f2a:	e0c4      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004f32:	e0c0      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004f3a:	e0bc      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004f42:	e0b8      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004f4a:	e0b4      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004f52:	e0b0      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004f5a:	e0ac      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004f62:	e0a8      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004f6c:	e0a3      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004f76:	e09e      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004f80:	e099      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8004f8a:	e094      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004f94:	e08f      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004f9e:	e08a      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004fa8:	e085      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004fb2:	e080      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004fbc:	e07b      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004fc6:	e076      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004fd0:	e071      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004fda:	e06c      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004fe4:	e067      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	75fb      	strb	r3, [r7, #23]
        break;
 8004fea:	e064      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d15c      	bne.n	80050b2 <HAL_TIM_RegisterCallback+0x262>
  {
    switch (CallbackID)
 8004ff8:	7afb      	ldrb	r3, [r7, #11]
 8004ffa:	2b0d      	cmp	r3, #13
 8004ffc:	d856      	bhi.n	80050ac <HAL_TIM_RegisterCallback+0x25c>
 8004ffe:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <HAL_TIM_RegisterCallback+0x1b4>)
 8005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005004:	0800503d 	.word	0x0800503d
 8005008:	08005045 	.word	0x08005045
 800500c:	0800504d 	.word	0x0800504d
 8005010:	08005055 	.word	0x08005055
 8005014:	0800505d 	.word	0x0800505d
 8005018:	08005065 	.word	0x08005065
 800501c:	0800506d 	.word	0x0800506d
 8005020:	08005075 	.word	0x08005075
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005085 	.word	0x08005085
 800502c:	0800508d 	.word	0x0800508d
 8005030:	08005095 	.word	0x08005095
 8005034:	0800509d 	.word	0x0800509d
 8005038:	080050a5 	.word	0x080050a5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8005042:	e038      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800504a:	e034      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8005052:	e030      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800505a:	e02c      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8005062:	e028      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800506a:	e024      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8005072:	e020      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800507a:	e01c      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8005082:	e018      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800508a:	e014      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005092:	e010      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800509a:	e00c      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
        break;
 80050b0:	e001      	b.n	80050b6 <HAL_TIM_RegisterCallback+0x266>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop

080050c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a29      	ldr	r2, [pc, #164]	; (800517c <TIM_Base_SetConfig+0xb8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00b      	beq.n	80050f4 <TIM_Base_SetConfig+0x30>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d007      	beq.n	80050f4 <TIM_Base_SetConfig+0x30>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a26      	ldr	r2, [pc, #152]	; (8005180 <TIM_Base_SetConfig+0xbc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0x30>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a25      	ldr	r2, [pc, #148]	; (8005184 <TIM_Base_SetConfig+0xc0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <TIM_Base_SetConfig+0xb8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0x62>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0x62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <TIM_Base_SetConfig+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0x62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <TIM_Base_SetConfig+0xc0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <TIM_Base_SetConfig+0xb8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d103      	bne.n	800516c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	615a      	str	r2, [r3, #20]
}
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800

08005188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 0201 	bic.w	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 0302 	bic.w	r3, r3, #2
 80051d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <TIM_OC1_SetConfig+0xc8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10c      	bne.n	80051fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0308 	bic.w	r3, r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0304 	bic.w	r3, r3, #4
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <TIM_OC1_SetConfig+0xc8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d111      	bne.n	800522a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00

08005254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f023 0210 	bic.w	r2, r3, #16
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4313      	orrs	r3, r2
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 0320 	bic.w	r3, r3, #32
 800529e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <TIM_OC2_SetConfig+0xd0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10d      	bne.n	80052d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a14      	ldr	r2, [pc, #80]	; (8005324 <TIM_OC2_SetConfig+0xd0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d113      	bne.n	8005300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr
 8005324:	40012c00 	.word	0x40012c00

08005328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <TIM_OC3_SetConfig+0xd0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10d      	bne.n	80053a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <TIM_OC3_SetConfig+0xd0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d113      	bne.n	80053d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40012c00 	.word	0x40012c00

080053fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <TIM_OC4_SetConfig+0x98>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d109      	bne.n	8005470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	019b      	lsls	r3, r3, #6
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	bc80      	pop	{r7}
 8005492:	4770      	bx	lr
 8005494:	40012c00 	.word	0x40012c00

08005498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0210 	bic.w	r2, r3, #16
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800551e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	031b      	lsls	r3, r3, #12
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	f043 0307 	orr.w	r3, r3, #7
 8005574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005586:	b480      	push	{r7}
 8005588:	b087      	sub	sp, #28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	021a      	lsls	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr

080055c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2201      	movs	r2, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	401a      	ands	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <TIM_ResetCallback+0x7c>)
 8005618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a1b      	ldr	r2, [pc, #108]	; (800568c <TIM_ResetCallback+0x80>)
 8005620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <TIM_ResetCallback+0x84>)
 8005628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <TIM_ResetCallback+0x88>)
 8005630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <TIM_ResetCallback+0x8c>)
 8005638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <TIM_ResetCallback+0x90>)
 8005640:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <TIM_ResetCallback+0x94>)
 8005648:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <TIM_ResetCallback+0x98>)
 8005650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <TIM_ResetCallback+0x9c>)
 8005658:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a13      	ldr	r2, [pc, #76]	; (80056ac <TIM_ResetCallback+0xa0>)
 8005660:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <TIM_ResetCallback+0xa4>)
 8005668:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a11      	ldr	r2, [pc, #68]	; (80056b4 <TIM_ResetCallback+0xa8>)
 8005670:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a10      	ldr	r2, [pc, #64]	; (80056b8 <TIM_ResetCallback+0xac>)
 8005678:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	08004d9b 	.word	0x08004d9b
 800568c:	08004dad 	.word	0x08004dad
 8005690:	08004e19 	.word	0x08004e19
 8005694:	08004e2b 	.word	0x08004e2b
 8005698:	08004dd1 	.word	0x08004dd1
 800569c:	08004de3 	.word	0x08004de3
 80056a0:	08004dbf 	.word	0x08004dbf
 80056a4:	08004df5 	.word	0x08004df5
 80056a8:	08004e07 	.word	0x08004e07
 80056ac:	08004e3d 	.word	0x08004e3d
 80056b0:	0800581b 	.word	0x0800581b
 80056b4:	0800582d 	.word	0x0800582d
 80056b8:	0800583f 	.word	0x0800583f

080056bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e046      	b.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005720:	d009      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a12      	ldr	r2, [pc, #72]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a10      	ldr	r2, [pc, #64]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d10c      	bne.n	8005750 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800573c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	4313      	orrs	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800

08005778 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005790:	2302      	movs	r3, #2
 8005792:	e03d      	b.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <__errno>:
 8005850:	4b01      	ldr	r3, [pc, #4]	; (8005858 <__errno+0x8>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000010 	.word	0x20000010

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	2600      	movs	r6, #0
 8005860:	4d0c      	ldr	r5, [pc, #48]	; (8005894 <__libc_init_array+0x38>)
 8005862:	4c0d      	ldr	r4, [pc, #52]	; (8005898 <__libc_init_array+0x3c>)
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	42a6      	cmp	r6, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	f001 f8d0 	bl	8006a10 <_init>
 8005870:	2600      	movs	r6, #0
 8005872:	4d0a      	ldr	r5, [pc, #40]	; (800589c <__libc_init_array+0x40>)
 8005874:	4c0a      	ldr	r4, [pc, #40]	; (80058a0 <__libc_init_array+0x44>)
 8005876:	1b64      	subs	r4, r4, r5
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	42a6      	cmp	r6, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f855 3b04 	ldr.w	r3, [r5], #4
 8005884:	4798      	blx	r3
 8005886:	3601      	adds	r6, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f855 3b04 	ldr.w	r3, [r5], #4
 800588e:	4798      	blx	r3
 8005890:	3601      	adds	r6, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	08006bc8 	.word	0x08006bc8
 8005898:	08006bc8 	.word	0x08006bc8
 800589c:	08006bc8 	.word	0x08006bc8
 80058a0:	08006bcc 	.word	0x08006bcc

080058a4 <memcpy>:
 80058a4:	440a      	add	r2, r1
 80058a6:	4291      	cmp	r1, r2
 80058a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ac:	d100      	bne.n	80058b0 <memcpy+0xc>
 80058ae:	4770      	bx	lr
 80058b0:	b510      	push	{r4, lr}
 80058b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b6:	4291      	cmp	r1, r2
 80058b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058bc:	d1f9      	bne.n	80058b2 <memcpy+0xe>
 80058be:	bd10      	pop	{r4, pc}

080058c0 <memset>:
 80058c0:	4603      	mov	r3, r0
 80058c2:	4402      	add	r2, r0
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d100      	bne.n	80058ca <memset+0xa>
 80058c8:	4770      	bx	lr
 80058ca:	f803 1b01 	strb.w	r1, [r3], #1
 80058ce:	e7f9      	b.n	80058c4 <memset+0x4>

080058d0 <srand>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <srand+0x44>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	681d      	ldr	r5, [r3, #0]
 80058d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058da:	b9b3      	cbnz	r3, 800590a <srand+0x3a>
 80058dc:	2018      	movs	r0, #24
 80058de:	f000 f8bf 	bl	8005a60 <malloc>
 80058e2:	4602      	mov	r2, r0
 80058e4:	63a8      	str	r0, [r5, #56]	; 0x38
 80058e6:	b920      	cbnz	r0, 80058f2 <srand+0x22>
 80058e8:	2142      	movs	r1, #66	; 0x42
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <srand+0x48>)
 80058ec:	480b      	ldr	r0, [pc, #44]	; (800591c <srand+0x4c>)
 80058ee:	f000 f875 	bl	80059dc <__assert_func>
 80058f2:	490b      	ldr	r1, [pc, #44]	; (8005920 <srand+0x50>)
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <srand+0x54>)
 80058f6:	e9c0 1300 	strd	r1, r3, [r0]
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <srand+0x58>)
 80058fc:	2100      	movs	r1, #0
 80058fe:	6083      	str	r3, [r0, #8]
 8005900:	230b      	movs	r3, #11
 8005902:	8183      	strh	r3, [r0, #12]
 8005904:	2001      	movs	r0, #1
 8005906:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800590a:	2200      	movs	r2, #0
 800590c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800590e:	611c      	str	r4, [r3, #16]
 8005910:	615a      	str	r2, [r3, #20]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20000010 	.word	0x20000010
 8005918:	08006a84 	.word	0x08006a84
 800591c:	08006a9b 	.word	0x08006a9b
 8005920:	abcd330e 	.word	0xabcd330e
 8005924:	e66d1234 	.word	0xe66d1234
 8005928:	0005deec 	.word	0x0005deec

0800592c <rand>:
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <rand+0x5c>)
 800592e:	b510      	push	{r4, lr}
 8005930:	681c      	ldr	r4, [r3, #0]
 8005932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005934:	b9b3      	cbnz	r3, 8005964 <rand+0x38>
 8005936:	2018      	movs	r0, #24
 8005938:	f000 f892 	bl	8005a60 <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	63a0      	str	r0, [r4, #56]	; 0x38
 8005940:	b920      	cbnz	r0, 800594c <rand+0x20>
 8005942:	214e      	movs	r1, #78	; 0x4e
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <rand+0x60>)
 8005946:	4812      	ldr	r0, [pc, #72]	; (8005990 <rand+0x64>)
 8005948:	f000 f848 	bl	80059dc <__assert_func>
 800594c:	4911      	ldr	r1, [pc, #68]	; (8005994 <rand+0x68>)
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <rand+0x6c>)
 8005950:	e9c0 1300 	strd	r1, r3, [r0]
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <rand+0x70>)
 8005956:	2100      	movs	r1, #0
 8005958:	6083      	str	r3, [r0, #8]
 800595a:	230b      	movs	r3, #11
 800595c:	8183      	strh	r3, [r0, #12]
 800595e:	2001      	movs	r0, #1
 8005960:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005964:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005966:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <rand+0x74>)
 8005968:	6920      	ldr	r0, [r4, #16]
 800596a:	6963      	ldr	r3, [r4, #20]
 800596c:	4342      	muls	r2, r0
 800596e:	490d      	ldr	r1, [pc, #52]	; (80059a4 <rand+0x78>)
 8005970:	fb01 2203 	mla	r2, r1, r3, r2
 8005974:	fba0 0101 	umull	r0, r1, r0, r1
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	eb42 0001 	adc.w	r0, r2, r1
 800597e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005982:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005986:	bd10      	pop	{r4, pc}
 8005988:	20000010 	.word	0x20000010
 800598c:	08006a84 	.word	0x08006a84
 8005990:	08006a9b 	.word	0x08006a9b
 8005994:	abcd330e 	.word	0xabcd330e
 8005998:	e66d1234 	.word	0xe66d1234
 800599c:	0005deec 	.word	0x0005deec
 80059a0:	5851f42d 	.word	0x5851f42d
 80059a4:	4c957f2d 	.word	0x4c957f2d

080059a8 <time>:
 80059a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <time+0x30>)
 80059ac:	4604      	mov	r4, r0
 80059ae:	2200      	movs	r2, #0
 80059b0:	4669      	mov	r1, sp
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	f000 f842 	bl	8005a3c <_gettimeofday_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	da05      	bge.n	80059c8 <time+0x20>
 80059bc:	f04f 32ff 	mov.w	r2, #4294967295
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	e9cd 2300 	strd	r2, r3, [sp]
 80059c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059cc:	b10c      	cbz	r4, 80059d2 <time+0x2a>
 80059ce:	e9c4 0100 	strd	r0, r1, [r4]
 80059d2:	b004      	add	sp, #16
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	bf00      	nop
 80059d8:	20000010 	.word	0x20000010

080059dc <__assert_func>:
 80059dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059de:	4614      	mov	r4, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <__assert_func+0x2c>)
 80059e4:	4605      	mov	r5, r0
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68d8      	ldr	r0, [r3, #12]
 80059ea:	b14c      	cbz	r4, 8005a00 <__assert_func+0x24>
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <__assert_func+0x30>)
 80059ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059f2:	9100      	str	r1, [sp, #0]
 80059f4:	462b      	mov	r3, r5
 80059f6:	4906      	ldr	r1, [pc, #24]	; (8005a10 <__assert_func+0x34>)
 80059f8:	f000 f80e 	bl	8005a18 <fiprintf>
 80059fc:	f000 fcd2 	bl	80063a4 <abort>
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <__assert_func+0x38>)
 8005a02:	461c      	mov	r4, r3
 8005a04:	e7f3      	b.n	80059ee <__assert_func+0x12>
 8005a06:	bf00      	nop
 8005a08:	20000010 	.word	0x20000010
 8005a0c:	08006af6 	.word	0x08006af6
 8005a10:	08006b03 	.word	0x08006b03
 8005a14:	08006b31 	.word	0x08006b31

08005a18 <fiprintf>:
 8005a18:	b40e      	push	{r1, r2, r3}
 8005a1a:	b503      	push	{r0, r1, lr}
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	ab03      	add	r3, sp, #12
 8005a20:	4805      	ldr	r0, [pc, #20]	; (8005a38 <fiprintf+0x20>)
 8005a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	f000 f925 	bl	8005c78 <_vfiprintf_r>
 8005a2e:	b002      	add	sp, #8
 8005a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a34:	b003      	add	sp, #12
 8005a36:	4770      	bx	lr
 8005a38:	20000010 	.word	0x20000010

08005a3c <_gettimeofday_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	2300      	movs	r3, #0
 8005a40:	4d06      	ldr	r5, [pc, #24]	; (8005a5c <_gettimeofday_r+0x20>)
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	f000 ffd9 	bl	8006a00 <_gettimeofday>
 8005a4e:	1c43      	adds	r3, r0, #1
 8005a50:	d102      	bne.n	8005a58 <_gettimeofday_r+0x1c>
 8005a52:	682b      	ldr	r3, [r5, #0]
 8005a54:	b103      	cbz	r3, 8005a58 <_gettimeofday_r+0x1c>
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2000037c 	.word	0x2000037c

08005a60 <malloc>:
 8005a60:	4b02      	ldr	r3, [pc, #8]	; (8005a6c <malloc+0xc>)
 8005a62:	4601      	mov	r1, r0
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	f000 b86b 	b.w	8005b40 <_malloc_r>
 8005a6a:	bf00      	nop
 8005a6c:	20000010 	.word	0x20000010

08005a70 <_free_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4605      	mov	r5, r0
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d040      	beq.n	8005afa <_free_r+0x8a>
 8005a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7c:	1f0c      	subs	r4, r1, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfb8      	it	lt
 8005a82:	18e4      	addlt	r4, r4, r3
 8005a84:	f000 fec0 	bl	8006808 <__malloc_lock>
 8005a88:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <_free_r+0x8c>)
 8005a8a:	6813      	ldr	r3, [r2, #0]
 8005a8c:	b933      	cbnz	r3, 8005a9c <_free_r+0x2c>
 8005a8e:	6063      	str	r3, [r4, #4]
 8005a90:	6014      	str	r4, [r2, #0]
 8005a92:	4628      	mov	r0, r5
 8005a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a98:	f000 bebc 	b.w	8006814 <__malloc_unlock>
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d908      	bls.n	8005ab2 <_free_r+0x42>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	bf01      	itttt	eq
 8005aa8:	6819      	ldreq	r1, [r3, #0]
 8005aaa:	685b      	ldreq	r3, [r3, #4]
 8005aac:	1809      	addeq	r1, r1, r0
 8005aae:	6021      	streq	r1, [r4, #0]
 8005ab0:	e7ed      	b.n	8005a8e <_free_r+0x1e>
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b10b      	cbz	r3, 8005abc <_free_r+0x4c>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d9fa      	bls.n	8005ab2 <_free_r+0x42>
 8005abc:	6811      	ldr	r1, [r2, #0]
 8005abe:	1850      	adds	r0, r2, r1
 8005ac0:	42a0      	cmp	r0, r4
 8005ac2:	d10b      	bne.n	8005adc <_free_r+0x6c>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	1850      	adds	r0, r2, r1
 8005aca:	4283      	cmp	r3, r0
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	d1e0      	bne.n	8005a92 <_free_r+0x22>
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4401      	add	r1, r0
 8005ad6:	6011      	str	r1, [r2, #0]
 8005ad8:	6053      	str	r3, [r2, #4]
 8005ada:	e7da      	b.n	8005a92 <_free_r+0x22>
 8005adc:	d902      	bls.n	8005ae4 <_free_r+0x74>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	e7d6      	b.n	8005a92 <_free_r+0x22>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	1821      	adds	r1, r4, r0
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	bf01      	itttt	eq
 8005aec:	6819      	ldreq	r1, [r3, #0]
 8005aee:	685b      	ldreq	r3, [r3, #4]
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	6063      	str	r3, [r4, #4]
 8005af6:	6054      	str	r4, [r2, #4]
 8005af8:	e7cb      	b.n	8005a92 <_free_r+0x22>
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20000374 	.word	0x20000374

08005b00 <sbrk_aligned>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4e0e      	ldr	r6, [pc, #56]	; (8005b3c <sbrk_aligned+0x3c>)
 8005b04:	460c      	mov	r4, r1
 8005b06:	6831      	ldr	r1, [r6, #0]
 8005b08:	4605      	mov	r5, r0
 8005b0a:	b911      	cbnz	r1, 8005b12 <sbrk_aligned+0x12>
 8005b0c:	f000 fb7a 	bl	8006204 <_sbrk_r>
 8005b10:	6030      	str	r0, [r6, #0]
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 fb75 	bl	8006204 <_sbrk_r>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d00a      	beq.n	8005b34 <sbrk_aligned+0x34>
 8005b1e:	1cc4      	adds	r4, r0, #3
 8005b20:	f024 0403 	bic.w	r4, r4, #3
 8005b24:	42a0      	cmp	r0, r4
 8005b26:	d007      	beq.n	8005b38 <sbrk_aligned+0x38>
 8005b28:	1a21      	subs	r1, r4, r0
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 fb6a 	bl	8006204 <_sbrk_r>
 8005b30:	3001      	adds	r0, #1
 8005b32:	d101      	bne.n	8005b38 <sbrk_aligned+0x38>
 8005b34:	f04f 34ff 	mov.w	r4, #4294967295
 8005b38:	4620      	mov	r0, r4
 8005b3a:	bd70      	pop	{r4, r5, r6, pc}
 8005b3c:	20000378 	.word	0x20000378

08005b40 <_malloc_r>:
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	1ccd      	adds	r5, r1, #3
 8005b46:	f025 0503 	bic.w	r5, r5, #3
 8005b4a:	3508      	adds	r5, #8
 8005b4c:	2d0c      	cmp	r5, #12
 8005b4e:	bf38      	it	cc
 8005b50:	250c      	movcc	r5, #12
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	4607      	mov	r7, r0
 8005b56:	db01      	blt.n	8005b5c <_malloc_r+0x1c>
 8005b58:	42a9      	cmp	r1, r5
 8005b5a:	d905      	bls.n	8005b68 <_malloc_r+0x28>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	2600      	movs	r6, #0
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	4630      	mov	r0, r6
 8005b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b68:	4e2e      	ldr	r6, [pc, #184]	; (8005c24 <_malloc_r+0xe4>)
 8005b6a:	f000 fe4d 	bl	8006808 <__malloc_lock>
 8005b6e:	6833      	ldr	r3, [r6, #0]
 8005b70:	461c      	mov	r4, r3
 8005b72:	bb34      	cbnz	r4, 8005bc2 <_malloc_r+0x82>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4638      	mov	r0, r7
 8005b78:	f7ff ffc2 	bl	8005b00 <sbrk_aligned>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	4604      	mov	r4, r0
 8005b80:	d14d      	bne.n	8005c1e <_malloc_r+0xde>
 8005b82:	6834      	ldr	r4, [r6, #0]
 8005b84:	4626      	mov	r6, r4
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d140      	bne.n	8005c0c <_malloc_r+0xcc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4638      	mov	r0, r7
 8005b90:	eb04 0803 	add.w	r8, r4, r3
 8005b94:	f000 fb36 	bl	8006204 <_sbrk_r>
 8005b98:	4580      	cmp	r8, r0
 8005b9a:	d13a      	bne.n	8005c12 <_malloc_r+0xd2>
 8005b9c:	6821      	ldr	r1, [r4, #0]
 8005b9e:	3503      	adds	r5, #3
 8005ba0:	1a6d      	subs	r5, r5, r1
 8005ba2:	f025 0503 	bic.w	r5, r5, #3
 8005ba6:	3508      	adds	r5, #8
 8005ba8:	2d0c      	cmp	r5, #12
 8005baa:	bf38      	it	cc
 8005bac:	250c      	movcc	r5, #12
 8005bae:	4638      	mov	r0, r7
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7ff ffa5 	bl	8005b00 <sbrk_aligned>
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d02b      	beq.n	8005c12 <_malloc_r+0xd2>
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	442b      	add	r3, r5
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	e00e      	b.n	8005be0 <_malloc_r+0xa0>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	1b52      	subs	r2, r2, r5
 8005bc6:	d41e      	bmi.n	8005c06 <_malloc_r+0xc6>
 8005bc8:	2a0b      	cmp	r2, #11
 8005bca:	d916      	bls.n	8005bfa <_malloc_r+0xba>
 8005bcc:	1961      	adds	r1, r4, r5
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	6025      	str	r5, [r4, #0]
 8005bd2:	bf18      	it	ne
 8005bd4:	6059      	strne	r1, [r3, #4]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	bf08      	it	eq
 8005bda:	6031      	streq	r1, [r6, #0]
 8005bdc:	5162      	str	r2, [r4, r5]
 8005bde:	604b      	str	r3, [r1, #4]
 8005be0:	4638      	mov	r0, r7
 8005be2:	f104 060b 	add.w	r6, r4, #11
 8005be6:	f000 fe15 	bl	8006814 <__malloc_unlock>
 8005bea:	f026 0607 	bic.w	r6, r6, #7
 8005bee:	1d23      	adds	r3, r4, #4
 8005bf0:	1af2      	subs	r2, r6, r3
 8005bf2:	d0b6      	beq.n	8005b62 <_malloc_r+0x22>
 8005bf4:	1b9b      	subs	r3, r3, r6
 8005bf6:	50a3      	str	r3, [r4, r2]
 8005bf8:	e7b3      	b.n	8005b62 <_malloc_r+0x22>
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	42a3      	cmp	r3, r4
 8005bfe:	bf0c      	ite	eq
 8005c00:	6032      	streq	r2, [r6, #0]
 8005c02:	605a      	strne	r2, [r3, #4]
 8005c04:	e7ec      	b.n	8005be0 <_malloc_r+0xa0>
 8005c06:	4623      	mov	r3, r4
 8005c08:	6864      	ldr	r4, [r4, #4]
 8005c0a:	e7b2      	b.n	8005b72 <_malloc_r+0x32>
 8005c0c:	4634      	mov	r4, r6
 8005c0e:	6876      	ldr	r6, [r6, #4]
 8005c10:	e7b9      	b.n	8005b86 <_malloc_r+0x46>
 8005c12:	230c      	movs	r3, #12
 8005c14:	4638      	mov	r0, r7
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	f000 fdfc 	bl	8006814 <__malloc_unlock>
 8005c1c:	e7a1      	b.n	8005b62 <_malloc_r+0x22>
 8005c1e:	6025      	str	r5, [r4, #0]
 8005c20:	e7de      	b.n	8005be0 <_malloc_r+0xa0>
 8005c22:	bf00      	nop
 8005c24:	20000374 	.word	0x20000374

08005c28 <__sfputc_r>:
 8005c28:	6893      	ldr	r3, [r2, #8]
 8005c2a:	b410      	push	{r4}
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	6093      	str	r3, [r2, #8]
 8005c32:	da07      	bge.n	8005c44 <__sfputc_r+0x1c>
 8005c34:	6994      	ldr	r4, [r2, #24]
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	db01      	blt.n	8005c3e <__sfputc_r+0x16>
 8005c3a:	290a      	cmp	r1, #10
 8005c3c:	d102      	bne.n	8005c44 <__sfputc_r+0x1c>
 8005c3e:	bc10      	pop	{r4}
 8005c40:	f000 baf0 	b.w	8006224 <__swbuf_r>
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	1c58      	adds	r0, r3, #1
 8005c48:	6010      	str	r0, [r2, #0]
 8005c4a:	7019      	strb	r1, [r3, #0]
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	bc10      	pop	{r4}
 8005c50:	4770      	bx	lr

08005c52 <__sfputs_r>:
 8005c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c54:	4606      	mov	r6, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	4614      	mov	r4, r2
 8005c5a:	18d5      	adds	r5, r2, r3
 8005c5c:	42ac      	cmp	r4, r5
 8005c5e:	d101      	bne.n	8005c64 <__sfputs_r+0x12>
 8005c60:	2000      	movs	r0, #0
 8005c62:	e007      	b.n	8005c74 <__sfputs_r+0x22>
 8005c64:	463a      	mov	r2, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6c:	f7ff ffdc 	bl	8005c28 <__sfputc_r>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d1f3      	bne.n	8005c5c <__sfputs_r+0xa>
 8005c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c78 <_vfiprintf_r>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	4614      	mov	r4, r2
 8005c80:	4698      	mov	r8, r3
 8005c82:	4606      	mov	r6, r0
 8005c84:	b09d      	sub	sp, #116	; 0x74
 8005c86:	b118      	cbz	r0, 8005c90 <_vfiprintf_r+0x18>
 8005c88:	6983      	ldr	r3, [r0, #24]
 8005c8a:	b90b      	cbnz	r3, 8005c90 <_vfiprintf_r+0x18>
 8005c8c:	f000 fca8 	bl	80065e0 <__sinit>
 8005c90:	4b89      	ldr	r3, [pc, #548]	; (8005eb8 <_vfiprintf_r+0x240>)
 8005c92:	429d      	cmp	r5, r3
 8005c94:	d11b      	bne.n	8005cce <_vfiprintf_r+0x56>
 8005c96:	6875      	ldr	r5, [r6, #4]
 8005c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c9a:	07d9      	lsls	r1, r3, #31
 8005c9c:	d405      	bmi.n	8005caa <_vfiprintf_r+0x32>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	059a      	lsls	r2, r3, #22
 8005ca2:	d402      	bmi.n	8005caa <_vfiprintf_r+0x32>
 8005ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ca6:	f000 fd39 	bl	800671c <__retarget_lock_acquire_recursive>
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	d501      	bpl.n	8005cb4 <_vfiprintf_r+0x3c>
 8005cb0:	692b      	ldr	r3, [r5, #16]
 8005cb2:	b9eb      	cbnz	r3, 8005cf0 <_vfiprintf_r+0x78>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f000 fb06 	bl	80062c8 <__swsetup_r>
 8005cbc:	b1c0      	cbz	r0, 8005cf0 <_vfiprintf_r+0x78>
 8005cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc0:	07dc      	lsls	r4, r3, #31
 8005cc2:	d50e      	bpl.n	8005ce2 <_vfiprintf_r+0x6a>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	b01d      	add	sp, #116	; 0x74
 8005cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cce:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <_vfiprintf_r+0x244>)
 8005cd0:	429d      	cmp	r5, r3
 8005cd2:	d101      	bne.n	8005cd8 <_vfiprintf_r+0x60>
 8005cd4:	68b5      	ldr	r5, [r6, #8]
 8005cd6:	e7df      	b.n	8005c98 <_vfiprintf_r+0x20>
 8005cd8:	4b79      	ldr	r3, [pc, #484]	; (8005ec0 <_vfiprintf_r+0x248>)
 8005cda:	429d      	cmp	r5, r3
 8005cdc:	bf08      	it	eq
 8005cde:	68f5      	ldreq	r5, [r6, #12]
 8005ce0:	e7da      	b.n	8005c98 <_vfiprintf_r+0x20>
 8005ce2:	89ab      	ldrh	r3, [r5, #12]
 8005ce4:	0598      	lsls	r0, r3, #22
 8005ce6:	d4ed      	bmi.n	8005cc4 <_vfiprintf_r+0x4c>
 8005ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cea:	f000 fd18 	bl	800671e <__retarget_lock_release_recursive>
 8005cee:	e7e9      	b.n	8005cc4 <_vfiprintf_r+0x4c>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cfa:	2330      	movs	r3, #48	; 0x30
 8005cfc:	f04f 0901 	mov.w	r9, #1
 8005d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d04:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005ec4 <_vfiprintf_r+0x24c>
 8005d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	469a      	mov	sl, r3
 8005d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d14:	b10a      	cbz	r2, 8005d1a <_vfiprintf_r+0xa2>
 8005d16:	2a25      	cmp	r2, #37	; 0x25
 8005d18:	d1f9      	bne.n	8005d0e <_vfiprintf_r+0x96>
 8005d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d1e:	d00b      	beq.n	8005d38 <_vfiprintf_r+0xc0>
 8005d20:	465b      	mov	r3, fp
 8005d22:	4622      	mov	r2, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7ff ff93 	bl	8005c52 <__sfputs_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f000 80aa 	beq.w	8005e86 <_vfiprintf_r+0x20e>
 8005d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d34:	445a      	add	r2, fp
 8005d36:	9209      	str	r2, [sp, #36]	; 0x24
 8005d38:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80a2 	beq.w	8005e86 <_vfiprintf_r+0x20e>
 8005d42:	2300      	movs	r3, #0
 8005d44:	f04f 32ff 	mov.w	r2, #4294967295
 8005d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d4c:	f10a 0a01 	add.w	sl, sl, #1
 8005d50:	9304      	str	r3, [sp, #16]
 8005d52:	9307      	str	r3, [sp, #28]
 8005d54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d58:	931a      	str	r3, [sp, #104]	; 0x68
 8005d5a:	4654      	mov	r4, sl
 8005d5c:	2205      	movs	r2, #5
 8005d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d62:	4858      	ldr	r0, [pc, #352]	; (8005ec4 <_vfiprintf_r+0x24c>)
 8005d64:	f000 fd42 	bl	80067ec <memchr>
 8005d68:	9a04      	ldr	r2, [sp, #16]
 8005d6a:	b9d8      	cbnz	r0, 8005da4 <_vfiprintf_r+0x12c>
 8005d6c:	06d1      	lsls	r1, r2, #27
 8005d6e:	bf44      	itt	mi
 8005d70:	2320      	movmi	r3, #32
 8005d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d76:	0713      	lsls	r3, r2, #28
 8005d78:	bf44      	itt	mi
 8005d7a:	232b      	movmi	r3, #43	; 0x2b
 8005d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d80:	f89a 3000 	ldrb.w	r3, [sl]
 8005d84:	2b2a      	cmp	r3, #42	; 0x2a
 8005d86:	d015      	beq.n	8005db4 <_vfiprintf_r+0x13c>
 8005d88:	4654      	mov	r4, sl
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f04f 0c0a 	mov.w	ip, #10
 8005d90:	9a07      	ldr	r2, [sp, #28]
 8005d92:	4621      	mov	r1, r4
 8005d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d98:	3b30      	subs	r3, #48	; 0x30
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	d94e      	bls.n	8005e3c <_vfiprintf_r+0x1c4>
 8005d9e:	b1b0      	cbz	r0, 8005dce <_vfiprintf_r+0x156>
 8005da0:	9207      	str	r2, [sp, #28]
 8005da2:	e014      	b.n	8005dce <_vfiprintf_r+0x156>
 8005da4:	eba0 0308 	sub.w	r3, r0, r8
 8005da8:	fa09 f303 	lsl.w	r3, r9, r3
 8005dac:	4313      	orrs	r3, r2
 8005dae:	46a2      	mov	sl, r4
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	e7d2      	b.n	8005d5a <_vfiprintf_r+0xe2>
 8005db4:	9b03      	ldr	r3, [sp, #12]
 8005db6:	1d19      	adds	r1, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	9103      	str	r1, [sp, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bfbb      	ittet	lt
 8005dc0:	425b      	neglt	r3, r3
 8005dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc6:	9307      	strge	r3, [sp, #28]
 8005dc8:	9307      	strlt	r3, [sp, #28]
 8005dca:	bfb8      	it	lt
 8005dcc:	9204      	strlt	r2, [sp, #16]
 8005dce:	7823      	ldrb	r3, [r4, #0]
 8005dd0:	2b2e      	cmp	r3, #46	; 0x2e
 8005dd2:	d10c      	bne.n	8005dee <_vfiprintf_r+0x176>
 8005dd4:	7863      	ldrb	r3, [r4, #1]
 8005dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8005dd8:	d135      	bne.n	8005e46 <_vfiprintf_r+0x1ce>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	3402      	adds	r4, #2
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	9203      	str	r2, [sp, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bfb8      	it	lt
 8005de8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005ec8 <_vfiprintf_r+0x250>
 8005df2:	2203      	movs	r2, #3
 8005df4:	4650      	mov	r0, sl
 8005df6:	7821      	ldrb	r1, [r4, #0]
 8005df8:	f000 fcf8 	bl	80067ec <memchr>
 8005dfc:	b140      	cbz	r0, 8005e10 <_vfiprintf_r+0x198>
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	eba0 000a 	sub.w	r0, r0, sl
 8005e04:	fa03 f000 	lsl.w	r0, r3, r0
 8005e08:	9b04      	ldr	r3, [sp, #16]
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	4303      	orrs	r3, r0
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e14:	2206      	movs	r2, #6
 8005e16:	482d      	ldr	r0, [pc, #180]	; (8005ecc <_vfiprintf_r+0x254>)
 8005e18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e1c:	f000 fce6 	bl	80067ec <memchr>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d03f      	beq.n	8005ea4 <_vfiprintf_r+0x22c>
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <_vfiprintf_r+0x258>)
 8005e26:	bb1b      	cbnz	r3, 8005e70 <_vfiprintf_r+0x1f8>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	3307      	adds	r3, #7
 8005e2c:	f023 0307 	bic.w	r3, r3, #7
 8005e30:	3308      	adds	r3, #8
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e36:	443b      	add	r3, r7
 8005e38:	9309      	str	r3, [sp, #36]	; 0x24
 8005e3a:	e767      	b.n	8005d0c <_vfiprintf_r+0x94>
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	2001      	movs	r0, #1
 8005e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e44:	e7a5      	b.n	8005d92 <_vfiprintf_r+0x11a>
 8005e46:	2300      	movs	r3, #0
 8005e48:	f04f 0c0a 	mov.w	ip, #10
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	3401      	adds	r4, #1
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e58:	3a30      	subs	r2, #48	; 0x30
 8005e5a:	2a09      	cmp	r2, #9
 8005e5c:	d903      	bls.n	8005e66 <_vfiprintf_r+0x1ee>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0c5      	beq.n	8005dee <_vfiprintf_r+0x176>
 8005e62:	9105      	str	r1, [sp, #20]
 8005e64:	e7c3      	b.n	8005dee <_vfiprintf_r+0x176>
 8005e66:	4604      	mov	r4, r0
 8005e68:	2301      	movs	r3, #1
 8005e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e6e:	e7f0      	b.n	8005e52 <_vfiprintf_r+0x1da>
 8005e70:	ab03      	add	r3, sp, #12
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	462a      	mov	r2, r5
 8005e76:	4630      	mov	r0, r6
 8005e78:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <_vfiprintf_r+0x25c>)
 8005e7a:	a904      	add	r1, sp, #16
 8005e7c:	f3af 8000 	nop.w
 8005e80:	4607      	mov	r7, r0
 8005e82:	1c78      	adds	r0, r7, #1
 8005e84:	d1d6      	bne.n	8005e34 <_vfiprintf_r+0x1bc>
 8005e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e88:	07d9      	lsls	r1, r3, #31
 8005e8a:	d405      	bmi.n	8005e98 <_vfiprintf_r+0x220>
 8005e8c:	89ab      	ldrh	r3, [r5, #12]
 8005e8e:	059a      	lsls	r2, r3, #22
 8005e90:	d402      	bmi.n	8005e98 <_vfiprintf_r+0x220>
 8005e92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e94:	f000 fc43 	bl	800671e <__retarget_lock_release_recursive>
 8005e98:	89ab      	ldrh	r3, [r5, #12]
 8005e9a:	065b      	lsls	r3, r3, #25
 8005e9c:	f53f af12 	bmi.w	8005cc4 <_vfiprintf_r+0x4c>
 8005ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea2:	e711      	b.n	8005cc8 <_vfiprintf_r+0x50>
 8005ea4:	ab03      	add	r3, sp, #12
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <_vfiprintf_r+0x25c>)
 8005eae:	a904      	add	r1, sp, #16
 8005eb0:	f000 f882 	bl	8005fb8 <_printf_i>
 8005eb4:	e7e4      	b.n	8005e80 <_vfiprintf_r+0x208>
 8005eb6:	bf00      	nop
 8005eb8:	08006b88 	.word	0x08006b88
 8005ebc:	08006ba8 	.word	0x08006ba8
 8005ec0:	08006b68 	.word	0x08006b68
 8005ec4:	08006b32 	.word	0x08006b32
 8005ec8:	08006b38 	.word	0x08006b38
 8005ecc:	08006b3c 	.word	0x08006b3c
 8005ed0:	00000000 	.word	0x00000000
 8005ed4:	08005c53 	.word	0x08005c53

08005ed8 <_printf_common>:
 8005ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	4616      	mov	r6, r2
 8005ede:	4699      	mov	r9, r3
 8005ee0:	688a      	ldr	r2, [r1, #8]
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	bfb8      	it	lt
 8005eea:	4613      	movlt	r3, r2
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef8:	b10a      	cbz	r2, 8005efe <_printf_common+0x26>
 8005efa:	3301      	adds	r3, #1
 8005efc:	6033      	str	r3, [r6, #0]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	0699      	lsls	r1, r3, #26
 8005f02:	bf42      	ittt	mi
 8005f04:	6833      	ldrmi	r3, [r6, #0]
 8005f06:	3302      	addmi	r3, #2
 8005f08:	6033      	strmi	r3, [r6, #0]
 8005f0a:	6825      	ldr	r5, [r4, #0]
 8005f0c:	f015 0506 	ands.w	r5, r5, #6
 8005f10:	d106      	bne.n	8005f20 <_printf_common+0x48>
 8005f12:	f104 0a19 	add.w	sl, r4, #25
 8005f16:	68e3      	ldr	r3, [r4, #12]
 8005f18:	6832      	ldr	r2, [r6, #0]
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	42ab      	cmp	r3, r5
 8005f1e:	dc28      	bgt.n	8005f72 <_printf_common+0x9a>
 8005f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f24:	1e13      	subs	r3, r2, #0
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	bf18      	it	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	0692      	lsls	r2, r2, #26
 8005f2e:	d42d      	bmi.n	8005f8c <_printf_common+0xb4>
 8005f30:	4649      	mov	r1, r9
 8005f32:	4638      	mov	r0, r7
 8005f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f38:	47c0      	blx	r8
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d020      	beq.n	8005f80 <_printf_common+0xa8>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	68e5      	ldr	r5, [r4, #12]
 8005f42:	f003 0306 	and.w	r3, r3, #6
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf18      	it	ne
 8005f4a:	2500      	movne	r5, #0
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	f04f 0600 	mov.w	r6, #0
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	bf08      	it	eq
 8005f56:	1aad      	subeq	r5, r5, r2
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	bf08      	it	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfc4      	itt	gt
 8005f64:	1a9b      	subgt	r3, r3, r2
 8005f66:	18ed      	addgt	r5, r5, r3
 8005f68:	341a      	adds	r4, #26
 8005f6a:	42b5      	cmp	r5, r6
 8005f6c:	d11a      	bne.n	8005fa4 <_printf_common+0xcc>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e008      	b.n	8005f84 <_printf_common+0xac>
 8005f72:	2301      	movs	r3, #1
 8005f74:	4652      	mov	r2, sl
 8005f76:	4649      	mov	r1, r9
 8005f78:	4638      	mov	r0, r7
 8005f7a:	47c0      	blx	r8
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d103      	bne.n	8005f88 <_printf_common+0xb0>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295
 8005f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f88:	3501      	adds	r5, #1
 8005f8a:	e7c4      	b.n	8005f16 <_printf_common+0x3e>
 8005f8c:	2030      	movs	r0, #48	; 0x30
 8005f8e:	18e1      	adds	r1, r4, r3
 8005f90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f9a:	4422      	add	r2, r4
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa2:	e7c5      	b.n	8005f30 <_printf_common+0x58>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4638      	mov	r0, r7
 8005fac:	47c0      	blx	r8
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d0e6      	beq.n	8005f80 <_printf_common+0xa8>
 8005fb2:	3601      	adds	r6, #1
 8005fb4:	e7d9      	b.n	8005f6a <_printf_common+0x92>
	...

08005fb8 <_printf_i>:
 8005fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	7e0f      	ldrb	r7, [r1, #24]
 8005fbe:	4691      	mov	r9, r2
 8005fc0:	2f78      	cmp	r7, #120	; 0x78
 8005fc2:	4680      	mov	r8, r0
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	469a      	mov	sl, r3
 8005fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fce:	d807      	bhi.n	8005fe0 <_printf_i+0x28>
 8005fd0:	2f62      	cmp	r7, #98	; 0x62
 8005fd2:	d80a      	bhi.n	8005fea <_printf_i+0x32>
 8005fd4:	2f00      	cmp	r7, #0
 8005fd6:	f000 80d9 	beq.w	800618c <_printf_i+0x1d4>
 8005fda:	2f58      	cmp	r7, #88	; 0x58
 8005fdc:	f000 80a4 	beq.w	8006128 <_printf_i+0x170>
 8005fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fe8:	e03a      	b.n	8006060 <_printf_i+0xa8>
 8005fea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fee:	2b15      	cmp	r3, #21
 8005ff0:	d8f6      	bhi.n	8005fe0 <_printf_i+0x28>
 8005ff2:	a101      	add	r1, pc, #4	; (adr r1, 8005ff8 <_printf_i+0x40>)
 8005ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff8:	08006051 	.word	0x08006051
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08005fe1 	.word	0x08005fe1
 8006004:	08005fe1 	.word	0x08005fe1
 8006008:	08005fe1 	.word	0x08005fe1
 800600c:	08005fe1 	.word	0x08005fe1
 8006010:	08006065 	.word	0x08006065
 8006014:	08005fe1 	.word	0x08005fe1
 8006018:	08005fe1 	.word	0x08005fe1
 800601c:	08005fe1 	.word	0x08005fe1
 8006020:	08005fe1 	.word	0x08005fe1
 8006024:	08006173 	.word	0x08006173
 8006028:	08006095 	.word	0x08006095
 800602c:	08006155 	.word	0x08006155
 8006030:	08005fe1 	.word	0x08005fe1
 8006034:	08005fe1 	.word	0x08005fe1
 8006038:	08006195 	.word	0x08006195
 800603c:	08005fe1 	.word	0x08005fe1
 8006040:	08006095 	.word	0x08006095
 8006044:	08005fe1 	.word	0x08005fe1
 8006048:	08005fe1 	.word	0x08005fe1
 800604c:	0800615d 	.word	0x0800615d
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	1d1a      	adds	r2, r3, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	602a      	str	r2, [r5, #0]
 8006058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800605c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006060:	2301      	movs	r3, #1
 8006062:	e0a4      	b.n	80061ae <_printf_i+0x1f6>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	6829      	ldr	r1, [r5, #0]
 8006068:	0606      	lsls	r6, r0, #24
 800606a:	f101 0304 	add.w	r3, r1, #4
 800606e:	d50a      	bpl.n	8006086 <_printf_i+0xce>
 8006070:	680e      	ldr	r6, [r1, #0]
 8006072:	602b      	str	r3, [r5, #0]
 8006074:	2e00      	cmp	r6, #0
 8006076:	da03      	bge.n	8006080 <_printf_i+0xc8>
 8006078:	232d      	movs	r3, #45	; 0x2d
 800607a:	4276      	negs	r6, r6
 800607c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006080:	230a      	movs	r3, #10
 8006082:	485e      	ldr	r0, [pc, #376]	; (80061fc <_printf_i+0x244>)
 8006084:	e019      	b.n	80060ba <_printf_i+0x102>
 8006086:	680e      	ldr	r6, [r1, #0]
 8006088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	bf18      	it	ne
 8006090:	b236      	sxthne	r6, r6
 8006092:	e7ef      	b.n	8006074 <_printf_i+0xbc>
 8006094:	682b      	ldr	r3, [r5, #0]
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	1d19      	adds	r1, r3, #4
 800609a:	6029      	str	r1, [r5, #0]
 800609c:	0601      	lsls	r1, r0, #24
 800609e:	d501      	bpl.n	80060a4 <_printf_i+0xec>
 80060a0:	681e      	ldr	r6, [r3, #0]
 80060a2:	e002      	b.n	80060aa <_printf_i+0xf2>
 80060a4:	0646      	lsls	r6, r0, #25
 80060a6:	d5fb      	bpl.n	80060a0 <_printf_i+0xe8>
 80060a8:	881e      	ldrh	r6, [r3, #0]
 80060aa:	2f6f      	cmp	r7, #111	; 0x6f
 80060ac:	bf0c      	ite	eq
 80060ae:	2308      	moveq	r3, #8
 80060b0:	230a      	movne	r3, #10
 80060b2:	4852      	ldr	r0, [pc, #328]	; (80061fc <_printf_i+0x244>)
 80060b4:	2100      	movs	r1, #0
 80060b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ba:	6865      	ldr	r5, [r4, #4]
 80060bc:	2d00      	cmp	r5, #0
 80060be:	bfa8      	it	ge
 80060c0:	6821      	ldrge	r1, [r4, #0]
 80060c2:	60a5      	str	r5, [r4, #8]
 80060c4:	bfa4      	itt	ge
 80060c6:	f021 0104 	bicge.w	r1, r1, #4
 80060ca:	6021      	strge	r1, [r4, #0]
 80060cc:	b90e      	cbnz	r6, 80060d2 <_printf_i+0x11a>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	d04d      	beq.n	800616e <_printf_i+0x1b6>
 80060d2:	4615      	mov	r5, r2
 80060d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80060d8:	fb03 6711 	mls	r7, r3, r1, r6
 80060dc:	5dc7      	ldrb	r7, [r0, r7]
 80060de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060e2:	4637      	mov	r7, r6
 80060e4:	42bb      	cmp	r3, r7
 80060e6:	460e      	mov	r6, r1
 80060e8:	d9f4      	bls.n	80060d4 <_printf_i+0x11c>
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d10b      	bne.n	8006106 <_printf_i+0x14e>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	07de      	lsls	r6, r3, #31
 80060f2:	d508      	bpl.n	8006106 <_printf_i+0x14e>
 80060f4:	6923      	ldr	r3, [r4, #16]
 80060f6:	6861      	ldr	r1, [r4, #4]
 80060f8:	4299      	cmp	r1, r3
 80060fa:	bfde      	ittt	le
 80060fc:	2330      	movle	r3, #48	; 0x30
 80060fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006102:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006106:	1b52      	subs	r2, r2, r5
 8006108:	6122      	str	r2, [r4, #16]
 800610a:	464b      	mov	r3, r9
 800610c:	4621      	mov	r1, r4
 800610e:	4640      	mov	r0, r8
 8006110:	f8cd a000 	str.w	sl, [sp]
 8006114:	aa03      	add	r2, sp, #12
 8006116:	f7ff fedf 	bl	8005ed8 <_printf_common>
 800611a:	3001      	adds	r0, #1
 800611c:	d14c      	bne.n	80061b8 <_printf_i+0x200>
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	b004      	add	sp, #16
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	4834      	ldr	r0, [pc, #208]	; (80061fc <_printf_i+0x244>)
 800612a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800612e:	6829      	ldr	r1, [r5, #0]
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	f851 6b04 	ldr.w	r6, [r1], #4
 8006136:	6029      	str	r1, [r5, #0]
 8006138:	061d      	lsls	r5, r3, #24
 800613a:	d514      	bpl.n	8006166 <_printf_i+0x1ae>
 800613c:	07df      	lsls	r7, r3, #31
 800613e:	bf44      	itt	mi
 8006140:	f043 0320 	orrmi.w	r3, r3, #32
 8006144:	6023      	strmi	r3, [r4, #0]
 8006146:	b91e      	cbnz	r6, 8006150 <_printf_i+0x198>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	f023 0320 	bic.w	r3, r3, #32
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	2310      	movs	r3, #16
 8006152:	e7af      	b.n	80060b4 <_printf_i+0xfc>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	f043 0320 	orr.w	r3, r3, #32
 800615a:	6023      	str	r3, [r4, #0]
 800615c:	2378      	movs	r3, #120	; 0x78
 800615e:	4828      	ldr	r0, [pc, #160]	; (8006200 <_printf_i+0x248>)
 8006160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006164:	e7e3      	b.n	800612e <_printf_i+0x176>
 8006166:	0659      	lsls	r1, r3, #25
 8006168:	bf48      	it	mi
 800616a:	b2b6      	uxthmi	r6, r6
 800616c:	e7e6      	b.n	800613c <_printf_i+0x184>
 800616e:	4615      	mov	r5, r2
 8006170:	e7bb      	b.n	80060ea <_printf_i+0x132>
 8006172:	682b      	ldr	r3, [r5, #0]
 8006174:	6826      	ldr	r6, [r4, #0]
 8006176:	1d18      	adds	r0, r3, #4
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	6028      	str	r0, [r5, #0]
 800617c:	0635      	lsls	r5, r6, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	d501      	bpl.n	8006186 <_printf_i+0x1ce>
 8006182:	6019      	str	r1, [r3, #0]
 8006184:	e002      	b.n	800618c <_printf_i+0x1d4>
 8006186:	0670      	lsls	r0, r6, #25
 8006188:	d5fb      	bpl.n	8006182 <_printf_i+0x1ca>
 800618a:	8019      	strh	r1, [r3, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	4615      	mov	r5, r2
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	e7ba      	b.n	800610a <_printf_i+0x152>
 8006194:	682b      	ldr	r3, [r5, #0]
 8006196:	2100      	movs	r1, #0
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	681d      	ldr	r5, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fb23 	bl	80067ec <memchr>
 80061a6:	b108      	cbz	r0, 80061ac <_printf_i+0x1f4>
 80061a8:	1b40      	subs	r0, r0, r5
 80061aa:	6060      	str	r0, [r4, #4]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b6:	e7a8      	b.n	800610a <_printf_i+0x152>
 80061b8:	462a      	mov	r2, r5
 80061ba:	4649      	mov	r1, r9
 80061bc:	4640      	mov	r0, r8
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	47d0      	blx	sl
 80061c2:	3001      	adds	r0, #1
 80061c4:	d0ab      	beq.n	800611e <_printf_i+0x166>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	079b      	lsls	r3, r3, #30
 80061ca:	d413      	bmi.n	80061f4 <_printf_i+0x23c>
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	4298      	cmp	r0, r3
 80061d2:	bfb8      	it	lt
 80061d4:	4618      	movlt	r0, r3
 80061d6:	e7a4      	b.n	8006122 <_printf_i+0x16a>
 80061d8:	2301      	movs	r3, #1
 80061da:	4632      	mov	r2, r6
 80061dc:	4649      	mov	r1, r9
 80061de:	4640      	mov	r0, r8
 80061e0:	47d0      	blx	sl
 80061e2:	3001      	adds	r0, #1
 80061e4:	d09b      	beq.n	800611e <_printf_i+0x166>
 80061e6:	3501      	adds	r5, #1
 80061e8:	68e3      	ldr	r3, [r4, #12]
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	1a5b      	subs	r3, r3, r1
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dcf2      	bgt.n	80061d8 <_printf_i+0x220>
 80061f2:	e7eb      	b.n	80061cc <_printf_i+0x214>
 80061f4:	2500      	movs	r5, #0
 80061f6:	f104 0619 	add.w	r6, r4, #25
 80061fa:	e7f5      	b.n	80061e8 <_printf_i+0x230>
 80061fc:	08006b43 	.word	0x08006b43
 8006200:	08006b54 	.word	0x08006b54

08006204 <_sbrk_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	2300      	movs	r3, #0
 8006208:	4d05      	ldr	r5, [pc, #20]	; (8006220 <_sbrk_r+0x1c>)
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	f7fb fe36 	bl	8001e80 <_sbrk>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_sbrk_r+0x1a>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_sbrk_r+0x1a>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	2000037c 	.word	0x2000037c

08006224 <__swbuf_r>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	460e      	mov	r6, r1
 8006228:	4614      	mov	r4, r2
 800622a:	4605      	mov	r5, r0
 800622c:	b118      	cbz	r0, 8006236 <__swbuf_r+0x12>
 800622e:	6983      	ldr	r3, [r0, #24]
 8006230:	b90b      	cbnz	r3, 8006236 <__swbuf_r+0x12>
 8006232:	f000 f9d5 	bl	80065e0 <__sinit>
 8006236:	4b21      	ldr	r3, [pc, #132]	; (80062bc <__swbuf_r+0x98>)
 8006238:	429c      	cmp	r4, r3
 800623a:	d12b      	bne.n	8006294 <__swbuf_r+0x70>
 800623c:	686c      	ldr	r4, [r5, #4]
 800623e:	69a3      	ldr	r3, [r4, #24]
 8006240:	60a3      	str	r3, [r4, #8]
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	071a      	lsls	r2, r3, #28
 8006246:	d52f      	bpl.n	80062a8 <__swbuf_r+0x84>
 8006248:	6923      	ldr	r3, [r4, #16]
 800624a:	b36b      	cbz	r3, 80062a8 <__swbuf_r+0x84>
 800624c:	6923      	ldr	r3, [r4, #16]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	b2f6      	uxtb	r6, r6
 8006252:	1ac0      	subs	r0, r0, r3
 8006254:	6963      	ldr	r3, [r4, #20]
 8006256:	4637      	mov	r7, r6
 8006258:	4283      	cmp	r3, r0
 800625a:	dc04      	bgt.n	8006266 <__swbuf_r+0x42>
 800625c:	4621      	mov	r1, r4
 800625e:	4628      	mov	r0, r5
 8006260:	f000 f92a 	bl	80064b8 <_fflush_r>
 8006264:	bb30      	cbnz	r0, 80062b4 <__swbuf_r+0x90>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	3001      	adds	r0, #1
 800626a:	3b01      	subs	r3, #1
 800626c:	60a3      	str	r3, [r4, #8]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	701e      	strb	r6, [r3, #0]
 8006276:	6963      	ldr	r3, [r4, #20]
 8006278:	4283      	cmp	r3, r0
 800627a:	d004      	beq.n	8006286 <__swbuf_r+0x62>
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	07db      	lsls	r3, r3, #31
 8006280:	d506      	bpl.n	8006290 <__swbuf_r+0x6c>
 8006282:	2e0a      	cmp	r6, #10
 8006284:	d104      	bne.n	8006290 <__swbuf_r+0x6c>
 8006286:	4621      	mov	r1, r4
 8006288:	4628      	mov	r0, r5
 800628a:	f000 f915 	bl	80064b8 <_fflush_r>
 800628e:	b988      	cbnz	r0, 80062b4 <__swbuf_r+0x90>
 8006290:	4638      	mov	r0, r7
 8006292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <__swbuf_r+0x9c>)
 8006296:	429c      	cmp	r4, r3
 8006298:	d101      	bne.n	800629e <__swbuf_r+0x7a>
 800629a:	68ac      	ldr	r4, [r5, #8]
 800629c:	e7cf      	b.n	800623e <__swbuf_r+0x1a>
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <__swbuf_r+0xa0>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	bf08      	it	eq
 80062a4:	68ec      	ldreq	r4, [r5, #12]
 80062a6:	e7ca      	b.n	800623e <__swbuf_r+0x1a>
 80062a8:	4621      	mov	r1, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	f000 f80c 	bl	80062c8 <__swsetup_r>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d0cb      	beq.n	800624c <__swbuf_r+0x28>
 80062b4:	f04f 37ff 	mov.w	r7, #4294967295
 80062b8:	e7ea      	b.n	8006290 <__swbuf_r+0x6c>
 80062ba:	bf00      	nop
 80062bc:	08006b88 	.word	0x08006b88
 80062c0:	08006ba8 	.word	0x08006ba8
 80062c4:	08006b68 	.word	0x08006b68

080062c8 <__swsetup_r>:
 80062c8:	4b32      	ldr	r3, [pc, #200]	; (8006394 <__swsetup_r+0xcc>)
 80062ca:	b570      	push	{r4, r5, r6, lr}
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	4606      	mov	r6, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	b125      	cbz	r5, 80062de <__swsetup_r+0x16>
 80062d4:	69ab      	ldr	r3, [r5, #24]
 80062d6:	b913      	cbnz	r3, 80062de <__swsetup_r+0x16>
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 f981 	bl	80065e0 <__sinit>
 80062de:	4b2e      	ldr	r3, [pc, #184]	; (8006398 <__swsetup_r+0xd0>)
 80062e0:	429c      	cmp	r4, r3
 80062e2:	d10f      	bne.n	8006304 <__swsetup_r+0x3c>
 80062e4:	686c      	ldr	r4, [r5, #4]
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062ec:	0719      	lsls	r1, r3, #28
 80062ee:	d42c      	bmi.n	800634a <__swsetup_r+0x82>
 80062f0:	06dd      	lsls	r5, r3, #27
 80062f2:	d411      	bmi.n	8006318 <__swsetup_r+0x50>
 80062f4:	2309      	movs	r3, #9
 80062f6:	6033      	str	r3, [r6, #0]
 80062f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	e03e      	b.n	8006382 <__swsetup_r+0xba>
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <__swsetup_r+0xd4>)
 8006306:	429c      	cmp	r4, r3
 8006308:	d101      	bne.n	800630e <__swsetup_r+0x46>
 800630a:	68ac      	ldr	r4, [r5, #8]
 800630c:	e7eb      	b.n	80062e6 <__swsetup_r+0x1e>
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <__swsetup_r+0xd8>)
 8006310:	429c      	cmp	r4, r3
 8006312:	bf08      	it	eq
 8006314:	68ec      	ldreq	r4, [r5, #12]
 8006316:	e7e6      	b.n	80062e6 <__swsetup_r+0x1e>
 8006318:	0758      	lsls	r0, r3, #29
 800631a:	d512      	bpl.n	8006342 <__swsetup_r+0x7a>
 800631c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800631e:	b141      	cbz	r1, 8006332 <__swsetup_r+0x6a>
 8006320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006324:	4299      	cmp	r1, r3
 8006326:	d002      	beq.n	800632e <__swsetup_r+0x66>
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fba1 	bl	8005a70 <_free_r>
 800632e:	2300      	movs	r3, #0
 8006330:	6363      	str	r3, [r4, #52]	; 0x34
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006338:	81a3      	strh	r3, [r4, #12]
 800633a:	2300      	movs	r3, #0
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f043 0308 	orr.w	r3, r3, #8
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	b94b      	cbnz	r3, 8006362 <__swsetup_r+0x9a>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006358:	d003      	beq.n	8006362 <__swsetup_r+0x9a>
 800635a:	4621      	mov	r1, r4
 800635c:	4630      	mov	r0, r6
 800635e:	f000 fa05 	bl	800676c <__smakebuf_r>
 8006362:	89a0      	ldrh	r0, [r4, #12]
 8006364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006368:	f010 0301 	ands.w	r3, r0, #1
 800636c:	d00a      	beq.n	8006384 <__swsetup_r+0xbc>
 800636e:	2300      	movs	r3, #0
 8006370:	60a3      	str	r3, [r4, #8]
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	425b      	negs	r3, r3
 8006376:	61a3      	str	r3, [r4, #24]
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	b943      	cbnz	r3, 800638e <__swsetup_r+0xc6>
 800637c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006380:	d1ba      	bne.n	80062f8 <__swsetup_r+0x30>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	0781      	lsls	r1, r0, #30
 8006386:	bf58      	it	pl
 8006388:	6963      	ldrpl	r3, [r4, #20]
 800638a:	60a3      	str	r3, [r4, #8]
 800638c:	e7f4      	b.n	8006378 <__swsetup_r+0xb0>
 800638e:	2000      	movs	r0, #0
 8006390:	e7f7      	b.n	8006382 <__swsetup_r+0xba>
 8006392:	bf00      	nop
 8006394:	20000010 	.word	0x20000010
 8006398:	08006b88 	.word	0x08006b88
 800639c:	08006ba8 	.word	0x08006ba8
 80063a0:	08006b68 	.word	0x08006b68

080063a4 <abort>:
 80063a4:	2006      	movs	r0, #6
 80063a6:	b508      	push	{r3, lr}
 80063a8:	f000 fa62 	bl	8006870 <raise>
 80063ac:	2001      	movs	r0, #1
 80063ae:	f7fb fd10 	bl	8001dd2 <_exit>
	...

080063b4 <__sflush_r>:
 80063b4:	898a      	ldrh	r2, [r1, #12]
 80063b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b8:	4605      	mov	r5, r0
 80063ba:	0710      	lsls	r0, r2, #28
 80063bc:	460c      	mov	r4, r1
 80063be:	d457      	bmi.n	8006470 <__sflush_r+0xbc>
 80063c0:	684b      	ldr	r3, [r1, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	dc04      	bgt.n	80063d0 <__sflush_r+0x1c>
 80063c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc01      	bgt.n	80063d0 <__sflush_r+0x1c>
 80063cc:	2000      	movs	r0, #0
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	d0fa      	beq.n	80063cc <__sflush_r+0x18>
 80063d6:	2300      	movs	r3, #0
 80063d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063dc:	682f      	ldr	r7, [r5, #0]
 80063de:	602b      	str	r3, [r5, #0]
 80063e0:	d032      	beq.n	8006448 <__sflush_r+0x94>
 80063e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	075a      	lsls	r2, r3, #29
 80063e8:	d505      	bpl.n	80063f6 <__sflush_r+0x42>
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063f0:	b10b      	cbz	r3, 80063f6 <__sflush_r+0x42>
 80063f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063f4:	1ac0      	subs	r0, r0, r3
 80063f6:	2300      	movs	r3, #0
 80063f8:	4602      	mov	r2, r0
 80063fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063fc:	4628      	mov	r0, r5
 80063fe:	6a21      	ldr	r1, [r4, #32]
 8006400:	47b0      	blx	r6
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	d106      	bne.n	8006416 <__sflush_r+0x62>
 8006408:	6829      	ldr	r1, [r5, #0]
 800640a:	291d      	cmp	r1, #29
 800640c:	d82c      	bhi.n	8006468 <__sflush_r+0xb4>
 800640e:	4a29      	ldr	r2, [pc, #164]	; (80064b4 <__sflush_r+0x100>)
 8006410:	40ca      	lsrs	r2, r1
 8006412:	07d6      	lsls	r6, r2, #31
 8006414:	d528      	bpl.n	8006468 <__sflush_r+0xb4>
 8006416:	2200      	movs	r2, #0
 8006418:	6062      	str	r2, [r4, #4]
 800641a:	6922      	ldr	r2, [r4, #16]
 800641c:	04d9      	lsls	r1, r3, #19
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	d504      	bpl.n	800642c <__sflush_r+0x78>
 8006422:	1c42      	adds	r2, r0, #1
 8006424:	d101      	bne.n	800642a <__sflush_r+0x76>
 8006426:	682b      	ldr	r3, [r5, #0]
 8006428:	b903      	cbnz	r3, 800642c <__sflush_r+0x78>
 800642a:	6560      	str	r0, [r4, #84]	; 0x54
 800642c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800642e:	602f      	str	r7, [r5, #0]
 8006430:	2900      	cmp	r1, #0
 8006432:	d0cb      	beq.n	80063cc <__sflush_r+0x18>
 8006434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006438:	4299      	cmp	r1, r3
 800643a:	d002      	beq.n	8006442 <__sflush_r+0x8e>
 800643c:	4628      	mov	r0, r5
 800643e:	f7ff fb17 	bl	8005a70 <_free_r>
 8006442:	2000      	movs	r0, #0
 8006444:	6360      	str	r0, [r4, #52]	; 0x34
 8006446:	e7c2      	b.n	80063ce <__sflush_r+0x1a>
 8006448:	6a21      	ldr	r1, [r4, #32]
 800644a:	2301      	movs	r3, #1
 800644c:	4628      	mov	r0, r5
 800644e:	47b0      	blx	r6
 8006450:	1c41      	adds	r1, r0, #1
 8006452:	d1c7      	bne.n	80063e4 <__sflush_r+0x30>
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0c4      	beq.n	80063e4 <__sflush_r+0x30>
 800645a:	2b1d      	cmp	r3, #29
 800645c:	d001      	beq.n	8006462 <__sflush_r+0xae>
 800645e:	2b16      	cmp	r3, #22
 8006460:	d101      	bne.n	8006466 <__sflush_r+0xb2>
 8006462:	602f      	str	r7, [r5, #0]
 8006464:	e7b2      	b.n	80063cc <__sflush_r+0x18>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800646c:	81a3      	strh	r3, [r4, #12]
 800646e:	e7ae      	b.n	80063ce <__sflush_r+0x1a>
 8006470:	690f      	ldr	r7, [r1, #16]
 8006472:	2f00      	cmp	r7, #0
 8006474:	d0aa      	beq.n	80063cc <__sflush_r+0x18>
 8006476:	0793      	lsls	r3, r2, #30
 8006478:	bf18      	it	ne
 800647a:	2300      	movne	r3, #0
 800647c:	680e      	ldr	r6, [r1, #0]
 800647e:	bf08      	it	eq
 8006480:	694b      	ldreq	r3, [r1, #20]
 8006482:	1bf6      	subs	r6, r6, r7
 8006484:	600f      	str	r7, [r1, #0]
 8006486:	608b      	str	r3, [r1, #8]
 8006488:	2e00      	cmp	r6, #0
 800648a:	dd9f      	ble.n	80063cc <__sflush_r+0x18>
 800648c:	4633      	mov	r3, r6
 800648e:	463a      	mov	r2, r7
 8006490:	4628      	mov	r0, r5
 8006492:	6a21      	ldr	r1, [r4, #32]
 8006494:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006498:	47e0      	blx	ip
 800649a:	2800      	cmp	r0, #0
 800649c:	dc06      	bgt.n	80064ac <__sflush_r+0xf8>
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e790      	b.n	80063ce <__sflush_r+0x1a>
 80064ac:	4407      	add	r7, r0
 80064ae:	1a36      	subs	r6, r6, r0
 80064b0:	e7ea      	b.n	8006488 <__sflush_r+0xd4>
 80064b2:	bf00      	nop
 80064b4:	20400001 	.word	0x20400001

080064b8 <_fflush_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	690b      	ldr	r3, [r1, #16]
 80064bc:	4605      	mov	r5, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	b913      	cbnz	r3, 80064c8 <_fflush_r+0x10>
 80064c2:	2500      	movs	r5, #0
 80064c4:	4628      	mov	r0, r5
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	b118      	cbz	r0, 80064d2 <_fflush_r+0x1a>
 80064ca:	6983      	ldr	r3, [r0, #24]
 80064cc:	b90b      	cbnz	r3, 80064d2 <_fflush_r+0x1a>
 80064ce:	f000 f887 	bl	80065e0 <__sinit>
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <_fflush_r+0x6c>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d11b      	bne.n	8006510 <_fflush_r+0x58>
 80064d8:	686c      	ldr	r4, [r5, #4]
 80064da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ef      	beq.n	80064c2 <_fflush_r+0xa>
 80064e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80064e4:	07d0      	lsls	r0, r2, #31
 80064e6:	d404      	bmi.n	80064f2 <_fflush_r+0x3a>
 80064e8:	0599      	lsls	r1, r3, #22
 80064ea:	d402      	bmi.n	80064f2 <_fflush_r+0x3a>
 80064ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ee:	f000 f915 	bl	800671c <__retarget_lock_acquire_recursive>
 80064f2:	4628      	mov	r0, r5
 80064f4:	4621      	mov	r1, r4
 80064f6:	f7ff ff5d 	bl	80063b4 <__sflush_r>
 80064fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064fc:	4605      	mov	r5, r0
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d4e0      	bmi.n	80064c4 <_fflush_r+0xc>
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	059b      	lsls	r3, r3, #22
 8006506:	d4dd      	bmi.n	80064c4 <_fflush_r+0xc>
 8006508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800650a:	f000 f908 	bl	800671e <__retarget_lock_release_recursive>
 800650e:	e7d9      	b.n	80064c4 <_fflush_r+0xc>
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <_fflush_r+0x70>)
 8006512:	429c      	cmp	r4, r3
 8006514:	d101      	bne.n	800651a <_fflush_r+0x62>
 8006516:	68ac      	ldr	r4, [r5, #8]
 8006518:	e7df      	b.n	80064da <_fflush_r+0x22>
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <_fflush_r+0x74>)
 800651c:	429c      	cmp	r4, r3
 800651e:	bf08      	it	eq
 8006520:	68ec      	ldreq	r4, [r5, #12]
 8006522:	e7da      	b.n	80064da <_fflush_r+0x22>
 8006524:	08006b88 	.word	0x08006b88
 8006528:	08006ba8 	.word	0x08006ba8
 800652c:	08006b68 	.word	0x08006b68

08006530 <std>:
 8006530:	2300      	movs	r3, #0
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	e9c0 3300 	strd	r3, r3, [r0]
 800653a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800653e:	6083      	str	r3, [r0, #8]
 8006540:	8181      	strh	r1, [r0, #12]
 8006542:	6643      	str	r3, [r0, #100]	; 0x64
 8006544:	81c2      	strh	r2, [r0, #14]
 8006546:	6183      	str	r3, [r0, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	2208      	movs	r2, #8
 800654c:	305c      	adds	r0, #92	; 0x5c
 800654e:	f7ff f9b7 	bl	80058c0 <memset>
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <std+0x38>)
 8006554:	6224      	str	r4, [r4, #32]
 8006556:	6263      	str	r3, [r4, #36]	; 0x24
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <std+0x3c>)
 800655a:	62a3      	str	r3, [r4, #40]	; 0x28
 800655c:	4b04      	ldr	r3, [pc, #16]	; (8006570 <std+0x40>)
 800655e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <std+0x44>)
 8006562:	6323      	str	r3, [r4, #48]	; 0x30
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	080068a9 	.word	0x080068a9
 800656c:	080068cb 	.word	0x080068cb
 8006570:	08006903 	.word	0x08006903
 8006574:	08006927 	.word	0x08006927

08006578 <_cleanup_r>:
 8006578:	4901      	ldr	r1, [pc, #4]	; (8006580 <_cleanup_r+0x8>)
 800657a:	f000 b8af 	b.w	80066dc <_fwalk_reent>
 800657e:	bf00      	nop
 8006580:	080064b9 	.word	0x080064b9

08006584 <__sfmoreglue>:
 8006584:	2268      	movs	r2, #104	; 0x68
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	1e4d      	subs	r5, r1, #1
 800658a:	4355      	muls	r5, r2
 800658c:	460e      	mov	r6, r1
 800658e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006592:	f7ff fad5 	bl	8005b40 <_malloc_r>
 8006596:	4604      	mov	r4, r0
 8006598:	b140      	cbz	r0, 80065ac <__sfmoreglue+0x28>
 800659a:	2100      	movs	r1, #0
 800659c:	e9c0 1600 	strd	r1, r6, [r0]
 80065a0:	300c      	adds	r0, #12
 80065a2:	60a0      	str	r0, [r4, #8]
 80065a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065a8:	f7ff f98a 	bl	80058c0 <memset>
 80065ac:	4620      	mov	r0, r4
 80065ae:	bd70      	pop	{r4, r5, r6, pc}

080065b0 <__sfp_lock_acquire>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__sfp_lock_acquire+0x8>)
 80065b2:	f000 b8b3 	b.w	800671c <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000381 	.word	0x20000381

080065bc <__sfp_lock_release>:
 80065bc:	4801      	ldr	r0, [pc, #4]	; (80065c4 <__sfp_lock_release+0x8>)
 80065be:	f000 b8ae 	b.w	800671e <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	20000381 	.word	0x20000381

080065c8 <__sinit_lock_acquire>:
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <__sinit_lock_acquire+0x8>)
 80065ca:	f000 b8a7 	b.w	800671c <__retarget_lock_acquire_recursive>
 80065ce:	bf00      	nop
 80065d0:	20000382 	.word	0x20000382

080065d4 <__sinit_lock_release>:
 80065d4:	4801      	ldr	r0, [pc, #4]	; (80065dc <__sinit_lock_release+0x8>)
 80065d6:	f000 b8a2 	b.w	800671e <__retarget_lock_release_recursive>
 80065da:	bf00      	nop
 80065dc:	20000382 	.word	0x20000382

080065e0 <__sinit>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4604      	mov	r4, r0
 80065e4:	f7ff fff0 	bl	80065c8 <__sinit_lock_acquire>
 80065e8:	69a3      	ldr	r3, [r4, #24]
 80065ea:	b11b      	cbz	r3, 80065f4 <__sinit+0x14>
 80065ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065f0:	f7ff bff0 	b.w	80065d4 <__sinit_lock_release>
 80065f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065f8:	6523      	str	r3, [r4, #80]	; 0x50
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <__sinit+0x68>)
 80065fc:	4a13      	ldr	r2, [pc, #76]	; (800664c <__sinit+0x6c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	62a2      	str	r2, [r4, #40]	; 0x28
 8006602:	42a3      	cmp	r3, r4
 8006604:	bf08      	it	eq
 8006606:	2301      	moveq	r3, #1
 8006608:	4620      	mov	r0, r4
 800660a:	bf08      	it	eq
 800660c:	61a3      	streq	r3, [r4, #24]
 800660e:	f000 f81f 	bl	8006650 <__sfp>
 8006612:	6060      	str	r0, [r4, #4]
 8006614:	4620      	mov	r0, r4
 8006616:	f000 f81b 	bl	8006650 <__sfp>
 800661a:	60a0      	str	r0, [r4, #8]
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f817 	bl	8006650 <__sfp>
 8006622:	2200      	movs	r2, #0
 8006624:	2104      	movs	r1, #4
 8006626:	60e0      	str	r0, [r4, #12]
 8006628:	6860      	ldr	r0, [r4, #4]
 800662a:	f7ff ff81 	bl	8006530 <std>
 800662e:	2201      	movs	r2, #1
 8006630:	2109      	movs	r1, #9
 8006632:	68a0      	ldr	r0, [r4, #8]
 8006634:	f7ff ff7c 	bl	8006530 <std>
 8006638:	2202      	movs	r2, #2
 800663a:	2112      	movs	r1, #18
 800663c:	68e0      	ldr	r0, [r4, #12]
 800663e:	f7ff ff77 	bl	8006530 <std>
 8006642:	2301      	movs	r3, #1
 8006644:	61a3      	str	r3, [r4, #24]
 8006646:	e7d1      	b.n	80065ec <__sinit+0xc>
 8006648:	08006a80 	.word	0x08006a80
 800664c:	08006579 	.word	0x08006579

08006650 <__sfp>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	4607      	mov	r7, r0
 8006654:	f7ff ffac 	bl	80065b0 <__sfp_lock_acquire>
 8006658:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <__sfp+0x84>)
 800665a:	681e      	ldr	r6, [r3, #0]
 800665c:	69b3      	ldr	r3, [r6, #24]
 800665e:	b913      	cbnz	r3, 8006666 <__sfp+0x16>
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff ffbd 	bl	80065e0 <__sinit>
 8006666:	3648      	adds	r6, #72	; 0x48
 8006668:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800666c:	3b01      	subs	r3, #1
 800666e:	d503      	bpl.n	8006678 <__sfp+0x28>
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	b30b      	cbz	r3, 80066b8 <__sfp+0x68>
 8006674:	6836      	ldr	r6, [r6, #0]
 8006676:	e7f7      	b.n	8006668 <__sfp+0x18>
 8006678:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800667c:	b9d5      	cbnz	r5, 80066b4 <__sfp+0x64>
 800667e:	4b16      	ldr	r3, [pc, #88]	; (80066d8 <__sfp+0x88>)
 8006680:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006684:	60e3      	str	r3, [r4, #12]
 8006686:	6665      	str	r5, [r4, #100]	; 0x64
 8006688:	f000 f847 	bl	800671a <__retarget_lock_init_recursive>
 800668c:	f7ff ff96 	bl	80065bc <__sfp_lock_release>
 8006690:	2208      	movs	r2, #8
 8006692:	4629      	mov	r1, r5
 8006694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800669c:	6025      	str	r5, [r4, #0]
 800669e:	61a5      	str	r5, [r4, #24]
 80066a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066a4:	f7ff f90c 	bl	80058c0 <memset>
 80066a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066b0:	4620      	mov	r0, r4
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	3468      	adds	r4, #104	; 0x68
 80066b6:	e7d9      	b.n	800666c <__sfp+0x1c>
 80066b8:	2104      	movs	r1, #4
 80066ba:	4638      	mov	r0, r7
 80066bc:	f7ff ff62 	bl	8006584 <__sfmoreglue>
 80066c0:	4604      	mov	r4, r0
 80066c2:	6030      	str	r0, [r6, #0]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d1d5      	bne.n	8006674 <__sfp+0x24>
 80066c8:	f7ff ff78 	bl	80065bc <__sfp_lock_release>
 80066cc:	230c      	movs	r3, #12
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	e7ee      	b.n	80066b0 <__sfp+0x60>
 80066d2:	bf00      	nop
 80066d4:	08006a80 	.word	0x08006a80
 80066d8:	ffff0001 	.word	0xffff0001

080066dc <_fwalk_reent>:
 80066dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e0:	4606      	mov	r6, r0
 80066e2:	4688      	mov	r8, r1
 80066e4:	2700      	movs	r7, #0
 80066e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ee:	f1b9 0901 	subs.w	r9, r9, #1
 80066f2:	d505      	bpl.n	8006700 <_fwalk_reent+0x24>
 80066f4:	6824      	ldr	r4, [r4, #0]
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d1f7      	bne.n	80066ea <_fwalk_reent+0xe>
 80066fa:	4638      	mov	r0, r7
 80066fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006700:	89ab      	ldrh	r3, [r5, #12]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d907      	bls.n	8006716 <_fwalk_reent+0x3a>
 8006706:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800670a:	3301      	adds	r3, #1
 800670c:	d003      	beq.n	8006716 <_fwalk_reent+0x3a>
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	47c0      	blx	r8
 8006714:	4307      	orrs	r7, r0
 8006716:	3568      	adds	r5, #104	; 0x68
 8006718:	e7e9      	b.n	80066ee <_fwalk_reent+0x12>

0800671a <__retarget_lock_init_recursive>:
 800671a:	4770      	bx	lr

0800671c <__retarget_lock_acquire_recursive>:
 800671c:	4770      	bx	lr

0800671e <__retarget_lock_release_recursive>:
 800671e:	4770      	bx	lr

08006720 <__swhatbuf_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460e      	mov	r6, r1
 8006724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006728:	4614      	mov	r4, r2
 800672a:	2900      	cmp	r1, #0
 800672c:	461d      	mov	r5, r3
 800672e:	b096      	sub	sp, #88	; 0x58
 8006730:	da08      	bge.n	8006744 <__swhatbuf_r+0x24>
 8006732:	2200      	movs	r2, #0
 8006734:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006738:	602a      	str	r2, [r5, #0]
 800673a:	061a      	lsls	r2, r3, #24
 800673c:	d410      	bmi.n	8006760 <__swhatbuf_r+0x40>
 800673e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006742:	e00e      	b.n	8006762 <__swhatbuf_r+0x42>
 8006744:	466a      	mov	r2, sp
 8006746:	f000 f915 	bl	8006974 <_fstat_r>
 800674a:	2800      	cmp	r0, #0
 800674c:	dbf1      	blt.n	8006732 <__swhatbuf_r+0x12>
 800674e:	9a01      	ldr	r2, [sp, #4]
 8006750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006758:	425a      	negs	r2, r3
 800675a:	415a      	adcs	r2, r3
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	e7ee      	b.n	800673e <__swhatbuf_r+0x1e>
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	2000      	movs	r0, #0
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	b016      	add	sp, #88	; 0x58
 8006768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800676c <__smakebuf_r>:
 800676c:	898b      	ldrh	r3, [r1, #12]
 800676e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006770:	079d      	lsls	r5, r3, #30
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	d507      	bpl.n	8006788 <__smakebuf_r+0x1c>
 8006778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	6123      	str	r3, [r4, #16]
 8006780:	2301      	movs	r3, #1
 8006782:	6163      	str	r3, [r4, #20]
 8006784:	b002      	add	sp, #8
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	466a      	mov	r2, sp
 800678a:	ab01      	add	r3, sp, #4
 800678c:	f7ff ffc8 	bl	8006720 <__swhatbuf_r>
 8006790:	9900      	ldr	r1, [sp, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff f9d3 	bl	8005b40 <_malloc_r>
 800679a:	b948      	cbnz	r0, 80067b0 <__smakebuf_r+0x44>
 800679c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067a0:	059a      	lsls	r2, r3, #22
 80067a2:	d4ef      	bmi.n	8006784 <__smakebuf_r+0x18>
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	f043 0302 	orr.w	r3, r3, #2
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	e7e3      	b.n	8006778 <__smakebuf_r+0xc>
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <__smakebuf_r+0x7c>)
 80067b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	9b00      	ldr	r3, [sp, #0]
 80067c0:	6120      	str	r0, [r4, #16]
 80067c2:	6163      	str	r3, [r4, #20]
 80067c4:	9b01      	ldr	r3, [sp, #4]
 80067c6:	b15b      	cbz	r3, 80067e0 <__smakebuf_r+0x74>
 80067c8:	4630      	mov	r0, r6
 80067ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067ce:	f000 f8e3 	bl	8006998 <_isatty_r>
 80067d2:	b128      	cbz	r0, 80067e0 <__smakebuf_r+0x74>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	89a0      	ldrh	r0, [r4, #12]
 80067e2:	4305      	orrs	r5, r0
 80067e4:	81a5      	strh	r5, [r4, #12]
 80067e6:	e7cd      	b.n	8006784 <__smakebuf_r+0x18>
 80067e8:	08006579 	.word	0x08006579

080067ec <memchr>:
 80067ec:	4603      	mov	r3, r0
 80067ee:	b510      	push	{r4, lr}
 80067f0:	b2c9      	uxtb	r1, r1
 80067f2:	4402      	add	r2, r0
 80067f4:	4293      	cmp	r3, r2
 80067f6:	4618      	mov	r0, r3
 80067f8:	d101      	bne.n	80067fe <memchr+0x12>
 80067fa:	2000      	movs	r0, #0
 80067fc:	e003      	b.n	8006806 <memchr+0x1a>
 80067fe:	7804      	ldrb	r4, [r0, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	428c      	cmp	r4, r1
 8006804:	d1f6      	bne.n	80067f4 <memchr+0x8>
 8006806:	bd10      	pop	{r4, pc}

08006808 <__malloc_lock>:
 8006808:	4801      	ldr	r0, [pc, #4]	; (8006810 <__malloc_lock+0x8>)
 800680a:	f7ff bf87 	b.w	800671c <__retarget_lock_acquire_recursive>
 800680e:	bf00      	nop
 8006810:	20000380 	.word	0x20000380

08006814 <__malloc_unlock>:
 8006814:	4801      	ldr	r0, [pc, #4]	; (800681c <__malloc_unlock+0x8>)
 8006816:	f7ff bf82 	b.w	800671e <__retarget_lock_release_recursive>
 800681a:	bf00      	nop
 800681c:	20000380 	.word	0x20000380

08006820 <_raise_r>:
 8006820:	291f      	cmp	r1, #31
 8006822:	b538      	push	{r3, r4, r5, lr}
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	d904      	bls.n	8006834 <_raise_r+0x14>
 800682a:	2316      	movs	r3, #22
 800682c:	6003      	str	r3, [r0, #0]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006836:	b112      	cbz	r2, 800683e <_raise_r+0x1e>
 8006838:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800683c:	b94b      	cbnz	r3, 8006852 <_raise_r+0x32>
 800683e:	4620      	mov	r0, r4
 8006840:	f000 f830 	bl	80068a4 <_getpid_r>
 8006844:	462a      	mov	r2, r5
 8006846:	4601      	mov	r1, r0
 8006848:	4620      	mov	r0, r4
 800684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800684e:	f000 b817 	b.w	8006880 <_kill_r>
 8006852:	2b01      	cmp	r3, #1
 8006854:	d00a      	beq.n	800686c <_raise_r+0x4c>
 8006856:	1c59      	adds	r1, r3, #1
 8006858:	d103      	bne.n	8006862 <_raise_r+0x42>
 800685a:	2316      	movs	r3, #22
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	2001      	movs	r0, #1
 8006860:	e7e7      	b.n	8006832 <_raise_r+0x12>
 8006862:	2400      	movs	r4, #0
 8006864:	4628      	mov	r0, r5
 8006866:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800686a:	4798      	blx	r3
 800686c:	2000      	movs	r0, #0
 800686e:	e7e0      	b.n	8006832 <_raise_r+0x12>

08006870 <raise>:
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <raise+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f7ff bfd3 	b.w	8006820 <_raise_r>
 800687a:	bf00      	nop
 800687c:	20000010 	.word	0x20000010

08006880 <_kill_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	2300      	movs	r3, #0
 8006884:	4d06      	ldr	r5, [pc, #24]	; (80068a0 <_kill_r+0x20>)
 8006886:	4604      	mov	r4, r0
 8006888:	4608      	mov	r0, r1
 800688a:	4611      	mov	r1, r2
 800688c:	602b      	str	r3, [r5, #0]
 800688e:	f7fb fa90 	bl	8001db2 <_kill>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d102      	bne.n	800689c <_kill_r+0x1c>
 8006896:	682b      	ldr	r3, [r5, #0]
 8006898:	b103      	cbz	r3, 800689c <_kill_r+0x1c>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	bf00      	nop
 80068a0:	2000037c 	.word	0x2000037c

080068a4 <_getpid_r>:
 80068a4:	f7fb ba7e 	b.w	8001da4 <_getpid>

080068a8 <__sread>:
 80068a8:	b510      	push	{r4, lr}
 80068aa:	460c      	mov	r4, r1
 80068ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b0:	f000 f894 	bl	80069dc <_read_r>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	bfab      	itete	ge
 80068b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ba:	89a3      	ldrhlt	r3, [r4, #12]
 80068bc:	181b      	addge	r3, r3, r0
 80068be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068c2:	bfac      	ite	ge
 80068c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068c6:	81a3      	strhlt	r3, [r4, #12]
 80068c8:	bd10      	pop	{r4, pc}

080068ca <__swrite>:
 80068ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	461f      	mov	r7, r3
 80068d0:	898b      	ldrh	r3, [r1, #12]
 80068d2:	4605      	mov	r5, r0
 80068d4:	05db      	lsls	r3, r3, #23
 80068d6:	460c      	mov	r4, r1
 80068d8:	4616      	mov	r6, r2
 80068da:	d505      	bpl.n	80068e8 <__swrite+0x1e>
 80068dc:	2302      	movs	r3, #2
 80068de:	2200      	movs	r2, #0
 80068e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e4:	f000 f868 	bl	80069b8 <_lseek_r>
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	4632      	mov	r2, r6
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	4628      	mov	r0, r5
 80068f4:	463b      	mov	r3, r7
 80068f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068fe:	f000 b817 	b.w	8006930 <_write_r>

08006902 <__sseek>:
 8006902:	b510      	push	{r4, lr}
 8006904:	460c      	mov	r4, r1
 8006906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690a:	f000 f855 	bl	80069b8 <_lseek_r>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	bf15      	itete	ne
 8006914:	6560      	strne	r0, [r4, #84]	; 0x54
 8006916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800691a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800691e:	81a3      	strheq	r3, [r4, #12]
 8006920:	bf18      	it	ne
 8006922:	81a3      	strhne	r3, [r4, #12]
 8006924:	bd10      	pop	{r4, pc}

08006926 <__sclose>:
 8006926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692a:	f000 b813 	b.w	8006954 <_close_r>
	...

08006930 <_write_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	2200      	movs	r2, #0
 800693a:	4d05      	ldr	r5, [pc, #20]	; (8006950 <_write_r+0x20>)
 800693c:	602a      	str	r2, [r5, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f7fa fd46 	bl	80013d0 <_write>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_write_r+0x1e>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_write_r+0x1e>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	2000037c 	.word	0x2000037c

08006954 <_close_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	2300      	movs	r3, #0
 8006958:	4d05      	ldr	r5, [pc, #20]	; (8006970 <_close_r+0x1c>)
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fb fa5e 	bl	8001e20 <_close>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_close_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_close_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	2000037c 	.word	0x2000037c

08006974 <_fstat_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	2300      	movs	r3, #0
 8006978:	4d06      	ldr	r5, [pc, #24]	; (8006994 <_fstat_r+0x20>)
 800697a:	4604      	mov	r4, r0
 800697c:	4608      	mov	r0, r1
 800697e:	4611      	mov	r1, r2
 8006980:	602b      	str	r3, [r5, #0]
 8006982:	f7fb fa58 	bl	8001e36 <_fstat>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d102      	bne.n	8006990 <_fstat_r+0x1c>
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	b103      	cbz	r3, 8006990 <_fstat_r+0x1c>
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	bd38      	pop	{r3, r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	2000037c 	.word	0x2000037c

08006998 <_isatty_r>:
 8006998:	b538      	push	{r3, r4, r5, lr}
 800699a:	2300      	movs	r3, #0
 800699c:	4d05      	ldr	r5, [pc, #20]	; (80069b4 <_isatty_r+0x1c>)
 800699e:	4604      	mov	r4, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	602b      	str	r3, [r5, #0]
 80069a4:	f7fb fa56 	bl	8001e54 <_isatty>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_isatty_r+0x1a>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_isatty_r+0x1a>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	2000037c 	.word	0x2000037c

080069b8 <_lseek_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	4608      	mov	r0, r1
 80069be:	4611      	mov	r1, r2
 80069c0:	2200      	movs	r2, #0
 80069c2:	4d05      	ldr	r5, [pc, #20]	; (80069d8 <_lseek_r+0x20>)
 80069c4:	602a      	str	r2, [r5, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f7fb fa4e 	bl	8001e68 <_lseek>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_lseek_r+0x1e>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_lseek_r+0x1e>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	2000037c 	.word	0x2000037c

080069dc <_read_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	2200      	movs	r2, #0
 80069e6:	4d05      	ldr	r5, [pc, #20]	; (80069fc <_read_r+0x20>)
 80069e8:	602a      	str	r2, [r5, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f7fb f9fb 	bl	8001de6 <_read>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_read_r+0x1e>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_read_r+0x1e>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	2000037c 	.word	0x2000037c

08006a00 <_gettimeofday>:
 8006a00:	2258      	movs	r2, #88	; 0x58
 8006a02:	4b02      	ldr	r3, [pc, #8]	; (8006a0c <_gettimeofday+0xc>)
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	4770      	bx	lr
 8006a0c:	2000037c 	.word	0x2000037c

08006a10 <_init>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr

08006a1c <_fini>:
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	bf00      	nop
 8006a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a22:	bc08      	pop	{r3}
 8006a24:	469e      	mov	lr, r3
 8006a26:	4770      	bx	lr
